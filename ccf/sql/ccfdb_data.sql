/*
 Navicat Premium Data Transfer

 Source Server         : local
 Source Server Type    : MySQL
 Source Server Version : 80016
 Source Host           : localhost:3306
 Source Schema         : ccfdb

 Target Server Type    : MySQL
 Target Server Version : 80016
 File Encoding         : 65001

 Date: 10/02/2021 17:21:19
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for author
-- ----------------------------
DROP TABLE IF EXISTS `author`;
CREATE TABLE `author`  (
  `author_id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `affiliation` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`author_id`, `author`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of author
-- ----------------------------
INSERT INTO `author` VALUES (1, 'Chao  Guo', 'Nanjing University, China');
INSERT INTO `author` VALUES (2, 'Tieke  He', 'Nanjing University, China');
INSERT INTO `author` VALUES (3, 'Wei  Yuan', 'Nanjing University, China');
INSERT INTO `author` VALUES (4, 'Yue  Guo', 'Nanjing University, China');
INSERT INTO `author` VALUES (5, 'Rui  Hao', 'Nanjing University, China');
INSERT INTO `author` VALUES (6, 'Yun  Lin', 'National University of Singapore, Singapore');
INSERT INTO `author` VALUES (7, 'Jun  Sun', 'Singapore Management University, Singapore');
INSERT INTO `author` VALUES (8, 'Gordon  Fraser', 'University of Passau, Germany');
INSERT INTO `author` VALUES (9, 'Ziheng  Xiu', 'National University of Singapore, Singapore');
INSERT INTO `author` VALUES (10, 'Ting  Liu', 'Xi\'an Jiaotong University, China');
INSERT INTO `author` VALUES (11, 'Jinsong  Dong', 'National University of Singapore, Singapore');
INSERT INTO `author` VALUES (12, 'Gang Fan', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (13, 'Chengpeng  Wang', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (14, 'Rongxin  Wu', 'Xiamen University, China');
INSERT INTO `author` VALUES (15, 'Xiao  Xiao', 'Sourcebrella, China');
INSERT INTO `author` VALUES (16, 'Qingkai  Shi', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (17, 'Charles  Zhang', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (18, 'Dominik  Helm', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (19, 'Florian  Kübler', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (20, 'Jan Thomas Kölzer', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (21, 'Philipp Haller', 'KTH, Sweden');
INSERT INTO `author` VALUES (22, 'Michael Eichberg', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (23, 'Guido  Salvaneschi', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (24, 'M. Mezini', 'TU Darmstadt, Germany');
INSERT INTO `author` VALUES (25, 'Yakun  Zhang', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (26, 'Wensheng Dou', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (27, 'Jiaxin  Zhu', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (28, 'Liang  Xu', 'Jinling Institute of Technology, China');
INSERT INTO `author` VALUES (29, 'Zhiyong  Zhou', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (30, 'Jun  Wei', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (31, 'Dan  Ye', 'Institute of Software at Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (32, 'Bo  Yang', 'North China University of Technology, China');
INSERT INTO `author` VALUES (33, 'Luis Gustavo Araujo Rodriguez', 'University of São Paulo, Brazil');
INSERT INTO `author` VALUES (34, 'Daniel  Macêdo Batista', 'University of São Paulo, Brazil');
INSERT INTO `author` VALUES (35, 'Ali  Ghanbari', 'University of Texas at Dallas, USA');
INSERT INTO `author` VALUES (36, 'Kaiyuan  Wang', 'Google, USA');
INSERT INTO `author` VALUES (37, 'Greg  Tener', 'Google, USA');
INSERT INTO `author` VALUES (38, 'Vijay  Gullapalli', 'Google, USA');
INSERT INTO `author` VALUES (39, 'Xin  Huang', 'Google, USA');
INSERT INTO `author` VALUES (40, 'Ahmed  Gad', 'Google, USA');
INSERT INTO `author` VALUES (41, 'Daniel  Rall', 'Google, USA');
INSERT INTO `author` VALUES (42, 'Zhibo  Liu', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (43, 'Shuai  Wang', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (44, 'Jackson  Vanover', 'University of California at Davis, USA');
INSERT INTO `author` VALUES (45, 'Xuan  Deng', 'University of California at Davis, USA');
INSERT INTO `author` VALUES (46, 'Cindy  Rubio-González', 'University of California at Davis, USA');
INSERT INTO `author` VALUES (47, 'Feng  Xue', 'Northwestern Polytechnical University, China');
INSERT INTO `author` VALUES (48, 'Chunrong  Fang', 'Nanjing University, China');
INSERT INTO `author` VALUES (49, 'Zixi  Liu', 'Nanjing University, China');
INSERT INTO `author` VALUES (50, 'Yangyang  Shi', 'Nanjing University, China');
INSERT INTO `author` VALUES (51, 'Jeff Huang', 'Texas A&M University, USA');
INSERT INTO `author` VALUES (52, 'Qingkai  Shi', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (53, 'Ruixiang  Qian', 'Nanjing University, China');
INSERT INTO `author` VALUES (54, 'Yuan  Zhao', 'Nanjing University, China');
INSERT INTO `author` VALUES (55, 'Duo  Men', 'Nanjing University, China');
INSERT INTO `author` VALUES (56, 'Yang  Feng', 'Nanjing University, China');
INSERT INTO `author` VALUES (57, 'Qingkai  Shi', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (58, 'Yong  Huang', 'Mooctest, China');
INSERT INTO `author` VALUES (59, 'Zhenyu  Chen', 'Mooctest, China');
INSERT INTO `author` VALUES (60, 'Yang  Zhang', 'Hebei University of Science and Technology, China');
INSERT INTO `author` VALUES (61, 'Shuai  Shao', 'Hebei University of Science and Technology, China');
INSERT INTO `author` VALUES (62, 'Juan  Zhai', 'Rutgers University, USA');
INSERT INTO `author` VALUES (63, 'Shiqing  Ma', 'Rutgers University, USA');
INSERT INTO `author` VALUES (64, 'Xiao  He', 'University of Science and Technology Beijing, China');
INSERT INTO `author` VALUES (65, 'Xingwei  Wang', 'University of Science and Technology Beijing, China');
INSERT INTO `author` VALUES (66, 'Jia  Shi', 'University of Science and Technology Beijing, China');
INSERT INTO `author` VALUES (67, 'Yi  Liu', 'CNCERT/CC, China');
INSERT INTO `author` VALUES (68, 'Muhui  Jiang', 'Hong Kong Polytechnic University, China');
INSERT INTO `author` VALUES (69, 'Yajin  Zhou', 'Zhejiang University, China');
INSERT INTO `author` VALUES (70, 'Xiapu  Luo', 'Hong Kong Polytechnic University, China');
INSERT INTO `author` VALUES (71, 'Ruoyu  Wang', 'Arizona State University, USA');
INSERT INTO `author` VALUES (72, 'Yang  Liu', 'Nanyang Technological University, Singapore / Zhejiang University, China');
INSERT INTO `author` VALUES (73, 'Kui  Ren', 'Zhejiang University, China');
INSERT INTO `author` VALUES (74, 'Ezio  Bartocci', 'TU Vienna, Austria');
INSERT INTO `author` VALUES (75, 'Niveditha  Manjunath', 'Austrian Institute of Technology, Austria / TU Vienna, Austria');
INSERT INTO `author` VALUES (76, 'Leonardo Mariani', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (77, 'Cristinel  Mateis', 'Austrian Institute of Technology, Austria');
INSERT INTO `author` VALUES (78, 'Dejan  Ničković', 'Austrian Institute of Technology, Austria');
INSERT INTO `author` VALUES (79, 'Fabrizio Pastore', 'University of Luxembourg, Luxembourg');
INSERT INTO `author` VALUES (80, 'George  Thompson', 'North Carolina A&T State University, USA');
INSERT INTO `author` VALUES (81, 'Allison K Sullivan', 'University of Texas at Arlington, USA');
INSERT INTO `author` VALUES (82, 'Gustavo  Grieco', 'Trail of Bits, USA');
INSERT INTO `author` VALUES (83, 'Will  Song', 'Trail of Bits, USA');
INSERT INTO `author` VALUES (84, 'Artur  Cygan', 'Trail of Bits, USA');
INSERT INTO `author` VALUES (85, 'Josselin  Feist', 'Trail of Bits, USA');
INSERT INTO `author` VALUES (86, 'A. Groce', 'Northern Arizona University, USA');
INSERT INTO `author` VALUES (87, 'George  Fourtounis', 'University of Athens, Greece');
INSERT INTO `author` VALUES (88, 'Leonidas  Triantafyllou', 'University of Athens, Greece');
INSERT INTO `author` VALUES (89, 'Yannis  Smaragdakis', 'University of Athens, Greece');
INSERT INTO `author` VALUES (90, 'Zichen  Guo', 'Nanjing University, China');
INSERT INTO `author` VALUES (91, 'Jiawei  Liu', 'Nanjing University, China');
INSERT INTO `author` VALUES (92, 'Tieke  He', 'Nanjing University, China');
INSERT INTO `author` VALUES (93, 'Zhuoyang  Li', 'Nanjing University, China');
INSERT INTO `author` VALUES (94, 'Peitian  Zhangzhu', 'Nanjing University, China');
INSERT INTO `author` VALUES (95, 'João  Choma Neto', 'University of São Paulo, Brazil');
INSERT INTO `author` VALUES (96, 'Asem  Ghaleb', 'University of British Columbia, Canada');
INSERT INTO `author` VALUES (97, 'Karthik Pattabiraman', 'University of British Columbia, Canada');
INSERT INTO `author` VALUES (98, 'Yifei  Xu', 'Xi\'an Jiaotong University, China');
INSERT INTO `author` VALUES (99, 'Zhengzi  Xu', 'Nanyang Technological University, Singapore');
INSERT INTO `author` VALUES (100, 'Bihuan  Chen', 'Fudan University, China');
INSERT INTO `author` VALUES (101, 'Fu  Song', 'ShanghaiTech University, China');
INSERT INTO `author` VALUES (102, 'Yang  Liu', 'Nanyang Technological University, Singapore / Zhejiang University, China');
INSERT INTO `author` VALUES (103, 'Ting  Liu', 'Xi\'an Jiaotong University, China');
INSERT INTO `author` VALUES (104, 'Patrice Godefroid', 'Microsoft Research, USA');
INSERT INTO `author` VALUES (105, 'Daniel  Lehmann', 'University of Stuttgart, Germany');
INSERT INTO `author` VALUES (106, 'Marina  Polishchuk', 'Microsoft Research, USA');
INSERT INTO `author` VALUES (107, 'Wentian  Yan', 'Peking University, China');
INSERT INTO `author` VALUES (108, 'Jianbo  Gao', 'Peking University, China / Boya Blockchain, China');
INSERT INTO `author` VALUES (109, 'Zhenhao  Wu', 'Peking University, China / Boya Blockchain, China');
INSERT INTO `author` VALUES (110, 'Yue  Li', 'Peking University, China');
INSERT INTO `author` VALUES (111, 'Zhi  Guan', 'Peking University, China');
INSERT INTO `author` VALUES (112, 'Qingshan  Li', 'Peking University, China / Boya Blockchain, China');
INSERT INTO `author` VALUES (113, 'Zhong  Chen', 'Peking University, China');
INSERT INTO `author` VALUES (114, 'Per Erik Strandberg', 'Westermo Network Technologies, Sweden');
INSERT INTO `author` VALUES (115, 'Thomas Joseph Ostrand', 'Mälardalen University, Sweden');
INSERT INTO `author` VALUES (116, 'E J Weyuker', 'Mälardalen University, Sweden / University of Central Florida, USA');
INSERT INTO `author` VALUES (117, 'Wasif  Afzal', 'Mälardalen University, Sweden');
INSERT INTO `author` VALUES (118, 'Daniel  Sundmark', 'Mälardalen University, Sweden');
INSERT INTO `author` VALUES (119, 'Carl  Hildebrandt', 'University of Virginia, USA');
INSERT INTO `author` VALUES (120, 'Sebastian G Elbaum', 'University of Virginia, USA');
INSERT INTO `author` VALUES (121, 'Nicola  Bezzo', 'University of Virginia, USA');
INSERT INTO `author` VALUES (122, 'Matthew B. Dwyer', 'University of Virginia, USA');
INSERT INTO `author` VALUES (123, 'Hui  Li', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (124, 'Dong  Wang', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (125, 'Tianze  Huang', 'Beijing University of Posts and Telecommunications, China');
INSERT INTO `author` VALUES (126, 'Yu  Gao', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (127, 'Wensheng Dou', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (128, 'Lijie  Xu', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (129, 'Wei  Wang', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (130, 'Jun  Wei', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (131, 'Hua  Zhong', 'Institute of Software at Chinese Academy of Sciences, China / University of Chinese Academy of Sciences, China');
INSERT INTO `author` VALUES (132, 'Muyang  Liu', 'University of Electronic Science and Technology of China, China');
INSERT INTO `author` VALUES (133, 'Ke  Li', 'University of Exeter, UK');
INSERT INTO `author` VALUES (134, 'Tao  Chen', 'Loughborough University, UK');
INSERT INTO `author` VALUES (135, 'Wing Lam', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (136, 'August  Shi', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (137, 'Reed  Oei', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (138, 'Sai  Zhang', 'Google, USA');
INSERT INTO `author` VALUES (139, 'Michael D. Ernst', 'University of Washington, USA');
INSERT INTO `author` VALUES (140, 'Tao Xie', 'Peking University, China');
INSERT INTO `author` VALUES (141, 'Arnab  Sharma', 'University of Paderborn, Germany');
INSERT INTO `author` VALUES (142, 'Heike  Wehrheim', 'University of Paderborn, Germany');
INSERT INTO `author` VALUES (143, 'İsmet Burak Kadron', 'University of California at Santa Barbara, USA');
INSERT INTO `author` VALUES (144, 'Nicolás  Rosner', 'University of California at Santa Barbara, USA');
INSERT INTO `author` VALUES (145, 'Tevfik  Bultan', 'University of California at Santa Barbara, USA');
INSERT INTO `author` VALUES (146, 'Mohannad  Alhanahnah', 'University of Nebraska-Lincoln, USA');
INSERT INTO `author` VALUES (147, 'Clay  Stevens', 'University of Nebraska-Lincoln, USA');
INSERT INTO `author` VALUES (148, 'Hamid Bagheri', 'University of Nebraska-Lincoln, USA');
INSERT INTO `author` VALUES (149, 'Rahul Gopinath', 'CISPA, Germany');
INSERT INTO `author` VALUES (150, 'Alexander  Kampmann', 'CISPA, Germany');
INSERT INTO `author` VALUES (151, 'Nikolas  Havrikov', 'CISPA, Germany');
INSERT INTO `author` VALUES (152, 'Ezekiel O Soremekun', 'CISPA, Germany');
INSERT INTO `author` VALUES (153, 'Andreas Zeller', 'CISPA, Germany');
INSERT INTO `author` VALUES (154, 'Michael  Pradel', 'University of Stuttgart, Germany');
INSERT INTO `author` VALUES (155, 'Vijayaraghavan  Murali', 'Facebook, USA');
INSERT INTO `author` VALUES (156, 'Rebecca  Qian', 'Facebook, USA');
INSERT INTO `author` VALUES (157, 'Mateusz  Machalica', 'Facebook, USA');
INSERT INTO `author` VALUES (158, 'Erik  Meijer', 'Facebook, USA');
INSERT INTO `author` VALUES (159, 'Satish Chandra', 'Facebook, USA');
INSERT INTO `author` VALUES (160, 'Saikat  Dutta', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (161, 'August  Shi', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (162, 'Rutvik  Choudhary', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (163, 'Zhekun  Zhang', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (164, 'Aryaman  Jain', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (165, 'Sasa  Misailovic', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (166, 'Saeid  Tizpaz-Niari', 'University of Colorado Boulder, USA');
INSERT INTO `author` VALUES (167, 'Pavol  Černý', 'TU Vienna, Austria');
INSERT INTO `author` VALUES (168, 'Ashutosh Trivedi', 'University of Colorado Boulder, USA');
INSERT INTO `author` VALUES (169, 'Qianyang  Peng', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (170, 'August  Shi', 'University of Illinois at Urbana-Champaign, USA');
INSERT INTO `author` VALUES (171, 'Lingming  Zhang', 'University of Texas at Dallas, USA');
INSERT INTO `author` VALUES (172, 'Andrea  Fioraldi', 'Sapienza University of Rome, Italy');
INSERT INTO `author` VALUES (173, 'Daniele Cono D\'Elia', 'Sapienza University of Rome, Italy');
INSERT INTO `author` VALUES (174, 'Emilio  Coppa', 'Sapienza University of Rome, Italy');
INSERT INTO `author` VALUES (175, 'Minxue  Pan', 'Nanjing University, China');
INSERT INTO `author` VALUES (176, 'An  Huang', 'Nanjing University, China');
INSERT INTO `author` VALUES (177, 'Guoxin  Wang', 'Nanjing University, China');
INSERT INTO `author` VALUES (178, 'Tian  Zhang', 'Nanjing University, China');
INSERT INTO `author` VALUES (179, 'Xuandong  Li', 'Nanjing University, China');
INSERT INTO `author` VALUES (180, 'Seokhyun  Lee', 'Korea University, South Korea');
INSERT INTO `author` VALUES (181, 'Sooyoung  Cha', 'Korea University, South Korea');
INSERT INTO `author` VALUES (182, 'Dain  Lee', 'Korea University, South Korea');
INSERT INTO `author` VALUES (183, 'Hakjoo  Oh', 'Korea University, South Korea');
INSERT INTO `author` VALUES (184, 'Oliviero  Riganelli', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (185, 'Simone Paolo Mottadelli', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (186, 'Claudio  Rota', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (187, 'Daniela  Micucci', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (188, 'Leonardo Mariani', 'University of Milano-Bicocca, Italy');
INSERT INTO `author` VALUES (189, 'Yang  Feng', 'Nanjing University, China');
INSERT INTO `author` VALUES (190, 'Qingkai  Shi', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (191, 'Xinyu  Gao', 'Nanjing University, China');
INSERT INTO `author` VALUES (192, 'Jun  Wan', 'Ant Financial Services, China');
INSERT INTO `author` VALUES (193, 'Chunrong  Fang', 'Nanjing University, China');
INSERT INTO `author` VALUES (194, 'Zhenyu  Chen', 'Nanjing University, China');
INSERT INTO `author` VALUES (195, 'Frank  Busse', 'Imperial College London, UK');
INSERT INTO `author` VALUES (196, 'Martin  Nowack', 'Imperial College London, UK');
INSERT INTO `author` VALUES (197, 'Cristian Cadar', 'Imperial College London, UK');
INSERT INTO `author` VALUES (198, 'Hui  Liu', 'Beijing Institute of Technology, China');
INSERT INTO `author` VALUES (199, 'Mingzhu  Shen', 'Beijing Institute of Technology, China');
INSERT INTO `author` VALUES (200, 'Jiahao  Jin', 'Beijing Institute of Technology, China');
INSERT INTO `author` VALUES (201, 'Yanjie  Jiang', 'Beijing Institute of Technology, China');
INSERT INTO `author` VALUES (202, 'Yiling  Lou', 'Peking University, China');
INSERT INTO `author` VALUES (203, 'Ali  Ghanbari', 'University of Texas at Dallas, USA');
INSERT INTO `author` VALUES (204, 'Xia  Li', 'University of Texas at Dallas, USA');
INSERT INTO `author` VALUES (205, 'Lingming  Zhang', 'University of Texas at Dallas, USA');
INSERT INTO `author` VALUES (206, 'Haotian  Zhang', 'Ant Financial Services, China');
INSERT INTO `author` VALUES (207, 'Dan  Hao', 'Peking University, China');
INSERT INTO `author` VALUES (208, 'Lu  Zhang', 'Peking University, China');
INSERT INTO `author` VALUES (209, 'David  Trabish', 'Tel Aviv University, Israel');
INSERT INTO `author` VALUES (210, 'Noam Rinetzky', 'Tel Aviv University, Israel');
INSERT INTO `author` VALUES (211, 'Xueliang  Li', 'Shenzhen University, China');
INSERT INTO `author` VALUES (212, 'Yuming  Yang', 'Shenzhen University, China');
INSERT INTO `author` VALUES (213, 'Yepang  Liu', 'Southern University of Science and Technology, China');
INSERT INTO `author` VALUES (214, 'John P Gallagher', 'Roskilde University, Denmark / IMDEA Software Institute, Spain');
INSERT INTO `author` VALUES (215, 'Kaishun  Wu', 'Shenzhen University, China');
INSERT INTO `author` VALUES (216, 'Raja Ben Abdessalem', 'University of Luxembourg, Luxembourg');
INSERT INTO `author` VALUES (217, 'Annibale  Panichella', 'Delft University of Technology, Netherlands / University of Luxembourg, Luxembourg');
INSERT INTO `author` VALUES (218, 'Shiva  Nejati', 'University of Ottawa, Canada / University of Luxembourg, Luxembourg');
INSERT INTO `author` VALUES (219, 'Lionel C Briand', 'University of Luxembourg, Luxembourg / University of Ottawa, Canada');
INSERT INTO `author` VALUES (220, 'Thomas  Stifter', 'IEE, Luxembourg');
INSERT INTO `author` VALUES (221, 'Thibaud  Lutellier', 'University of Waterloo, Canada');
INSERT INTO `author` VALUES (222, 'Hung Viet Pham', 'University of Waterloo, Canada');
INSERT INTO `author` VALUES (223, 'Lawrence  Pang', 'University of Waterloo, Canada');
INSERT INTO `author` VALUES (224, 'Yitong  Li', 'University of Waterloo, Canada');
INSERT INTO `author` VALUES (225, 'Moshi  Wei', 'University of Waterloo, Canada');
INSERT INTO `author` VALUES (226, 'Lin  Tan', 'Purdue University, USA');
INSERT INTO `author` VALUES (227, 'Yuqi  Chen', 'Singapore Management University, Singapore');
INSERT INTO `author` VALUES (228, 'Bohan  Xuan', 'Zhejiang University, China');
INSERT INTO `author` VALUES (229, 'Christopher M Poskitt', 'Singapore Management University, Singapore');
INSERT INTO `author` VALUES (230, 'Jun  Sun', 'Singapore Management University, Singapore');
INSERT INTO `author` VALUES (231, 'Fan  Zhang', 'Zhejiang University, China / Zhejiang Lab, China / Alibaba-Zhejiang University Joint Institute of Frontier Technologies, China');
INSERT INTO `author` VALUES (232, 'Björn  Mathis', 'CISPA, Germany');
INSERT INTO `author` VALUES (233, 'Rahul Gopinath', 'CISPA, Germany');
INSERT INTO `author` VALUES (234, 'Andreas Zeller', 'CISPA, Germany');
INSERT INTO `author` VALUES (235, 'Peisen  Yao', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (236, 'Qingkai  Shi', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (237, 'Heqing  Huang', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (238, 'Charles  Zhang', 'Hong Kong University of Science and Technology, China');
INSERT INTO `author` VALUES (239, 'Pengyu  Nie', 'University of Texas at Austin, USA');
INSERT INTO `author` VALUES (240, 'Ahmet  Celik', 'Facebook, USA');
INSERT INTO `author` VALUES (241, 'Matthew  Coley', 'George Mason University, USA');
INSERT INTO `author` VALUES (242, 'Aleksandar  Milicevic', 'Microsoft, USA');
INSERT INTO `author` VALUES (243, 'Jonathan Bell', 'George Mason University, USA');
INSERT INTO `author` VALUES (244, 'Milos  Gligoric', 'University of Texas at Austin, USA');

-- ----------------------------
-- Table structure for editor
-- ----------------------------
DROP TABLE IF EXISTS `editor`;
CREATE TABLE `editor`  (
  `editor_id` int(11) NOT NULL AUTO_INCREMENT,
  `editor` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`editor_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of editor
-- ----------------------------
INSERT INTO `editor` VALUES (1, 'Sarfraz Khurshid');
INSERT INTO `editor` VALUES (2, 'Corina S. Pasareanu');

-- ----------------------------
-- Table structure for keyword
-- ----------------------------
DROP TABLE IF EXISTS `keyword`;
CREATE TABLE `keyword`  (
  `keyword_id` int(11) NOT NULL AUTO_INCREMENT,
  `keyword` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`keyword_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 214 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of keyword
-- ----------------------------
INSERT INTO `keyword` VALUES (1, 'Knowledge Graph');
INSERT INTO `keyword` VALUES (2, 'Android GUI Testing');
INSERT INTO `keyword` VALUES (3, 'Crowdsourced Requirements');
INSERT INTO `keyword` VALUES (4, 'program analysis');
INSERT INTO `keyword` VALUES (5, 'testing');
INSERT INTO `keyword` VALUES (6, 'testability');
INSERT INTO `keyword` VALUES (7, 'search-based');
INSERT INTO `keyword` VALUES (8, 'build maintenance');
INSERT INTO `keyword` VALUES (9, 'build tools');
INSERT INTO `keyword` VALUES (10, 'dependency verification');
INSERT INTO `keyword` VALUES (11, 'static analysis');
INSERT INTO `keyword` VALUES (12, 'concurrency');
INSERT INTO `keyword` VALUES (13, 'parallelization');
INSERT INTO `keyword` VALUES (14, 'Spreadsheet');
INSERT INTO `keyword` VALUES (15, 'table clone');
INSERT INTO `keyword` VALUES (16, 'structure');
INSERT INTO `keyword` VALUES (17, 'format');
INSERT INTO `keyword` VALUES (18, 'Testing');
INSERT INTO `keyword` VALUES (19, 'Internet of Things');
INSERT INTO `keyword` VALUES (20, 'MQTT');
INSERT INTO `keyword` VALUES (21, 'Security');
INSERT INTO `keyword` VALUES (22, 'Fuzzing');
INSERT INTO `keyword` VALUES (23, 'Automatic Program Repair');
INSERT INTO `keyword` VALUES (24, 'Object Similarity');
INSERT INTO `keyword` VALUES (25, 'Patch Prioritization');
INSERT INTO `keyword` VALUES (26, 'Test Case');
INSERT INTO `keyword` VALUES (27, 'Build service system');
INSERT INTO `keyword` VALUES (28, 'build system design');
INSERT INTO `keyword` VALUES (29, 'build scheduling service');
INSERT INTO `keyword` VALUES (30, 'Reverse Engineering');
INSERT INTO `keyword` VALUES (31, 'Decompiler');
INSERT INTO `keyword` VALUES (32, 'Software Testing');
INSERT INTO `keyword` VALUES (33, 'software testing');
INSERT INTO `keyword` VALUES (34, 'differential testing');
INSERT INTO `keyword` VALUES (35, 'numerical libraries');
INSERT INTO `keyword` VALUES (36, 'floating point');
INSERT INTO `keyword` VALUES (37, 'Computer vision');
INSERT INTO `keyword` VALUES (38, 'Software testing');
INSERT INTO `keyword` VALUES (39, 'Mobile applications');
INSERT INTO `keyword` VALUES (40, 'Test automation');
INSERT INTO `keyword` VALUES (41, 'code representation');
INSERT INTO `keyword` VALUES (42, 'functional clone detection');
INSERT INTO `keyword` VALUES (43, 'Code clone detection');
INSERT INTO `keyword` VALUES (44, 'syntax and semantics fusion learning');
INSERT INTO `keyword` VALUES (45, 'Static analysis');
INSERT INTO `keyword` VALUES (46, 'Test recommendation');
INSERT INTO `keyword` VALUES (47, 'Program Slice');
INSERT INTO `keyword` VALUES (48, 'Test guid');
INSERT INTO `keyword` VALUES (49, 'Pushdown automaton');
INSERT INTO `keyword` VALUES (50, 'Read-write lock');
INSERT INTO `keyword` VALUES (51, 'Fine-grained lock');
INSERT INTO `keyword` VALUES (52, 'Static analysis');
INSERT INTO `keyword` VALUES (53, 'Refactoring');
INSERT INTO `keyword` VALUES (54, 'Numerical simulation');
INSERT INTO `keyword` VALUES (55, 'Software testing');
INSERT INTO `keyword` VALUES (56, 'Experience');
INSERT INTO `keyword` VALUES (57, 'High performance computing');
INSERT INTO `keyword` VALUES (58, 'Empirical Study');
INSERT INTO `keyword` VALUES (59, 'Disassembly Tools');
INSERT INTO `keyword` VALUES (60, 'ARM Architecture');
INSERT INTO `keyword` VALUES (61, 'Testing');
INSERT INTO `keyword` VALUES (62, 'Model-based Development');
INSERT INTO `keyword` VALUES (63, 'Specification Mining');
INSERT INTO `keyword` VALUES (64, 'Cyber-Physical Systems');
INSERT INTO `keyword` VALUES (65, 'Debugging');
INSERT INTO `keyword` VALUES (66, 'Failure Explanation');
INSERT INTO `keyword` VALUES (67, 'Fault localization');
INSERT INTO `keyword` VALUES (68, 'Prolog');
INSERT INTO `keyword` VALUES (69, 'Declarative programming');
INSERT INTO `keyword` VALUES (70, 'smart contracts');
INSERT INTO `keyword` VALUES (71, 'fuzzing');
INSERT INTO `keyword` VALUES (72, 'test generation');
INSERT INTO `keyword` VALUES (73, 'Java');
INSERT INTO `keyword` VALUES (74, 'binary');
INSERT INTO `keyword` VALUES (75, 'native code');
INSERT INTO `keyword` VALUES (76, 'static analysis');
INSERT INTO `keyword` VALUES (77, 'Machine Learning');
INSERT INTO `keyword` VALUES (78, 'Test Augmentation');
INSERT INTO `keyword` VALUES (79, 'Judicial Documents');
INSERT INTO `keyword` VALUES (80, 'Search Based Software Testing');
INSERT INTO `keyword` VALUES (81, 'Software Testing');
INSERT INTO `keyword` VALUES (82, 'Structural Testing');
INSERT INTO `keyword` VALUES (83, 'Infeasible Path Problem');
INSERT INTO `keyword` VALUES (84, 'smart contracts security');
INSERT INTO `keyword` VALUES (85, 'smart contracts');
INSERT INTO `keyword` VALUES (86, 'bug injection');
INSERT INTO `keyword` VALUES (87, 'smart contracts analysis');
INSERT INTO `keyword` VALUES (88, 'Ethereum');
INSERT INTO `keyword` VALUES (89, 'solidity code analysis');
INSERT INTO `keyword` VALUES (90, 'fault injection');
INSERT INTO `keyword` VALUES (91, 'Ethereum security');
INSERT INTO `keyword` VALUES (92, 'static analysis tools evaluation');
INSERT INTO `keyword` VALUES (93, 'smart contracts dataset');
INSERT INTO `keyword` VALUES (94, 'Patch Presence Identification');
INSERT INTO `keyword` VALUES (95, 'Vulnerability Matching');
INSERT INTO `keyword` VALUES (96, 'Binary Analysis');
INSERT INTO `keyword` VALUES (97, 'Security');
INSERT INTO `keyword` VALUES (98, 'service regression');
INSERT INTO `keyword` VALUES (99, 'REST APIs');
INSERT INTO `keyword` VALUES (100, 'service version matrix');
INSERT INTO `keyword` VALUES (101, 'specification regression');
INSERT INTO `keyword` VALUES (102, 'differential regression testing');
INSERT INTO `keyword` VALUES (103, 'Ethereum');
INSERT INTO `keyword` VALUES (104, 'Smart Contract');
INSERT INTO `keyword` VALUES (105, 'Reverse Engineering');
INSERT INTO `keyword` VALUES (106, 'Blockchain');
INSERT INTO `keyword` VALUES (107, 'Program Analysis');
INSERT INTO `keyword` VALUES (108, 'flaky tests');
INSERT INTO `keyword` VALUES (109, 'system level test automation');
INSERT INTO `keyword` VALUES (110, 'embedded systems');
INSERT INTO `keyword` VALUES (111, 'non-deterministic tests');
INSERT INTO `keyword` VALUES (112, 'intermittently failing tests');
INSERT INTO `keyword` VALUES (113, 'Robotics');
INSERT INTO `keyword` VALUES (114, 'Kinematic and Dynamic Models');
INSERT INTO `keyword` VALUES (115, 'Stress Testing');
INSERT INTO `keyword` VALUES (116, 'Test Generation');
INSERT INTO `keyword` VALUES (117, 'cache');
INSERT INTO `keyword` VALUES (118, 'Spark');
INSERT INTO `keyword` VALUES (119, 'performance');
INSERT INTO `keyword` VALUES (120, 'bug detection');
INSERT INTO `keyword` VALUES (121, 'SQL injection');
INSERT INTO `keyword` VALUES (122, 'Web security');
INSERT INTO `keyword` VALUES (123, 'deep learning');
INSERT INTO `keyword` VALUES (124, 'natural language processing');
INSERT INTO `keyword` VALUES (125, 'test case generation');
INSERT INTO `keyword` VALUES (126, 'regression testing');
INSERT INTO `keyword` VALUES (127, 'flaky test');
INSERT INTO `keyword` VALUES (128, 'order-dependent test');
INSERT INTO `keyword` VALUES (129, 'Monotonicity');
INSERT INTO `keyword` VALUES (130, 'Decision Tree');
INSERT INTO `keyword` VALUES (131, 'Machine Learning Testing');
INSERT INTO `keyword` VALUES (132, 'network traffic analysis');
INSERT INTO `keyword` VALUES (133, 'Side-channel analysis');
INSERT INTO `keyword` VALUES (134, 'input generation');
INSERT INTO `keyword` VALUES (135, 'dynamic program analysis');
INSERT INTO `keyword` VALUES (136, 'IoT Safety');
INSERT INTO `keyword` VALUES (137, 'Formal Verification');
INSERT INTO `keyword` VALUES (138, 'Interaction Threats');
INSERT INTO `keyword` VALUES (139, 'error diagnosis');
INSERT INTO `keyword` VALUES (140, 'debugging');
INSERT INTO `keyword` VALUES (141, 'grammars');
INSERT INTO `keyword` VALUES (142, 'failure-inducing inputs');
INSERT INTO `keyword` VALUES (143, 'software crashes');
INSERT INTO `keyword` VALUES (144, 'machine learning');
INSERT INTO `keyword` VALUES (145, 'Bug localization');
INSERT INTO `keyword` VALUES (146, 'Randomness');
INSERT INTO `keyword` VALUES (147, 'Machine Learning');
INSERT INTO `keyword` VALUES (148, 'Non-Determinism');
INSERT INTO `keyword` VALUES (149, 'Probabilistic Programming');
INSERT INTO `keyword` VALUES (150, 'Flaky tests');
INSERT INTO `keyword` VALUES (151, 'Debugging');
INSERT INTO `keyword` VALUES (152, 'ML Libraries');
INSERT INTO `keyword` VALUES (153, 'Differential Performance Bugs');
INSERT INTO `keyword` VALUES (154, 'Testing');
INSERT INTO `keyword` VALUES (155, 'Test-case prioritization');
INSERT INTO `keyword` VALUES (156, 'continuous integration');
INSERT INTO `keyword` VALUES (157, 'information retrieval');
INSERT INTO `keyword` VALUES (158, 'structural mutations');
INSERT INTO `keyword` VALUES (159, 'chunk-based formats');
INSERT INTO `keyword` VALUES (160, 'Fuzzing');
INSERT INTO `keyword` VALUES (161, 'binary testing');
INSERT INTO `keyword` VALUES (162, 'reinforcement learning');
INSERT INTO `keyword` VALUES (163, 'Android app testing');
INSERT INTO `keyword` VALUES (164, 'functional scenario division');
INSERT INTO `keyword` VALUES (165, 'Online learning');
INSERT INTO `keyword` VALUES (166, 'Deep neural networks');
INSERT INTO `keyword` VALUES (167, 'White-box testing');
INSERT INTO `keyword` VALUES (168, 'Android');
INSERT INTO `keyword` VALUES (169, 'test case generation');
INSERT INTO `keyword` VALUES (170, 'mobile apps');
INSERT INTO `keyword` VALUES (171, 'validation');
INSERT INTO `keyword` VALUES (172, 'data loss');
INSERT INTO `keyword` VALUES (173, 'Deep Learning');
INSERT INTO `keyword` VALUES (174, 'Deep Learning Testing');
INSERT INTO `keyword` VALUES (175, 'Test Case Prioritization');
INSERT INTO `keyword` VALUES (176, 'symbolic execution');
INSERT INTO `keyword` VALUES (177, 'KLEE');
INSERT INTO `keyword` VALUES (178, 'memoization');
INSERT INTO `keyword` VALUES (179, 'Test Case Generation');
INSERT INTO `keyword` VALUES (180, 'Mobile Testing');
INSERT INTO `keyword` VALUES (181, 'Bug report');
INSERT INTO `keyword` VALUES (182, 'Classification');
INSERT INTO `keyword` VALUES (183, 'Automated Program Repair');
INSERT INTO `keyword` VALUES (184, 'Fault Localization');
INSERT INTO `keyword` VALUES (185, 'Unified Debugging');
INSERT INTO `keyword` VALUES (186, 'Memory partitioning');
INSERT INTO `keyword` VALUES (187, 'Addressing model');
INSERT INTO `keyword` VALUES (188, 'Symbolic execution');
INSERT INTO `keyword` VALUES (189, 'Energy Issues');
INSERT INTO `keyword` VALUES (190, 'Mobile Applications');
INSERT INTO `keyword` VALUES (191, 'Energy Bugs');
INSERT INTO `keyword` VALUES (192, 'Android');
INSERT INTO `keyword` VALUES (193, 'Feature Interaction Problem');
INSERT INTO `keyword` VALUES (194, 'Search-based Software Testing');
INSERT INTO `keyword` VALUES (195, 'Automated Driving Systems');
INSERT INTO `keyword` VALUES (196, 'Automated Software Repair');
INSERT INTO `keyword` VALUES (197, 'Automated program repair');
INSERT INTO `keyword` VALUES (198, 'AI and Software Engineering');
INSERT INTO `keyword` VALUES (199, 'Neural Machine Translation');
INSERT INTO `keyword` VALUES (200, 'Deep Learning');
INSERT INTO `keyword` VALUES (201, 'Cyber-physical systems');
INSERT INTO `keyword` VALUES (202, 'testing defence mechanisms');
INSERT INTO `keyword` VALUES (203, 'fuzzing');
INSERT INTO `keyword` VALUES (204, 'active learning');
INSERT INTO `keyword` VALUES (205, 'benchmark generation');
INSERT INTO `keyword` VALUES (206, 'parser');
INSERT INTO `keyword` VALUES (207, 'fuzzing');
INSERT INTO `keyword` VALUES (208, 'test input generation');
INSERT INTO `keyword` VALUES (209, 'SAT solving');
INSERT INTO `keyword` VALUES (210, 'program analysis');
INSERT INTO `keyword` VALUES (211, 'Satisfiability modulo theory');
INSERT INTO `keyword` VALUES (212, 'Build system');
INSERT INTO `keyword` VALUES (213, 'test isolation');
INSERT INTO `keyword` VALUES (214, 'Maven');

-- ----------------------------
-- Table structure for meeting
-- ----------------------------
DROP TABLE IF EXISTS `meeting`;
CREATE TABLE `meeting`  (
  `meeting_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `publisher` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `year` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `doi` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `isbn` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `bib_url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `bib_source` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  PRIMARY KEY (`meeting_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of meeting
-- ----------------------------
INSERT INTO `meeting` VALUES (1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '{ACM}', '2020', 'https://doi.org/10.1145/3395363', '10.1145/3395363', '978-1-4503-8008-9', 'Wed, 15 Jul 2020 15:59:31 +0200', 'https://dblp.org/rec/conf/issta/2020.bib', 'dblp computer science bibliography, https://dblp.org');

-- ----------------------------
-- Table structure for meeting_editor_relation
-- ----------------------------
DROP TABLE IF EXISTS `meeting_editor_relation`;
CREATE TABLE `meeting_editor_relation`  (
  `relation_id` int(11) NOT NULL AUTO_INCREMENT,
  `meeting_id` int(11) NOT NULL,
  `editor_id` int(11) NOT NULL,
  PRIMARY KEY (`relation_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of meeting_editor_relation
-- ----------------------------
INSERT INTO `meeting_editor_relation` VALUES (1, 1, 1);
INSERT INTO `meeting_editor_relation` VALUES (2, 1, 2);

-- ----------------------------
-- Table structure for paper
-- ----------------------------
DROP TABLE IF EXISTS `paper`;
CREATE TABLE `paper`  (
  `paper_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `abstract` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `doi` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `citation` int(11) NULL DEFAULT NULL,
  `book_title` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `pages` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `publisher` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `year` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `time` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `bib_url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  `bib_source` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  PRIMARY KEY (`paper_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 55 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of paper
-- ----------------------------
INSERT INTO `paper` VALUES (1, 'Crowdsourced requirements generation for automatic testing via knowledge graph', 'Crowdsourced testing provides an effective way to deal with the problem of Android system fragmentation, as well as the application scenario diversity faced by Android testing. The generation of test requirements is a significant part of crowdsourced testing. However, manually generating crowdsourced testing requirements is tedious, which requires the issuers to have the domain knowledge of the Android application under test. To solve these problems, we have developed a tool named KARA, short for Knowledge Graph Aided Crowdsourced Requirements Generation for Android Testing. KARA first analyzes the result of automatic testing on the Android application, through which the operation sequences can be obtained. Then, the knowledge graph of the target application is constructed in a manner of pay-as-you-go. Finally, KARA utilizes knowledge graph and the automatic testing result to generate crowdsourced testing requirements with domain knowledge. Experiments prove that the test requirements generated by KARA are well understandable, and KARA can improve the quality of crowdsourced testing. The demo video can be found at https://youtu.be/kE-dOiekWWM.', '10.1145/3395363.3404363', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '545--548', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404363', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GuoHYGH20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (2, 'Recovering fitness gradients for interprocedural Boolean flags in search-based testing', 'In Search-based Software Testing (SBST), test generation is guided by fitness functions that estimate how close a test case is to reach an uncovered test goal (e.g., branch). A popular fitness function estimates how close conditional statements are to evaluating to true or false, i.e., the branch distance. However, when conditions read Boolean variables (e.g., if(x && y)), the branch distance provides no gradient for the search, since a Boolean can either be true or false. This flag problem can be addressed by transforming individual procedures such that Boolean flags are replaced with numeric comparisons that provide better guidance for the search. Unfortunately, defining a semantics-preserving transformation that is applicable in an interprocedural case, where Boolean flags are passed around as parameters and return values, is a daunting task. Thus, it is not yet supported by modern test generators. \nThis work is based on the insight that fitness gradients can be recovered by using runtime information: Given an uncovered interprocedural flag branch, our approach (1) calculates context-sensitive branch distance for all control flows potentially returning the required flag in the called method, and (2) recursively aggregates these distances into a continuous value. We implemented our approach on top of the EvoSuite framework for Java, and empirically compared it with state-of-the-art testability transformations on non-trivial methods suffering from interprocedural flag problems, sampled from open source Java projects. Our experiment demonstrates that our approach achieves higher coverage on the subject methods with statistical significance and acceptable runtime overheads.', '10.1145/3395363.3397358', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '440--451', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397358', 'Mon, 23 Nov 2020 12:33:06 +0100', 'https://dblp.org/rec/conf/issta/00010FXLD20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (3, 'Escaping dependency hell: finding build dependency errors with the unified dependency graph', 'Modern software projects rely on build systems and build scripts to assemble executable artifacts correctly and efficiently. However, developing build scripts is error-prone. Dependency-related errors in build scripts, mainly including missing dependencies and redundant dependencies, are common in various kinds of software projects. These errors lead to build failures, incorrect build results or poor performance in incremental or parallel builds. To detect such errors, various techniques are proposed and suffer from low efficiency and high false positive problems, due to the deficiency of the underlying dependency graphs. In this work, we design a new dependency graph, the unified dependency graph (UDG), which leverages both static and dynamic information to uniformly encode the declared and actual dependencies between build targets and files. The construction of UDG facilitates the efficient and precise detection of dependency errors via simple graph traversals. We implement the proposed approach as a tool, VeriBuild, and evaluate it on forty-two well-maintained open-source projects. The experimental results show that, without losing precision, VeriBuild incurs 58.2% less overhead than the state-of-the-art approach. By the time of writing, 398 detected dependency issues have been confirmed by the developers.', '10.1145/3395363.3397388', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '463--474', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397388', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/FanWW0SZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (4, 'A programming model for semi-implicit parallelization of static analyses', 'Parallelization of static analyses is necessary to scale to real-world programs, but it is a complex and difficult task and, therefore, often only done manually for selected high-profile analyses. In this paper, we propose a programming model for semi-implicit parallelization of static analyses which is inspired by reactive programming. Reusing the domain-expert knowledge on how to parallelize anal- yses encoded in the programming framework, developers do not need to think about parallelization and concurrency issues on their own. The programming model supports stateful computations, only requires monotonic computations over lattices, and is independent of specific analyses. Our evaluation shows the applicability of the programming model to different analyses and the importance of user-selected scheduling strategies. We implemented an IFDS solver that was able to outperform a state-of-the-art, specialized parallel IFDS solver both in absolute performance and scalability.', '10.1145/3395363.3397367', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '428--439', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397367', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/HelmKKHESM20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (5, 'Learning to detect table clones in spreadsheets', 'In order to speed up spreadsheet development productivity, end users can create a spreadsheet table by copying and modifying an existing one. These two tables share the similar computational semantics, and form a table clone. End users may modify the tables in a table clone, e.g., adding new rows and deleting columns, thus introducing structure changes into the table clone. Our empirical study on real-world spreadsheets shows that about 58.5% of table clones involve structure changes. However, existing table clone detection approaches in spreadsheets can only detect table clones with the same structures. Therefore, many table clones with structure changes cannot be detected. \nWe observe that, although the tables in a table clone may be modified, they usually share the similar structures and formats, e.g., headers, formulas and background colors. Based on this observation, we propose \n (\nearning to detect \nable \nlones), to automatically detect table clones with or without structure changes. LTC utilizes the structure and format information from labeled table clones and non table clones to train a binary classifier. LTC first identifies tables in spreadsheets, and then uses the trained binary classifier to judge whether every two tables can form a table clone. Our experiments on real-world spreadsheets from the EUSES and Enron corpora show that, LTC can achieve a precision of 97.8% and recall of 92.1% in table clone detection, significantly outperforming the state-of-the-art technique (a precision of 37.5% and recall of 11.1%).', '10.1145/3395363.3397384', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '528--540', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397384', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/ZhangDZXZWYY20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (6, 'Program-aware fuzzing for {MQTT} applications', 'Over the last few years, MQTT applications have been widely exposed to vulnerabilities because of their weak protocol implementations. For our preliminary research, we conducted background studies to: (1) determine the main cause of vulnerabilities in MQTT applications; and (2) analyze existing MQTT-based testing frameworks. Our preliminary results confirm that MQTT is most susceptible to malformed packets, and its existing testing frameworks are based on blackbox fuzzing, meaning vulnerabilities are difficult and time-consuming to find. Thus, the aim of my research is to study and develop effective fuzzing strategies for the MQTT protocol, thereby contributing to the development of more robust MQTT applications in IoT and Smart Cities.', '10.1145/3395363.3402645', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '582--586', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3402645', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/RodriguezB20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (7, 'ObjSim: lightweight automatic patch prioritization via object similarity', 'In the context of test case based automatic program repair (APR), patches that pass all the test cases but fail to fix the bug are called overfitted patches. Currently, patches generated by APR tools get inspected manually by the users to find and adopt genuine fixes. Being a laborious activity hindering widespread adoption of APR, automatic identification of overfitted patches has lately been the topic of active research. This paper presents engineering details of ObjSim: a fully automatic, lightweight similarity-based patch prioritization tool for JVM-based languages. The tool works by comparing the system state at the exit point(s) of patched method before and after patching and prioritizing patches that result in state that is more similar to that of original, unpatched version on passing tests while less similar on failing ones. Our experiments with patches generated by the recent APR tool PraPR for fixable bugs from Defects4J v1.4.0 show that ObjSim prioritizes 16.67% more genuine fixes in top-1 place. A demo video of the tool is located at https://bit.ly/2K8gnYV.', '10.1145/3395363.3404362', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '541--544', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404362', 'Thu, 28 Jan 2021 08:23:19 +0100', 'https://dblp.org/rec/conf/issta/Ghanbari20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (8, 'Scalable build service system with smart scheduling service', 'Build automation is critical for developers to check if their code compiles, passes all tests and is safe to deploy to the server. Many companies adopt Continuous Integration (CI) services to make sure that the code changes from multiple developers can be safely merged at the head of the project. Internally, CI triggers builds to make sure that the new code change compiles and passes the tests. For any large company which has a monolithic code repository and thousands of developers, it is hard to make sure that all code changes are safe to submit in a timely manner. The reason is that each code change may involve multiple builds, and the company needs to run millions of builds every day to guarantee developers’ productivity. \n Google is one of those large companies that need a scalable build service to support developers’ work. More than 100,000 code changes are submitted to our repository on average each day, including changes from either human users or automated tools. More than 15 million builds are executed on average each day. In this paper, we first describe an overview of our scalable build service architecture. Then, we discuss more details about how we make build scheduling decisions. Finally, we discuss some experience in the scalability of the build service system and the performance of the build scheduling service.', '10.1145/3395363.3397371', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '452--462', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397371', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/WangTGHGR20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (9, 'How far we have come: testing decompilation correctness of {C} decompilers', 'A C decompiler converts an executable (the output from a C compiler) into source code. The recovered C source code, once recompiled, will produce an executable with the same functionality as the original executable. With over twenty years of development, C decompilers have been widely used in production to support reverse engineering applications, including legacy software migration, security retrofitting, software comprehension, and to act as the first step in launching adversarial software exploitations. As the paramount component and the trust base in numerous cybersecurity tasks, C decompilers have enabled the analysis of malware, ransomware, and promoted cybersecurity professionals’ understanding of vulnerabilities in real-world systems. \n In contrast to this flourishing market, our observation is that in academia, outputs of C decompilers (i.e., recovered C source code) are still not extensively used. Instead, the intermediate representations are often more desired for usage when developing applications such as binary security retrofitting. We acknowledge that such conservative approaches in academia are a result of widespread and pessimistic views on the decompilation correctness. However, in conventional software engineering and security research, how much of a problem is, for instance, reusing a piece of simple legacy code by taking the output of modern C decompilers? \n In this work, we test decompilation correctness to present an up-to-date understanding regarding modern C decompilers. We detected a total of 1,423 inputs that can trigger decompilation errors from four popular decompilers, and with extensive manual effort, we identified 13 bugs in two open-source decompilers. Our findings show that the overly pessimistic view of decompilation correctness leads researchers to underestimate the potential of modern decompilers; the state-of-the-art decompilers certainly care about the functional correctness, and they are making promising progress. However, some tasks that have been studied for years in academia, such as type inference and optimization, still impede C decompilers from generating quality outputs more than is reflected in the literature. These issues rarely receive enough attention and can lead to great confusion that misleads users.', '10.1145/3395363.3397370', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '475--487', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397370', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/LiuW20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (10, 'Discovering discrepancies in numerical libraries', 'Numerical libraries constitute the building blocks for software applications that perform numerical calculations. Thus, it is paramount that such libraries provide accurate and consistent results. To that end, this paper addresses the problem of finding discrepancies between synonymous functions in different numerical libraries as a means of identifying incorrect behavior. Our approach automatically finds such synonymous functions, synthesizes testing drivers, and executes differential tests to discover meaningful discrepancies across numerical libraries. We implement our approach in a tool named FPDiff, and provide an evaluation on four popular numerical libraries: GNU Scientific Library (GSL), SciPy, mpmath, and jmat. FPDiff finds a total of 126 equivalence classes with a 95.8% precision and 79% recall, and discovers 655 instances in which an input produces a set of disagreeing outputs between function synonyms, 150 of which we found to represent 125 unique bugs. We have reported all bugs to library maintainers; so far, 30 bugs have been fixed, 9 have been found to be previously known, and 25 more have been acknowledged by developers.', '10.1145/3395363.3397380', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '488--501', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397380', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/VanoverDR20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (11, 'Automated mobile apps testing from visual perspective', 'The current implementation of automated mobile apps testing generally relies on internal program information, such as reading code or GUI layout files, capturing event streams. This paper proposes an approach of automated mobile apps testing from a completely visual perspective. It uses computer vision technology to enable computer to judge the internal functions from the external GUI information of mobile apps as we humans do and generates test strategy for execution, which improves the interactivity, flexibility, and authenticity of testing. We believe that this vision-based testing approach will further help alleviate the contradiction between the current huge test requirements of mobile apps and the relatively lack of testers.', '10.1145/3395363.3402644', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '577--581', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3402644', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/Xue20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (12, 'Functional code clone detection with syntax and semantics fusion learning', 'Clone detection of source code is among the most fundamental software engineering techniques. Despite intensive research in the past decade, existing techniques are still unsatisfactory in detecting \"functional\" code clones. In particular, existing techniques cannot efficiently extract syntax and semantics information from source code. In this paper, we propose a novel joint code representation that applies fusion embedding techniques to learn hidden syntactic and semantic features of source codes. Besides, we introduce a new granularity for functional code clone detection. Our approach regards the connected methods with caller-callee relationships as a functionality and the method without any caller-callee relationship with other methods represents a single functionality. Then we train a supervised deep learning model to detect functional code clones. We conduct evaluations on a large dataset of C++ programs and the experimental results show that fusion learning can significantly outperform the state-of-the-art techniques in detecting functional code clones.', '10.1145/3395363.3397362', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '516--527', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397362', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/FangLS0S20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (13, 'Test recommendation system based on slicing coverage filtering', 'Software testing plays a crucial role in software lifecycle. As a basic approach of software testing, unit testing is one of the necessary skills for software practitioners. Since testers are required to understand the inner code of the software under test(SUT) while writing a test case, testers usually need to learn how to detect the bug within SUT effectively. When novice programmers started to learn writing unit tests, they will generally watch a video lesson or reading unit tests written by others. These learning approaches are either time-consuming or too hard for a novice. To solve these problems, we developed a system, named TeSRS, to assist novice programmers to learn unit testing. TeSRS is a test recommendation system which can effectively assist test novice in learning unit testing. Utilizing program slice technique, TeSRS has gotten an enormous amount of test snippets from superior crowdsourcing test scripts. Depending on these test snippets, TeSRS provides novices a easier way for unit test learning. To sum up, TeSRS can help test novices (1) obtain high level design ideas of unit test case and (2) improve capabilities(e.g. branch coverage rate and mutation coverage rate) of their test scripts. TeSRS has built a scalable corpus composed of over 8000 test snippets from more than 25 test problems. Its stable performance shows effectiveness in unit test learning. \nDemo video can be found at <a>https://youtu.be/xvrLdvU8zFA</a>', '10.1145/3395363.3404370', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '573--576', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404370', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/QianZMFSH020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (14, 'FineLock: automatically refactoring coarse-grained locks into fine-grained locks', 'Lock is a frequently-used synchronization mechanism to enforce exclusive access to a shared resource. However, lock-based concurrent programs are susceptible to lock contention, which leads to low performance and poor scalability. Furthermore, inappropriate granularity of a lock makes lock contention even worse. Compared to coarse-grained lock, fine-grained lock can mitigate lock contention but difficult to use. Converting coarse-grained lock into fine-grained lock manually is not only error-prone and tedious, but also requires a lot of expertise. In this paper, we propose to leverage program analysis techniques and pushdown automaton to automatically covert coarse-grained locks into fine-grained locks to reduce lock contention. We developed a prototype FineLock and evaluates it on 5 projects. The evaluation results demonstrate FineLock can refactor 1,546 locks in an average of 27.6 seconds, including converting 129 coarse-grained locks into fine-grained locks and 1,417 coarse-grained locks into read/write locks. By automatically providing potential refactoring recommendations, our tool saves a lot of efforts for developers.', '10.1145/3395363.3404368', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '565--568', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404368', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/ZhangSZM20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (15, 'Testing high performance numerical simulation programs: experience, lessons learned, and open issues', 'High performance numerical simulation programs are widely used to simulate actual physical processes on high performance computers for the analysis of various physical and engineering problems. They are usually regarded as non-testable due to their high complexity. This paper reports our real experience and lessons learned from testing five simulation programs that will be used to design and analyze nuclear power plants. We applied five testing approaches and found 33 bugs. We found that property-based testing and metamorphic testing are two effective methods. Nevertheless, we suffered from the lack of domain knowledge, the high test costs, the shortage of test cases, severe oracle issues, and inadequate automation support. Consequently, the five programs are not exhaustively tested from the perspective of software testing, and many existing software testing techniques and tools are not fully applicable due to scalability and portability issues. We need more collaboration and communication with other communities to promote the research and application of software testing techniques.', '10.1145/3395363.3397382', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '502--515', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397382', 'Wed, 22 Jul 2020 16:06:01 +0200', 'https://dblp.org/rec/conf/issta/HeWSL20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (16, 'An empirical study on {ARM} disassembly tools', 'With the increasing popularity of embedded devices, ARM is becoming the dominant architecture for them. In the meanwhile, there is a pressing need to perform security assessments for these devices. Due to different types of peripherals, it is challenging to dynamically run the firmware of these devices in an emulated environment. Therefore, the static analysis is still commonly used. Existing work usually leverages off-the-shelf tools to disassemble stripped ARM binaries and (implicitly) assume that reliable disassembling binaries and function recognition are solved problems. However, whether this assumption really holds is unknown. \nIn this paper, we conduct the first comprehensive study on ARM disassembly tools. Specifically, we build 1,896 ARM binaries (including 248 obfuscated ones) with different compilers, compiling options, and obfuscation methods. We then evaluate them using eight state-of-the-art ARM disassembly tools (including both commercial and noncommercial ones) on their capabilities to locate instructions and function boundaries. These two are fundamental ones, which are leveraged to build other primitives. Our work reveals some observations that have not been systematically summarized and/or confirmed. For instance, we find that the existence of both ARM and Thumb instruction sets, and the reuse of the BL instruction for both function calls and branches bring serious challenges to disassembly tools. Our evaluation sheds light on the limitations of state-of-the-art disassembly tools and points out potential directions for improvement. To engage the community, we release the data set, and the related scripts at https://github.com/valour01/arm_disasssembler_study.', '10.1145/3395363.3397377', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '401--414', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397377', 'Thu, 17 Dec 2020 16:29:24 +0100', 'https://dblp.org/rec/conf/issta/JiangZLWL020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (17, 'CPSDebug: a tool for explanation of failures in cyber-physical systems', 'Debugging Cyber-Physical System models is often challenging, as it requires identifying a potentially long, complex and heterogenous combination of events that resulted in a violation of the expected behavior of the system. In this paper we present CPSDebug, a tool for supporting designers in the debugging of failures in MATLAB Simulink/Stateflow models. CPSDebug implements a gray-box approach that combines testing, specification mining, and failure analysis to identify the causes of failures and explain their propagation in time and space. The evaluation of the tool, based on multiple usage scenarios and faults and direct feedback from engineers, shows that CPSDebug can effectively aid engineers during debugging tasks.', '10.1145/3395363.3404369', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '569--572', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404369', 'Tue, 29 Dec 2020 18:31:45 +0100', 'https://dblp.org/rec/conf/issta/BartocciMMMNP20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (18, 'ProFL: a fault localization framework for Prolog', 'Prolog is a declarative, first-order logic that has been used in a variety of domains to implement heavily rules-based systems. However, it is challenging to write a Prolog program correctly. Fortunately, the SWI-Prolog environment supports a unit testing framework, plunit, which enables developers to systematically check for correctness. However, knowing a program is faulty is just the first step. The developer then needs to fix the program which means the developer needs to determine what part of the program is faulty. ProFL is a fault localization tool that adapts imperative-based fault localization techniques to Prolog’s declarative environment. ProFL takes as input a faulty Prolog program and a plunit test suite. Then, ProFL performs fault localization and returns a list of suspicious program clauses to the user. Our toolset encompasses two different techniques: ProFL\n, a spectrum-based technique, and ProFL\n, a mutation-based technique. This paper describes our Python implementation of ProFL, which is a command-line tool, released as an open-source project on GitHub (https://github.com/geoorge1d127/ProFL). Our experimental results show ProFL is accurate at localizing faults in our benchmark programs.', '10.1145/3395363.3404367', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '561--564', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404367', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/ThompsonS20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (19, 'Echidna: effective, usable, and fast fuzzing for smart contracts', 'Ethereum smart contracts---autonomous programs that run on a blockchain---often control transactions of financial and intellectual property. Because of the critical role they play, smart contracts need complete, comprehensive, and effective test generation. This paper introduces an open-source smart contract fuzzer called Echidna that makes it easy to automatically generate tests to detect violations in assertions and custom properties. Echidna is easy to install and does not require a complex configuration or deployment of contracts to a local blockchain. It offers responsive feedback, captures many property violations, and its default settings are calibrated based on experimental data. To date, Echidna has been used in more than 10 large paid security audits, and feedback from those audits has driven the features and user experience of Echidna, both in terms of practical usability (e.g., smart contract frameworks like Truffle and Embark) and test generation strategies. Echidna aims to be good at finding real bugs in smart contracts, with minimal user effort and maximal speed.', '10.1145/3395363.3404366', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '557--560', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404366', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GriecoSCFG20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (20, 'Identifying Java calls in native code via binary scanning', 'Current Java static analyzers, operating either on the source or bytecode level, exhibit unsoundness for programs that contain native code. We show that the Java Native Interface (JNI) specification, which is used by Java programs to interoperate with Java code, is principled enough to permit static reasoning about the effects of native code on program execution when it comes to call-backs. Our approach consists of disassembling native binaries, recovering static symbol information that corresponds to Java method signatures, and producing a model for statically exercising these native call-backs with appropriate mock objects. The approach manages to recover virtually all Java calls in native code, for both Android and Java desktop applications—(a) achieving 100% native-to-application call-graph recall on large Android applications (Chrome, Instagram) and (b) capturing the full native call-back behavior of the XCorpus suite programs.', '10.1145/3395363.3397368', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '388--400', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397368', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/FourtounisTS20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (21, 'TauJud: test augmentation of machine learning in judicial documents', 'The booming of big data makes the adoption of machine learning ubiquitous in the legal field. As we all know, a large amount of test data can better reflect the performance of the model, so the test data must be naturally expanded. In order to solve the high cost problem of labeling data in natural language processing, people in the industry have improved the performance of text classification tasks through simple data amplification techniques. However, the data amplification requirements in the judgment documents are interpretable and logical, as observed from CAIL2018 test data with over 200,000 judicial documents. Therefore, we have designed a test augmentation tool called TauJud specifically for generating more effective test data with uniform distribution over time and location for model evaluation and save time in marking data. The demo can be found at https://github.com/governormars/TauJud.', '10.1145/3395363.3404364', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '549--552', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404364', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GuoLHLZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (22, 'Automatic support for the identification of infeasible testing requirements', 'Software testing activity is imperative to improve software quality. However, finding a set of test cases satisfies a given test criterion, is not a trivial task because the overall input domain is very large, and different test sets can be derived, with different effectiveness. In the context of structural testing, the non-executability is a feature present in most programs, increasing cost and effort of testing activity. When concurrent programs are tested, new challenges arise, mainly related to the non-determinism. Non-determinism can result in different possible test outputs for the same test input, which makes the problem of non-executability more complex, requiring treatment. In this sense, our project intends to define an approach to support automatic identification of infeasible testing requirements. Hence, this proposal aims to identify properties which cause infeasible testing requirements and automate their application. Due to complexity of the problem, we will apply search-based algorithms in the automation of concurrent and sequential programs treatment.', '10.1145/3395363.3402646', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '587--591', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3402646', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/Neto20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (23, 'How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection', 'Security attacks targeting smart contracts have been on the rise, which have led to financial loss and erosion of trust. Therefore, it is important to enable developers to discover security vulnerabilities in smart contracts before deployment. A number of static analysis tools have been developed for finding security bugs in smart contracts. However, despite the numerous bug-finding tools, there is no systematic approach to evaluate the proposed tools and gauge their effectiveness. This paper proposes SolidiFI, an automated and systematic approach for evaluating smart contracts’ static analysis tools. SolidiFI is based on injecting bugs (i.e., code defects) into all potential locations in a smart contract to introduce targeted security vulnerabilities. SolidiFI then checks the generated buggy contract using the static analysis tools, and identifies the bugs that the tools are unable to detect (false-negatives) along with identifying the bugs reported as false-positives. SolidiFI is used to evaluate six widely-used static analysis tools, namely, Oyente, Securify, Mythril, SmartCheck, Manticore and Slither, using a set of 50 contracts injected by 9369 distinct bugs. It finds several instances of bugs that are not detected by the evaluated tools despite their claims of being able to detect such bugs, and all the tools report many false positives.', '10.1145/3395363.3397385', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '415--427', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397385', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GhalebP20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (24, 'Patch based vulnerability matching for binary programs', 'The binary-level function matching has been widely used to detect whether there are 1-day vulnerabilities in released programs. However, the high false positive is a challenge for current function matching solutions, since the vulnerable function is highly similar to its corresponding patched version. In this paper, the Binary X-Ray (BinXray), a patch based vulnerability matching approach, is proposed to identify the specific 1-day vulnerabilities in target programs accurately and effectively. In the preparing step, a basic block mapping algorithm is designed to extract the signature of a patch, by comparing the given vulnerable and patched programs. The signature is represented as a set of basic block traces. In the detection step, the patching semantics is applied to reduce irrelevant basic block traces to speed up the signature searching. The trace similarity is also designed to identify whether a target program is patched. In experiments, 12 real software projects related to 479 CVEs are collected. BinXray achieves 93.31% accuracy and the analysis time cost is only 296.17ms per function, outperforming the state-of-the-art works.', '10.1145/3395363.3397361', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '376--387', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397361', 'Thu, 17 Dec 2020 16:29:24 +0100', 'https://dblp.org/rec/conf/issta/XuX0SLL20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (25, 'Differential regression testing for {REST} APIs', 'Cloud services are programmatically accessed through REST APIs. Since REST APIs are constantly evolving, an important problem is how to prevent breaking changes of APIs, while supporting several different versions. To find such breaking changes in an automated way, we introduce differential regression testing for REST APIs. Our approach is based on two observations. First, breaking changes in REST APIs involve two software components, namely the client and the service. As such, there are also two types of regressions: regressions in the API specification, i.e., in the contract between the client and the service, and regressions in the service itself, i.e., previously working requests are \"broken\" in later versions of the service. Finding both kinds of regressions involves testing along two dimensions: when the service changes and when the specification changes. Second, to detect such bugs automatically, we employ differential testing. That is, we compare the behavior of different versions on the same inputs against each other, and find regressions in the observed differences. For generating inputs (sequences of HTTP requests) to services, we use RESTler, a stateful fuzzer for REST APIs. Comparing the outputs (HTTP responses) of a cloud service involves several challenges, like abstracting over minor differences, handling out-of-order requests, and non-determinism. Differential regression testing across 17 different versions of the widely-used Azure networking APIs deployed between 2016 and 2019 detected 14 regressions in total, 5 of those in the official API specifications and 9 regressions in the services themselves.', '10.1145/3395363.3397374', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '312--323', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397374', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GodefroidLP20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (26, 'EShield: protect smart contracts against reverse engineering', 'Smart contracts are the back-end programs of blockchain-based applications and the execution results are deterministic and publicly visible. Developers are unwilling to release source code of some smart contracts to generate randomness or for security reasons, however, attackers still can use reverse engineering tools to decompile and analyze the code. In this paper, we propose EShield, an automated security enhancement tool for protecting smart contracts against reverse engineering. EShield replaces original instructions of operating jump addresses with anti-patterns to interfere with control flow recovery from bytecode. We have implemented four methods in EShield and conducted an experiment on over 20k smart contracts. The evaluation results show that all the protected smart contracts are resistant to three different reverse engineering tools with little extra gas cost.', '10.1145/3395363.3404365', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '553--556', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404365', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/YanGWLGLC20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (27, 'Intermittently failing tests in the embedded systems domain', 'Software testing is sometimes plagued with intermittently failing tests and finding the root causes of such failing tests is often difficult. This problem has been widely studied at the unit testing level for open source software, but there has been far less investigation at the system test level, particularly the testing of industrial embedded systems. This paper describes our investigation of the root causes of intermittently failing tests in the embedded systems domain, with the goal of better understanding, explaining and categorizing the underlying faults. The subject of our investigation is a currently-running industrial embedded system, along with the system level testing that was performed. We devised and used a novel metric for classifying test cases as intermittent. From more than a half million test verdicts, we identified intermittently and consistently failing tests, and identified their root causes using multiple sources. We found that about 1-3% of all test cases were intermittently failing. From analysis of the case study results and related work, we identified nine factors associated with test case intermittence. We found that a fix for a consistently failing test typically removed a larger number of failures detected by other tests than a fix for an intermittent test. We also found that more effort was usually needed to identify fixes for intermittent tests than for consistent tests. An overlap between root causes leading to intermittent and consistent tests was identified. Many root causes of intermittence are the same in industrial embedded systems and open source software. However, when comparing unit testing to system level testing, especially for embedded systems, we observed that the test environment itself is often the cause of intermittence.', '10.1145/3395363.3397359', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '337--348', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397359', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/StrandbergOWAS20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (28, 'Feasible and stressful trajectory generation for mobile robots', 'While executing nominal tests on mobile robots is required for their validation, such tests may overlook faults that arise under trajectories that accentuate certain aspects of the robot\'s behavior. Uncovering such stressful trajectories is challenging as the input space for these systems, as they move, is extremely large, and the relation between a planned trajectory and its potential to induce stress can be subtle. To address this challenge we propose a framework that 1) integrates kinematic and dynamic physical models of the robot into the automated trajectory generation in order to generate valid trajectories, and 2) incorporates a parameterizable scoring model to efficiently generate physically valid yet stressful trajectories for a broad range of mobile robots. We evaluate our approach on four variants of a state-of-the-art quadrotor in a racing simulator. We find that, for non-trivial length trajectories, the incorporation of the kinematic and dynamic model is crucial to generate any valid trajectory, and that the approach with the best hand-crafted scoring model and with a trained scoring model can cause on average a 55.9% and 41.3% more stress than a random selection among valid trajectories. A follow-up study shows that the approach was able to induce similar stress on a deployed commercial quadrotor, with trajectories that deviated up to 6m from the intended ones.', '10.1145/3395363.3397387', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '349--362', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397387', 'Tue, 29 Dec 2020 18:31:45 +0100', 'https://dblp.org/rec/conf/issta/HildebrandtEBD20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (29, 'Detecting cache-related bugs in Spark applications', 'Apache Spark has been widely used to build big data applications. Spark utilizes the abstraction of Resilient Distributed Dataset (RDD) to store and retrieve large-scale data. To reduce duplicate computation of an RDD, Spark can cache the RDD in memory and then reuse it later, thus improving performance. Spark relies on application developers to enforce caching decisions by using \n() and \n() APIs, e.g., \n RDD is persisted and \n the RDD is persisted / unpersisted. Incorrect RDD caching decisions can cause duplicate computations, or waste precious memory resource, thus introducing serious performance degradation in Spark applications. In this paper, we propose \n, to automatically detect cache-related bugs in Spark applications. We summarize six cache-related bug patterns in Spark applications, and then dynamically detect cache-related bugs by analyzing the execution traces of Spark applications. We evaluate CacheCheck on six real-world Spark applications. The experimental result shows that CacheCheck detects 72 previously unknown cache-related bugs, and 28 of them have been fixed by developers.', '10.1145/3395363.3397353', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '363--375', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397353', 'Thu, 28 Jan 2021 11:41:19 +0100', 'https://dblp.org/rec/conf/issta/LiWHGDXWWZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (30, 'DeepSQLi: deep semantic learning for testing {SQL} injection', 'Security is unarguably the most serious concern for Web applications, to which SQL injection (SQLi) attack is one of the most devastating attacks. Automatically testing SQLi vulnerabilities is of ultimate importance, yet is unfortunately far from trivial to implement. This is because the existence of a huge, or potentially infinite, number of variants and semantic possibilities of SQL leading to SQLi attacks on various Web applications. In this paper, we propose a deep natural language processing based tool, dubbed DeepSQLi, to generate test cases for detecting SQLi vulnerabilities. Through adopting deep learning based neural language model and sequence of words prediction, DeepSQLi is equipped with the ability to learn the semantic knowledge embedded in SQLi attacks, allowing it to translate user inputs (or a test case) into a new test case, which is se- mantically related and potentially more sophisticated. Experiments are conducted to compare DeepSQLi with SQLmap, a state-of-the-art SQLi testing automation tool, on six real-world Web applications that are of different scales, characteristics and domains. Empirical results demonstrate the effectiveness and the remarkable superiority of DeepSQLi over SQLmap, such that more SQLi vulnerabilities can be identified by using a less number of test cases, whilst running much faster.', '10.1145/3395363.3397375', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '286--297', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397375', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/Liu0020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (31, 'Dependent-test-aware regression testing techniques', 'Developers typically rely on regression testing techniques to ensure that their changes do not break existing functionality. Unfortunately, these techniques suffer from flaky tests, which can both pass and fail when run multiple times on the same version of code and tests. One prominent type of flaky tests is order-dependent (OD) tests, which are tests that pass when run in one order but fail when run in another order. Although OD tests may cause flaky-test failures, OD tests can help developers run their tests faster by allowing them to share resources. We propose to make regression testing techniques dependent-test-aware to reduce flaky-test failures. \n To understand the necessity of dependent-test-aware regression testing techniques, we conduct the first study on the impact of OD tests on three regression testing techniques: test prioritization, test selection, and test parallelization. In particular, we implement 4 test prioritization, 6 test selection, and 2 test parallelization algorithms, and we evaluate them on 11 Java modules with OD tests. When we run the orders produced by the traditional, dependent-test-unaware regression testing algorithms, 82% of human-written test suites and 100% of automatically-generated test suites with OD tests have at least one flaky-test failure. \n We develop a general approach for enhancing regression testing algorithms to make them dependent-test-aware, and apply our approach to 12 algorithms. Compared to traditional, unenhanced regression testing algorithms, the enhanced algorithms use provided test dependencies to produce orders with different permutations or extra tests. Our evaluation shows that, in comparison to the orders produced by unenhanced algorithms, the orders produced by enhanced algorithms (1) have overall 80% fewer flaky-test failures due to OD tests, and (2) may add extra tests but run only 1% slower on average. Our results suggest that enhancing regression testing algorithms to be dependent-test-aware can substantially reduce flaky-test failures with only a minor slowdown to run the tests.', '10.1145/3395363.3397364', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '298--311', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397364', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/LamSOZE020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (32, 'Higher income, larger loan? monotonicity testing of machine learning models', 'Today, machine learning (ML) models are increasingly applied in decision making. This induces an urgent need for quality assurance of ML models with respect to (often domain-dependent) requirements. Monotonicity is one such requirement. It specifies a software as \'\'learned\'\' by an ML algorithm to give an increasing prediction with the increase of some attribute values. While there exist multiple ML algorithms for ensuring monotonicity of the generated model, approaches for checking monotonicity, in particular of black-box models are largely lacking. \n In this work, we propose verification-based testing of monotonicity, i.e., the formal computation of test inputs on a white-box model via verification technology, and the automatic inference of this approximating white-box model from the black-box model under test. On the white-box model, the space of test inputs can be systematically explored by a directed computation of test cases. The empirical evaluation on 90 black-box models shows that verification-based testing can outperform adaptive random testing as well as property-based techniques with respect to effectiveness and efficiency.', '10.1145/3395363.3397352', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '200--210', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397352', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/SharmaW20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (33, 'Feedback-driven side-channel analysis for networked applications', 'Information leakage in software systems is a problem of growing importance. Networked applications can leak sensitive information even when they use encryption. For example, some characteristics of network packets, such as their size, timing and direction, are visible even for encrypted traffic. Patterns in these characteristics can be leveraged as side channels to extract information about secret values accessed by the application. In this paper, we present a new tool called AutoFeed for detecting and quantifying information leakage due to side channels in networked software applications. AutoFeed profiles the target system and automatically explores the input space, explores the space of output features that may leak information, quantifies the information leakage, and identifies the top-leaking features. Given a set of input mutators and a small number of initial inputs provided by the user, AutoFeed iteratively mutates inputs and periodically updates its leakage estimations to identify the features that leak the greatest amount of information about the secret of interest. AutoFeed uses a feedback loop for incremental profiling, and a stopping criterion that terminates the analysis when the leakage estimation for the top-leaking features converges. AutoFeed also automatically assigns weights to mutators in order to focus the search of the input space on exploring dimensions that are relevant to the leakage quantification. Our experimental evaluation on the benchmarks shows that AutoFeed is effective in detecting and quantifying information leaks in networked applications.', '10.1145/3395363.3397365', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '260--271', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397365', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/KadronRB20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (34, 'Scalable analysis of interaction threats in IoT systems', 'The ubiquity of Internet of Things (IoT) and our growing reliance on IoT apps are leaving us more vulnerable to safety and security threats than ever before. Many of these threats are manifested at the interaction level, where undesired or malicious coordinations between apps and physical devices can lead to intricate safety and security issues. This paper presents IoTCOM, an approach to automatically discover such hidden and unsafe interaction threats in a compositional and scalable fashion. It is backed with auto-mated program analysis and formally rigorous violation detection engines. IoTCOM relies on program analysis to automatically infer the relevant app’s behavior. Leveraging a novel strategy to trim the extracted app’s behavior prior to translating them to analyzable formal specifications,IoTCOM mitigates the state explosion associated with formal analysis. Our experiments with numerous bundles of real-world IoT apps have corroborated IoTCOM’s ability to effectively detect a broad spectrum of interaction threats triggered through cyber and physical channels, many of which were previously unknown, and to significantly outperform the existing techniques in terms of scalability.', '10.1145/3395363.3397347', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '272--285', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397347', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/AlhanahnahSB20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (35, 'Abstracting failure-inducing inputs', 'A program fails. Under which circumstances does the failure occur? Starting with a single failure-inducing input (\"The input ((4)) fails\") and an input grammar, the DDSET algorithm uses systematic tests to automatically generalize the input to an abstract failure-inducing input that contains both (concrete) terminal symbols and (abstract) nonterminal symbols from the grammar—for instance, \"((<expr>))\", which represents any expression <expr> in double parentheses. Such an abstract failure-inducing input can be used (1) as a debugging diagnostic, characterizing the circumstances under which a failure occurs (\"The error occurs whenever an expression is enclosed in double parentheses\"); (2) as a producer of additional failure-inducing tests to help design and validate fixes and repair candidates (\"The inputs ((1)), ((3 * 4)), and many more also fail\"). In its evaluation on real-world bugs in JavaScript, Clojure, Lua, and UNIX command line utilities, DDSET’s abstract failure-inducing inputs provided to-the-point diagnostics, and precise producers for further failure inducing inputs.', '10.1145/3395363.3397349', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '237--248', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397349', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/GopinathKHSZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (36, 'Scaffle: bug localization on millions of files', 'Despite all efforts to avoid bugs, software sometimes crashes in the field, leaving crash traces as the only information to localize the problem. Prior approaches on localizing where to fix the root cause of a crash do not scale well to ultra-large scale, heterogeneous code bases that contain millions of code files written in multiple programming languages. This paper presents Scaffle, the first scalable bug localization technique, which is based on the key insight to divide the problem into two easier sub-problems. First, a trained machine learning model predicts which lines of a raw crash trace are most informative for localizing the bug. Then, these lines are fed to an information retrieval-based search engine to retrieve file paths in the code base, predicting which file to change to address the crash. The approach does not make any assumptions about the format of a crash trace or the language that produces it. We evaluate Scaffle with tens of thousands of crash traces produced by a large-scale industrial code base at Facebook that contains millions of possible bug locations and that powers tools used by billions of people. The results show that the approach correctly predicts the file to fix for 40% to 60% (50% to 70%) of all crash traces within the top-1 (top-5) predictions. Moreover, Scaffle improves over several baseline approaches, including an existing classification-based approach, a scalable variant of existing information retrieval-based approaches, and a set of hand-tuned, industrially deployed heuristics.', '10.1145/3395363.3397356', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '225--236', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397356', 'Wed, 22 Jul 2020 16:06:01 +0200', 'https://dblp.org/rec/conf/issta/PradelMQMM020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (37, 'Detecting flaky tests in probabilistic and machine learning applications', 'Probabilistic programming systems and machine learning frameworks like Pyro, PyMC3, TensorFlow, and PyTorch provide scalable and efficient primitives for inference and training. However, such operations are non-deterministic. Hence, it is challenging for developers to write tests for applications that depend on such frameworks, often resulting in flaky tests – tests which fail non-deterministically when run on the same version of code. \n In this paper, we conduct the first extensive study of flaky tests in this domain. In particular, we study the projects that depend on four frameworks: Pyro, PyMC3, TensorFlow-Probability, and PyTorch. We identify 75 bug reports/commits that deal with flaky tests, and we categorize the common causes and fixes for them. This study provides developers with useful insights on dealing with flaky tests in this domain. \n Motivated by our study, we develop a technique, FLASH, to systematically detect flaky tests due to assertions passing and failing in different runs on the same code. These assertions fail due to differences in the sequence of random numbers in different runs of the same test. FLASH exposes such failures, and our evaluation on 20 projects results in 11 previously-unknown flaky tests that we reported to developers.', '10.1145/3395363.3397366', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '211--224', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397366', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/0001SCZJM20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (38, 'Detecting and understanding real-world differential performance bugs in machine learning libraries', 'Programming errors that degrade the performance of systems are widespread, yet there is very little tool support for finding and diagnosing these bugs. We present a method and a tool based on differential performance analysis---we find inputs for which the performance varies widely, despite having the same size. To ensure that the differences in the performance are robust (i.e. hold also for large inputs), we compare the performance of not only single inputs, but of classes of inputs, where each class has similar inputs parameterized by their size. Thus, each class is represented by a performance function from the input size to performance. Importantly, we also provide an explanation for why the performance differs in a form that can be readily used to fix a performance bug. The two main phases in our method are discovery with fuzzing and explanation with decision tree classifiers, each of which is supported by clustering. First, we propose an evolutionary fuzzing algorithm to generate inputs that characterize different performance functions. For this fuzzing task, the unique challenge is that we not only need the input class with the worst performance, but rather a set of classes exhibiting differential performance. We use clustering to merge similar input classes which significantly improves the efficiency of our fuzzer. Second, we explain the differential performance in terms of program inputs and internals (e.g., methods and conditions). We adapt discriminant learning approaches with clustering and decision trees to localize suspicious code regions. We applied our techniques on a set of micro-benchmarks and real-world machine learning libraries. On a set of micro-benchmarks, we show that our approach outperforms state-of-the-art fuzzers in finding inputs to characterize differential performance. On a set of case-studies, we discover and explain multiple performance bugs in popular machine learning frameworks, for instance in implementations of logistic regression in scikit-learn. Four of these bugs, reported first in this paper, have since been fixed by the developers.', '10.1145/3395363.3404540', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '189--199', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3404540', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/Tizpaz-NiariC020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (39, 'Empirically revisiting and enhancing IR-based test-case prioritization', 'Test-case prioritization (TCP) aims to detect regression bugs faster via reordering the tests run. While TCP has been studied for over 20 years, it was almost always evaluated using seeded faults/mutants as opposed to using real test failures. In this work, we study the recent change-aware information retrieval (IR) technique for TCP. Prior work has shown it performing better than traditional coverage-based TCP techniques, but it was only evaluated on a small-scale dataset with a cost-unaware metric based on seeded faults/mutants. We extend the prior work by conducting a much larger and more realistic evaluation as well as proposing enhancements that substantially improve the performance. In particular, we evaluate the original technique on a large-scale, real-world software-evolution dataset with real failures using both cost-aware and cost-unaware metrics under various configurations. Also, we design and evaluate hybrid techniques combining the IR features, historical test execution time, and test failure frequencies. Our results show that the change-aware IR technique outperforms stateof-the-art coverage-based techniques in this real-world setting, and our hybrid techniques improve even further upon the original IR technique. Moreover, we show that flaky tests have a substantial impact on evaluating the change-aware TCP techniques based on real test failures.', '10.1145/3395363.3397383', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '324--336', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397383', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/PengSZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (40, '{WEIZZ:} automatic grey-box fuzzing for structured binary formats', 'Fuzzing technologies have evolved at a fast pace in recent years, revealing bugs in programs with ever increasing depth and speed. Applications working with complex formats are however more difficult to take on, as inputs need to meet certain format-specific characteristics to get through the initial parsing stage and reach deeper behaviors of the program. \n Unlike prior proposals based on manually written format specifications, we propose a technique to automatically generate and mutate inputs for unknown chunk-based binary formats. We identify dependencies between input bytes and comparison instructions, and use them to assign tags that characterize the processing logic of the program. Tags become the building block for structure-aware mutations involving chunks and fields of the input. \n Our technique can perform comparably to structure-aware fuzzing proposals that require human assistance. Our prototype implementation WEIZZ revealed 16 unknown bugs in widely used programs.', '10.1145/3395363.3397372', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '1--13', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397372', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/FioraldiDC20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (41, 'Reinforcement learning based curiosity-driven testing of Android applications', 'Mobile applications play an important role in our daily life, while it still remains a challenge to guarantee their correctness. Model-based and systematic approaches have been applied to Android GUI testing. However, they do not show significant advantages over random approaches because of limitations such as imprecise models and poor scalability. In this paper, we propose Q-testing, a reinforcement learning based approach which benefits from both random and model-based approaches to automated testing of Android applications. Q-testing explores the Android apps with a curiosity-driven strategy that utilizes a memory set to record part of previously visited states and guides the testing towards unfamiliar functionalities. A state comparison module, which is a neural network trained by plenty of collected samples, is novelly employed to divide different states at the granularity of functional scenarios. It can determine the reinforcement learning reward in Q-testing and help the curiosity-driven strategy explore different functionalities efficiently. We conduct experiments on 50 open-source applications where Q-testing outperforms the state-of-the-art and state-of-practice Android GUI testing tools in terms of code coverage and fault detection. So far, 22 of our reported faults have been confirmed, among which 7 have been fixed.', '10.1145/3395363.3397354', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '153--164', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397354', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/PanHWZL20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (42, 'Effective white-box testing of deep neural networks with adaptive neuron-selection strategy', 'We present Adapt, a new white-box testing technique for deep neural networks. As deep neural networks are increasingly used in safety-first applications, testing their behavior systematically has become a critical problem. Accordingly, various testing techniques for deep neural networks have been proposed in recent years. However, neural network testing is still at an early stage and existing techniques are not yet sufficiently effective. In this paper, we aim to advance this field, in particular white-box testing approaches for neural networks, by identifying and addressing a key limitation of existing state-of-the-arts. We observe that the so-called neuron-selection strategy is a critical component of white-box testing and propose a new technique that effectively employs the strategy by continuously adapting it to the ongoing testing process. Experiments with real-world network models and datasets show that Adapt is remarkably more effective than existing testing techniques in terms of coverage and adversarial inputs found.', '10.1145/3395363.3397346', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '165--176', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397346', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/LeeCLO20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (43, 'Data loss detector: automatically revealing data loss bugs in Android apps', 'Android apps must work correctly even if their execution is interrupted by external events. For instance, an app must work properly even if a phone call is received, or after its layout is redrawn because the smartphone has been rotated. Since these events may require destroying, when the execution is interrupted, and recreating, when the execution is resumed, the foreground activity of the app, the only way to prevent the loss of state information is to save and restore it. This behavior must be explicitly implemented by app developers, who often miss to implement it properly, releasing apps affected by data loss problems, that is, apps that may lose state information when their execution is interrupted. Although several techniques can be used to automatically generate test cases for Android apps, the obtained test cases seldom include the interactions and the checks necessary to exercise and reveal data loss faults. To address this problem, this paper presents Data Loss Detector (DLD), a test case generation technique that integrates an exploration strategy, data-loss-revealing actions, and two customized oracle strategies for the detection of data loss failures. DLD revealed 75% of the faults in a benchmark of 54 Android app releases affected by 110 known data loss faults, and also revealed unknown data loss problems, outperforming competing approaches.', '10.1145/3395363.3397379', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '141--152', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397379', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/RiganelliMRMM20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (44, 'DeepGini: prioritizing massive tests to enhance the robustness of deep neural networks', 'Deep neural networks (DNN) have been deployed in many software systems to assist in various classification tasks. In company with the fantastic effectiveness in classification, DNNs could also exhibit incorrect behaviors and result in accidents and losses. Therefore, testing techniques that can detect incorrect DNN behaviors and improve DNN quality are extremely necessary and critical. However, the testing oracle, which defines the correct output for a given input, is often not available in the automated testing. To obtain the oracle information, the testing tasks of DNN-based systems usually require expensive human efforts to label the testing data, which significantly slows down the process of quality assurance. \n To mitigate this problem, we propose DeepGini, a test prioritization technique designed based on a statistical perspective of DNN. Such a statistical perspective allows us to reduce the problem of measuring misclassification probability to the problem of measuring set impurity, which allows us to quickly identify possibly-misclassified tests. To evaluate, we conduct an extensive empirical study on popular datasets and prevalent DNN models. The experimental results demonstrate that DeepGini outperforms existing coverage-based techniques in prioritizing tests regarding both effectiveness and efficiency. Meanwhile, we observe that the tests prioritized at the front by DeepGini are more effective in improving the DNN quality in comparison with the coverage-based techniques.', '10.1145/3395363.3397357', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '177--188', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397357', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/FengSGWF020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (45, 'Running symbolic execution forever', 'When symbolic execution is used to analyse real-world applications, it often consumes all available memory in a relatively short amount of time, sometimes making it impossible to analyse an application for an extended period. In this paper, we present a technique that can record an ongoing symbolic execution analysis to disk and selectively restore paths of interest later, making it possible to run symbolic execution indefinitely. To be successful, our approach addresses several essential research challenges related to detecting divergences on re-execution, storing long-running executions efficiently, changing search heuristics during re-execution, and providing a global view of the stored execution. Our extensive evaluation of 93 Linux applications shows that our approach is practical, enabling these applications to run for days while continuing to explore new execution paths.', '10.1145/3395363.3397360', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '63--74', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397360', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/BusseNC20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (46, 'Automated classification of actions in bug reports of mobile apps', 'When users encounter problems with mobile apps, they may commit such problems to developers as bug reports. To facilitate the processing of bug reports, researchers proposed approaches to validate the reported issues automatically according to the \n specified in bug reports. Although such approaches have achieved high success rate in reproducing the reported issues, they often rely on a predefined vocabulary to identify and classify actions in bug reports. However, such manually constructed vocabulary and classification have significant limitations. It is challenging for the vocabulary to cover all potential action words because users may describe the same action with different words. Besides that, classification of actions solely based on the action words could be inaccurate because the same action word, appearing in different contexts, may have different meaning and thus belongs to different action categories. To this end, in this paper we propose an automated approach, called \n, to identify and classify action words in Mobile apps’ bug reports. For a given bug report, it first identifies action words based on natural language processing. For each of the resulting action words, \n extracts its contexts, i.e., its enclosing segment, the associated UI target, and the type of its target element by both natural language processing and static analysis of the associated app. The action word and its contexts are then fed into a machine learning based classifier that predicts the category of the given action word in the given context. To train the classifier, we manually labelled 1,202 actions words from 525 bug reports that are associated with 207 apps. Our evaluation results on manually labelled data suggested that \n was accurate with high accuracy varying from 95% to 96.7%. We also investigated to what extent \n could further improve existing approaches (i.e., Yakusu and ReCDroid) in reproducing bug reports. Our evaluation results suggested that integrating \n into existing approaches significantly improved the success rates of ReCDroid and Yakusu by 22.7% = (69.2%-56.4%)/56.4% and 22.9%= (62.7%-51%)/51%, respectively.', '10.1145/3395363.3397355', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '128--140', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397355', 'Tue, 01 Sep 2020 19:50:08 +0200', 'https://dblp.org/rec/conf/issta/LiuSJJ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (47, 'Can automated program repair refine fault localization? a unified debugging approach', 'A large body of research efforts have been dedicated to automated software debugging, including both automated fault localization and program repair. However, existing fault localization techniques have limited effectiveness on real-world software systems while even the most advanced program repair techniques can only fix a small ratio of real-world bugs. Although fault localization and program repair are inherently connected, their only existing connection in the literature is that program repair techniques usually use off-the-shelf fault localization techniques (e.g., Ochiai) to determine the potential candidate statements/elements for patching. In this work, we propose the unified debugging approach to unify the two areas in the other direction for the first time, i.e., can program repair in turn help with fault localization? In this way, we not only open a new dimension for more powerful fault localization, but also extend the application scope of program repair to all possible bugs (not only the bugs that can be directly automatically fixed). We have designed ProFL to leverage patch-execution results (from program repair) as the feedback information for fault localization. The experimental results on the widely used Defects4J benchmark show that the basic ProFL can already at least localize 37.61% more bugs within Top-1 than state-of-the-art spectrum and mutation based fault localization. Furthermore, ProFL can boost state-of-the-art fault localization via both unsupervised and supervised learning. Meanwhile, we have demonstrated ProFL\'s effectiveness under different settings and through a case study within Alipay, a popular online payment system with over 1 billion global users.', '10.1145/3395363.3397351', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '75--87', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397351', 'Thu, 28 Jan 2021 08:22:48 +0100', 'https://dblp.org/rec/conf/issta/LouGLZZHZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (48, 'Relocatable addressing model for symbolic execution', 'Symbolic execution (SE) is a widely used program analysis technique. Existing SE engines model the memory space by associating memory objects with concrete addresses, where the representation of each allocated object is determined during its allocation. We present a novel addressing model where the underlying representation of an allocated object can be dynamically modified even after its allocation, by using symbolic addresses rather than concrete ones. We demonstrate the benefits of our model in two application scenarios: dynamic inter- and intra-object partitioning. In the former, we show how the recently proposed segmented memory model can be improved by dynamically merging several object representations into a single one, rather than doing that a-priori using static pointer analysis. In the latter, we show how the cost of solving array theory constraints can be reduced by splitting the representations of large objects into multiple smaller ones. Our preliminary results show that our approach can significantly improve the overall effectiveness of the symbolic exploration.', '10.1145/3395363.3397363', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '51--62', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397363', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/TrabishR20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (49, 'Detecting and diagnosing energy issues for mobile applications', 'Energy efficiency is an important criterion to judge the quality of mobile apps, but one third of our randomly sampled apps suffer from energy issues that can quickly drain battery power. To understand these issues, we conducted an empirical study on 27 well-maintained apps such as Chrome and Firefox, whose issue tracking systems are publicly accessible. Our study revealed that the main root causes of energy issues include unnecessary workload and excessively frequent operations. Surprisingly, these issues are beyond the application of present technology on energy issue detection. We also found that 25.0% of energy issues can only manifest themselves under specific contexts such as poor network performance, but such contexts are again neglected by present technology. In this paper, we propose a novel testing framework for detecting energy issues in real-world mobile apps. Our framework examines apps with well-designed input sequences and runtime contexts. To identify the root causes mentioned above, we employed a machine learning algorithm to cluster the workloads and further evaluate their necessity. For the issues concealed by the specific contexts, we carefully set up several execution contexts to catch them. More importantly, we designed leading edge technology, e.g. pre-designing input sequences with potential energy overuse and tuning tests on-the-fly, to achieve high efficacy in detecting energy issues. A large-scale evaluation shows that 91.6% issues detected in our experiments were previously unknown to developers. On average, these issues double the energy costs of the apps. Our testing technique achieves a low number of false positives.', '10.1145/3395363.3397350', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '115--127', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397350', 'Sat, 05 Sep 2020 17:58:56 +0200', 'https://dblp.org/rec/conf/issta/0002Y0GW20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (50, 'Automated repair of feature interaction failures in automated driving systems', 'In the past years, several automated repair strategies have been proposed to fix bugs in individual software programs without any human intervention. There has been, however, little work on how automated repair techniques can resolve failures that arise at the system-level and are caused by undesired interactions among different system components or functions. Feature interaction failures are common in complex systems such as autonomous cars that are typically built as a composition of independent features (i.e., units of functionality). In this paper, we propose a repair technique to automatically resolve undesired feature interaction failures in automated driving systems (ADS) that lead to the violation of system safety requirements. Our repair strategy achieves its goal by (1) localizing faults spanning several lines of code, (2) simultaneously resolving multiple interaction failures caused by independent faults, (3) scaling repair strategies from the unit-level to the system-level, and (4) resolving failures based on their order of severity. We have evaluated our approach using two industrial ADS containing four features. Our results show that our repair strategy resolves the undesired interaction failures in these two systems in less than 16h and outperforms existing automated repair techniques.', '10.1145/3395363.3397386', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '88--100', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397386', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/AbdessalemPNBS20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (51, 'CoCoNuT: combining context-aware neural translation models using ensemble for program repair', 'Automated generate-and-validate (GV) program repair techniques (APR) typically rely on hard-coded rules, thus only fixing bugs following specific fix patterns. These rules require a significant amount of manual effort to discover and it is hard to adapt these rules to different programming languages. \nTo address these challenges, we propose a new G&V technique—CoCoNuT, which uses ensemble learning on the combination of convolutional neural networks (CNNs) and a new context-aware neural machine translation (NMT) architecture to automatically fix bugs in multiple programming languages. To better represent the context of a bug, we introduce a new context-aware NMT architecture that represents the buggy source code and its surrounding context separately. CoCoNuT uses CNNs instead of recurrent neural networks (RNNs), since CNN layers can be stacked to extract hierarchical features and better model source code at different granularity levels (e.g., statements and functions). In addition, CoCoNuT takes advantage of the randomness in hyperparameter tuning to build multiple models that fix different bugs and combines these models using ensemble learning to fix more bugs. \nOur evaluation on six popular benchmarks for four programming languages (Java, C, Python, and JavaScript) shows that CoCoNuT correctly fixes (i.e., the first generated patch is semantically equivalent to the developer’s patch) 509 bugs, including 309 bugs that are fixed by none of the 27 techniques with which we compare.', '10.1145/3395363.3397369', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '101--114', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397369', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/LutellierPPLW020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (52, 'Active fuzzing for testing and securing cyber-physical systems', 'Cyber-physical systems (CPSs) in critical infrastructure face a pervasive threat from attackers, motivating research into a variety of countermeasures for securing them. Assessing the effectiveness of these countermeasures is challenging, however, as realistic benchmarks of attacks are difficult to manually construct, blindly testing is ineffective due to the enormous search spaces and resource requirements, and intelligent fuzzing approaches require impractical amounts of data and network access. In this work, we propose \n, an automatic approach for finding test suites of packet-level CPS network attacks, targeting scenarios in which attackers can observe sensors and manipulate packets, but have no existing knowledge about the payload encodings. Our approach learns regression models for predicting sensor values that will result from sampled network packets, and uses these predictions to guide a search for payload manipulations (i.e. bit flips) most likely to drive the CPS into an unsafe state. Key to our solution is the use of \n, which iteratively updates the models by sampling payloads that are estimated to maximally improve them. We evaluate the efficacy of active fuzzing by implementing it for a water purification plant testbed, finding it can automatically discover a test suite of flow, pressure, and over/underflow attacks, all with substantially less time, data, and network access than the most comparable approach. Finally, we demonstrate that our prediction models can also be utilised as countermeasures themselves, implementing them as anomaly detectors and early warning systems.', '10.1145/3395363.3397376', 2, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '14--26', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397376', 'Sat, 05 Sep 2020 17:58:56 +0200', 'https://dblp.org/rec/conf/issta/0001XP0020.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (53, 'Learning input tokens for effective fuzzing', 'Modern fuzzing tools like AFL operate at a lexical level: They explore the input space of tested programs one byte after another. For inputs with complex syntactical properties, this is very inefficient, as keywords and other tokens have to be composed one character at a time. Fuzzers thus allow to specify dictionaries listing possible tokens the input can be composed from; such dictionaries speed up fuzzers dramatically. Also, fuzzers make use of dynamic tainting to track input tokens and infer values that are expected in the input validation phase. Unfortunately, such tokens are usually implicitly converted to program specific values which causes a loss of the taints attached to the input data in the lexical phase. In this paper, we present a technique to extend dynamic tainting to not only track explicit data flows but also taint implicitly converted data without suffering from taint explosion. This extension makes it possible to augment existing techniques and automatically infer a set of tokens and seed inputs for the input language of a program given nothing but the source code. Specifically targeting the lexical analysis of an input processor, our lFuzzer test generator systematically explores branches of the lexical analysis, producing a set of tokens that fully cover all decisions seen. The resulting set of tokens can be directly used as a dictionary for fuzzing. Along with the token extraction seed inputs are generated which give further fuzzing processes a head start. In our experiments, the lFuzzer-AFL combination achieves up to 17% more coverage on complex input formats like json, lisp, tinyC, and JavaScript compared to AFL.', '10.1145/3395363.3397348', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '27--37', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397348', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/MathisGZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (54, 'Fast bit-vector satisfiability', 'SMT solving is often a major source of cost in a broad range of techniques such as symbolic program analysis. Thus, speeding up SMT solving is still an urgent requirement. A dominant approach, which is known as eager SMT solving, is to reduce a first-order formula to a pure Boolean formula, which is handed to an expensive SAT solver to determine the satisfiability. We observe that the SAT solver can utilize the knowledge in the first-order formula to boost its solving efficiency. Unfortunately, despite much progress, it is still not clear how to make use of the knowledge in an eager SMT solver. This paper addresses the problem by introducing a new and fast method, which utilizes the interval and data-dependence information learned from the first-order formulas. \n We have implemented the approach as a tool called Trident and evaluated it on three symbolic analyzers (Angr, Qsym, and Pinpoint). The experimental results, based on seven million SMT solving instances generated for thirty real-world software systems, show that Trident significantly reduces the total solving time from 2.9X to 7.9X over three state-of-the-art SMT solvers (Z3, CVC4, and Boolector), without sacrificing the number of solved instances. We also demonstrate that Trident achieves end-to-end speedups for three program analysis clients by 1.9X, 1.6X, and 2.4X, respectively.', '10.1145/3395363.3397378', 0, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '38--50', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397378', 'Wed, 15 Jul 2020 16:06:56 +0200', 'https://dblp.org/rec/conf/issta/YaoSHZ20.bib', 'dblp computer science bibliography, https://dblp.org');
INSERT INTO `paper` VALUES (55, 'Debugging the performance of Maven\'s test isolation: experience report', 'Testing is the most common approach used in industry for checking software correctness. Developers frequently practice reliable testing-executing individual tests in isolation from each other-to avoid test failures caused by test-order dependencies and shared state pollution (e.g., when tests mutate static fields). A common way of doing this is by running each test as a separate process. Unfortunately, this is known to introduce substantial overhead. This experience report describes our efforts to better understand the sources of this overhead and to create a system to confirm the minimal overhead possible. We found that different build systems use different mechanisms for communicating between these multiple processes, and that because of this design decision, running tests with some build systems could be faster than with others. Through this inquiry we discovered a significant performance bug in Apache Maven’s test running code, which slowed down test execution by on average 350 milliseconds per-test when compared to a competing build system, Ant. When used for testing real projects, this can result in a significant reduction in testing time. We submitted a patch for this bug which has been integrated into the Apache Maven build system, and describe our ongoing efforts to improve Maven’s test execution tooling.', '10.1145/3395363.3397381', 1, '{ISSTA} \'20: 29th {ACM} {SIGSOFT} International Symposium on Software Testing and Analysis, Virtual Event, USA, July 18-22, 2020', '249--259', '{ACM}', '2020', 'https://doi.org/10.1145/3395363.3397381', 'Mon, 27 Jul 2020 07:36:48 +0200', 'https://dblp.org/rec/conf/issta/NieCCMBG20.bib', 'dblp computer science bibliography, https://dblp.org');

-- ----------------------------
-- Table structure for paper_author_relation
-- ----------------------------
DROP TABLE IF EXISTS `paper_author_relation`;
CREATE TABLE `paper_author_relation`  (
  `relation_id` int(11) NOT NULL AUTO_INCREMENT,
  `paper_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`relation_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 243 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of paper_author_relation
-- ----------------------------
INSERT INTO `paper_author_relation` VALUES (1, 1, 1);
INSERT INTO `paper_author_relation` VALUES (2, 1, 2);
INSERT INTO `paper_author_relation` VALUES (3, 1, 3);
INSERT INTO `paper_author_relation` VALUES (4, 1, 4);
INSERT INTO `paper_author_relation` VALUES (5, 1, 5);
INSERT INTO `paper_author_relation` VALUES (6, 2, 6);
INSERT INTO `paper_author_relation` VALUES (7, 2, 7);
INSERT INTO `paper_author_relation` VALUES (8, 2, 8);
INSERT INTO `paper_author_relation` VALUES (9, 2, 9);
INSERT INTO `paper_author_relation` VALUES (10, 2, 10);
INSERT INTO `paper_author_relation` VALUES (11, 2, 11);
INSERT INTO `paper_author_relation` VALUES (12, 3, 12);
INSERT INTO `paper_author_relation` VALUES (13, 3, 13);
INSERT INTO `paper_author_relation` VALUES (14, 3, 14);
INSERT INTO `paper_author_relation` VALUES (15, 3, 15);
INSERT INTO `paper_author_relation` VALUES (16, 3, 16);
INSERT INTO `paper_author_relation` VALUES (17, 3, 17);
INSERT INTO `paper_author_relation` VALUES (18, 4, 18);
INSERT INTO `paper_author_relation` VALUES (19, 4, 19);
INSERT INTO `paper_author_relation` VALUES (20, 4, 20);
INSERT INTO `paper_author_relation` VALUES (21, 4, 21);
INSERT INTO `paper_author_relation` VALUES (22, 4, 22);
INSERT INTO `paper_author_relation` VALUES (23, 4, 23);
INSERT INTO `paper_author_relation` VALUES (24, 4, 24);
INSERT INTO `paper_author_relation` VALUES (25, 5, 25);
INSERT INTO `paper_author_relation` VALUES (26, 5, 26);
INSERT INTO `paper_author_relation` VALUES (27, 5, 27);
INSERT INTO `paper_author_relation` VALUES (28, 5, 28);
INSERT INTO `paper_author_relation` VALUES (29, 5, 29);
INSERT INTO `paper_author_relation` VALUES (30, 5, 30);
INSERT INTO `paper_author_relation` VALUES (31, 5, 31);
INSERT INTO `paper_author_relation` VALUES (32, 5, 32);
INSERT INTO `paper_author_relation` VALUES (33, 6, 33);
INSERT INTO `paper_author_relation` VALUES (34, 6, 34);
INSERT INTO `paper_author_relation` VALUES (35, 7, 35);
INSERT INTO `paper_author_relation` VALUES (36, 8, 36);
INSERT INTO `paper_author_relation` VALUES (37, 8, 37);
INSERT INTO `paper_author_relation` VALUES (38, 8, 38);
INSERT INTO `paper_author_relation` VALUES (39, 8, 39);
INSERT INTO `paper_author_relation` VALUES (40, 8, 40);
INSERT INTO `paper_author_relation` VALUES (41, 8, 41);
INSERT INTO `paper_author_relation` VALUES (42, 9, 42);
INSERT INTO `paper_author_relation` VALUES (43, 9, 43);
INSERT INTO `paper_author_relation` VALUES (44, 10, 44);
INSERT INTO `paper_author_relation` VALUES (45, 10, 45);
INSERT INTO `paper_author_relation` VALUES (46, 10, 46);
INSERT INTO `paper_author_relation` VALUES (47, 11, 47);
INSERT INTO `paper_author_relation` VALUES (48, 12, 48);
INSERT INTO `paper_author_relation` VALUES (49, 12, 49);
INSERT INTO `paper_author_relation` VALUES (50, 12, 50);
INSERT INTO `paper_author_relation` VALUES (51, 12, 51);
INSERT INTO `paper_author_relation` VALUES (52, 12, 52);
INSERT INTO `paper_author_relation` VALUES (53, 13, 53);
INSERT INTO `paper_author_relation` VALUES (54, 13, 54);
INSERT INTO `paper_author_relation` VALUES (55, 13, 55);
INSERT INTO `paper_author_relation` VALUES (56, 13, 56);
INSERT INTO `paper_author_relation` VALUES (57, 13, 57);
INSERT INTO `paper_author_relation` VALUES (58, 13, 58);
INSERT INTO `paper_author_relation` VALUES (59, 13, 59);
INSERT INTO `paper_author_relation` VALUES (60, 14, 60);
INSERT INTO `paper_author_relation` VALUES (61, 14, 61);
INSERT INTO `paper_author_relation` VALUES (62, 14, 62);
INSERT INTO `paper_author_relation` VALUES (63, 14, 63);
INSERT INTO `paper_author_relation` VALUES (64, 15, 64);
INSERT INTO `paper_author_relation` VALUES (65, 15, 65);
INSERT INTO `paper_author_relation` VALUES (66, 15, 66);
INSERT INTO `paper_author_relation` VALUES (67, 15, 67);
INSERT INTO `paper_author_relation` VALUES (68, 16, 68);
INSERT INTO `paper_author_relation` VALUES (69, 16, 69);
INSERT INTO `paper_author_relation` VALUES (70, 16, 70);
INSERT INTO `paper_author_relation` VALUES (71, 16, 71);
INSERT INTO `paper_author_relation` VALUES (72, 16, 72);
INSERT INTO `paper_author_relation` VALUES (73, 16, 73);
INSERT INTO `paper_author_relation` VALUES (74, 17, 74);
INSERT INTO `paper_author_relation` VALUES (75, 17, 75);
INSERT INTO `paper_author_relation` VALUES (76, 17, 76);
INSERT INTO `paper_author_relation` VALUES (77, 17, 77);
INSERT INTO `paper_author_relation` VALUES (78, 17, 78);
INSERT INTO `paper_author_relation` VALUES (79, 17, 79);
INSERT INTO `paper_author_relation` VALUES (80, 18, 80);
INSERT INTO `paper_author_relation` VALUES (81, 18, 81);
INSERT INTO `paper_author_relation` VALUES (82, 19, 82);
INSERT INTO `paper_author_relation` VALUES (83, 19, 83);
INSERT INTO `paper_author_relation` VALUES (84, 19, 84);
INSERT INTO `paper_author_relation` VALUES (85, 19, 85);
INSERT INTO `paper_author_relation` VALUES (86, 19, 86);
INSERT INTO `paper_author_relation` VALUES (87, 20, 87);
INSERT INTO `paper_author_relation` VALUES (88, 20, 88);
INSERT INTO `paper_author_relation` VALUES (89, 20, 89);
INSERT INTO `paper_author_relation` VALUES (90, 21, 90);
INSERT INTO `paper_author_relation` VALUES (91, 21, 91);
INSERT INTO `paper_author_relation` VALUES (92, 21, 92);
INSERT INTO `paper_author_relation` VALUES (93, 21, 93);
INSERT INTO `paper_author_relation` VALUES (94, 21, 94);
INSERT INTO `paper_author_relation` VALUES (95, 22, 95);
INSERT INTO `paper_author_relation` VALUES (96, 23, 96);
INSERT INTO `paper_author_relation` VALUES (97, 23, 97);
INSERT INTO `paper_author_relation` VALUES (98, 24, 98);
INSERT INTO `paper_author_relation` VALUES (99, 24, 99);
INSERT INTO `paper_author_relation` VALUES (100, 24, 100);
INSERT INTO `paper_author_relation` VALUES (101, 24, 101);
INSERT INTO `paper_author_relation` VALUES (102, 24, 102);
INSERT INTO `paper_author_relation` VALUES (103, 24, 103);
INSERT INTO `paper_author_relation` VALUES (104, 25, 104);
INSERT INTO `paper_author_relation` VALUES (105, 25, 105);
INSERT INTO `paper_author_relation` VALUES (106, 25, 106);
INSERT INTO `paper_author_relation` VALUES (107, 26, 107);
INSERT INTO `paper_author_relation` VALUES (108, 26, 108);
INSERT INTO `paper_author_relation` VALUES (109, 26, 109);
INSERT INTO `paper_author_relation` VALUES (110, 26, 110);
INSERT INTO `paper_author_relation` VALUES (111, 26, 111);
INSERT INTO `paper_author_relation` VALUES (112, 26, 112);
INSERT INTO `paper_author_relation` VALUES (113, 26, 113);
INSERT INTO `paper_author_relation` VALUES (114, 27, 114);
INSERT INTO `paper_author_relation` VALUES (115, 27, 115);
INSERT INTO `paper_author_relation` VALUES (116, 27, 116);
INSERT INTO `paper_author_relation` VALUES (117, 27, 117);
INSERT INTO `paper_author_relation` VALUES (118, 27, 118);
INSERT INTO `paper_author_relation` VALUES (119, 28, 119);
INSERT INTO `paper_author_relation` VALUES (120, 28, 120);
INSERT INTO `paper_author_relation` VALUES (121, 28, 121);
INSERT INTO `paper_author_relation` VALUES (122, 28, 122);
INSERT INTO `paper_author_relation` VALUES (123, 29, 123);
INSERT INTO `paper_author_relation` VALUES (124, 29, 124);
INSERT INTO `paper_author_relation` VALUES (125, 29, 125);
INSERT INTO `paper_author_relation` VALUES (126, 29, 126);
INSERT INTO `paper_author_relation` VALUES (127, 29, 127);
INSERT INTO `paper_author_relation` VALUES (128, 29, 128);
INSERT INTO `paper_author_relation` VALUES (129, 29, 129);
INSERT INTO `paper_author_relation` VALUES (130, 29, 130);
INSERT INTO `paper_author_relation` VALUES (131, 29, 131);
INSERT INTO `paper_author_relation` VALUES (132, 30, 132);
INSERT INTO `paper_author_relation` VALUES (133, 30, 133);
INSERT INTO `paper_author_relation` VALUES (134, 30, 134);
INSERT INTO `paper_author_relation` VALUES (135, 31, 135);
INSERT INTO `paper_author_relation` VALUES (136, 31, 136);
INSERT INTO `paper_author_relation` VALUES (137, 31, 137);
INSERT INTO `paper_author_relation` VALUES (138, 31, 138);
INSERT INTO `paper_author_relation` VALUES (139, 31, 139);
INSERT INTO `paper_author_relation` VALUES (140, 31, 140);
INSERT INTO `paper_author_relation` VALUES (141, 32, 141);
INSERT INTO `paper_author_relation` VALUES (142, 32, 142);
INSERT INTO `paper_author_relation` VALUES (143, 33, 143);
INSERT INTO `paper_author_relation` VALUES (144, 33, 144);
INSERT INTO `paper_author_relation` VALUES (145, 33, 145);
INSERT INTO `paper_author_relation` VALUES (146, 34, 146);
INSERT INTO `paper_author_relation` VALUES (147, 34, 147);
INSERT INTO `paper_author_relation` VALUES (148, 34, 148);
INSERT INTO `paper_author_relation` VALUES (149, 35, 149);
INSERT INTO `paper_author_relation` VALUES (150, 35, 150);
INSERT INTO `paper_author_relation` VALUES (151, 35, 151);
INSERT INTO `paper_author_relation` VALUES (152, 35, 152);
INSERT INTO `paper_author_relation` VALUES (153, 35, 153);
INSERT INTO `paper_author_relation` VALUES (154, 36, 154);
INSERT INTO `paper_author_relation` VALUES (155, 36, 155);
INSERT INTO `paper_author_relation` VALUES (156, 36, 156);
INSERT INTO `paper_author_relation` VALUES (157, 36, 157);
INSERT INTO `paper_author_relation` VALUES (158, 36, 158);
INSERT INTO `paper_author_relation` VALUES (159, 36, 159);
INSERT INTO `paper_author_relation` VALUES (160, 37, 160);
INSERT INTO `paper_author_relation` VALUES (161, 37, 161);
INSERT INTO `paper_author_relation` VALUES (162, 37, 162);
INSERT INTO `paper_author_relation` VALUES (163, 37, 163);
INSERT INTO `paper_author_relation` VALUES (164, 37, 164);
INSERT INTO `paper_author_relation` VALUES (165, 37, 165);
INSERT INTO `paper_author_relation` VALUES (166, 38, 166);
INSERT INTO `paper_author_relation` VALUES (167, 38, 167);
INSERT INTO `paper_author_relation` VALUES (168, 38, 168);
INSERT INTO `paper_author_relation` VALUES (169, 39, 169);
INSERT INTO `paper_author_relation` VALUES (170, 39, 170);
INSERT INTO `paper_author_relation` VALUES (171, 39, 171);
INSERT INTO `paper_author_relation` VALUES (172, 40, 172);
INSERT INTO `paper_author_relation` VALUES (173, 40, 173);
INSERT INTO `paper_author_relation` VALUES (174, 40, 174);
INSERT INTO `paper_author_relation` VALUES (175, 41, 175);
INSERT INTO `paper_author_relation` VALUES (176, 41, 176);
INSERT INTO `paper_author_relation` VALUES (177, 41, 177);
INSERT INTO `paper_author_relation` VALUES (178, 41, 178);
INSERT INTO `paper_author_relation` VALUES (179, 41, 179);
INSERT INTO `paper_author_relation` VALUES (180, 42, 180);
INSERT INTO `paper_author_relation` VALUES (181, 42, 181);
INSERT INTO `paper_author_relation` VALUES (182, 42, 182);
INSERT INTO `paper_author_relation` VALUES (183, 42, 183);
INSERT INTO `paper_author_relation` VALUES (184, 43, 184);
INSERT INTO `paper_author_relation` VALUES (185, 43, 185);
INSERT INTO `paper_author_relation` VALUES (186, 43, 186);
INSERT INTO `paper_author_relation` VALUES (187, 43, 187);
INSERT INTO `paper_author_relation` VALUES (188, 43, 188);
INSERT INTO `paper_author_relation` VALUES (189, 44, 189);
INSERT INTO `paper_author_relation` VALUES (190, 44, 190);
INSERT INTO `paper_author_relation` VALUES (191, 44, 191);
INSERT INTO `paper_author_relation` VALUES (192, 44, 192);
INSERT INTO `paper_author_relation` VALUES (193, 44, 193);
INSERT INTO `paper_author_relation` VALUES (194, 44, 194);
INSERT INTO `paper_author_relation` VALUES (195, 45, 195);
INSERT INTO `paper_author_relation` VALUES (196, 45, 196);
INSERT INTO `paper_author_relation` VALUES (197, 45, 197);
INSERT INTO `paper_author_relation` VALUES (198, 46, 198);
INSERT INTO `paper_author_relation` VALUES (199, 46, 199);
INSERT INTO `paper_author_relation` VALUES (200, 46, 200);
INSERT INTO `paper_author_relation` VALUES (201, 46, 201);
INSERT INTO `paper_author_relation` VALUES (202, 47, 202);
INSERT INTO `paper_author_relation` VALUES (203, 47, 203);
INSERT INTO `paper_author_relation` VALUES (204, 47, 204);
INSERT INTO `paper_author_relation` VALUES (205, 47, 205);
INSERT INTO `paper_author_relation` VALUES (206, 47, 206);
INSERT INTO `paper_author_relation` VALUES (207, 47, 207);
INSERT INTO `paper_author_relation` VALUES (208, 47, 208);
INSERT INTO `paper_author_relation` VALUES (209, 48, 209);
INSERT INTO `paper_author_relation` VALUES (210, 48, 210);
INSERT INTO `paper_author_relation` VALUES (211, 49, 211);
INSERT INTO `paper_author_relation` VALUES (212, 49, 212);
INSERT INTO `paper_author_relation` VALUES (213, 49, 213);
INSERT INTO `paper_author_relation` VALUES (214, 49, 214);
INSERT INTO `paper_author_relation` VALUES (215, 49, 215);
INSERT INTO `paper_author_relation` VALUES (216, 50, 216);
INSERT INTO `paper_author_relation` VALUES (217, 50, 217);
INSERT INTO `paper_author_relation` VALUES (218, 50, 218);
INSERT INTO `paper_author_relation` VALUES (219, 50, 219);
INSERT INTO `paper_author_relation` VALUES (220, 50, 220);
INSERT INTO `paper_author_relation` VALUES (221, 51, 221);
INSERT INTO `paper_author_relation` VALUES (222, 51, 222);
INSERT INTO `paper_author_relation` VALUES (223, 51, 223);
INSERT INTO `paper_author_relation` VALUES (224, 51, 224);
INSERT INTO `paper_author_relation` VALUES (225, 51, 225);
INSERT INTO `paper_author_relation` VALUES (226, 51, 226);
INSERT INTO `paper_author_relation` VALUES (227, 52, 227);
INSERT INTO `paper_author_relation` VALUES (228, 52, 228);
INSERT INTO `paper_author_relation` VALUES (229, 52, 229);
INSERT INTO `paper_author_relation` VALUES (230, 52, 230);
INSERT INTO `paper_author_relation` VALUES (231, 52, 231);
INSERT INTO `paper_author_relation` VALUES (232, 53, 232);
INSERT INTO `paper_author_relation` VALUES (233, 53, 233);
INSERT INTO `paper_author_relation` VALUES (234, 53, 234);
INSERT INTO `paper_author_relation` VALUES (235, 54, 235);
INSERT INTO `paper_author_relation` VALUES (236, 54, 236);
INSERT INTO `paper_author_relation` VALUES (237, 54, 237);
INSERT INTO `paper_author_relation` VALUES (238, 54, 238);
INSERT INTO `paper_author_relation` VALUES (239, 55, 239);
INSERT INTO `paper_author_relation` VALUES (240, 55, 240);
INSERT INTO `paper_author_relation` VALUES (241, 55, 241);
INSERT INTO `paper_author_relation` VALUES (242, 55, 242);
INSERT INTO `paper_author_relation` VALUES (243, 55, 243);
INSERT INTO `paper_author_relation` VALUES (244, 55, 244);

-- ----------------------------
-- Table structure for paper_keyword_relation
-- ----------------------------
DROP TABLE IF EXISTS `paper_keyword_relation`;
CREATE TABLE `paper_keyword_relation`  (
  `relation_id` int(11) NOT NULL AUTO_INCREMENT,
  `paper_id` int(11) NOT NULL,
  `keyword_id` int(11) NOT NULL,
  PRIMARY KEY (`relation_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 214 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of paper_keyword_relation
-- ----------------------------
INSERT INTO `paper_keyword_relation` VALUES (1, 1, 1);
INSERT INTO `paper_keyword_relation` VALUES (2, 1, 2);
INSERT INTO `paper_keyword_relation` VALUES (3, 1, 3);
INSERT INTO `paper_keyword_relation` VALUES (4, 2, 4);
INSERT INTO `paper_keyword_relation` VALUES (5, 2, 5);
INSERT INTO `paper_keyword_relation` VALUES (6, 2, 6);
INSERT INTO `paper_keyword_relation` VALUES (7, 2, 7);
INSERT INTO `paper_keyword_relation` VALUES (8, 3, 8);
INSERT INTO `paper_keyword_relation` VALUES (9, 3, 9);
INSERT INTO `paper_keyword_relation` VALUES (10, 3, 10);
INSERT INTO `paper_keyword_relation` VALUES (11, 4, 11);
INSERT INTO `paper_keyword_relation` VALUES (12, 4, 12);
INSERT INTO `paper_keyword_relation` VALUES (13, 4, 13);
INSERT INTO `paper_keyword_relation` VALUES (14, 5, 14);
INSERT INTO `paper_keyword_relation` VALUES (15, 5, 15);
INSERT INTO `paper_keyword_relation` VALUES (16, 5, 16);
INSERT INTO `paper_keyword_relation` VALUES (17, 5, 17);
INSERT INTO `paper_keyword_relation` VALUES (18, 6, 18);
INSERT INTO `paper_keyword_relation` VALUES (19, 6, 19);
INSERT INTO `paper_keyword_relation` VALUES (20, 6, 20);
INSERT INTO `paper_keyword_relation` VALUES (21, 6, 21);
INSERT INTO `paper_keyword_relation` VALUES (22, 6, 22);
INSERT INTO `paper_keyword_relation` VALUES (23, 7, 23);
INSERT INTO `paper_keyword_relation` VALUES (24, 7, 24);
INSERT INTO `paper_keyword_relation` VALUES (25, 7, 25);
INSERT INTO `paper_keyword_relation` VALUES (26, 7, 26);
INSERT INTO `paper_keyword_relation` VALUES (27, 8, 27);
INSERT INTO `paper_keyword_relation` VALUES (28, 8, 28);
INSERT INTO `paper_keyword_relation` VALUES (29, 8, 29);
INSERT INTO `paper_keyword_relation` VALUES (30, 9, 30);
INSERT INTO `paper_keyword_relation` VALUES (31, 9, 31);
INSERT INTO `paper_keyword_relation` VALUES (32, 9, 32);
INSERT INTO `paper_keyword_relation` VALUES (33, 10, 33);
INSERT INTO `paper_keyword_relation` VALUES (34, 10, 34);
INSERT INTO `paper_keyword_relation` VALUES (35, 10, 35);
INSERT INTO `paper_keyword_relation` VALUES (36, 10, 36);
INSERT INTO `paper_keyword_relation` VALUES (37, 11, 37);
INSERT INTO `paper_keyword_relation` VALUES (38, 11, 38);
INSERT INTO `paper_keyword_relation` VALUES (39, 11, 39);
INSERT INTO `paper_keyword_relation` VALUES (40, 11, 40);
INSERT INTO `paper_keyword_relation` VALUES (41, 12, 41);
INSERT INTO `paper_keyword_relation` VALUES (42, 12, 42);
INSERT INTO `paper_keyword_relation` VALUES (43, 12, 43);
INSERT INTO `paper_keyword_relation` VALUES (44, 12, 44);
INSERT INTO `paper_keyword_relation` VALUES (45, 13, 45);
INSERT INTO `paper_keyword_relation` VALUES (46, 13, 46);
INSERT INTO `paper_keyword_relation` VALUES (47, 13, 47);
INSERT INTO `paper_keyword_relation` VALUES (48, 13, 48);
INSERT INTO `paper_keyword_relation` VALUES (49, 14, 49);
INSERT INTO `paper_keyword_relation` VALUES (50, 14, 50);
INSERT INTO `paper_keyword_relation` VALUES (51, 14, 51);
INSERT INTO `paper_keyword_relation` VALUES (52, 14, 52);
INSERT INTO `paper_keyword_relation` VALUES (53, 14, 53);
INSERT INTO `paper_keyword_relation` VALUES (54, 15, 54);
INSERT INTO `paper_keyword_relation` VALUES (55, 15, 55);
INSERT INTO `paper_keyword_relation` VALUES (56, 15, 56);
INSERT INTO `paper_keyword_relation` VALUES (57, 15, 57);
INSERT INTO `paper_keyword_relation` VALUES (58, 16, 58);
INSERT INTO `paper_keyword_relation` VALUES (59, 16, 59);
INSERT INTO `paper_keyword_relation` VALUES (60, 16, 60);
INSERT INTO `paper_keyword_relation` VALUES (61, 17, 61);
INSERT INTO `paper_keyword_relation` VALUES (62, 17, 62);
INSERT INTO `paper_keyword_relation` VALUES (63, 17, 63);
INSERT INTO `paper_keyword_relation` VALUES (64, 17, 64);
INSERT INTO `paper_keyword_relation` VALUES (65, 17, 65);
INSERT INTO `paper_keyword_relation` VALUES (66, 17, 66);
INSERT INTO `paper_keyword_relation` VALUES (67, 18, 67);
INSERT INTO `paper_keyword_relation` VALUES (68, 18, 68);
INSERT INTO `paper_keyword_relation` VALUES (69, 18, 69);
INSERT INTO `paper_keyword_relation` VALUES (70, 19, 70);
INSERT INTO `paper_keyword_relation` VALUES (71, 19, 71);
INSERT INTO `paper_keyword_relation` VALUES (72, 19, 72);
INSERT INTO `paper_keyword_relation` VALUES (73, 20, 73);
INSERT INTO `paper_keyword_relation` VALUES (74, 20, 74);
INSERT INTO `paper_keyword_relation` VALUES (75, 20, 75);
INSERT INTO `paper_keyword_relation` VALUES (76, 20, 76);
INSERT INTO `paper_keyword_relation` VALUES (77, 21, 77);
INSERT INTO `paper_keyword_relation` VALUES (78, 21, 78);
INSERT INTO `paper_keyword_relation` VALUES (79, 21, 79);
INSERT INTO `paper_keyword_relation` VALUES (80, 22, 80);
INSERT INTO `paper_keyword_relation` VALUES (81, 22, 81);
INSERT INTO `paper_keyword_relation` VALUES (82, 22, 82);
INSERT INTO `paper_keyword_relation` VALUES (83, 22, 83);
INSERT INTO `paper_keyword_relation` VALUES (84, 23, 84);
INSERT INTO `paper_keyword_relation` VALUES (85, 23, 85);
INSERT INTO `paper_keyword_relation` VALUES (86, 23, 86);
INSERT INTO `paper_keyword_relation` VALUES (87, 23, 87);
INSERT INTO `paper_keyword_relation` VALUES (88, 23, 88);
INSERT INTO `paper_keyword_relation` VALUES (89, 23, 89);
INSERT INTO `paper_keyword_relation` VALUES (90, 23, 90);
INSERT INTO `paper_keyword_relation` VALUES (91, 23, 91);
INSERT INTO `paper_keyword_relation` VALUES (92, 23, 92);
INSERT INTO `paper_keyword_relation` VALUES (93, 23, 93);
INSERT INTO `paper_keyword_relation` VALUES (94, 24, 94);
INSERT INTO `paper_keyword_relation` VALUES (95, 24, 95);
INSERT INTO `paper_keyword_relation` VALUES (96, 24, 96);
INSERT INTO `paper_keyword_relation` VALUES (97, 24, 97);
INSERT INTO `paper_keyword_relation` VALUES (98, 25, 98);
INSERT INTO `paper_keyword_relation` VALUES (99, 25, 99);
INSERT INTO `paper_keyword_relation` VALUES (100, 25, 100);
INSERT INTO `paper_keyword_relation` VALUES (101, 25, 101);
INSERT INTO `paper_keyword_relation` VALUES (102, 25, 102);
INSERT INTO `paper_keyword_relation` VALUES (103, 26, 103);
INSERT INTO `paper_keyword_relation` VALUES (104, 26, 104);
INSERT INTO `paper_keyword_relation` VALUES (105, 26, 105);
INSERT INTO `paper_keyword_relation` VALUES (106, 26, 106);
INSERT INTO `paper_keyword_relation` VALUES (107, 26, 107);
INSERT INTO `paper_keyword_relation` VALUES (108, 27, 108);
INSERT INTO `paper_keyword_relation` VALUES (109, 27, 109);
INSERT INTO `paper_keyword_relation` VALUES (110, 27, 110);
INSERT INTO `paper_keyword_relation` VALUES (111, 27, 111);
INSERT INTO `paper_keyword_relation` VALUES (112, 27, 112);
INSERT INTO `paper_keyword_relation` VALUES (113, 28, 113);
INSERT INTO `paper_keyword_relation` VALUES (114, 28, 114);
INSERT INTO `paper_keyword_relation` VALUES (115, 28, 115);
INSERT INTO `paper_keyword_relation` VALUES (116, 28, 116);
INSERT INTO `paper_keyword_relation` VALUES (117, 29, 117);
INSERT INTO `paper_keyword_relation` VALUES (118, 29, 118);
INSERT INTO `paper_keyword_relation` VALUES (119, 29, 119);
INSERT INTO `paper_keyword_relation` VALUES (120, 29, 120);
INSERT INTO `paper_keyword_relation` VALUES (121, 30, 121);
INSERT INTO `paper_keyword_relation` VALUES (122, 30, 122);
INSERT INTO `paper_keyword_relation` VALUES (123, 30, 123);
INSERT INTO `paper_keyword_relation` VALUES (124, 30, 124);
INSERT INTO `paper_keyword_relation` VALUES (125, 30, 125);
INSERT INTO `paper_keyword_relation` VALUES (126, 31, 126);
INSERT INTO `paper_keyword_relation` VALUES (127, 31, 127);
INSERT INTO `paper_keyword_relation` VALUES (128, 31, 128);
INSERT INTO `paper_keyword_relation` VALUES (129, 32, 129);
INSERT INTO `paper_keyword_relation` VALUES (130, 32, 130);
INSERT INTO `paper_keyword_relation` VALUES (131, 32, 131);
INSERT INTO `paper_keyword_relation` VALUES (132, 33, 132);
INSERT INTO `paper_keyword_relation` VALUES (133, 33, 133);
INSERT INTO `paper_keyword_relation` VALUES (134, 33, 134);
INSERT INTO `paper_keyword_relation` VALUES (135, 33, 135);
INSERT INTO `paper_keyword_relation` VALUES (136, 34, 136);
INSERT INTO `paper_keyword_relation` VALUES (137, 34, 137);
INSERT INTO `paper_keyword_relation` VALUES (138, 34, 138);
INSERT INTO `paper_keyword_relation` VALUES (139, 35, 139);
INSERT INTO `paper_keyword_relation` VALUES (140, 35, 140);
INSERT INTO `paper_keyword_relation` VALUES (141, 35, 141);
INSERT INTO `paper_keyword_relation` VALUES (142, 35, 142);
INSERT INTO `paper_keyword_relation` VALUES (143, 36, 143);
INSERT INTO `paper_keyword_relation` VALUES (144, 36, 144);
INSERT INTO `paper_keyword_relation` VALUES (145, 36, 145);
INSERT INTO `paper_keyword_relation` VALUES (146, 37, 146);
INSERT INTO `paper_keyword_relation` VALUES (147, 37, 147);
INSERT INTO `paper_keyword_relation` VALUES (148, 37, 148);
INSERT INTO `paper_keyword_relation` VALUES (149, 37, 149);
INSERT INTO `paper_keyword_relation` VALUES (150, 37, 150);
INSERT INTO `paper_keyword_relation` VALUES (151, 38, 151);
INSERT INTO `paper_keyword_relation` VALUES (152, 38, 152);
INSERT INTO `paper_keyword_relation` VALUES (153, 38, 153);
INSERT INTO `paper_keyword_relation` VALUES (154, 38, 154);
INSERT INTO `paper_keyword_relation` VALUES (155, 39, 155);
INSERT INTO `paper_keyword_relation` VALUES (156, 39, 156);
INSERT INTO `paper_keyword_relation` VALUES (157, 39, 157);
INSERT INTO `paper_keyword_relation` VALUES (158, 40, 158);
INSERT INTO `paper_keyword_relation` VALUES (159, 40, 159);
INSERT INTO `paper_keyword_relation` VALUES (160, 40, 160);
INSERT INTO `paper_keyword_relation` VALUES (161, 40, 161);
INSERT INTO `paper_keyword_relation` VALUES (162, 41, 162);
INSERT INTO `paper_keyword_relation` VALUES (163, 41, 163);
INSERT INTO `paper_keyword_relation` VALUES (164, 41, 164);
INSERT INTO `paper_keyword_relation` VALUES (165, 42, 165);
INSERT INTO `paper_keyword_relation` VALUES (166, 42, 166);
INSERT INTO `paper_keyword_relation` VALUES (167, 42, 167);
INSERT INTO `paper_keyword_relation` VALUES (168, 43, 168);
INSERT INTO `paper_keyword_relation` VALUES (169, 43, 169);
INSERT INTO `paper_keyword_relation` VALUES (170, 43, 170);
INSERT INTO `paper_keyword_relation` VALUES (171, 43, 171);
INSERT INTO `paper_keyword_relation` VALUES (172, 43, 172);
INSERT INTO `paper_keyword_relation` VALUES (173, 44, 173);
INSERT INTO `paper_keyword_relation` VALUES (174, 44, 174);
INSERT INTO `paper_keyword_relation` VALUES (175, 44, 175);
INSERT INTO `paper_keyword_relation` VALUES (176, 45, 176);
INSERT INTO `paper_keyword_relation` VALUES (177, 45, 177);
INSERT INTO `paper_keyword_relation` VALUES (178, 45, 178);
INSERT INTO `paper_keyword_relation` VALUES (179, 46, 179);
INSERT INTO `paper_keyword_relation` VALUES (180, 46, 180);
INSERT INTO `paper_keyword_relation` VALUES (181, 46, 181);
INSERT INTO `paper_keyword_relation` VALUES (182, 46, 182);
INSERT INTO `paper_keyword_relation` VALUES (183, 47, 183);
INSERT INTO `paper_keyword_relation` VALUES (184, 47, 184);
INSERT INTO `paper_keyword_relation` VALUES (185, 47, 185);
INSERT INTO `paper_keyword_relation` VALUES (186, 48, 186);
INSERT INTO `paper_keyword_relation` VALUES (187, 48, 187);
INSERT INTO `paper_keyword_relation` VALUES (188, 48, 188);
INSERT INTO `paper_keyword_relation` VALUES (189, 49, 189);
INSERT INTO `paper_keyword_relation` VALUES (190, 49, 190);
INSERT INTO `paper_keyword_relation` VALUES (191, 49, 191);
INSERT INTO `paper_keyword_relation` VALUES (192, 49, 192);
INSERT INTO `paper_keyword_relation` VALUES (193, 50, 193);
INSERT INTO `paper_keyword_relation` VALUES (194, 50, 194);
INSERT INTO `paper_keyword_relation` VALUES (195, 50, 195);
INSERT INTO `paper_keyword_relation` VALUES (196, 50, 196);
INSERT INTO `paper_keyword_relation` VALUES (197, 51, 197);
INSERT INTO `paper_keyword_relation` VALUES (198, 51, 198);
INSERT INTO `paper_keyword_relation` VALUES (199, 51, 199);
INSERT INTO `paper_keyword_relation` VALUES (200, 51, 200);
INSERT INTO `paper_keyword_relation` VALUES (201, 52, 201);
INSERT INTO `paper_keyword_relation` VALUES (202, 52, 202);
INSERT INTO `paper_keyword_relation` VALUES (203, 52, 203);
INSERT INTO `paper_keyword_relation` VALUES (204, 52, 204);
INSERT INTO `paper_keyword_relation` VALUES (205, 52, 205);
INSERT INTO `paper_keyword_relation` VALUES (206, 53, 206);
INSERT INTO `paper_keyword_relation` VALUES (207, 53, 207);
INSERT INTO `paper_keyword_relation` VALUES (208, 53, 208);
INSERT INTO `paper_keyword_relation` VALUES (209, 54, 209);
INSERT INTO `paper_keyword_relation` VALUES (210, 54, 210);
INSERT INTO `paper_keyword_relation` VALUES (211, 54, 211);
INSERT INTO `paper_keyword_relation` VALUES (212, 55, 212);
INSERT INTO `paper_keyword_relation` VALUES (213, 55, 213);
INSERT INTO `paper_keyword_relation` VALUES (214, 55, 214);

-- ----------------------------
-- Table structure for paper_ref
-- ----------------------------
DROP TABLE IF EXISTS `paper_ref`;
CREATE TABLE `paper_ref`  (
  `paper_id` int(11) NOT NULL,
  `ref_count` int(11) NULL DEFAULT NULL,
  `ref_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL,
  PRIMARY KEY (`paper_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of paper_ref
-- ----------------------------
INSERT INTO `paper_ref` VALUES (1, 6, 'Domenico Amalfitano, Anna Rita Fasolino, Porfirio Tramontana, Salvatore De Carmine, and Atif M Memon. 2012. Using GUI ripping for automated testing of Android applications. In ASE. ACM, 258-261.***http://scholar.google.com/scholar?hl=en&q=Domenico+Amalfitano%2C+Anna+Rita+Fasolino%2C+Porfirio+Tramontana%2C+Salvatore+De+Carmine%2C+and+Atif+M+Memon.+2012.+Using+GUI+ripping+for+automated+testing+of+Android+applications.+In+ASE.+ACM%2C+258-261.^^^Yang Feng, Zhenyu Chen, James A Jones, Chunrong Fang, and Baowen Xu. 2015. Test report prioritization to assist crowdsourced testing.. In ESEC/SIGSOFT FSE. 225-236.***http://scholar.google.com/scholar?hl=en&q=Yang+Feng%2C+Zhenyu+Chen%2C+James+A+Jones%2C+Chunrong+Fang%2C+and+Baowen+Xu.+2015.+Test+report+prioritization+to+assist+crowdsourced+testing..+In+ESEC%2FSIGSOFT+FSE.+225-236.^^^Shuai Hao, Bin Liu, Suman Nath, William GJ Halfond, and Ramesh Govindan. 2014. PUMA: programmable UI-automation for large-scale dynamic analysis of mobile apps. In MobiSys. ACM, 204-217.***http://scholar.google.com/scholar?hl=en&q=Shuai+Hao%2C+Bin+Liu%2C+Suman+Nath%2C+William+GJ+Halfond%2C+and+Ramesh+Govindan.+2014.+PUMA%3A+programmable+UI-automation+for+large-scale+dynamic+analysis+of+mobile+apps.+In+MobiSys.+ACM%2C+204-217.^^^Steven Komarov, Katharina Reinecke, and Krzysztof Z Gajos. 2013. Crowdsourcing performance evaluations of user interfaces. In SigCHI. 207-216.***http://scholar.google.com/scholar?hl=en&q=Steven+Komarov%2C+Katharina+Reinecke%2C+and+Krzysztof+Z+Gajos.+2013.+Crowdsourcing+performance+evaluations+of+user+interfaces.+In+SigCHI.+207-216.^^^Aravind Machiry, Rohan Tahiliani, and Mayur Naik. 2013. Dynodroid: An input generation system for android apps. In ESEC/SIGSOFT FSE. ACM, 224-234.***http://scholar.google.com/scholar?hl=en&q=Aravind+Machiry%2C+Rohan+Tahiliani%2C+and+Mayur+Naik.+2013.+Dynodroid%3A+An+input+generation+system+for+android+apps.+In+ESEC%2FSIGSOFT+FSE.+ACM%2C+224-234.^^^Anmol Nayak, Vaibhav Kesri, and Rahul Kumar Dubey. 2020. Knowledge Graph based Automated Generation of Test Cases in Software Engineering. In Proceedings of the 7th ACM IKDD CoDS and 25th COMAD. 289-295.***http://scholar.google.com/scholar?hl=en&q=Anmol+Nayak%2C+Vaibhav+Kesri%2C+and+Rahul+Kumar+Dubey.+2020.+Knowledge+Graph+based+Automated+Generation+of+Test+Cases+in+Software+Engineering.+In+Proceedings+of+the+7th+ACM+IKDD+CoDS+and+25th+COMAD.+289-295.^^^');
INSERT INTO `paper_ref` VALUES (2, 58, '[n. d.]. Anonymous Webiste. https://sites.google.com/view/evoipf/home. Accessed: 2019-05-13.***http://scholar.google.com/scholar?hl=en&q=%5Bn.+d.%5D.+Anonymous+Webiste.+https%3A%2F%2Fsites.google.com%2Fview%2Fevoipf%2Fhome.+Accessed%3A+2019-05-13.^^^[n. d.]. Apache Math. https://commons.apache.org/proper/commons-math/ download_math.cgi. Accessed: 2020-01-27.***http://scholar.google.com/scholar?hl=en&q=%5Bn.+d.%5D.+Apache+Math.+https%3A%2F%2Fcommons.apache.org%2Fproper%2Fcommons-math%2F+download_math.cgi.+Accessed%3A+2020-01-27.^^^[n. d.]. IDA SDK. https://www.hex-rays.com/products/ida/support/download. shtml. Accessed: 2020-01-27.***http://scholar.google.com/scholar?hl=en&q=%5Bn.+d.%5D.+IDA+SDK.+https%3A%2F%2Fwww.hex-rays.com%2Fproducts%2Fida%2Fsupport%2Fdownload.+shtml.+Accessed%3A+2020-01-27.^^^[n. d.]. JFreechat. http://www.jfree.org/jfreechart/download.html. Accessed: 2020-01-27.***http://scholar.google.com/scholar?hl=en&q=%5Bn.+d.%5D.+JFreechat.+http%3A%2F%2Fwww.jfree.org%2Fjfreechart%2Fdownload.html.+Accessed%3A+2020-01-27.^^^[n. d.]. Weka. https://sourceforge.net/projects/weka/files/weka-3-8 /3.8.0/. Accessed: 2020-01-27.***http://scholar.google.com/scholar?hl=en&q=%5Bn.+d.%5D.+Weka.+https%3A%2F%2Fsourceforge.net%2Fprojects%2Fweka%2Ffiles%2Fweka-3-8+%2F3.8.0%2F.+Accessed%3A+2020-01-27.^^^Aldeida Aleti and Lars Grunske. 2015. Test Data Generation with a Kalman Filterbased Adaptive Genetic Algorithm. J. Syst. Softw. 103, C (May 2015 ), 343-352. https://doi.org/10.1016/j.jss. 2014. 11.035 ***http://scholar.google.com/scholar?hl=en&q=Aldeida+Aleti+and+Lars+Grunske.+2015.+Test+Data+Generation+with+a+Kalman+Filterbased+Adaptive+Genetic+Algorithm.+J.+Syst.+Softw.+103%2C+C+%28May+2015+%29%2C+343-352.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.jss.+2014.+11.035+10.1016%2Fj.jss.2014.11.035^^^Aldeida Aleti, I. Moser, and Lars Grunske. 2017. Analysing the Fitness Landscape of Search-based Software Testing Problems. Automated Software Engg. 24, 3 (Sept. 2017 ), 603-621. https://doi.org/10.1007/s10515-016-0197-7 ***http://scholar.google.com/scholar?hl=en&q=Aldeida+Aleti%2C+I.+Moser%2C+and+Lars+Grunske.+2017.+Analysing+the+Fitness+Landscape+of+Search-based+Software+Testing+Problems.+Automated+Software+Engg.+24%2C+3+%28Sept.+2017+%29%2C+603-621.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10515-016-0197-7+10.1007%2Fs10515-016-0197-7^^^Andrea Arcuri. 2013. It really does matter how you normalize the branch distance in search-based software testing. Software Testing, Verification and Reliability 23, 2 ( 2013 ), 119-147.***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2013.+It+really+does+matter+how+you+normalize+the+branch+distance+in+search-based+software+testing.+Software+Testing%2C+Verification+and+Reliability+23%2C+2+%28+2013+%29%2C+119-147.^^^Guangdong Bai, Quanqi Ye, Yongzheng Wu, Heila Botha, Jun Sun, Yang Liu, Jin Song Dong, and Willem Visser. 2018. Towards Model Checking Android Applications. IEEE Transactions on Software Engineering 44, 6 ( 2018 ), 595-612.***http://scholar.google.com/scholar?hl=en&q=Guangdong+Bai%2C+Quanqi+Ye%2C+Yongzheng+Wu%2C+Heila+Botha%2C+Jun+Sun%2C+Yang+Liu%2C+Jin+Song+Dong%2C+and+Willem+Visser.+2018.+Towards+Model+Checking+Android+Applications.+IEEE+Transactions+on+Software+Engineering+44%2C+6+%28+2018+%29%2C+595-612.^^^André Baresel, David Binkley, Mark Harman, and Bogdan Korel. 2004. Evolutionary Testing in the Presence of Loop-assigned Flags: A Testability Transformation Approach. In Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA \'04). ACM, New York, NY, USA, 108-118. https://doi.org/10.1145/1007512.1007527 ***http://scholar.google.com/scholar?hl=en&q=Andr%C3%A9+Baresel%2C+David+Binkley%2C+Mark+Harman%2C+and+Bogdan+Korel.+2004.+Evolutionary+Testing+in+the+Presence+of+Loop-assigned+Flags%3A+A+Testability+Transformation+Approach.+In+Proceedings+of+the+2004+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%2704%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+108-118.+https%3A%2F%2Fdoi.org%2F10.1145%2F1007512.1007527+10.1145%2F1007512.1007527^^^André Baresel, Harmen Sthamer, and Michael Schmidt. 2002. Fitness Function Design to Improve Evolutionary Structural Testing. In Proceedings of the 4th Annual Conference on Genetic and Evolutionary Computation (GECCO\'02). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 1329-1336. http://dl.acm. org/citation.cfm?id= 2955491. 2955736***http://scholar.google.com/scholar?hl=en&q=Andr%C3%A9+Baresel%2C+Harmen+Sthamer%2C+and+Michael+Schmidt.+2002.+Fitness+Function+Design+to+Improve+Evolutionary+Structural+Testing.+In+Proceedings+of+the+4th+Annual+Conference+on+Genetic+and+Evolutionary+Computation+%28GECCO%2702%29.+Morgan+Kaufmann+Publishers+Inc.%2C+San+Francisco%2C+CA%2C+USA%2C+1329-1336.+http%3A%2F%2Fdl.acm.+org%2Fcitation.cfm%3Fid%3D+2955491.+2955736^^^Leonora Bianchi, Marco Dorigo, Luca Maria Gambardella, and Walter J. Gutjahr. 2009. A Survey on Metaheuristics for Stochastic Combinatorial Optimization. 8, 2 ( June 2009 ), 239-287. https://doi.org/10.1007/s11047-008-9098-4 ***http://scholar.google.com/scholar?hl=en&q=Leonora+Bianchi%2C+Marco+Dorigo%2C+Luca+Maria+Gambardella%2C+and+Walter+J.+Gutjahr.+2009.+A+Survey+on+Metaheuristics+for+Stochastic+Combinatorial+Optimization.+8%2C+2+%28+June+2009+%29%2C+239-287.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs11047-008-9098-4+10.1007%2Fs11047-008-9098-4^^^David W. Binkley, Mark Harman, and Kiran Lakhotia. 2011. FlagRemover: A Testability Transformation for Transforming Loop-assigned Flags. ACM Trans. Softw. Eng. Methodol. 20, 3, Article 12 ( Aug. 2011 ), 33 pages. https://doi.org/10. 1145/2000791.2000796 ***http://scholar.google.com/scholar?hl=en&q=David+W.+Binkley%2C+Mark+Harman%2C+and+Kiran+Lakhotia.+2011.+FlagRemover%3A+A+Testability+Transformation+for+Transforming+Loop-assigned+Flags.+ACM+Trans.+Softw.+Eng.+Methodol.+20%2C+3%2C+Article+12+%28+Aug.+2011+%29%2C+33+pages.+https%3A%2F%2Fdoi.org%2F10.+1145%2F2000791.2000796+10.1145%2F2000791.2000796^^^Oliver Bühler and Joachim Wegener. 2008. Evolutionary Functional Testing. Comput. Oper. Res. 35, 10 (Oct. 2008 ), 3144-3160. https://doi.org/10.1016/j.cor. 2007. 01.015 ***http://scholar.google.com/scholar?hl=en&q=Oliver+B%C3%BChler+and+Joachim+Wegener.+2008.+Evolutionary+Functional+Testing.+Comput.+Oper.+Res.+35%2C+10+%28Oct.+2008+%29%2C+3144-3160.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.cor.+2007.+01.015+10.1016%2Fj.cor.2007.01.015^^^Jeroen Castelein, Maurício Aniche, Mozhan Soltani, Annibale Panichella, and Arie van Deursen. 2018. Search-based Test Data Generation for SQL Queries. In Proceedings of the 40th International Conference on Software Engineering (ICSE \'18). ACM, New York, NY, USA, 1220-1230. https://doi.org/10.1145/3180155.3180202 ***http://scholar.google.com/scholar?hl=en&q=Jeroen+Castelein%2C+Maur%C3%ADcio+Aniche%2C+Mozhan+Soltani%2C+Annibale+Panichella%2C+and+Arie+van+Deursen.+2018.+Search-based+Test+Data+Generation+for+SQL+Queries.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28ICSE+%2718%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1220-1230.+https%3A%2F%2Fdoi.org%2F10.1145%2F3180155.3180202+10.1145%2F3180155.3180202^^^Naipeng Dong, Hugo Jonker, and Jun Pang. 2013. Enforcing Privacy in the Presence of Others: Notions, Formalisations and Relations. In Computer Security-ESORICS 2013, Jason Crampton, Sushil Jajodia, and Keith Mayes (Eds.). 499-516.***http://scholar.google.com/scholar?hl=en&q=Naipeng+Dong%2C+Hugo+Jonker%2C+and+Jun+Pang.+2013.+Enforcing+Privacy+in+the+Presence+of+Others%3A+Notions%2C+Formalisations+and+Relations.+In+Computer+Security-ESORICS+2013%2C+Jason+Crampton%2C+Sushil+Jajodia%2C+and+Keith+Mayes+%28Eds.%29.+499-516.^^^Naipeng Dong and Tim Muller. 2018. The Foul Adversary: Formal Models. In Formal Methods and Software Engineering-20th International Conference on Formal Engineering Methods, ICFEM 2018, Gold Coast, QLD, Australia, November 12-16, 2018, Proceedings (Lecture Notes in Computer Science), Vol. 11232. 37-53.***http://scholar.google.com/scholar?hl=en&q=Naipeng+Dong+and+Tim+Muller.+2018.+The+Foul+Adversary%3A+Formal+Models.+In+Formal+Methods+and+Software+Engineering-20th+International+Conference+on+Formal+Engineering+Methods%2C+ICFEM+2018%2C+Gold+Coast%2C+QLD%2C+Australia%2C+November+12-16%2C+2018%2C+Proceedings+%28Lecture+Notes+in+Computer+Science%29%2C+Vol.+11232.+37-53.^^^Z. Dong, A. Andrzejak, D. Lo, and D. Costa. 2016. ORPLocator: Identifying Read Points of Configuration Options via Static Analysis. In 2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE). 185-195.***http://scholar.google.com/scholar?hl=en&q=Z.+Dong%2C+A.+Andrzejak%2C+D.+Lo%2C+and+D.+Costa.+2016.+ORPLocator%3A+Identifying+Read+Points+of+Configuration+Options+via+Static+Analysis.+In+2016+IEEE+27th+International+Symposium+on+Software+Reliability+Engineering+%28ISSRE%29.+185-195.^^^Z. Dong, A. Andrzejak, and K. Shao. 2015. Practical and accurate pinpointing of configuration errors using static analysis. In 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). 171-180.***http://scholar.google.com/scholar?hl=en&q=Z.+Dong%2C+A.+Andrzejak%2C+and+K.+Shao.+2015.+Practical+and+accurate+pinpointing+of+configuration+errors+using+static+analysis.+In+2015+IEEE+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+171-180.^^^Zhen Dong, Marcel Böhme, Lucia Cojocaru, and Abhik Roychoudhury. 2020. Time-travel Testing of Android Apps. In Proceedings of the 42nd International Conference on Software Engineering (ICSE \'20). 1-12.***http://scholar.google.com/scholar?hl=en&q=Zhen+Dong%2C+Marcel+B%C3%B6hme%2C+Lucia+Cojocaru%2C+and+Abhik+Roychoudhury.+2020.+Time-travel+Testing+of+Android+Apps.+In+Proceedings+of+the+42nd+International+Conference+on+Software+Engineering+%28ICSE+%2720%29.+1-12.^^^Gordon Fraser and Andrea Arcuri. 2011. EvoSuite: Automatic Test Suite Generation for Object-oriented Software. In Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering (ESEC/FSE \'11). ACM, New York, NY, USA, 416-419. https://doi.org/10. 1145/2025113.2025179 ***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2011.+EvoSuite%3A+Automatic+Test+Suite+Generation+for+Object-oriented+Software.+In+Proceedings+of+the+19th+ACM+SIGSOFT+Symposium+and+the+13th+European+Conference+on+Foundations+of+Software+Engineering+%28ESEC%2FFSE+%2711%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+416-419.+https%3A%2F%2Fdoi.org%2F10.+1145%2F2025113.2025179+10.1145%2F2025113.2025179^^^Gordon Fraser and Andrea Arcuri. 2012. Sound Empirical Evidence in Software Testing. In Proceedings of the 34th International Conference on Software Engineering (ICSE \'12). IEEE Press, Piscataway, NJ, USA, 178-188. http://dl.acm.org/citation. cfm?id= 2337223. 2337245***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2012.+Sound+Empirical+Evidence+in+Software+Testing.+In+Proceedings+of+the+34th+International+Conference+on+Software+Engineering+%28ICSE+%2712%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+178-188.+http%3A%2F%2Fdl.acm.org%2Fcitation.+cfm%3Fid%3D+2337223.+2337245^^^Gordon Fraser and Andrea Arcuri. 2013. Evosuite: On the challenges of test case generation in the real world. In 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation. IEEE, 362-369.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2013.+Evosuite%3A+On+the+challenges+of+test+case+generation+in+the+real+world.+In+2013+IEEE+Sixth+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+IEEE%2C+362-369.^^^Gordon Fraser and Andrea Arcuri. 2013. Whole Test Suite Generation. IEEE Trans. Softw. Eng. 39, 2 (Feb. 2013 ), 276-291.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2013.+Whole+Test+Suite+Generation.+IEEE+Trans.+Softw.+Eng.+39%2C+2+%28Feb.+2013+%29%2C+276-291.^^^Gordon Fraser and Andrea Arcuri. 2014. A large-scale evaluation of automated unit test generation using evosuite. ACM Transactions on Software Engineering and Methodology (TOSEM) 24, 2 ( 2014 ), 8.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2014.+A+large-scale+evaluation+of+automated+unit+test+generation+using+evosuite.+ACM+Transactions+on+Software+Engineering+and+Methodology+%28TOSEM%29+24%2C+2+%28+2014+%29%2C+8.^^^Gordon Fraser, Andrea Arcuri, and Phil McMinn. 2015. A Memetic Algorithm for Whole Test Suite Generation. J. Syst. Softw. 103, C (May 2015 ), 311-327. https://doi.org/10.1016/j.jss. 2014. 05.032 ***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser%2C+Andrea+Arcuri%2C+and+Phil+McMinn.+2015.+A+Memetic+Algorithm+for+Whole+Test+Suite+Generation.+J.+Syst.+Softw.+103%2C+C+%28May+2015+%29%2C+311-327.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.jss.+2014.+05.032+10.1016%2Fj.jss.2014.05.032^^^Wang Haijun, Xie Xiaofei, Li Yi, Wen Cheng, Li Yuekang, Liu Yang, Qin Shengchao, Chen Hongxu, and Sui Yulei. 2020. Typestate-Guided Fuzzer for Discovering Use-after-Free Vulnerabilities. In Proceedings of the 42nd International Conference on Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Wang+Haijun%2C+Xie+Xiaofei%2C+Li+Yi%2C+Wen+Cheng%2C+Li+Yuekang%2C+Liu+Yang%2C+Qin+Shengchao%2C+Chen+Hongxu%2C+and+Sui+Yulei.+2020.+Typestate-Guided+Fuzzer+for+Discovering+Use-after-Free+Vulnerabilities.+In+Proceedings+of+the+42nd+International+Conference+on+Software+Engineering.+ACM.^^^M. Harman. 2007. The Current State and Future of Search Based Software Engineering. In Future of Software Engineering (FOSE \'07). 342-357. https://doi. org/10.1109/FOSE. 2007.29 ***http://scholar.google.com/scholar?hl=en&q=M.+Harman.+2007.+The+Current+State+and+Future+of+Search+Based+Software+Engineering.+In+Future+of+Software+Engineering+%28FOSE+%2707%29.+342-357.+https%3A%2F%2Fdoi.+org%2F10.1109%2FFOSE.+2007.29+10.1109%2FFOSE.2007.29^^^Mark Harman, André Baresel, David Binkley, Robert Hierons, Lin Hu, Bogdan Korel, Phil McMinn, and Marc Roper. 2008. Formal Methods and Testing. Springer-Verlag, Berlin, Heidelberg, Chapter Testability Transformation: Program Transformation to Improve Testability, 320-344. http://dl.acm.org/citation. cfm?id= 1806209. 1806220***http://scholar.google.com/scholar?hl=en&q=Mark+Harman%2C+Andr%C3%A9+Baresel%2C+David+Binkley%2C+Robert+Hierons%2C+Lin+Hu%2C+Bogdan+Korel%2C+Phil+McMinn%2C+and+Marc+Roper.+2008.+Formal+Methods+and+Testing.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+Chapter+Testability+Transformation%3A+Program+Transformation+to+Improve+Testability%2C+320-344.+http%3A%2F%2Fdl.acm.org%2Fcitation.+cfm%3Fid%3D+1806209.+1806220^^^M. Harman and J. Clark. 2004. Metrics are fitness functions too. In 10th International Symposium on Software Metrics, 2004. Proceedings. 58-69. https: //doi.org/10.1109/METRIC. 2004.1357891 ***http://scholar.google.com/scholar?hl=en&q=M.+Harman+and+J.+Clark.+2004.+Metrics+are+fitness+functions+too.+In+10th+International+Symposium+on+Software+Metrics%2C+2004.+Proceedings.+58-69.+https%3A+%2F%2Fdoi.org%2F10.1109%2FMETRIC.+2004.1357891+10.1109%2FMETRIC.2004.1357891^^^Mark Harman, Lin Hu, Rob Hierons, Joachim Wegener, Harmen Sthamer, André Baresel, and Marc Roper. 2004. Testability Transformation. IEEE Trans. Softw. Eng. 30, 1 (Jan. 2004 ), 3-16.***http://scholar.google.com/scholar?hl=en&q=Mark+Harman%2C+Lin+Hu%2C+Rob+Hierons%2C+Joachim+Wegener%2C+Harmen+Sthamer%2C+Andr%C3%A9+Baresel%2C+and+Marc+Roper.+2004.+Testability+Transformation.+IEEE+Trans.+Softw.+Eng.+30%2C+1+%28Jan.+2004+%29%2C+3-16.^^^Mark Harman, Phil McMinn, Jerfeson Teixeira de Souza, and Shin Yoo. 2012. Empirical Software Engineering and Verification. Springer-Verlag, Berlin, Heidelberg, Chapter Search Based Software Engineering: Techniques, Taxonomy, Tutorial, 1-59. http://dl.acm.org/citation.cfm?id= 2184075. 2184076***http://scholar.google.com/scholar?hl=en&q=Mark+Harman%2C+Phil+McMinn%2C+Jerfeson+Teixeira+de+Souza%2C+and+Shin+Yoo.+2012.+Empirical+Software+Engineering+and+Verification.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+Chapter+Search+Based+Software+Engineering%3A+Techniques%2C+Taxonomy%2C+Tutorial%2C+1-59.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+2184075.+2184076^^^Y. Jia and M. Harman. 2008. Constructing Subtle Faults Using Higher Order Mutation Testing. In 2008 Eighth IEEE International Working Conference on Source Code Analysis and Manipulation. 249-258. https://doi.org/10.1109/SCAM. 2008.36 ***http://scholar.google.com/scholar?hl=en&q=Y.+Jia+and+M.+Harman.+2008.+Constructing+Subtle+Faults+Using+Higher+Order+Mutation+Testing.+In+2008+Eighth+IEEE+International+Working+Conference+on+Source+Code+Analysis+and+Manipulation.+249-258.+https%3A%2F%2Fdoi.org%2F10.1109%2FSCAM.+2008.36+10.1109%2FSCAM.2008.36^^^Yanchuan Li and Gordon Fraser. 2011. Bytecode Testability Transformation.***http://scholar.google.com/scholar?hl=en&q=Yanchuan+Li+and+Gordon+Fraser.+2011.+Bytecode+Testability+Transformation.^^^Z. Li, M. Harman, and R. M. Hierons. 2007. Search Algorithms for Regression Test Case Prioritization. IEEE Transactions on Software Engineering 33, 4 (April 2007 ), 225-237. https://doi.org/10.1109/TSE. 2007.38 ***http://scholar.google.com/scholar?hl=en&q=Z.+Li%2C+M.+Harman%2C+and+R.+M.+Hierons.+2007.+Search+Algorithms+for+Regression+Test+Case+Prioritization.+IEEE+Transactions+on+Software+Engineering+33%2C+4+%28April+2007+%29%2C+225-237.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2007.38+10.1109%2FTSE.2007.38^^^Yun Lin, Jun Sun, Lyly Tran, Guangdong Bai, Haijun Wang, and Jinsong Dong. 2018. Break the Dead End of Dynamic Slicing: Localizing Data and Control Omission Bug. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. 509-519.***http://scholar.google.com/scholar?hl=en&q=Yun+Lin%2C+Jun+Sun%2C+Lyly+Tran%2C+Guangdong+Bai%2C+Haijun+Wang%2C+and+Jinsong+Dong.+2018.+Break+the+Dead+End+of+Dynamic+Slicing%3A+Localizing+Data+and+Control+Omission+Bug.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+509-519.^^^Yun Lin, Jun Sun, Yinxing Xue, Yang Liu, and Jinsong Dong. 2017. FeedbackBased Debugging. In Proceedings of the 39th International Conference on Software Engineering. 393-403.***http://scholar.google.com/scholar?hl=en&q=Yun+Lin%2C+Jun+Sun%2C+Yinxing+Xue%2C+Yang+Liu%2C+and+Jinsong+Dong.+2017.+FeedbackBased+Debugging.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering.+393-403.^^^Tianming Liu, Haoyu Wang, Li Li, Guangdong Bai, Yao Guo, and Guoai Xu. 2019. DaPanda: Detecting Aggressive Push Notifications in Android Apps. In Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE Press, 66-78.***http://scholar.google.com/scholar?hl=en&q=Tianming+Liu%2C+Haoyu+Wang%2C+Li+Li%2C+Guangdong+Bai%2C+Yao+Guo%2C+and+Guoai+Xu.+2019.+DaPanda%3A+Detecting+Aggressive+Push+Notifications+in+Android+Apps.+In+Proceedings+of+the+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE+Press%2C+66-78.^^^Kulani Mahadewa, Kailong Wang, Guangdong Bai, Ling Shi, Jin Song Dong, and Zhenkai Liang. 2019. Scrutinizing Implementations of Smart Home Integrations. IEEE Transactions on Software Engineering ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Kulani+Mahadewa%2C+Kailong+Wang%2C+Guangdong+Bai%2C+Ling+Shi%2C+Jin+Song+Dong%2C+and+Zhenkai+Liang.+2019.+Scrutinizing+Implementations+of+Smart+Home+Integrations.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.^^^Phil McMinn. 2004. Search-based Software Test Data Generation: A Survey: Research Articles. Softw. Test. Verif. Reliab. 14, 2 ( June 2004 ), 105-156.***http://scholar.google.com/scholar?hl=en&q=Phil+McMinn.+2004.+Search-based+Software+Test+Data+Generation%3A+A+Survey%3A+Research+Articles.+Softw.+Test.+Verif.+Reliab.+14%2C+2+%28+June+2004+%29%2C+105-156.^^^W. Miller and D. L. Spooner. 1976. Automatic Generation of Floating-Point Test Data. IEEE Trans. Softw. Eng. 2, 3 (May 1976 ), 223-226. https://doi.org/10.1109/ TSE. 1976.233818 ***http://scholar.google.com/scholar?hl=en&q=W.+Miller+and+D.+L.+Spooner.+1976.+Automatic+Generation+of+Floating-Point+Test+Data.+IEEE+Trans.+Softw.+Eng.+2%2C+3+%28May+1976+%29%2C+223-226.+https%3A%2F%2Fdoi.org%2F10.1109%2F+TSE.+1976.233818+10.1109%2FTSE.1976.233818^^^Duy Tai Nguyen, Long H. Pham, Jun Sun, Yun Lin, and Minh Quang Tran. 2020. sFuzz: An Eficient Adaptive Fuzzer for Solidity Smart Contracts. In Proceedings of the 42nd International Conference on Software Engineering (ICSE \'20). 1-12.***http://scholar.google.com/scholar?hl=en&q=Duy+Tai+Nguyen%2C+Long+H.+Pham%2C+Jun+Sun%2C+Yun+Lin%2C+and+Minh+Quang+Tran.+2020.+sFuzz%3A+An+Eficient+Adaptive+Fuzzer+for+Solidity+Smart+Contracts.+In+Proceedings+of+the+42nd+International+Conference+on+Software+Engineering+%28ICSE+%2720%29.+1-12.^^^A. Panichella, F. M. Kifetew, and P. Tonella. 2015. Reformulating Branch Coverage as a Many-Objective Optimization Problem. In 2015 IEEE 8th International Conference on Software Testing, Verification and Validation (ICST). 1-10.***http://scholar.google.com/scholar?hl=en&q=A.+Panichella%2C+F.+M.+Kifetew%2C+and+P.+Tonella.+2015.+Reformulating+Branch+Coverage+as+a+Many-Objective+Optimization+Problem.+In+2015+IEEE+8th+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST%29.+1-10.^^^A. Panichella, F. M. Kifetew, and P. Tonella. 2018. Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets. IEEE Transactions on Software Engineering 44, 2 ( 2018 ), 122-158.***http://scholar.google.com/scholar?hl=en&q=A.+Panichella%2C+F.+M.+Kifetew%2C+and+P.+Tonella.+2018.+Automated+Test+Case+Generation+as+a+Many-Objective+Optimisation+Problem+with+Dynamic+Selection+of+the+Targets.+IEEE+Transactions+on+Software+Engineering+44%2C+2+%28+2018+%29%2C+122-158.^^^José Miguel Rojas, José Campos, Mattia Vivanti, Gordon Fraser, and Andrea Arcuri. 2015. Combining Multiple Coverage Criteria in Search-Based Unit Test Generation. In Proceedings of the 7th International Symposium on Search-Based Software Engineering (SSBSE \'15). Springer, 93-108.***http://scholar.google.com/scholar?hl=en&q=Jos%C3%A9+Miguel+Rojas%2C+Jos%C3%A9+Campos%2C+Mattia+Vivanti%2C+Gordon+Fraser%2C+and+Andrea+Arcuri.+2015.+Combining+Multiple+Coverage+Criteria+in+Search-Based+Unit+Test+Generation.+In+Proceedings+of+the+7th+International+Symposium+on+Search-Based+Software+Engineering+%28SSBSE+%2715%29.+Springer%2C+93-108.^^^U. Rueda, T. E. J. Vos, and I. S. W. B. Prasetya. 2015. Unit Testing Tool Competition-Round Three. In 2015 IEEE/ACM 8th International Workshop on Search-Based Software Testing. 19-24. https://doi.org/10.1109/SBST. 2015.12 ***http://scholar.google.com/scholar?hl=en&q=U.+Rueda%2C+T.+E.+J.+Vos%2C+and+I.+S.+W.+B.+Prasetya.+2015.+Unit+Testing+Tool+Competition-Round+Three.+In+2015+IEEE%2FACM+8th+International+Workshop+on+Search-Based+Software+Testing.+19-24.+https%3A%2F%2Fdoi.org%2F10.1109%2FSBST.+2015.12+10.1109%2FSBST.2015.12^^^Sina Shamshiri, Rene Just, Jose Miguel Rojas, Gordon Fraser, Phil McMinn, and Andrea Arcuri. 2015. Do automatically generated unit tests find real faults? an empirical study of efectiveness and challenges (t). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 201-211.***http://scholar.google.com/scholar?hl=en&q=Sina+Shamshiri%2C+Rene+Just%2C+Jose+Miguel+Rojas%2C+Gordon+Fraser%2C+Phil+McMinn%2C+and+Andrea+Arcuri.+2015.+Do+automatically+generated+unit+tests+find+real+faults%3F+an+empirical+study+of+efectiveness+and+challenges+%28t%29.+In+2015+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+201-211.^^^Anupama Surendran and Philip Samuel. 2017. Evolution or Revolution: The Critical Need in Genetic Algorithm Based Testing. Artif. Intell. Rev. 48, 3 (Oct. 2017 ), 349-395. https://doi.org/10.1007/s10462-016-9504-8 ***http://scholar.google.com/scholar?hl=en&q=Anupama+Surendran+and+Philip+Samuel.+2017.+Evolution+or+Revolution%3A+The+Critical+Need+in+Genetic+Algorithm+Based+Testing.+Artif.+Intell.+Rev.+48%2C+3+%28Oct.+2017+%29%2C+349-395.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10462-016-9504-8+10.1007%2Fs10462-016-9504-8^^^Kristen R. Walcott, Mary Lou Sofa, Gregory M. Kapfhammer, and Robert S. Roos. 2006. TimeAware Test Suite Prioritization. In Proceedings of the 2006 International Symposium on Software Testing and Analysis (ISSTA \'06). ACM, New York, NY, USA, 1-12. https://doi.org/10.1145/1146238.1146240 ***http://scholar.google.com/scholar?hl=en&q=Kristen+R.+Walcott%2C+Mary+Lou+Sofa%2C+Gregory+M.+Kapfhammer%2C+and+Robert+S.+Roos.+2006.+TimeAware+Test+Suite+Prioritization.+In+Proceedings+of+the+2006+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%2706%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1-12.+https%3A%2F%2Fdoi.org%2F10.1145%2F1146238.1146240+10.1145%2F1146238.1146240^^^Haijun Wang, Yun Lin, Zijiang Yang, Jun Sun, Yang Liu, Jin Song Dong, Qinghua Zheng, and Ting Liu. 2019. Explaining Regressions via Alignment Slicing and Mending. IEEE Transactions on Software Engineering ( 2019 ), 1-1.***http://scholar.google.com/scholar?hl=en&q=Haijun+Wang%2C+Yun+Lin%2C+Zijiang+Yang%2C+Jun+Sun%2C+Yang+Liu%2C+Jin+Song+Dong%2C+Qinghua+Zheng%2C+and+Ting+Liu.+2019.+Explaining+Regressions+via+Alignment+Slicing+and+Mending.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29%2C+1-1.^^^Haijun Wang, Xiaofei Xie, Shang-Wei Lin, Yun Lin, Yuekang Li, Shengchao Qin, Yang Liu, and Ting Liu. 2019. Locating Vulnerabilities in Binaries via Memory Layout Recovering. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2019 ). Association for Computing Machinery, New York, NY, USA, 718-728. https://doi.org/10.1145/3338906.3338966 ***http://scholar.google.com/scholar?hl=en&q=Haijun+Wang%2C+Xiaofei+Xie%2C+Shang-Wei+Lin%2C+Yun+Lin%2C+Yuekang+Li%2C+Shengchao+Qin%2C+Yang+Liu%2C+and+Ting+Liu.+2019.+Locating+Vulnerabilities+in+Binaries+via+Memory+Layout+Recovering.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE+2019+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+718-728.+https%3A%2F%2Fdoi.org%2F10.1145%2F3338906.3338966+10.1145%2F3338906.3338966^^^Xinyu Wang, Jun Sun, Zhenbang Chen, Peixin Zhang, Jingyi Wang, and Yun Lin. 2018. Towards Optimal Concolic Testing. In Proceedings of the 40th International Conference on Software Engineering. 291-302.***http://scholar.google.com/scholar?hl=en&q=Xinyu+Wang%2C+Jun+Sun%2C+Zhenbang+Chen%2C+Peixin+Zhang%2C+Jingyi+Wang%2C+and+Yun+Lin.+2018.+Towards+Optimal+Concolic+Testing.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering.+291-302.^^^Joachim Wegener, André Baresel, and Harmen Sthamer. 2001. Evolutionary test environment for automatic structural testing. Information & Software Technology 43, 14 ( 2001 ), 841-854. http://dblp.uni-trier.de/db/journals/infsof/infsof43.html# WegenerBS01***http://scholar.google.com/scholar?hl=en&q=Joachim+Wegener%2C+Andr%C3%A9+Baresel%2C+and+Harmen+Sthamer.+2001.+Evolutionary+test+environment+for+automatic+structural+testing.+Information+%26+Software+Technology+43%2C+14+%28+2001+%29%2C+841-854.+http%3A%2F%2Fdblp.uni-trier.de%2Fdb%2Fjournals%2Finfsof%2Finfsof43.html%23+WegenerBS01^^^Yan Xiao, Jacky Keung, Kwabena E Bennin, and Qing Mi. 2019. Improving bug localization with word embedding and enhanced convolutional neural networks. Information and Software Technology 105 ( 2019 ), 17-29.***http://scholar.google.com/scholar?hl=en&q=Yan+Xiao%2C+Jacky+Keung%2C+Kwabena+E+Bennin%2C+and+Qing+Mi.+2019.+Improving+bug+localization+with+word+embedding+and+enhanced+convolutional+neural+networks.+Information+and+Software+Technology+105+%28+2019+%29%2C+17-29.^^^Xiaofei Xie, Bihuan Chen, Yang Liu, Wei Le, and Xiaohong Li. 2016. Proteus: computing disjunctive loop summary via path dependency analysis. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 61-72.***http://scholar.google.com/scholar?hl=en&q=Xiaofei+Xie%2C+Bihuan+Chen%2C+Yang+Liu%2C+Wei+Le%2C+and+Xiaohong+Li.+2016.+Proteus%3A+computing+disjunctive+loop+summary+via+path+dependency+analysis.+In+Proceedings+of+the+2016+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+ACM%2C+61-72.^^^Xiaofei Xie, Bihuan Chen, Liang Zou, Shang-Wei Lin, Yang Liu, and Xiaohong Li. 2017. Loopster: static loop termination analysis. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, 84-94.***http://scholar.google.com/scholar?hl=en&q=Xiaofei+Xie%2C+Bihuan+Chen%2C+Liang+Zou%2C+Shang-Wei+Lin%2C+Yang+Liu%2C+and+Xiaohong+Li.+2017.+Loopster%3A+static+loop+termination+analysis.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM%2C+84-94.^^^Xiaofei Xie, Yang Liu, Wei Le, Xiaohong Li, and Hongxu Chen. 2015. S-looper: Automatic summarization for multipath string loops. In Proceedings of the 2015 International Symposium on Software Testing and Analysis. ACM, 188-198.***http://scholar.google.com/scholar?hl=en&q=Xiaofei+Xie%2C+Yang+Liu%2C+Wei+Le%2C+Xiaohong+Li%2C+and+Hongxu+Chen.+2015.+S-looper%3A+Automatic+summarization+for+multipath+string+loops.+In+Proceedings+of+the+2015+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+188-198.^^^Xiong Xu, Ziming Zhu, and Li Jiao. 2017. An Adaptive Fitness Function Based on Branch Hardness for Search Based Testing. In Proceedings of the Genetic and Evolutionary Computation Conference (GECCO \'17). ACM, New York, NY, USA, 1335-1342. https://doi.org/10.1145/3071178.3071184 ***http://scholar.google.com/scholar?hl=en&q=Xiong+Xu%2C+Ziming+Zhu%2C+and+Li+Jiao.+2017.+An+Adaptive+Fitness+Function+Based+on+Branch+Hardness+for+Search+Based+Testing.+In+Proceedings+of+the+Genetic+and+Evolutionary+Computation+Conference+%28GECCO+%2717%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1335-1342.+https%3A%2F%2Fdoi.org%2F10.1145%2F3071178.3071184+10.1145%2F3071178.3071184^^^');
INSERT INTO `paper_ref` VALUES (3, 44, 'Bram Adams, Kris De Schutter, Herman Tromp, and Wolfgang De Meuter. 2008. The evolution of the Linux build system. Electronic Communications of the EASST ( 2008 ). https://doi.org/10.14279/tuj. eceasst.8.115.119 ***http://scholar.google.com/scholar?hl=en&q=Bram+Adams%2C+Kris+De+Schutter%2C+Herman+Tromp%2C+and+Wolfgang+De+Meuter.+2008.+The+evolution+of+the+Linux+build+system.+Electronic+Communications+of+the+EASST+%28+2008+%29.+https%3A%2F%2Fdoi.org%2F10.14279%2Ftuj.+eceasst.8.115.119+10.14279%2Ftuj.eceasst.8.115.119^^^Bram Adams, Herman Tromp, Kris De Schutter, and Wolfgang De Meuter. 2007. Design recovery and maintenance of build systems. In IEEE International Conference on Software Maintenance (ICSM). https://doi.org/10.1109/ICSM. 2007. 4362624 ***http://scholar.google.com/scholar?hl=en&q=Bram+Adams%2C+Herman+Tromp%2C+Kris+De+Schutter%2C+and+Wolfgang+De+Meuter.+2007.+Design+recovery+and+maintenance+of+build+systems.+In+IEEE+International+Conference+on+Software+Maintenance+%28ICSM%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSM.+2007.+4362624+10.1109%2FICSM.2007.4362624^^^Shivali Agarwal, Rajkishore Barik, Vivek Sarkar, and Rudrapatna K. Shyamasundar. 2007. May-happen-in-parallel analysis of X10 programs. In Proceedings of the ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPOPP). https://doi.org/10.1145/1229428.1229471 ***http://scholar.google.com/scholar?hl=en&q=Shivali+Agarwal%2C+Rajkishore+Barik%2C+Vivek+Sarkar%2C+and+Rudrapatna+K.+Shyamasundar.+2007.+May-happen-in-parallel+analysis+of+X10+programs.+In+Proceedings+of+the+ACM+SIGPLAN+Symposium+on+Principles+and+Practice+of+Parallel+Programming+%28PPOPP%29.+https%3A%2F%2Fdoi.org%2F10.1145%2F1229428.1229471+10.1145%2F1229428.1229471^^^Jafar Al-Kofahi, Hung Viet Nguyen, and Tien N. Nguyen. 2014. Fault localization for make-based build crashes. In Proceedings-30th International Conference on Software Maintenance and Evolution (ICSME). https://doi.org/10.1109/ICSME. 2014.87 ***http://scholar.google.com/scholar?hl=en&q=Jafar+Al-Kofahi%2C+Hung+Viet+Nguyen%2C+and+Tien+N.+Nguyen.+2014.+Fault+localization+for+make-based+build+crashes.+In+Proceedings-30th+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSME.+2014.87+10.1109%2FICSME.2014.87^^^Jafar Al-Kofahi, Hung Viet Nguyen, and Tien N. Nguyen. 2014. Fault localization for build code errors in makefiles. In 36th International Conference on Software Engineering, ICSE Companion 2014-Proceedings. https://doi.org/10.1145/2591062. 2591135 ***http://scholar.google.com/scholar?hl=en&q=Jafar+Al-Kofahi%2C+Hung+Viet+Nguyen%2C+and+Tien+N.+Nguyen.+2014.+Fault+localization+for+build+code+errors+in+makefiles.+In+36th+International+Conference+on+Software+Engineering%2C+ICSE+Companion+2014-Proceedings.+https%3A%2F%2Fdoi.org%2F10.1145%2F2591062.+2591135+10.1145%2F2591062.2591135^^^Cor Paul Bezemer, Shane McIntosh, Bram Adams, Daniel M. German, and Ahmed E. Hassan. 2017. An empirical study of unspecified dependencies in make-based build systems. Empirical Software Engineering ( 2017 ). https: //doi.org/10.1007/s10664-017-9510-8 ***http://scholar.google.com/scholar?hl=en&q=Cor+Paul+Bezemer%2C+Shane+McIntosh%2C+Bram+Adams%2C+Daniel+M.+German%2C+and+Ahmed+E.+Hassan.+2017.+An+empirical+study+of+unspecified+dependencies+in+make-based+build+systems.+Empirical+Software+Engineering+%28+2017+%29.+https%3A+%2F%2Fdoi.org%2F10.1007%2Fs10664-017-9510-8+10.1007%2Fs10664-017-9510-8^^^Electric Cloud. 2020. ElectricAccelerator EMake: Speeds Up Builds and Tests. https://electric-cloud.com/plugins/directory/p/emake/ [Online; accessed 25-Aug2019 ].***http://scholar.google.com/scholar?hl=en&q=Electric+Cloud.+2020.+ElectricAccelerator+EMake%3A+Speeds+Up+Builds+and+Tests.+https%3A%2F%2Felectric-cloud.com%2Fplugins%2Fdirectory%2Fp%2Femake%2F+%5BOnline%3B+accessed+25-Aug2019+%5D.^^^Automake Contributors. 2012. GNU Autotools. https://www.gnu.org/software/ automake [Online; accessed 25-Aug-2019].***http://scholar.google.com/scholar?hl=en&q=Automake+Contributors.+2012.+GNU+Autotools.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2F+automake+%5BOnline%3B+accessed+25-Aug-2019%5D.^^^Drake. 2020. Build Cop. https://drake.mit.edu/buildcop.html [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Drake.+2020.+Build+Cop.+https%3A%2F%2Fdrake.mit.edu%2Fbuildcop.html+%5BOnline%3B+accessed+25-May-2020%5D.^^^Stuart I. Feldman. 1979. Make-a program for maintaining computer programs. Software: Practice and Experience ( 1979 ). https://doi.org/10.1002/spe.4380090402 ***http://scholar.google.com/scholar?hl=en&q=Stuart+I.+Feldman.+1979.+Make-a+program+for+maintaining+computer+programs.+Software%3A+Practice+and+Experience+%28+1979+%29.+https%3A%2F%2Fdoi.org%2F10.1002%2Fspe.4380090402+10.1002%2Fspe.4380090402^^^Milos Gligoric, Wolfram Schulte, Chandra Prasad, Danny van Velzen, Iman Narasamdya, and Benjamin Livshits. 2014. Automated migration of build scripts using dynamic analysis and search-based refactoring. ACM SIGPLAN Notices ( 2014 ). https://doi.org/10.1145/2714064.2660239 ***http://scholar.google.com/scholar?hl=en&q=Milos+Gligoric%2C+Wolfram+Schulte%2C+Chandra+Prasad%2C+Danny+van+Velzen%2C+Iman+Narasamdya%2C+and+Benjamin+Livshits.+2014.+Automated+migration+of+build+scripts+using+dynamic+analysis+and+search-based+refactoring.+ACM+SIGPLAN+Notices+%28+2014+%29.+https%3A%2F%2Fdoi.org%2F10.1145%2F2714064.2660239+10.1145%2F2714064.2660239^^^Carl A. Gunter. 1996. Abstracting dependencies between software configuration items. In Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE). https://doi.org/10.1145/250707.239129 ***http://scholar.google.com/scholar?hl=en&q=Carl+A.+Gunter.+1996.+Abstracting+dependencies+between+software+configuration+items.+In+Proceedings+of+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering+%28FSE%29.+https%3A%2F%2Fdoi.org%2F10.1145%2F250707.239129+10.1145%2F250707.239129^^^Ryan Hardt and Ethan V. Munson. 2013. Ant build maintenance with formiga. In 2013 1st International Workshop on Release Engineering, RELENG 2013-Proceedings. https://doi.org/10.1109/RELENG. 2013.6607690 ***http://scholar.google.com/scholar?hl=en&q=Ryan+Hardt+and+Ethan+V.+Munson.+2013.+Ant+build+maintenance+with+formiga.+In+2013+1st+International+Workshop+on+Release+Engineering%2C+RELENG+2013-Proceedings.+https%3A%2F%2Fdoi.org%2F10.1109%2FRELENG.+2013.6607690+10.1109%2FRELENG.2013.6607690^^^Foyzul Hassan and Xiaoyin Wang. 2018. HireBuild: An automatic approach to history-driven repair of build scripts. In Proceedings of the 40th International Conference on Software Engineering (ICSE). IEEE/ACM. https://doi.org/10.1145/ 3180155.3180181 ***http://scholar.google.com/scholar?hl=en&q=Foyzul+Hassan+and+Xiaoyin+Wang.+2018.+HireBuild%3A+An+automatic+approach+to+history-driven+repair+of+build+scripts.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28ICSE%29.+IEEE%2FACM.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3180155.3180181+10.1145%2F3180155.3180181^^^Lorin Hochstein and Yang Jiao. 2011. The cost of the build tax in scientific software. In International Symposium on Empirical Software Engineering and Measurement (ESEM).***http://scholar.google.com/scholar?hl=en&q=Lorin+Hochstein+and+Yang+Jiao.+2011.+The+cost+of+the+build+tax+in+scientific+software.+In+International+Symposium+on+Empirical+Software+Engineering+and+Measurement+%28ESEM%29.^^^International Business Machines Corporation (IBM). 2020. IBM Rational Clearcase. https://www.ibm.com/us-en/marketplace/rational-clearcase [Online; accessed 25-Aug-2019].***http://scholar.google.com/scholar?hl=en&q=International+Business+Machines+Corporation+%28IBM%29.+2020.+IBM+Rational+Clearcase.+https%3A%2F%2Fwww.ibm.com%2Fus-en%2Fmarketplace%2Frational-clearcase+%5BOnline%3B+accessed+25-Aug-2019%5D.^^^Google Inc. 2019. Actual and declared dependencies. https://docs.bazel.build/ versions/master/build-ref.html#actual_and_declared_dependencies [Online; accessed 25-Aug-2019].***http://scholar.google.com/scholar?hl=en&q=Google+Inc.+2019.+Actual+and+declared+dependencies.+https%3A%2F%2Fdocs.bazel.build%2F+versions%2Fmaster%2Fbuild-ref.html%23actual_and_declared_dependencies+%5BOnline%3B+accessed+25-Aug-2019%5D.^^^Google Inc. 2019. Bazel-a fast, scalable, multi-language and extensible build system. https://bazel.build/ [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Google+Inc.+2019.+Bazel-a+fast%2C+scalable%2C+multi-language+and+extensible+build+system.+https%3A%2F%2Fbazel.build%2F+%5BOnline%3B+accessed+25-May-2020%5D.^^^Google Inc. 2019. Bazel Query. https://docs.bazel.build/versions/master/queryhow-to. htmle [Online; accessed 25-Aug-2019].***http://scholar.google.com/scholar?hl=en&q=Google+Inc.+2019.+Bazel+Query.+https%3A%2F%2Fdocs.bazel.build%2Fversions%2Fmaster%2Fqueryhow-to.+htmle+%5BOnline%3B+accessed+25-Aug-2019%5D.^^^Lim James. 2019. Combating Flaky Builds. https://medium.com/@jimjh/ combating-flaky-builds-f8aaa9ccd29a [Online; accessed 25-Aug-2019].***http://scholar.google.com/scholar?hl=en&q=Lim+James.+2019.+Combating+Flaky+Builds.+https%3A%2F%2Fmedium.com%2F%40jimjh%2F+combating-flaky-builds-f8aaa9ccd29a+%5BOnline%3B+accessed+25-Aug-2019%5D.^^^Petr Machata Juan Cespedes. 2019. ltrace. http://man7.org/linux/manpages/man1/ltrace.1.html [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Petr+Machata+Juan+Cespedes.+2019.+ltrace.+http%3A%2F%2Fman7.org%2Flinux%2Fmanpages%2Fman1%2Fltrace.1.html+%5BOnline%3B+accessed+25-May-2020%5D.^^^Nándor Licker and Andrew Rice. 2019. Detecting incorrect build rules. In Proceedings of the 41st International Conference on Software Engineering (ICSE). IEEE, 1234-1244. https://doi.org/10.1109/ICSE. 2019.00125 ***http://scholar.google.com/scholar?hl=en&q=N%C3%A1ndor+Licker+and+Andrew+Rice.+2019.+Detecting+incorrect+build+rules.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE%29.+IEEE%2C+1234-1244.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2019.00125+10.1109%2FICSE.2019.00125^^^Yiling Lou, Junjie Chen, Lingming Zhang, Dan Hao, and Lu Zhang. 2019. Historydriven build failure fixing: How far are we?. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA). https://doi.org/10.1145/3293882.3330578 ***http://scholar.google.com/scholar?hl=en&q=Yiling+Lou%2C+Junjie+Chen%2C+Lingming+Zhang%2C+Dan+Hao%2C+and+Lu+Zhang.+2019.+Historydriven+build+failure+fixing%3A+How+far+are+we%3F.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%29.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330578+10.1145%2F3293882.3330578^^^Christian Macho, Shane McIntosh, and Martin Pinzger. 2018. Automatically repairing dependency-related build breakage. In 25th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER). https: //doi.org/10.1109/SANER. 2018.8330201 ***http://scholar.google.com/scholar?hl=en&q=Christian+Macho%2C+Shane+McIntosh%2C+and+Martin+Pinzger.+2018.+Automatically+repairing+dependency-related+build+breakage.+In+25th+IEEE+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29.+https%3A+%2F%2Fdoi.org%2F10.1109%2FSANER.+2018.8330201+10.1109%2FSANER.2018.8330201^^^GNU Make Manual. 2019. Auto-Dependency Generation. ftp://ftp.gnu.org/oldgnu/Manuals/make-3.77/html_node/make_43.html [Online; accessed 25-Aug2019 ].***http://scholar.google.com/scholar?hl=en&q=GNU+Make+Manual.+2019.+Auto-Dependency+Generation.+ftp%3A%2F%2Fftp.gnu.org%2Foldgnu%2FManuals%2Fmake-3.77%2Fhtml_node%2Fmake_43.html+%5BOnline%3B+accessed+25-Aug2019+%5D.^^^GNU Make Manual. 2019. Prerequisite Types. https://www.gnu.org/software/ make/manual/html_node/Prerequisite-Types. html [Online; accessed 25-Aug2019].***http://scholar.google.com/scholar?hl=en&q=GNU+Make+Manual.+2019.+Prerequisite+Types.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2F+make%2Fmanual%2Fhtml_node%2FPrerequisite-Types.+html+%5BOnline%3B+accessed+25-Aug2019%5D.^^^Ken Martin and Bill Hofman. 2010. Mastering CMake: a cross-platform build system. Kitware.***http://scholar.google.com/scholar?hl=en&q=Ken+Martin+and+Bill+Hofman.+2010.+Mastering+CMake%3A+a+cross-platform+build+system.+Kitware.^^^Friedemann Mattern. 1989. Virtual Time and Global States of Distributed Systems. Event London ( 1989 ). https://doi.org/10.1.1.47.7435***http://scholar.google.com/scholar?hl=en&q=Friedemann+Mattern.+1989.+Virtual+Time+and+Global+States+of+Distributed+Systems.+Event+London+%28+1989+%29.+https%3A%2F%2Fdoi.org%2F10.1.1.47.7435^^^Bill McCloskey. 2019. memoize. https://github.com/kgaughan/memoize.py [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Bill+McCloskey.+2019.+memoize.+https%3A%2F%2Fgithub.com%2Fkgaughan%2Fmemoize.py+%5BOnline%3B+accessed+25-May-2020%5D.^^^Shane McIntosh, Bram Adams, Meiyappan Nagappan, and Ahmed E. Hassan. 2014. Mining co-change information to understand when build changes are necessary. In Proceedings-30th International Conference on Software Maintenance and Evolution (ICSME). https://doi.org/10.1109/ICSME. 2014.46 ***http://scholar.google.com/scholar?hl=en&q=Shane+McIntosh%2C+Bram+Adams%2C+Meiyappan+Nagappan%2C+and+Ahmed+E.+Hassan.+2014.+Mining+co-change+information+to+understand+when+build+changes+are+necessary.+In+Proceedings-30th+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSME.+2014.46+10.1109%2FICSME.2014.46^^^Microsoft. 2020. NMAKE Reference. https://docs.microsoft.com/en-us/cpp/ build/reference/nmake-reference?view= vs-2019 [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Microsoft.+2020.+NMAKE+Reference.+https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fcpp%2F+build%2Freference%2Fnmake-reference%3Fview%3D+vs-2019+%5BOnline%3B+accessed+25-May-2020%5D.^^^Eric S Raymond. 2003. The art of Unix programming. Addison-Wesley Professional.***http://scholar.google.com/scholar?hl=en&q=Eric+S+Raymond.+2003.+The+art+of+Unix+programming.+Addison-Wesley+Professional.^^^Zhilei Ren, He Jiang, Jifeng Xuan, and Zijiang Yang. 2018. Automated Localization for Unreproducible Builds. In Proceedings of the 40th International Conference on Software Engineering ( ICSE) (Gothenburg, Sweden). Association for Computing Machinery, New York, NY, USA, 71-81. https://doi.org/10.1145/3180155.3180224 ***http://scholar.google.com/scholar?hl=en&q=Zhilei+Ren%2C+He+Jiang%2C+Jifeng+Xuan%2C+and+Zijiang+Yang.+2018.+Automated+Localization+for+Unreproducible+Builds.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28+ICSE%29+%28Gothenburg%2C+Sweden%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+71-81.+https%3A%2F%2Fdoi.org%2F10.1145%2F3180155.3180224+10.1145%2F3180155.3180224^^^Hyunmin Seo, Caitlin Sadowski, Sebastian Elbaum, Edward Aftandilian, and Robert Bowdidge. 2014. Programmers\' build errors: A case study (at google). In Proceedings-International Conference on Software Engineering (ICSE). https: //doi.org/10.1145/2568225.2568255 ***http://scholar.google.com/scholar?hl=en&q=Hyunmin+Seo%2C+Caitlin+Sadowski%2C+Sebastian+Elbaum%2C+Edward+Aftandilian%2C+and+Robert+Bowdidge.+2014.+Programmers%27+build+errors%3A+A+case+study+%28at+google%29.+In+Proceedings-International+Conference+on+Software+Engineering+%28ICSE%29.+https%3A+%2F%2Fdoi.org%2F10.1145%2F2568225.2568255+10.1145%2F2568225.2568255^^^Mike Shal. 2009. Build system rules and algorithms. Published online ( 2009 ). Retrieved July 18 ( 2009 ), 2013. http://gittup.org/tup/build_system_rules_and_algorithms.pdf***http://scholar.google.com/scholar?hl=en&q=Mike+Shal.+2009.+Build+system+rules+and+algorithms.+Published+online+%28+2009+%29.+Retrieved+July+18+%28+2009+%29%2C+2013.+http%3A%2F%2Fgittup.org%2Ftup%2Fbuild_system_rules_and_algorithms.pdf^^^Ahmed Tamrawi, Hoan Anh Nguyen, Hung Viet Nguyen, and Tien N. Nguyen. 2012. Build Code Analysis with Symbolic Evaluation. In Proceedings of the 34th International Conference on Software Engineering ( ICSE) (Zurich, Switzerland). IEEE Press, 650-660.***http://scholar.google.com/scholar?hl=en&q=Ahmed+Tamrawi%2C+Hoan+Anh+Nguyen%2C+Hung+Viet+Nguyen%2C+and+Tien+N.+Nguyen.+2012.+Build+Code+Analysis+with+Symbolic+Evaluation.+In+Proceedings+of+the+34th+International+Conference+on+Software+Engineering+%28+ICSE%29+%28Zurich%2C+Switzerland%29.+IEEE+Press%2C+650-660.^^^Ahmed Tamrawi, Hoan Anh Nguyen, Hung Viet Nguyen, and Tien N Nguyen. 2012. SYMake: a build code analysis and refactoring tool for makefiles. In Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM, 366-369.***http://scholar.google.com/scholar?hl=en&q=Ahmed+Tamrawi%2C+Hoan+Anh+Nguyen%2C+Hung+Viet+Nguyen%2C+and+Tien+N+Nguyen.+2012.+SYMake%3A+a+build+code+analysis+and+refactoring+tool+for+makefiles.+In+Proceedings+of+the+27th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+ACM%2C+366-369.^^^Brush Technology. 2019. fabricate. https://github.com/brushtechnology/fabricate [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Brush+Technology.+2019.+fabricate.+https%3A%2F%2Fgithub.com%2Fbrushtechnology%2Ffabricate+%5BOnline%3B+accessed+25-May-2020%5D.^^^Mohsen Vakilian, Raluca Sauciuc, J. David Morgenthaler, and Vahab Mirrokni. 2015. Automated Decomposition of Build Targets. In Proceedings of the 37th International Conference on Software Engineering-Volume 1 ( ICSE ) (Florence, Italy). IEEE Press, 123-133.***http://scholar.google.com/scholar?hl=en&q=Mohsen+Vakilian%2C+Raluca+Sauciuc%2C+J.+David+Morgenthaler%2C+and+Vahab+Mirrokni.+2015.+Automated+Decomposition+of+Build+Targets.+In+Proceedings+of+the+37th+International+Conference+on+Software+Engineering-Volume+1+%28+ICSE+%29+%28Florence%2C+Italy%29.+IEEE+Press%2C+123-133.^^^Carmine Vassallo, Sebastian Proksch, Timothy Zemp, and Harald C. Gall. 2018. Un-break My Build: Assisting Developers with Build Repair Hints. 2018 IEEE/ACM 26th International Conference on Program Comprehension (ICPC) ( 2018 ), 41-4110.***http://scholar.google.com/scholar?hl=en&q=Carmine+Vassallo%2C+Sebastian+Proksch%2C+Timothy+Zemp%2C+and+Harald+C.+Gall.+2018.+Un-break+My+Build%3A+Assisting+Developers+with+Build+Repair+Hints.+2018+IEEE%2FACM+26th+International+Conference+on+Program+Comprehension+%28ICPC%29+%28+2018+%29%2C+41-4110.^^^VestaSys. 2020. Vesta Configuration Management System. http://www.vestasys. org/ [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=VestaSys.+2020.+Vesta+Configuration+Management+System.+http%3A%2F%2Fwww.vestasys.+org%2F+%5BOnline%3B+accessed+25-May-2020%5D.^^^Wikipedia contributors. 2020. List of NP-complete problems. https://en.wikipedia. org/w/index.php?title=List_of_NP-complete_problems &oldid=957698266 [Online; accessed 25-May-2020].***http://scholar.google.com/scholar?hl=en&q=Wikipedia+contributors.+2020.+List+of+NP-complete+problems.+https%3A%2F%2Fen.wikipedia.+org%2Fw%2Findex.php%3Ftitle%3DList_of_NP-complete_problems+%26oldid%3D957698266+%5BOnline%3B+accessed+25-May-2020%5D.^^^Xin Xia, David Lo, Xinyu Wang, and Bo Zhou. 2014. Build system analysis with link prediction. In Proceedings of the ACM Symposium on Applied Computing (SAC). https://doi.org/10.1145/2554850.2555134 ***http://scholar.google.com/scholar?hl=en&q=Xin+Xia%2C+David+Lo%2C+Xinyu+Wang%2C+and+Bo+Zhou.+2014.+Build+system+analysis+with+link+prediction.+In+Proceedings+of+the+ACM+Symposium+on+Applied+Computing+%28SAC%29.+https%3A%2F%2Fdoi.org%2F10.1145%2F2554850.2555134+10.1145%2F2554850.2555134^^^Bo Zhou, Xin Xia, David Lo, and Xinyu Wang. 2014. Build predictor: More accurate missed dependency prediction in build configuration files. In Proceedings-International Computer Software and Applications Conference (COMPSAC). https://doi.org/10.1109/COMPSAC. 2014.12 ***http://scholar.google.com/scholar?hl=en&q=Bo+Zhou%2C+Xin+Xia%2C+David+Lo%2C+and+Xinyu+Wang.+2014.+Build+predictor%3A+More+accurate+missed+dependency+prediction+in+build+configuration+files.+In+Proceedings-International+Computer+Software+and+Applications+Conference+%28COMPSAC%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FCOMPSAC.+2014.12+10.1109%2FCOMPSAC.2014.12^^^');
INSERT INTO `paper_ref` VALUES (4, 41, 'Gul A. Agha. 1990. ACTORS-A Model of Concurrent Computation in Distributed Systems. MIT Press.***http://scholar.google.com/scholar?hl=en&q=Gul+A.+Agha.+1990.+ACTORS-A+Model+of+Concurrent+Computation+in+Distributed+Systems.+MIT+Press.^^^Tony Antoniadis, Konstantinos Triantafyllou, and Yannis Smaragdakis. 2017. Porting Doop to Souflé: a Tale of Inter-Engine Portability for Datalog-Based Analyses. In Proceedings of the 6th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis. ACM, 25-30.***http://scholar.google.com/scholar?hl=en&q=Tony+Antoniadis%2C+Konstantinos+Triantafyllou%2C+and+Yannis+Smaragdakis.+2017.+Porting+Doop+to+Soufl%C3%A9%3A+a+Tale+of+Inter-Engine+Portability+for+Datalog-Based+Analyses.+In+Proceedings+of+the+6th+ACM+SIGPLAN+International+Workshop+on+State+Of+the+Art+in+Program+Analysis.+ACM%2C+25-30.^^^Eric Bodden. 2012. Inter-procedural Data-flow Analysis with IFDS/IDE and Soot. In SOAP. 3-8.***http://scholar.google.com/scholar?hl=en&q=Eric+Bodden.+2012.+Inter-procedural+Data-flow+Analysis+with+IFDS%2FIDE+and+Soot.+In+SOAP.+3-8.^^^Martin Bravenboer and Yannis Smaragdakis. 2009. Strictly Declarative Specification of Sophisticated Points-to Analyses. In Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA\'09). 243-262.***http://scholar.google.com/scholar?hl=en&q=Martin+Bravenboer+and+Yannis+Smaragdakis.+2009.+Strictly+Declarative+Specification+of+Sophisticated+Points-to+Analyses.+In+Proceedings+of+the+24th+ACM+SIGPLAN+Conference+on+Object+Oriented+Programming+Systems+Languages+and+Applications+%28OOPSLA%2709%29.+243-262.^^^DoopBenchmarks [n.d.]. Doop Benchmarks. https://bitbucket.org/yanniss/doopbenchmarks.***http://scholar.google.com/scholar?hl=en&q=DoopBenchmarks+%5Bn.d.%5D.+Doop+Benchmarks.+https%3A%2F%2Fbitbucket.org%2Fyanniss%2Fdoopbenchmarks.^^^M. Eichberg, F. Kübler, D. Helm, M. Reif, G. Salvaneschi, and M. Mezini. 2018. Lattice Based Modularization of Static Analyses. In Companion Proceedings for the ISSTA/ECOOP 2018 Workshops (ISSTA\'18). ACM, 113-118.***http://scholar.google.com/scholar?hl=en&q=M.+Eichberg%2C+F.+K%C3%BCbler%2C+D.+Helm%2C+M.+Reif%2C+G.+Salvaneschi%2C+and+M.+Mezini.+2018.+Lattice+Based+Modularization+of+Static+Analyses.+In+Companion+Proceedings+for+the+ISSTA%2FECOOP+2018+Workshops+%28ISSTA%2718%29.+ACM%2C+113-118.^^^Conal Elliott and Paul Hudak. 1997. Functional Reactive Animation. In Proceedings of the Second ACM SIGPLAN International Conference on Functional Programming (ICFP \'97). ACM, New York, NY, USA, 263-273.***http://scholar.google.com/scholar?hl=en&q=Conal+Elliott+and+Paul+Hudak.+1997.+Functional+Reactive+Animation.+In+Proceedings+of+the+Second+ACM+SIGPLAN+International+Conference+on+Functional+Programming+%28ICFP+%2797%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+263-273.^^^David Grove and Craig Chambers. 2001. A Framework for Call Graph Construction Algorithms. TOPLAS 23, 6 (Nov. 2001 ), 685-746.***http://scholar.google.com/scholar?hl=en&q=David+Grove+and+Craig+Chambers.+2001.+A+Framework+for+Call+Graph+Construction+Algorithms.+TOPLAS+23%2C+6+%28Nov.+2001+%29%2C+685-746.^^^Elnar Hajiyev, Mathieu Verbaere, and Oege De Moor. 2006. Codequest: Scalable Source Code Queries with Datalog. In European Conference on Object-Oriented Programming (ECOOP\'06). Springer, 2-27.***http://scholar.google.com/scholar?hl=en&q=Elnar+Hajiyev%2C+Mathieu+Verbaere%2C+and+Oege+De+Moor.+2006.+Codequest%3A+Scalable+Source+Code+Queries+with+Datalog.+In+European+Conference+on+Object-Oriented+Programming+%28ECOOP%2706%29.+Springer%2C+2-27.^^^Philipp Haller, Simon Geries, Michael Eichberg, and Guido Salvaneschi. 2016. Reactive Async: Expressive Deterministic Concurrency. In ***http://scholar.google.com/scholar?hl=en&q=Philipp+Haller%2C+Simon+Geries%2C+Michael+Eichberg%2C+and+Guido+Salvaneschi.+2016.+Reactive+Async%3A+Expressive+Deterministic+Concurrency.+In+SCALA%40SPLASH.+ACM%2C+11-20.^^^ ACM, 11-20.***http://scholar.google.com/scholar?hl=en&q=Philipp+Haller+and+Heather+Miller.+2019.+A+Reduction+Semantics+for+Direct-Style+Asynchronous+Observables.+J.+Log.+Algebr.+Meth.+Program.+105+%28+2019+%29%2C+75-111.^^^Philipp Haller and Heather Miller. 2019. A Reduction Semantics for Direct-Style Asynchronous Observables. J. Log. Algebr. Meth. Program. 105 ( 2019 ), 75-111.***http://scholar.google.com/scholar?hl=en&q=Philipp+Haller+and+Martin+Odersky.+2009.+Scala+Actors%3A+Unifying+Thread-Based+and+Event-Based+Programming.+Theoretical+Computer+Science+410%2C+2-3+%28+2009+%29%2C+202-220.^^^Philipp Haller and Martin Odersky. 2009. Scala Actors: Unifying Thread-Based and Event-Based Programming. Theoretical Computer Science 410, 2-3 ( 2009 ), 202-220.***http://scholar.google.com/scholar?hl=en&q=Tim+Harris+and+Satnam+Singh.+2007.+Feedback+Directed+Implicit+Parallelism.+In+Proceedings+of+the+12th+ACM+SIGPLAN+International+Conference+on+Functional+Programming+%28ICFP%2707%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+251-264.^^^Tim Harris and Satnam Singh. 2007. Feedback Directed Implicit Parallelism. In Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming (ICFP\'07). Association for Computing Machinery, New York, NY, USA, 251-264.***http://scholar.google.com/scholar?hl=en&q=Dominik+Helm%2C+Florian+K%C3%BCbler%2C+Michael+Eichberg%2C+Michael+Reif%2C+and+Mira+Mezini.+2018.+A+Unified+Lattice+Model+and+Framework+for+Purity+Analyses.+In+ASE.+ACM%2C+340-350.^^^Dominik Helm, Florian Kübler, Michael Eichberg, Michael Reif, and Mira Mezini. 2018. A Unified Lattice Model and Framework for Purity Analyses. In ASE. ACM, 340-350.***http://scholar.google.com/scholar?hl=en&q=Heros+%5Bn.d.%5D.+Heros+IFDS+%2FIDE+Solver.+https%3A%2F%2Fgithub.com%2FSable%2Fheros.^^^Heros [n.d.]. Heros IFDS /IDE Solver. https://github.com/Sable/heros.***http://scholar.google.com/scholar?hl=en&q=Carl+Hewitt%2C+Peter+Boehler+Bishop%2C+and+Richard+Steiger.+1973.+A+Universal+Modular+ACTOR+Formalism+for+Artificial+Intelligence.+In+Proceedings+of+the+3rd+International+Joint+Conference+on+Artificial+Intelligence+%28IJCAI%29.+Standford%2C+CA%2C+USA%2C+August+20-23%2C+1973.+William+Kaufmann%2C+235-245.^^^Carl Hewitt, Peter Boehler Bishop, and Richard Steiger. 1973. A Universal Modular ACTOR Formalism for Artificial Intelligence. In Proceedings of the 3rd International Joint Conference on Artificial Intelligence (IJCAI). Standford, CA, USA, August 20-23, 1973. William Kaufmann, 235-245.***http://scholar.google.com/scholar?hl=en&q=Milind+Kulkarni%2C+Martin+Burtscher%2C+Rajasekhar+Inkulu%2C+Keshav+Pingali%2C+and+Calin+Cascaval.+2009.+How+much+Parallelism+is+there+in+Irregular+Applications%3F.+In+PPoPP.+ACM%2C+3-14.^^^Milind Kulkarni, Martin Burtscher, Rajasekhar Inkulu, Keshav Pingali, and Calin Cascaval. 2009. How much Parallelism is there in Irregular Applications?. In PPoPP. ACM, 3-14.***http://scholar.google.com/scholar?hl=en&q=Milind+Kulkarni%2C+Keshav+Pingali%2C+Bruce+Walter%2C+Ganesh+Ramanarayanan%2C+Kavita+Bala%2C+and+L.+Paul+Chew.+2007.+Optimistic+Parallelism+Requires+Abstractions.+In+PLDI.+ACM%2C+211-222.^^^Milind Kulkarni, Keshav Pingali, Bruce Walter, Ganesh Ramanarayanan, Kavita Bala, and L. Paul Chew. 2007. Optimistic Parallelism Requires Abstractions. In PLDI. ACM, 211-222.***http://scholar.google.com/scholar?hl=en&q=Lindsey+Kuper%2C+Aaron+Turon%2C+Neelakantan+R.+Krishnaswami%2C+and+Ryan+R.+Newton.+2014.+Freeze+After+Writing%3A+Quasi-Deterministic+Parallel+Programming+with+LVars.+In+POPL.+ACM%2C+257-270.^^^Lindsey Kuper, Aaron Turon, Neelakantan R. Krishnaswami, and Ryan R. Newton. 2014. Freeze After Writing: Quasi-Deterministic Parallel Programming with LVars. In POPL. ACM, 257-270.***http://scholar.google.com/scholar?hl=en&q=Johannes+Lerch%2C+Ben+Hermann%2C+Eric+Bodden%2C+and+Mira+Mezini.+2014.+FlowTwist%3A+Eficient+Context-Sensitive+Inside-Out+Taint+Analysis+for+Large+Codebases.+In+SIGSOFT+FSE.+ACM%2C+98-108.^^^Johannes Lerch, Ben Hermann, Eric Bodden, and Mira Mezini. 2014. FlowTwist: Eficient Context-Sensitive Inside-Out Taint Analysis for Large Codebases. In SIGSOFT FSE. ACM, 98-108.***http://scholar.google.com/scholar?hl=en&q=Magnus+Madsen%2C+Ming-Ho+Yee%2C+and+Ondrej+Lhot%C3%A1k.+2016.+From+Datalog+to+Flix%3A+A+Declarative+Language+for+Fixed+Points+on+Lattices.+In+PLDI.+ACM%2C+194-208.^^^Magnus Madsen, Ming-Ho Yee, and Ondrej Lhoták. 2016. From Datalog to Flix: A Declarative Language for Fixed Points on Lattices. In PLDI. ACM, 194-208.***http://scholar.google.com/scholar?hl=en&q=A.+Margara+and+G.+Salvaneschi.+2018.+On+the+Semantics+of+Distributed+Reactive+Programming%3A+The+Cost+of+Consistency.+IEEE+Transactions+on+Software+Engineering+44%2C+7+%28+2018+%29%2C+689-711.^^^A. Margara and G. Salvaneschi. 2018. On the Semantics of Distributed Reactive Programming: The Cost of Consistency. IEEE Transactions on Software Engineering 44, 7 ( 2018 ), 689-711.***http://scholar.google.com/scholar?hl=en&q=Simon+Marlow%2C+Simon+Peyton+Jones%2C+and+Satnam+Singh.+2009.+Runtime+Support+for+Multicore+Haskell.+In+Proceedings+of+the+14th+ACM+SIGPLAN+International+Conference+on+Functional+Programming+%28ICFP%2709%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+65-78.^^^Simon Marlow, Simon Peyton Jones, and Satnam Singh. 2009. Runtime Support for Multicore Haskell. In Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming (ICFP\'09). Association for Computing Machinery, New York, NY, USA, 65-78.***http://scholar.google.com/scholar?hl=en&q=Erik+Meijer.+2010.+Reactive+Extensions+%28Rx%29%3A+Curing+Your+Asynchronous+Programming+Blues.+In+ACM+SIGPLAN+Commercial+Users+of+Functional+Programming+%28CUFP+%2710%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+Article+11%2C+1+pages.^^^Erik Meijer. 2010. Reactive Extensions (Rx): Curing Your Asynchronous Programming Blues. In ACM SIGPLAN Commercial Users of Functional Programming (CUFP \'10). ACM, New York, NY, USA, Article 11, 1 pages.***http://scholar.google.com/scholar?hl=en&q=Mario+M%C3%A9ndez-Lojo%2C+Martin+Burtscher%2C+and+Keshav+Pingali.+2012.+A+GPU+Implementation+of+Inclusion-Based+Points-to+Analysis.+In+PPoPP.+ACM%2C+107-116.^^^Mario Méndez-Lojo, Martin Burtscher, and Keshav Pingali. 2012. A GPU Implementation of Inclusion-Based Points-to Analysis. In PPoPP. ACM, 107-116.***http://scholar.google.com/scholar?hl=en&q=Mario+M%C3%A9ndez-Lojo%2C+Augustine+Mathew%2C+and+Keshav+Pingali.+2010.+Parallel+Inclusion-Based+Points-to+Analysis.+In+OOPSLA.+ACM%2C+428-443.^^^Mario Méndez-Lojo, Augustine Mathew, and Keshav Pingali. 2010. Parallel Inclusion-Based Points-to Analysis. In OOPSLA. ACM, 428-443.***http://scholar.google.com/scholar?hl=en&q=Leo+A.+Meyerovich%2C+Arjun+Guha%2C+Jacob+Baskin%2C+Gregory+H.+Cooper%2C+Michael+Greenberg%2C+Aleks+Bromfield%2C+and+Shriram+Krishnamurthi.+2009.+Flapjax%3A+A+Programming+Language+for+Ajax+Applications.+In+Proceeding+of+the+24th+ACM+SIGPLAN+Conference+on+Object+Oriented+Programming+Systems+Languages+and+Applications+%28OOPSLA+%2709%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1-20.^^^Leo A. Meyerovich, Arjun Guha, Jacob Baskin, Gregory H. Cooper, Michael Greenberg, Aleks Bromfield, and Shriram Krishnamurthi. 2009. Flapjax: A Programming Language for Ajax Applications. In Proceeding of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA \'09). ACM, New York, NY, USA, 1-20.***http://scholar.google.com/scholar?hl=en&q=Opal+%5Bn.d.%5D.+OPAL.+https%3A%2F%2Fgithub.com%2Fstg-tud%2Fopal.^^^Opal [n.d.]. OPAL. https://github.com/stg-tud/opal.***http://scholar.google.com/scholar?hl=en&q=Tarun+Prabhu%2C+Shreyas+Ramalingam%2C+Matthew+Might%2C+and+Mary+W.+Hall.+2011.+EigenCFA%3A+Accelerating+Flow+Analysis+with+GPUs.+In+POPL.+ACM%2C+511-522.^^^Tarun Prabhu, Shreyas Ramalingam, Matthew Might, and Mary W. Hall. 2011. EigenCFA: Accelerating Flow Analysis with GPUs. In POPL. ACM, 511-522.***http://scholar.google.com/scholar?hl=en&q=Michael+Reif%2C+Florian+K%C3%BCbler%2C+Michael+Eichberg%2C+Dominik+Helm%2C+and+Mira+Mezini.+2019.+Judge%3A+Identifying%2C+Understanding%2C+and+Evaluating+Sources+of+Unsoundness+in+Call+Graphs.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+251-261.^^^Michael Reif, Florian Kübler, Michael Eichberg, Dominik Helm, and Mira Mezini. 2019. Judge: Identifying, Understanding, and Evaluating Sources of Unsoundness in Call Graphs. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 251-261.***http://scholar.google.com/scholar?hl=en&q=Michael+Reif%2C+Florian+K%C3%BCbler%2C+Michael+Eichberg%2C+and+Mira+Mezini.+2018.+Systematic+Evaluation+of+the+Unsoundness+of+Call+Graph+Construction+Algorithms+for+Java.+In+Companion+Proceedings+for+the+ISSTA%2FECOOP+2018+Workshops.+ACM%2C+107-112.^^^Michael Reif, Florian Kübler, Michael Eichberg, and Mira Mezini. 2018. Systematic Evaluation of the Unsoundness of Call Graph Construction Algorithms for Java. In Companion Proceedings for the ISSTA/ECOOP 2018 Workshops. ACM, 107-112.***http://scholar.google.com/scholar?hl=en&q=Thomas+W.+Reps%2C+Susan+Horwitz%2C+and+Shmuel+Sagiv.+1995.+Precise+Interprocedural+Dataflow+Analysis+via+Graph+Reachability.+In+POPL.+ACM%2C+49-61.^^^Thomas W. Reps, Susan Horwitz, and Shmuel Sagiv. 1995. Precise Interprocedural Dataflow Analysis via Graph Reachability. In POPL. ACM, 49-61.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Rodriguez+and+Ondrej+Lhot%C3%A1k.+2011.+Actor-Based+Parallel+Dataflow+Analysis.+In+CC.+Springer%2C+179-197.^^^Jonathan Rodriguez and Ondrej Lhoták. 2011. Actor-Based Parallel Dataflow Analysis. In CC. Springer, 179-197.***http://scholar.google.com/scholar?hl=en&q=Tiark+Rompf%2C+Ingo+Maier%2C+and+Martin+Odersky.+2009.+Implementing+FirstClass+Polymorphic+Delimited+Continuations+by+a+Type-Directed+Selective+CPSTransform.+In+Proceeding+of+the+14th+ACM+SIGPLAN+International+Conference+on+Functional+programming+%28ICFP%2709%29.+ACM%2C+317-328.^^^Tiark Rompf, Ingo Maier, and Martin Odersky. 2009. Implementing FirstClass Polymorphic Delimited Continuations by a Type-Directed Selective CPSTransform. In Proceeding of the 14th ACM SIGPLAN International Conference on Functional programming (ICFP\'09). ACM, 317-328.***http://scholar.google.com/scholar?hl=en&q=Guido+Salvaneschi%2C+Gerold+Hintz%2C+and+Mira+Mezini.+2014.+REScala%3A+Bridging+Between+Object-oriented+and+Functional+Style+in+Reactive+Applications.+In+Proceedings+of+the+13th+International+Conference+on+Modularity+%28MODULARITY%2714%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+25-36.^^^Guido Salvaneschi, Gerold Hintz, and Mira Mezini. 2014. REScala: Bridging Between Object-oriented and Functional Style in Reactive Applications. In Proceedings of the 13th International Conference on Modularity (MODULARITY\'14). ACM, New York, NY, USA, 25-36.***http://scholar.google.com/scholar?hl=en&q=Guido+Salvaneschi+and+Mira+Mezini.+2016.+Debugging+for+Reactive+Programming.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering+%28ICSE%2716%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+796-807.^^^Guido Salvaneschi and Mira Mezini. 2016. Debugging for Reactive Programming. In Proceedings of the 38th International Conference on Software Engineering (ICSE\'16). Association for Computing Machinery, New York, NY, USA, 796-807.***http://scholar.google.com/scholar?hl=en&q=Bernhard+Scholz%2C+Herbert+Jordan%2C+Pavle+Suboti%C4%87%2C+and+Till+Westmann.+2016.+On+Fast+Large-Scale+Program+Analysis+in+Datalog.+In+Proceedings+of+the+25th+International+Conference+on+Compiler+Construction.+ACM%2C+196-206.^^^Bernhard Scholz, Herbert Jordan, Pavle Subotić, and Till Westmann. 2016. On Fast Large-Scale Program Analysis in Datalog. In Proceedings of the 25th International Conference on Compiler Construction. ACM, 196-206.***http://scholar.google.com/scholar?hl=en&q=Johannes+Sp%C3%A4th%2C+Lisa+Nguyen+Quang+Do%2C+Karim+Ali%2C+and+Eric+Bodden.+2016.+Boomerang%3A+Demand-Driven+Flow-and+Context-Sensitive+Pointer+Analysis+for+Java.+In+ECOOP+%28LIPIcs%29%2C+Vol.+56.+Schloss+Dagstuhl-Leibniz-Zentrum+fuer+Informatik%2C+22+%3A+1-22+%3A+26.^^^Johannes Späth, Lisa Nguyen Quang Do, Karim Ali, and Eric Bodden. 2016. Boomerang: Demand-Driven Flow-and Context-Sensitive Pointer Analysis for Java. In ECOOP (LIPIcs), Vol. 56. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 22 : 1-22 : 26.***http://scholar.google.com/scholar?hl=en&q=Wala+%5Bn.d.%5D.+Wala.+http%3A%2F%2Fwala.sourceforge.net.^^^Wala [n.d.]. Wala. http://wala.sourceforge.net.***http://scholar.google.com/scholar?hl=en&q=John+Whaley%2C+Dzintars+Avots%2C+Michael+Carbin%2C+and+Monica+S+Lam.+2005.+Using+Datalog+with+Binary+Decision+Diagrams+for+Program+Analysis.+In+Asian+Symposium+on+Programming+Languages+and+Systems.+Springer%2C+97-118.^^^John Whaley, Dzintars Avots, Michael Carbin, and Monica S Lam. 2005. Using Datalog with Binary Decision Diagrams for Program Analysis. In Asian Symposium on Programming Languages and Systems. Springer, 97-118.***http://scholar.google.com/scholar?hl=en&q=John+Whaley+and+Monica+S.+Lam.+2004.+Cloning-Based+Context-Sensitive+Pointer+Alias+Analysis+Using+Binary+Decision+Diagrams.+In+Proceedings+of+the+ACM+SIGPLAN+2004+Conference+on+Programming+Language+Design+and+Implementation+%28PLDI%2704%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+131-144.^^^');
INSERT INTO `paper_ref` VALUES (5, 52, '2007. scikit-learn: Machine learning in Python. Retrieved Jan 15, 2020 from https://scikit-learn.org***http://scholar.google.com/scholar?hl=en&q=2007.+scikit-learn%3A+Machine+learning+in+Python.+Retrieved+Jan+15%2C+2020+from+https%3A%2F%2Fscikit-learn.org^^^2020. Apache POI-the Java API for Microsoft Documents. Retrieved Jan 15, 2020 from https://poi.apache.org/***http://scholar.google.com/scholar?hl=en&q=2020.+Apache+POI-the+Java+API+for+Microsoft+Documents.+Retrieved+Jan+15%2C+2020+from+https%3A%2F%2Fpoi.apache.org%2F^^^2020. Ideas in Excel. Retrieved January 15, 2020 from https://support.ofice.com/enie/article/ideas-in-excel-3223aab8-f543-4fda-85ed-76bb0295fc4***http://scholar.google.com/scholar?hl=en&q=2020.+Ideas+in+Excel.+Retrieved+January+15%2C+2020+from+https%3A%2F%2Fsupport.ofice.com%2Fenie%2Farticle%2Fideas-in-excel-3223aab8-f543-4fda-85ed-76bb0295fc4^^^2020. Power BI | Interactive Data Visualization BI Tools. Retrieved Jan 15, 2020 from https://powerbi.microsoft.com***http://scholar.google.com/scholar?hl=en&q=2020.+Power+BI+%7C+Interactive+Data+Visualization+BI+Tools.+Retrieved+Jan+15%2C+2020+from+https%3A%2F%2Fpowerbi.microsoft.com^^^2020. Weka 3: Machine Learning Software in Java. Retrieved Jan 15, 2020 from http://www.cs.waikato.ac.nz/ml/weka***http://scholar.google.com/scholar?hl=en&q=2020.+Weka+3%3A+Machine+Learning+Software+in+Java.+Retrieved+Jan+15%2C+2020+from+http%3A%2F%2Fwww.cs.waikato.ac.nz%2Fml%2Fweka^^^Robin Abraham and Martin Erwig. 2004. Header and unit inference for spreadsheets through spatial analyses. In Proceedings of IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC). 165-172.***http://scholar.google.com/scholar?hl=en&q=Robin+Abraham+and+Martin+Erwig.+2004.+Header+and+unit+inference+for+spreadsheets+through+spatial+analyses.+In+Proceedings+of+IEEE+Symposium+on+Visual+Languages+and+Human-Centric+Computing+%28VL%2FHCC%29.+165-172.^^^Robin Abraham and Martin Erwig. 2007. UCheck: A spreadsheet type checker for end users. Journal of Visual Languages and Computing 18, 1 ( 2007 ), 71-95.***http://scholar.google.com/scholar?hl=en&q=Robin+Abraham+and+Martin+Erwig.+2007.+UCheck%3A+A+spreadsheet+type+checker+for+end+users.+Journal+of+Visual+Languages+and+Computing+18%2C+1+%28+2007+%29%2C+71-95.^^^Robin Abraham, Martin Erwig, Steve Kollmansberger, and Ethan Seifert. 2005. Visual specifications of correct spreadsheets. In Proceedings of IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC). 189-196.***http://scholar.google.com/scholar?hl=en&q=Robin+Abraham%2C+Martin+Erwig%2C+Steve+Kollmansberger%2C+and+Ethan+Seifert.+2005.+Visual+specifications+of+correct+spreadsheets.+In+Proceedings+of+IEEE+Symposium+on+Visual+Languages+and+Human-Centric+Computing+%28VL%2FHCC%29.+189-196.^^^Brenda S Baker. 1995. On finding duplication and near-duplication in large software systems. In Proceedings of Working Conference on Reverse Engineering (WCRE). 86-95.***http://scholar.google.com/scholar?hl=en&q=Brenda+S+Baker.+1995.+On+finding+duplication+and+near-duplication+in+large+software+systems.+In+Proceedings+of+Working+Conference+on+Reverse+Engineering+%28WCRE%29.+86-95.^^^Titus Barik, Kevin Lubick, Justin Smith, John Slankas, and Emerson Murphy-Hill. 2015. Fuse: A reproducible, extendable, internet-scale corpus of spreadsheets. In Proceedings of Working Conference on Mining Software Repositories (MSR). 486-489.***http://scholar.google.com/scholar?hl=en&q=Titus+Barik%2C+Kevin+Lubick%2C+Justin+Smith%2C+John+Slankas%2C+and+Emerson+Murphy-Hill.+2015.+Fuse%3A+A+reproducible%2C+extendable%2C+internet-scale+corpus+of+spreadsheets.+In+Proceedings+of+Working+Conference+on+Mining+Software+Repositories+%28MSR%29.+486-489.^^^Daniel W. Barowy, Emery D. Berger, and Benjamin Zorn. 2018. ExceLint: Automatically finding spreadsheet formula errors. In Proceedings of International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA). 148 : 1-148 : 26.***http://scholar.google.com/scholar?hl=en&q=Daniel+W.+Barowy%2C+Emery+D.+Berger%2C+and+Benjamin+Zorn.+2018.+ExceLint%3A+Automatically+finding+spreadsheet+formula+errors.+In+Proceedings+of+International+Conference+on+Object+Oriented+Programming+Systems+Languages+and+Applications+%28OOPSLA%29.+148+%3A+1-148+%3A+26.^^^Ira D Baxter, Andrew Yahin, Leonardo Moura, Marcelo Sant\'Anna, and Lorraine Bier. 1998. Clone detection using abstract syntax trees. In Proceedings of International Conference on Software Maintenance (ICSM). 368-377.***http://scholar.google.com/scholar?hl=en&q=Ira+D+Baxter%2C+Andrew+Yahin%2C+Leonardo+Moura%2C+Marcelo+Sant%27Anna%2C+and+Lorraine+Bier.+1998.+Clone+detection+using+abstract+syntax+trees.+In+Proceedings+of+International+Conference+on+Software+Maintenance+%28ICSM%29.+368-377.^^^Stefan Bellon, Rainer Koschke, Giulio Antoniol, Jens Krinke, and Ettore Merlo. 2007. Comparison and evaluation of clone detection tools. IEEE Transactions on software engineering (TSE) 33, 9 ( 2007 ), 577-591.***http://scholar.google.com/scholar?hl=en&q=Stefan+Bellon%2C+Rainer+Koschke%2C+Giulio+Antoniol%2C+Jens+Krinke%2C+and+Ettore+Merlo.+2007.+Comparison+and+evaluation+of+clone+detection+tools.+IEEE+Transactions+on+software+engineering+%28TSE%29+33%2C+9+%28+2007+%29%2C+577-591.^^^Leo Breiman. 2001. Random forests. Machine learning 45, 1 ( 2001 ), 5-32.***http://scholar.google.com/scholar?hl=en&q=Leo+Breiman.+2001.+Random+forests.+Machine+learning+45%2C+1+%28+2001+%29%2C+5-32.^^^Zhe Chen and Michael Cafarella. 2014. Integrating spreadsheet data via accurate and low-efort extraction. In Proceedings of ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD). 1126-1135.***http://scholar.google.com/scholar?hl=en&q=Zhe+Chen+and+Michael+Cafarella.+2014.+Integrating+spreadsheet+data+via+accurate+and+low-efort+extraction.+In+Proceedings+of+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining+%28KDD%29.+1126-1135.^^^Shing-Chi Cheung, Wanjun Chen, Yepang Liu, and Chang Xu. 2016. CUSTODES: Automatic spreadsheet cell clustering and smell detection using strong and weak features. In Proceedings of International Conference on Software Engineering (ICSE). 464-475.***http://scholar.google.com/scholar?hl=en&q=Shing-Chi+Cheung%2C+Wanjun+Chen%2C+Yepang+Liu%2C+and+Chang+Xu.+2016.+CUSTODES%3A+Automatic+spreadsheet+cell+clustering+and+smell+detection+using+strong+and+weak+features.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+464-475.^^^Haoyu Dong, Shijie Liu, Shi Han, Zhouyu Fu, and Dongmei Zhang. 2019. TableSense: Spreadsheet table detection with convolutional neural networks. In Proceedings of AAAI Conference on Artificial Intelligence (AAAI). 69-76.***http://scholar.google.com/scholar?hl=en&q=Haoyu+Dong%2C+Shijie+Liu%2C+Shi+Han%2C+Zhouyu+Fu%2C+and+Dongmei+Zhang.+2019.+TableSense%3A+Spreadsheet+table+detection+with+convolutional+neural+networks.+In+Proceedings+of+AAAI+Conference+on+Artificial+Intelligence+%28AAAI%29.+69-76.^^^Wensheng Dou, Shing-Chi Cheung, Chushu Gao, Chang Xu, Liang Xu, and Jun Wei. 2016. Detecting table clones and smells in spreadsheets. In Proceedings of ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE). 787-798.***http://scholar.google.com/scholar?hl=en&q=Wensheng+Dou%2C+Shing-Chi+Cheung%2C+Chushu+Gao%2C+Chang+Xu%2C+Liang+Xu%2C+and+Jun+Wei.+2016.+Detecting+table+clones+and+smells+in+spreadsheets.+In+Proceedings+of+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering+%28FSE%29.+787-798.^^^Wensheng Dou, Shing-Chi Cheung, and Jun Wei. 2014. Is spreadsheet ambiguity harmful? Detecting and repairing spreadsheet smells due to ambiguous computation. In Proceedings of International Conference on Software Engineering (ICSE). 848-858.***http://scholar.google.com/scholar?hl=en&q=Wensheng+Dou%2C+Shing-Chi+Cheung%2C+and+Jun+Wei.+2014.+Is+spreadsheet+ambiguity+harmful%3F+Detecting+and+repairing+spreadsheet+smells+due+to+ambiguous+computation.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+848-858.^^^Wensheng Dou, Shi Han, Liang Xu, Dongmei Zhang, and Jun Wei. 2018. Expandable group identification in spreadsheets. In Proceedings of International Conference on Automated Software Engineering (ASE). 498-508.***http://scholar.google.com/scholar?hl=en&q=Wensheng+Dou%2C+Shi+Han%2C+Liang+Xu%2C+Dongmei+Zhang%2C+and+Jun+Wei.+2018.+Expandable+group+identification+in+spreadsheets.+In+Proceedings+of+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+498-508.^^^Wensheng Dou, Chang Xu, S. C. Cheung, and Jun Wei. 2017. CACheck: Detecting and repairing cell arrays in spreadsheets. IEEE Transactions on software Engineering (TSE) 43, 3 ( 2017 ), 226-251.***http://scholar.google.com/scholar?hl=en&q=Wensheng+Dou%2C+Chang+Xu%2C+S.+C.+Cheung%2C+and+Jun+Wei.+2017.+CACheck%3A+Detecting+and+repairing+cell+arrays+in+spreadsheets.+IEEE+Transactions+on+software+Engineering+%28TSE%29+43%2C+3+%28+2017+%29%2C+226-251.^^^Wensheng Dou, Liang Xu, Shing-Chi Cheung, Chushu Gao, Jun Wei, and Tao Huang. 2016. VEnron: A versioned spreadsheet corpus and related evolution analysis. In Proceedings of International Conference on Software Engineering (ICSE). 162-171.***http://scholar.google.com/scholar?hl=en&q=Wensheng+Dou%2C+Liang+Xu%2C+Shing-Chi+Cheung%2C+Chushu+Gao%2C+Jun+Wei%2C+and+Tao+Huang.+2016.+VEnron%3A+A+versioned+spreadsheet+corpus+and+related+evolution+analysis.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+162-171.^^^Stéphane Ducasse, Oscar Nierstrasz, and Matthias Rieger. 2004. Lightweight detection of duplicated code-A language-independent approach. Institute for Applied Mathematics and Computer Science, University of Berne ( 2004 ).***http://scholar.google.com/scholar?hl=en&q=St%C3%A9phane+Ducasse%2C+Oscar+Nierstrasz%2C+and+Matthias+Rieger.+2004.+Lightweight+detection+of+duplicated+code-A+language-independent+approach.+Institute+for+Applied+Mathematics+and+Computer+Science%2C+University+of+Berne+%28+2004+%29.^^^Marc Fisher and Gregg Rothermel. 2005. The EUSES spreadsheet corpus: A shared resource for supporting experimentation with spreadsheet dependability mechanisms. 30, 4 ( 2005 ), 1-5.***http://scholar.google.com/scholar?hl=en&q=Marc+Fisher+and+Gregg+Rothermel.+2005.+The+EUSES+spreadsheet+corpus%3A+A+shared+resource+for+supporting+experimentation+with+spreadsheet+dependability+mechanisms.+30%2C+4+%28+2005+%29%2C+1-5.^^^Felienne Hermans, Bas Jansen, Sohon Roy, Efthimia Aivaloglou, Alaaeddin Swidan, and David Hoepelman. 2016. Spreadsheets are code: An overview of software engineering approaches applied to spreadsheets. In Proceedings of International Conference on Software Analysis, Evolution, and Reengineering (SANER). 56-65.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans%2C+Bas+Jansen%2C+Sohon+Roy%2C+Efthimia+Aivaloglou%2C+Alaaeddin+Swidan%2C+and+David+Hoepelman.+2016.+Spreadsheets+are+code%3A+An+overview+of+software+engineering+approaches+applied+to+spreadsheets.+In+Proceedings+of+International+Conference+on+Software+Analysis%2C+Evolution%2C+and+Reengineering+%28SANER%29.+56-65.^^^Felienne Hermans and Emerson Murphy-Hill. 2015. Enron\'s spreadsheets and related emails: A dataset and analysis. In Proceedings of International Conference on Software Engineering (ICSE), Vol. 2. 7-16.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans+and+Emerson+Murphy-Hill.+2015.+Enron%27s+spreadsheets+and+related+emails%3A+A+dataset+and+analysis.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29%2C+Vol.+2.+7-16.^^^Felienne Hermans, Martin Pinzger, and Arie van Deursen. 2011. Supporting professional spreadsheet users by generating leveled dataflow diagrams. In Proceedings of International Conference on Software Engineering (ICSE). 451-460.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans%2C+Martin+Pinzger%2C+and+Arie+van+Deursen.+2011.+Supporting+professional+spreadsheet+users+by+generating+leveled+dataflow+diagrams.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+451-460.^^^Felienne Hermans, Martin Pinzger, and Arie van Deursen. 2012. Detecting and visualizing inter-worksheet smells in spreadsheets. In Proceedings of International Conference on Software Engineering (ICSE). 441-451.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans%2C+Martin+Pinzger%2C+and+Arie+van+Deursen.+2012.+Detecting+and+visualizing+inter-worksheet+smells+in+spreadsheets.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+441-451.^^^Felienne Hermans, Martin Pinzger, and Arie Van Deursen. 2010. Automatically extracting class diagrams from spreadsheets. In Proceedings of European Conference on Object-Oriented Programming (ECOOP). 52-75.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans%2C+Martin+Pinzger%2C+and+Arie+Van+Deursen.+2010.+Automatically+extracting+class+diagrams+from+spreadsheets.+In+Proceedings+of+European+Conference+on+Object-Oriented+Programming+%28ECOOP%29.+52-75.^^^Felienne Hermans, Ben Sedee, Martin Pinzger, and Arie van Deursen. 2013. Data clone detection and visualization in spreadsheets. In Proceedings of International Conference on Software Engineering (ICSE). 292-301.***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans%2C+Ben+Sedee%2C+Martin+Pinzger%2C+and+Arie+van+Deursen.+2013.+Data+clone+detection+and+visualization+in+spreadsheets.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+292-301.^^^Felienne Hermans and Tijs van der Storm. 2015. Copy-paste tracking: Fixing spreadsheets without breaking them. In Proceedings of International Conference on Live Coding (ICLC).***http://scholar.google.com/scholar?hl=en&q=Felienne+Hermans+and+Tijs+van+der+Storm.+2015.+Copy-paste+tracking%3A+Fixing+spreadsheets+without+breaking+them.+In+Proceedings+of+International+Conference+on+Live+Coding+%28ICLC%29.^^^Lingxiao Jiang, Ghassan Misherghi, Zhendong Su, and Stephane Glondu. 2007. Deckard: Scalable and accurate tree-based detection of code clones. In Proceedings of International Conference on Software Engineering (ICSE). 96-105.***http://scholar.google.com/scholar?hl=en&q=Lingxiao+Jiang%2C+Ghassan+Misherghi%2C+Zhendong+Su%2C+and+Stephane+Glondu.+2007.+Deckard%3A+Scalable+and+accurate+tree-based+detection+of+code+clones.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+96-105.^^^Lingxiao Jiang, Zhendong Su, and Edwin Chiu. 2007. Context-based detection of clone-related bugs. In Proceedings of Joint Meeting of the European Software Engineering Conference and ACM SIGSOFT Symposium on The Foundations of Software Engineering (ESEC/FSE). 55-64.***http://scholar.google.com/scholar?hl=en&q=Lingxiao+Jiang%2C+Zhendong+Su%2C+and+Edwin+Chiu.+2007.+Context-based+detection+of+clone-related+bugs.+In+Proceedings+of+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+ACM+SIGSOFT+Symposium+on+The+Foundations+of+Software+Engineering+%28ESEC%2FFSE%29.+55-64.^^^Thorsten Joachims. 1998. Text categorization with support vector machines: Learning with many relevant features. In Proceedings of European Conference on Machine Learning (ECML). 137-142.***http://scholar.google.com/scholar?hl=en&q=Thorsten+Joachims.+1998.+Text+categorization+with+support+vector+machines%3A+Learning+with+many+relevant+features.+In+Proceedings+of+European+Conference+on+Machine+Learning+%28ECML%29.+137-142.^^^Elmar Juergens, Florian Deissenboeck, and Benjamin Hummel. 2009. CloneDetective-A workbench for clone detection research. In Proceedings of International Conference on Software Engineering (ICSE). 603-606.***http://scholar.google.com/scholar?hl=en&q=Elmar+Juergens%2C+Florian+Deissenboeck%2C+and+Benjamin+Hummel.+2009.+CloneDetective-A+workbench+for+clone+detection+research.+In+Proceedings+of+International+Conference+on+Software+Engineering+%28ICSE%29.+603-606.^^^Toshihiro Kamiya, Shinji Kusumoto, and Katsuro Inoue. 2002. CCFinder: A multilinguistic token-based code clone detection system for large scale source code. IEEE Transactions on Software Engineering (TSE) 28, 7 ( 2002 ), 654-670.***http://scholar.google.com/scholar?hl=en&q=Toshihiro+Kamiya%2C+Shinji+Kusumoto%2C+and+Katsuro+Inoue.+2002.+CCFinder%3A+A+multilinguistic+token-based+code+clone+detection+system+for+large+scale+source+code.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+28%2C+7+%28+2002+%29%2C+654-670.^^^Zaheer Ullah Khan, Maqsood Hayat, and Muazzam Ali Khan. 2015. Discrimination of acidic and alkaline enzyme using Chou\'s pseudo amino acid composition in conjunction with probabilistic neural network model. Journal of Theoretical Biology 365 ( 2015 ), 197-203.***http://scholar.google.com/scholar?hl=en&q=Zaheer+Ullah+Khan%2C+Maqsood+Hayat%2C+and+Muazzam+Ali+Khan.+2015.+Discrimination+of+acidic+and+alkaline+enzyme+using+Chou%27s+pseudo+amino+acid+composition+in+conjunction+with+probabilistic+neural+network+model.+Journal+of+Theoretical+Biology+365+%28+2015+%29%2C+197-203.^^^Bryan Klimt and Yiming Yang. 2004. The Enron corpus: A new dataset for email classification research. In Proceedings of European Conference on Machine Learning (ECML). 217-226.***http://scholar.google.com/scholar?hl=en&q=Bryan+Klimt+and+Yiming+Yang.+2004.+The+Enron+corpus%3A+A+new+dataset+for+email+classification+research.+In+Proceedings+of+European+Conference+on+Machine+Learning+%28ECML%29.+217-226.^^^Elvis Koci, Maik Thiele, Óscar Romero Moral, and Wolfgang Lehner. 2016. A machine learning approach for layout inference in spreadsheets. In Proceedings of International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management. 77-88.***http://scholar.google.com/scholar?hl=en&q=Elvis+Koci%2C+Maik+Thiele%2C+%C3%93scar+Romero+Moral%2C+and+Wolfgang+Lehner.+2016.+A+machine+learning+approach+for+layout+inference+in+spreadsheets.+In+Proceedings+of+International+Joint+Conference+on+Knowledge+Discovery%2C+Knowledge+Engineering+and+Knowledge+Management.+77-88.^^^Jens Krinke. 2001. Identifying similar code with program dependence graphs. In Proceedings of Working Conference on Reverse Engineering (WCRE). 1095-1350.***http://scholar.google.com/scholar?hl=en&q=Jens+Krinke.+2001.+Identifying+similar+code+with+program+dependence+graphs.+In+Proceedings+of+Working+Conference+on+Reverse+Engineering+%28WCRE%29.+1095-1350.^^^S Lee. 2005. Application of logistic regression model and its validation for landslide susceptibility mapping using GIS and remote sensing data. International Journal of Remote Sensing 26, 7 ( 2005 ), 1477-1491.***http://scholar.google.com/scholar?hl=en&q=S+Lee.+2005.+Application+of+logistic+regression+model+and+its+validation+for+landslide+susceptibility+mapping+using+GIS+and+remote+sensing+data.+International+Journal+of+Remote+Sensing+26%2C+7+%28+2005+%29%2C+1477-1491.^^^Liuqing Li, He Feng, Wenjie Zhuang, Na Meng, and Barbara Ryder. 2017. CCLearner: A deep learning-based clone detection approach. In Proceedings of International Conference on Software Maintenance and Evolution (ICSME). 249-260.***http://scholar.google.com/scholar?hl=en&q=Liuqing+Li%2C+He+Feng%2C+Wenjie+Zhuang%2C+Na+Meng%2C+and+Barbara+Ryder.+2017.+CCLearner%3A+A+deep+learning-based+clone+detection+approach.+In+Proceedings+of+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+249-260.^^^Zhenmin Li, Shan Lu, Suvda Myagmar, and Yuanyuan Zhou. 2006. CP-Miner: Finding copy-paste and related bugs in large-scale software code. IEEE Transactions on software Engineering (TSE) 32, 3 ( 2006 ), 176-192.***http://scholar.google.com/scholar?hl=en&q=Zhenmin+Li%2C+Shan+Lu%2C+Suvda+Myagmar%2C+and+Yuanyuan+Zhou.+2006.+CP-Miner%3A+Finding+copy-paste+and+related+bugs+in+large-scale+software+code.+IEEE+Transactions+on+software+Engineering+%28TSE%29+32%2C+3+%28+2006+%29%2C+176-192.^^^Ephraim R McLean, Leon A Kappelman, and John P Thompson. 1993. Converging end-user and corporate computing. Commun. ACM 36, 12 ( 1993 ), 78-90.***http://scholar.google.com/scholar?hl=en&q=Ephraim+R+McLean%2C+Leon+A+Kappelman%2C+and+John+P+Thompson.+1993.+Converging+end-user+and+corporate+computing.+Commun.+ACM+36%2C+12+%28+1993+%29%2C+78-90.^^^Raymond R Panko. 2008. Spreadsheet errors: What we know. What we think we can do. arXiv preprint arXiv:0802.3457 ( 2008 ).***http://scholar.google.com/scholar?hl=en&q=Raymond+R+Panko.+2008.+Spreadsheet+errors%3A+What+we+know.+What+we+think+we+can+do.+arXiv+preprint+arXiv%3A0802.3457+%28+2008+%29.^^^Stephen G. Powell, Kenneth R. Baker, and Barry Lawson. 2008. A critical review of the literature on spreadsheet errors. 46, 1 ( 2008 ), 128-138.***http://scholar.google.com/scholar?hl=en&q=Stephen+G.+Powell%2C+Kenneth+R.+Baker%2C+and+Barry+Lawson.+2008.+A+critical+review+of+the+literature+on+spreadsheet+errors.+46%2C+1+%28+2008+%29%2C+128-138.^^^S Rasoul Safavian and David Landgrebe. 1991. A survey of decision tree classifier methodology. IEEE Transactions on Systems, Man, and Cybernetics 21, 3 ( 1991 ), 660-674.***http://scholar.google.com/scholar?hl=en&q=S+Rasoul+Safavian+and+David+Landgrebe.+1991.+A+survey+of+decision+tree+classifier+methodology.+IEEE+Transactions+on+Systems%2C+Man%2C+and+Cybernetics+21%2C+3+%28+1991+%29%2C+660-674.^^^Christopher Scafidi, Mary Shaw, and Brad Myers. 2005. Estimating the numbers of end users and end user programmers. In Proceedings of IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC). 207-214.***http://scholar.google.com/scholar?hl=en&q=Christopher+Scafidi%2C+Mary+Shaw%2C+and+Brad+Myers.+2005.+Estimating+the+numbers+of+end+users+and+end+user+programmers.+In+Proceedings+of+IEEE+Symposium+on+Visual+Languages+and+Human-Centric+Computing+%28VL%2FHCC%29.+207-214.^^^Martin White, Michele Tufano, Christopher Vendome, and Denys Poshyvanyk. 2016. Deep learning code fragments for code clone detection. In Proceedings of International Conference on Automated Software Engineering (ASE). 87-98.***http://scholar.google.com/scholar?hl=en&q=Martin+White%2C+Michele+Tufano%2C+Christopher+Vendome%2C+and+Denys+Poshyvanyk.+2016.+Deep+learning+code+fragments+for+code+clone+detection.+In+Proceedings+of+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+87-98.^^^Liang Xu, Wensheng Dou, Chushu Gao, Jie Wang, Jun Wei, Hua Zhong, and Tao Huang. 2017. SpreadCluster: Recovering versioned spreadsheets through similarity-based clustering. In Proceedings of International Conference on Mining Software Repositories (MSR). 158-169.***http://scholar.google.com/scholar?hl=en&q=Liang+Xu%2C+Wensheng+Dou%2C+Chushu+Gao%2C+Jie+Wang%2C+Jun+Wei%2C+Hua+Zhong%2C+and+Tao+Huang.+2017.+SpreadCluster%3A+Recovering+versioned+spreadsheets+through+similarity-based+clustering.+In+Proceedings+of+International+Conference+on+Mining+Software+Repositories+%28MSR%29.+158-169.^^^Liang Xu, Wensheng Dou, Jiaxin Zhu, Chushu Gao, Jun Wei, and Tao Huang. 2018. How are spreadsheet templates ssed in practice: A case study on Enron. In Proceedings of ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE). 734-738.***http://scholar.google.com/scholar?hl=en&q=Liang+Xu%2C+Wensheng+Dou%2C+Jiaxin+Zhu%2C+Chushu+Gao%2C+Jun+Wei%2C+and+Tao+Huang.+2018.+How+are+spreadsheet+templates+ssed+in+practice%3A+A+case+study+on+Enron.+In+Proceedings+of+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%29.+734-738.^^^Liang Xu, Shuo Wang, Wensheng Dou, Bo Yang, Chushu Gao, Jun Wei, and Tao Huang. 2018. Detecting faulty empty cells in spreadsheets. In Proceedings of International Conference on Software Analysis, Evolution and Reengineering (SANER). 423-433.***http://scholar.google.com/scholar?hl=en&q=Liang+Xu%2C+Shuo+Wang%2C+Wensheng+Dou%2C+Bo+Yang%2C+Chushu+Gao%2C+Jun+Wei%2C+and+Tao+Huang.+2018.+Detecting+faulty+empty+cells+in+spreadsheets.+In+Proceedings+of+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29.+423-433.^^^');
INSERT INTO `paper_ref` VALUES (6, 30, 'Daniel Abeles and Moshe Zioni. 2019. MQTT-PWN Documentation. https:// buildmedia.readthedocs.org/media/pdf/mqtt-pwn/latest/mqtt-pwn.pdf. [Online; accessed 17-September-2019].***http://scholar.google.com/scholar?hl=en&q=Daniel+Abeles+and+Moshe+Zioni.+2019.+MQTT-PWN+Documentation.+https%3A%2F%2F+buildmedia.readthedocs.org%2Fmedia%2Fpdf%2Fmqtt-pwn%2Flatest%2Fmqtt-pwn.pdf.+%5BOnline%3B+accessed+17-September-2019%5D.^^^Khalid Alghamdi, Ali Alqazzaz, Anyi Liu, and Hua Ming. 2018. Iotverif: An automated tool to verify SSL/TLS certificate validation in android MQTT client applications. In Proceedings of the ACM Conference on Data and Application Security and Privacy. 95-102. https://doi.org/10.1145/3176258.3176334 ***http://scholar.google.com/scholar?hl=en&q=Khalid+Alghamdi%2C+Ali+Alqazzaz%2C+Anyi+Liu%2C+and+Hua+Ming.+2018.+Iotverif%3A+An+automated+tool+to+verify+SSL%2FTLS+certificate+validation+in+android+MQTT+client+applications.+In+Proceedings+of+the+ACM+Conference+on+Data+and+Application+Security+and+Privacy.+95-102.+https%3A%2F%2Fdoi.org%2F10.1145%2F3176258.3176334+10.1145%2F3176258.3176334^^^P. Anantharaman, M. Locasto, G. F. Ciocarlie, and U. Lindqvist. 2017. Building Hardened Internet-of-Things Clients with Language-Theoretic Security. In Proceedings of the IEEE Security and Privacy Workshops. 120-126. https: //doi.org/10.1109/SPW. 2017.36 ***http://scholar.google.com/scholar?hl=en&q=P.+Anantharaman%2C+M.+Locasto%2C+G.+F.+Ciocarlie%2C+and+U.+Lindqvist.+2017.+Building+Hardened+Internet-of-Things+Clients+with+Language-Theoretic+Security.+In+Proceedings+of+the+IEEE+Security+and+Privacy+Workshops.+120-126.+https%3A+%2F%2Fdoi.org%2F10.1109%2FSPW.+2017.36+10.1109%2FSPW.2017.36^^^S. Andy, B. Rahardjo, and B. Hanindhito. 2017. Attack scenarios and security analysis of MQTT communication protocol in IoT system. In Proceedings of the International Conference on Electrical Engineering, Computer Science and Informatics. 1-6. https://doi.org/10.1109/EECSI. 2017.8239179 ***http://scholar.google.com/scholar?hl=en&q=S.+Andy%2C+B.+Rahardjo%2C+and+B.+Hanindhito.+2017.+Attack+scenarios+and+security+analysis+of+MQTT+communication+protocol+in+IoT+system.+In+Proceedings+of+the+International+Conference+on+Electrical+Engineering%2C+Computer+Science+and+Informatics.+1-6.+https%3A%2F%2Fdoi.org%2F10.1109%2FEECSI.+2017.8239179+10.1109%2FEECSI.2017.8239179^^^Joseph Jose Anthraper and Joseph Kotak. 2017. Security, Privacy and Forensic Concern of MQTT Protocol. In Proceedings of the International Conference on Sustainable Computing in Science, Technology and Management. 1-8. https: //doi.org/10.2139/ssrn.3355193 ***http://scholar.google.com/scholar?hl=en&q=Joseph+Jose+Anthraper+and+Joseph+Kotak.+2017.+Security%2C+Privacy+and+Forensic+Concern+of+MQTT+Protocol.+In+Proceedings+of+the+International+Conference+on+Sustainable+Computing+in+Science%2C+Technology+and+Management.+1-8.+https%3A+%2F%2Fdoi.org%2F10.2139%2Fssrn.3355193+10.2139%2Fssrn.3355193^^^João Antunes, Nuno Neves, Miguel Correia, Paulo Verissimo, and Rui Neves. 2010. Vulnerability discovery with attack injection. IEEE Transactions on Software Engineering 36, 3 ( 2010 ), 357-370. https://doi.org/10.1109/TSE. 2009.91 ***http://scholar.google.com/scholar?hl=en&q=Jo%C3%A3o+Antunes%2C+Nuno+Neves%2C+Miguel+Correia%2C+Paulo+Verissimo%2C+and+Rui+Neves.+2010.+Vulnerability+discovery+with+attack+injection.+IEEE+Transactions+on+Software+Engineering+36%2C+3+%28+2010+%29%2C+357-370.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2009.91+10.1109%2FTSE.2009.91^^^Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, Xiaofeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through App-based Fuzzing. In Network and Distributed Systems Security Symposium. https://doi.org/10.14722/ndss. 2018.23159 ***http://scholar.google.com/scholar?hl=en&q=Jiongyi+Chen%2C+Wenrui+Diao%2C+Qingchuan+Zhao%2C+Chaoshun+Zuo%2C+Zhiqiang+Lin%2C+Xiaofeng+Wang%2C+Wing+Cheong+Lau%2C+Menghan+Sun%2C+Ronghai+Yang%2C+and+Kehuan+Zhang.+2018.+IoTFuzzer%3A+Discovering+Memory+Corruptions+in+IoT+Through+App-based+Fuzzing.+In+Network+and+Distributed+Systems+Security+Symposium.+https%3A%2F%2Fdoi.org%2F10.14722%2Fndss.+2018.23159+10.14722%2Fndss.2018.23159^^^Yurong Chen, Tian lan, and Guru Venkataramani. 2019. Exploring Efective Fuzzing Strategies to Analyze Communication Protocols. In Proceedings of the 3rd ACM Workshop on Forming an Ecosystem Around Software Transformation (London, United Kingdom). Association for Computing Machinery, New York, NY, USA, 17-23. https://doi.org/10.1145/3338502.3359762 ***http://scholar.google.com/scholar?hl=en&q=Yurong+Chen%2C+Tian+lan%2C+and+Guru+Venkataramani.+2019.+Exploring+Efective+Fuzzing+Strategies+to+Analyze+Communication+Protocols.+In+Proceedings+of+the+3rd+ACM+Workshop+on+Forming+an+Ecosystem+Around+Software+Transformation+%28London%2C+United+Kingdom%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+17-23.+https%3A%2F%2Fdoi.org%2F10.1145%2F3338502.3359762+10.1145%2F3338502.3359762^^^D. L. de Oliveira, A. F. da S. Veloso, J. V. V. Sobral, R. A. L. Rabêlo, J. J. P. C. Rodrigues, and P. Solic. 2019. Performance Evaluation of MQTT Brokers in the Internet of Things for Smart Cities. In Proceedings of the International Conference on Smart and Sustainable Technologies. 1-6. https://doi.org/10.23919/SpliTech. 2019.8783166 ***http://scholar.google.com/scholar?hl=en&q=D.+L.+de+Oliveira%2C+A.+F.+da+S.+Veloso%2C+J.+V.+V.+Sobral%2C+R.+A.+L.+Rab%C3%AAlo%2C+J.+J.+P.+C.+Rodrigues%2C+and+P.+Solic.+2019.+Performance+Evaluation+of+MQTT+Brokers+in+the+Internet+of+Things+for+Smart+Cities.+In+Proceedings+of+the+International+Conference+on+Smart+and+Sustainable+Technologies.+1-6.+https%3A%2F%2Fdoi.org%2F10.23919%2FSpliTech.+2019.8783166+10.23919%2FSpliTech.2019.8783166^^^Eclipse Foundation. 2018. Eclipse IoT-Testware. https://iottestware.readthedocs. io/en/development/smart_fuzzer.html. [Online; accessed 17-October-2019].***http://scholar.google.com/scholar?hl=en&q=Eclipse+Foundation.+2018.+Eclipse+IoT-Testware.+https%3A%2F%2Fiottestware.readthedocs.+io%2Fen%2Fdevelopment%2Fsmart_fuzzer.html.+%5BOnline%3B+accessed+17-October-2019%5D.^^^Eclipse Foundation. 2019. IoT Developer Survey. https://iot.eclipse.org/resources/ iot-developer-survey/iot-developer-survey-2019.pdf. [Online; accessed 15-June2019 ].***http://scholar.google.com/scholar?hl=en&q=Eclipse+Foundation.+2019.+IoT+Developer+Survey.+https%3A%2F%2Fiot.eclipse.org%2Fresources%2F+iot-developer-survey%2Fiot-developer-survey-2019.pdf.+%5BOnline%3B+accessed+15-June2019+%5D.^^^F-Secure Corporation. 2015. A simple fuzzer for the MQTT protocol. https: //github.com/F-Secure/mqtt_fuzz. [Online; accessed 16-September-2019].***http://scholar.google.com/scholar?hl=en&q=F-Secure+Corporation.+2015.+A+simple+fuzzer+for+the+MQTT+protocol.+https%3A+%2F%2Fgithub.com%2FF-Secure%2Fmqtt_fuzz.+%5BOnline%3B+accessed+16-September-2019%5D.^^^Ming Fang and Munawar Hafiz. 2014. Discovering Bufer Overflow Vulnerabilities in the Wild: An Empirical Study. In Proceedings of the ACM/IEEE International Symposium on Empirical Software Engineering and Measurement. ACM, Article 23, 10 pages. https://doi.org/10.1145/2652524.2652533 ***http://scholar.google.com/scholar?hl=en&q=Ming+Fang+and+Munawar+Hafiz.+2014.+Discovering+Bufer+Overflow+Vulnerabilities+in+the+Wild%3A+An+Empirical+Study.+In+Proceedings+of+the+ACM%2FIEEE+International+Symposium+on+Empirical+Software+Engineering+and+Measurement.+ACM%2C+Article+23%2C+10+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F2652524.2652533+10.1145%2F2652524.2652533^^^S. N. Firdous, Z. Baig, C. Valli, and A. Ibrahim. 2017. Modelling and Evaluation of Malicious Attacks against the IoT MQTT Protocol. In Proceedings of the IEEE International Conference on Internet of Things and the IEEE Green Computing and Communications and IEEE Cyber, Physical and Social Computing and IEEE Smart Data. 748-755. https://doi.org/10.1109/ iThings-GreenCom-CPSComSmartData. 2017.115 ***http://scholar.google.com/scholar?hl=en&q=S.+N.+Firdous%2C+Z.+Baig%2C+C.+Valli%2C+and+A.+Ibrahim.+2017.+Modelling+and+Evaluation+of+Malicious+Attacks+against+the+IoT+MQTT+Protocol.+In+Proceedings+of+the+IEEE+International+Conference+on+Internet+of+Things+and+the+IEEE+Green+Computing+and+Communications+and+IEEE+Cyber%2C+Physical+and+Social+Computing+and+IEEE+Smart+Data.+748-755.+https%3A%2F%2Fdoi.org%2F10.1109%2F+iThings-GreenCom-CPSComSmartData.+2017.115+10.1109%2FiThings-GreenCom-CPSComSmartData.2017.115^^^Santiago Hernández Ramos, M. Teresa Villalba, and Raquel Lacuesta. 2018. MQTT Security: A Novel Fuzzing Approach. Wireless Communications and Mobile Computing 2018 ( 2018 ), 1-11. https://doi.org/10.1155/ 2018 /8261746 ***http://scholar.google.com/scholar?hl=en&q=Santiago+Hern%C3%A1ndez+Ramos%2C+M.+Teresa+Villalba%2C+and+Raquel+Lacuesta.+2018.+MQTT+Security%3A+A+Novel+Fuzzing+Approach.+Wireless+Communications+and+Mobile+Computing+2018+%28+2018+%29%2C+1-11.+https%3A%2F%2Fdoi.org%2F10.1155%2F+2018+%2F8261746+10.1155%2F2018%2F8261746^^^Rob Kitchin and Martin Dodge. 2019. The (In)Security of Smart Cities: Vulnerabilities, Risks, Mitigation, and Prevention. Journal of Urban Technology 26, 2 ( 2019 ). https://doi.org/10.1080/10630732. 2017.1408002 ***http://scholar.google.com/scholar?hl=en&q=Rob+Kitchin+and+Martin+Dodge.+2019.+The+%28In%29Security+of+Smart+Cities%3A+Vulnerabilities%2C+Risks%2C+Mitigation%2C+and+Prevention.+Journal+of+Urban+Technology+26%2C+2+%28+2019+%29.+https%3A%2F%2Fdoi.org%2F10.1080%2F10630732.+2017.1408002+10.1080%2F10630732.2017.1408002^^^Jian-Zhen Luo, Chun Shan, Jun Cai, and Yan Liu. 2018. IoT Application-Layer Protocol Vulnerability Detection using Reverse Engineering. Symmetry 10, 11 ( 2018 ), 561. https://doi.org/10.3390/sym10110561 ***http://scholar.google.com/scholar?hl=en&q=Jian-Zhen+Luo%2C+Chun+Shan%2C+Jun+Cai%2C+and+Yan+Liu.+2018.+IoT+Application-Layer+Protocol+Vulnerability+Detection+using+Reverse+Engineering.+Symmetry+10%2C+11+%28+2018+%29%2C+561.+https%3A%2F%2Fdoi.org%2F10.3390%2Fsym10110561+10.3390%2Fsym10110561^^^Federico Maggi, Rainer Vosseler, and Davide Quarta. 2018. The Fragility of Industrial IoT\'s Data Backbone. https://documents.trendmicro.com/assets/ white_papers /wp-the-fragility-of-industrial-IoTs-data-backbone.pdf***http://scholar.google.com/scholar?hl=en&q=Federico+Maggi%2C+Rainer+Vosseler%2C+and+Davide+Quarta.+2018.+The+Fragility+of+Industrial+IoT%27s+Data+Backbone.+https%3A%2F%2Fdocuments.trendmicro.com%2Fassets%2F+white_papers+%2Fwp-the-fragility-of-industrial-IoTs-data-backbone.pdf^^^Valentin Jean Marie Manès, HyungSeok Han, Choongwoo Han, Sang Kil Cha, Manuel Egele, Edward J Schwartz, and Maverick Woo. 2019. The Art, Science, and Engineering of Fuzzing: A Survey. IEEE Transactions on Software Engineering ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Valentin+Jean+Marie+Man%C3%A8s%2C+HyungSeok+Han%2C+Choongwoo+Han%2C+Sang+Kil+Cha%2C+Manuel+Egele%2C+Edward+J+Schwartz%2C+and+Maverick+Woo.+2019.+The+Art%2C+Science%2C+and+Engineering+of+Fuzzing%3A+A+Survey.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.^^^Kristiyan Mladenov, Stijn Van Winsen, Chris Mavrakis, and KPMG Cyber. 2017. Formal verification of the implementation of the MQTT protocol in IoT devices. Master\'s dissertation. University of Amsterdam.***http://scholar.google.com/scholar?hl=en&q=Kristiyan+Mladenov%2C+Stijn+Van+Winsen%2C+Chris+Mavrakis%2C+and+KPMG+Cyber.+2017.+Formal+verification+of+the+implementation+of+the+MQTT+protocol+in+IoT+devices.+Master%27s+dissertation.+University+of+Amsterdam.^^^Andrea Palmieri, Paolo Prem, Silvio Ranise, Umberto Morelli, and Tahir Ahmad. 2019. MQTTSA : A Tool for Automatically Assisting the Secure Deployments of MQTT brokers. In IEEE World Congress on Services, Vol. 2642-939X. IEEE, 47-53. https://doi.org/10.1109/SERVICES. 2019.00023 ***http://scholar.google.com/scholar?hl=en&q=Andrea+Palmieri%2C+Paolo+Prem%2C+Silvio+Ranise%2C+Umberto+Morelli%2C+and+Tahir+Ahmad.+2019.+MQTTSA+%3A+A+Tool+for+Automatically+Assisting+the+Secure+Deployments+of+MQTT+brokers.+In+IEEE+World+Congress+on+Services%2C+Vol.+2642-939X.+IEEE%2C+47-53.+https%3A%2F%2Fdoi.org%2F10.1109%2FSERVICES.+2019.00023+10.1109%2FSERVICES.2019.00023^^^Yusuf Perwej, Majzoob Omer, Osama Sheta, Hani Harb, and Mohammed Adrees. 2019. The Future of Internet of Things (IoT) and Its Empowering Technology. International Journal of Engineering Science and Computing Volume 9 ( March 2019 ), 20192-20203.***http://scholar.google.com/scholar?hl=en&q=Yusuf+Perwej%2C+Majzoob+Omer%2C+Osama+Sheta%2C+Hani+Harb%2C+and+Mohammed+Adrees.+2019.+The+Future+of+Internet+of+Things+%28IoT%29+and+Its+Empowering+Technology.+International+Journal+of+Engineering+Science+and+Computing+Volume+9+%28+March+2019+%29%2C+20192-20203.^^^Van-Thuan Pham, Marcel Böhme, and Abhik Roychoudhury. 2020. AFLNet: A Greybox Fuzzer for Network Protocols. In Proceedings of the IEEE International Conference on Software Testing, Verification and Validation : Testing Tools Track.***http://scholar.google.com/scholar?hl=en&q=Van-Thuan+Pham%2C+Marcel+B%C3%B6hme%2C+and+Abhik+Roychoudhury.+2020.+AFLNet%3A+A+Greybox+Fuzzer+for+Network+Protocols.+In+Proceedings+of+the+IEEE+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%3A+Testing+Tools+Track.^^^Pedro Martins Pontes, Bruno Lima, and João Pascoal Faria. 2018. Izinto: A PatternBased IoT Testing Framework. In Companion Proceedings for the ISSTA/ECOOP 2018 Workshops (Amsterdam, Netherlands). Association for Computing Machinery, New York, NY, USA, 125-131. https://doi.org/10.1145/3236454.3236511 ***http://scholar.google.com/scholar?hl=en&q=Pedro+Martins+Pontes%2C+Bruno+Lima%2C+and+Jo%C3%A3o+Pascoal+Faria.+2018.+Izinto%3A+A+PatternBased+IoT+Testing+Framework.+In+Companion+Proceedings+for+the+ISSTA%2FECOOP+2018+Workshops+%28Amsterdam%2C+Netherlands%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+125-131.+https%3A%2F%2Fdoi.org%2F10.1145%2F3236454.3236511+10.1145%2F3236454.3236511^^^Luis Gustavo Araujo Rodriguez, Julia Selvatici Trazzi, Victor Fossaluza, Rodrigo Campiolo, and Daniel Macêdo Batista. 2018. Analysis of Vulnerability Disclosure Delays from the National Vulnerability Database. In Proceedings of the Workshop on CyberSecurity in Connected Devices in the Brazilian Symposium on Computer Networks and Distributed Systems. https://portaldeconteudo.sbc.org.br/index. php/wscdc/article/view/2394***http://scholar.google.com/scholar?hl=en&q=Luis+Gustavo+Araujo+Rodriguez%2C+Julia+Selvatici+Trazzi%2C+Victor+Fossaluza%2C+Rodrigo+Campiolo%2C+and+Daniel+Mac%C3%AAdo+Batista.+2018.+Analysis+of+Vulnerability+Disclosure+Delays+from+the+National+Vulnerability+Database.+In+Proceedings+of+the+Workshop+on+CyberSecurity+in+Connected+Devices+in+the+Brazilian+Symposium+on+Computer+Networks+and+Distributed+Systems.+https%3A%2F%2Fportaldeconteudo.sbc.org.br%2Findex.+php%2Fwscdc%2Farticle%2Fview%2F2394^^^Gary J Saavedra, Kathryn N Rodhouse, Daniel M Dunlavy, and Philip W Kegelmeyer. 2019. A Review of Machine Learning Applications in Fuzzing. arXiv ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Gary+J+Saavedra%2C+Kathryn+N+Rodhouse%2C+Daniel+M+Dunlavy%2C+and+Philip+W+Kegelmeyer.+2019.+A+Review+of+Machine+Learning+Applications+in+Fuzzing.+arXiv+%28+2019+%29.^^^M. Schiefer. 2015. Smart Home Definition and Security Threats. In Proceedings of the International Conference on IT Security Incident Management IT Forensics. 114-118. https://doi.org/10.1109/IMF. 2015.17 ***http://scholar.google.com/scholar?hl=en&q=M.+Schiefer.+2015.+Smart+Home+Definition+and+Security+Threats.+In+Proceedings+of+the+International+Conference+on+IT+Security+Incident+Management+IT+Forensics.+114-118.+https%3A%2F%2Fdoi.org%2F10.1109%2FIMF.+2015.17+10.1109%2FIMF.2015.17^^^Synopsis. 2017. State of Fuzzing. https://www.synopsys.com/content/dam/ synopsys/sig-assets/reports/state-of-fuzzing-2017.pdf. [Online; accessed 15-June-2019].***http://scholar.google.com/scholar?hl=en&q=Synopsis.+2017.+State+of+Fuzzing.+https%3A%2F%2Fwww.synopsys.com%2Fcontent%2Fdam%2F+synopsys%2Fsig-assets%2Freports%2Fstate-of-fuzzing-2017.pdf.+%5BOnline%3B+accessed+15-June-2019%5D.^^^C. Săndescu, O. Grigorescu, R. Rughiniş, R. Deaconescu, and M. Calin. 2018. Why IoT security is failing. The Need of a Test Driven Security Approach. In Proceedings of the International Conference: Networking in Education and Research. 1-6. https://doi.org/10.1109/ROEDUNET. 2018.8514135 ***http://scholar.google.com/scholar?hl=en&q=C.+S%C4%83ndescu%2C+O.+Grigorescu%2C+R.+Rughini%C5%9F%2C+R.+Deaconescu%2C+and+M.+Calin.+2018.+Why+IoT+security+is+failing.+The+Need+of+a+Test+Driven+Security+Approach.+In+Proceedings+of+the+International+Conference%3A+Networking+in+Education+and+Research.+1-6.+https%3A%2F%2Fdoi.org%2F10.1109%2FROEDUNET.+2018.8514135+10.1109%2FROEDUNET.2018.8514135^^^M. B. Yassein, M. Q. Shatnawi, S. Aljwarneh, and R. Al-Hatmi. 2017. Internet of Things: Survey and open issues of MQTT protocol. In Proceedings of the International Conference on Engineering MIS. 1-6. https://doi.org/10.1109/ICEMIS. 2017.8273112 ***http://scholar.google.com/scholar?hl=en&q=M.+B.+Yassein%2C+M.+Q.+Shatnawi%2C+S.+Aljwarneh%2C+and+R.+Al-Hatmi.+2017.+Internet+of+Things%3A+Survey+and+open+issues+of+MQTT+protocol.+In+Proceedings+of+the+International+Conference+on+Engineering+MIS.+1-6.+https%3A%2F%2Fdoi.org%2F10.1109%2FICEMIS.+2017.8273112+10.1109%2FICEMIS.2017.8273112^^^');
INSERT INTO `paper_ref` VALUES (7, 28, 'Satish Chandra, Emina Torlak, Shaon Barman, and Rastislav Bodik. 2011. Angelic debugging. In ICSE. 121-130.***http://scholar.google.com/scholar?hl=en&q=Satish+Chandra%2C+Emina+Torlak%2C+Shaon+Barman%2C+and+Rastislav+Bodik.+2011.+Angelic+debugging.+In+ICSE.+121-130.^^^Zimin Chen, Steve James Kommrusch, Michele Tufano, Louis-Noël Pouchet, Denys Poshyvanyk, and Martin Monperrus. 2019. Sequencer: Sequence-tosequence learning for end-to-end program repair. TSE ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Zimin+Chen%2C+Steve+James+Kommrusch%2C+Michele+Tufano%2C+Louis-No%C3%ABl+Pouchet%2C+Denys+Poshyvanyk%2C+and+Martin+Monperrus.+2019.+Sequencer%3A+Sequence-tosequence+learning+for+end-to-end+program+repair.+TSE+%28+2019+%29.^^^Shigeru Chiba. 2000. https://bit.ly/2UmMuIT. Accessed: April 2020.***http://scholar.google.com/scholar?hl=en&q=Shigeru+Chiba.+2000.+https%3A%2F%2Fbit.ly%2F2UmMuIT.+Accessed%3A+April+2020.^^^Loris D\'Antoni, Roopsha Samanta, and Rishabh Singh. 2016. Qlose: Program repair with quantitative objectives. In CAV. 383-401.***http://scholar.google.com/scholar?hl=en&q=Loris+D%27Antoni%2C+Roopsha+Samanta%2C+and+Rishabh+Singh.+2016.+Qlose%3A+Program+repair+with+quantitative+objectives.+In+CAV.+383-401.^^^Xiang Gao, Sergey Mechtaev, and Abhik Roychoudhury. 2019. Crash-avoiding Program Repair. In ISSTA. 8-18.***http://scholar.google.com/scholar?hl=en&q=Xiang+Gao%2C+Sergey+Mechtaev%2C+and+Abhik+Roychoudhury.+2019.+Crash-avoiding+Program+Repair.+In+ISSTA.+8-18.^^^Gregory Gay. 2017. http://bit.ly/2vxSQwR. Accessed: April 2020.***http://scholar.google.com/scholar?hl=en&q=Gregory+Gay.+2017.+http%3A%2F%2Fbit.ly%2F2vxSQwR.+Accessed%3A+April+2020.^^^Luca Gazzola, Daniela Micucci, and Leonardo Mariani. 2017. Automatic software repair: A survey. TSE ( 2017 ), 34-67.***http://scholar.google.com/scholar?hl=en&q=Luca+Gazzola%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2017.+Automatic+software+repair%3A+A+survey.+TSE+%28+2017+%29%2C+34-67.^^^Ali Ghanbari. 2020. http://bit.ly/2I3aMBU. Accessed: April 2020.***http://scholar.google.com/scholar?hl=en&q=Ali+Ghanbari.+2020.+http%3A%2F%2Fbit.ly%2F2I3aMBU.+Accessed%3A+April+2020.^^^Ali Ghanbari. 2020. https://bit.ly/2U4SUxt. Accessed: April 2020.***http://scholar.google.com/scholar?hl=en&q=Ali+Ghanbari.+2020.+https%3A%2F%2Fbit.ly%2F2U4SUxt.+Accessed%3A+April+2020.^^^Ali Ghanbari, Samuel Benton, and Lingming Zhang. 2019. Practical Program Repair via Bytecode Mutation. In ISSTA. 19-30.***http://scholar.google.com/scholar?hl=en&q=Ali+Ghanbari%2C+Samuel+Benton%2C+and+Lingming+Zhang.+2019.+Practical+Program+Repair+via+Bytecode+Mutation.+In+ISSTA.+19-30.^^^Claire Le Goues, Michael Pradel, and Abhik Roychoudhury. 2019. Automated Program Repair. CACM ( 2019 ), 56-65.***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Michael+Pradel%2C+and+Abhik+Roychoudhury.+2019.+Automated+Program+Repair.+CACM+%28+2019+%29%2C+56-65.^^^Xuan Bach D Le, David Lo, and Claire Le Goues. 2016. History driven program repair. In SANER. 213-224.***http://scholar.google.com/scholar?hl=en&q=Xuan+Bach+D+Le%2C+David+Lo%2C+and+Claire+Le+Goues.+2016.+History+driven+program+repair.+In+SANER.+213-224.^^^Xuan Bach D Le, Ferdian Thung, David Lo, and Claire Le Goues. 2018. Overfitting in semantics-based automated program repair. ESE ( 2018 ), 3007-3033.***http://scholar.google.com/scholar?hl=en&q=Xuan+Bach+D+Le%2C+Ferdian+Thung%2C+David+Lo%2C+and+Claire+Le+Goues.+2018.+Overfitting+in+semantics-based+automated+program+repair.+ESE+%28+2018+%29%2C+3007-3033.^^^Kui Liu, Anil Koyuncu, Dongsun Kim, and Tegawendé F. Bissyandé. 2019. TBar: Revisiting Template-Based Automated Program Repair. In ISSTA. 31-42.***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Anil+Koyuncu%2C+Dongsun+Kim%2C+and+Tegawend%C3%A9+F.+Bissyand%C3%A9.+2019.+TBar%3A+Revisiting+Template-Based+Automated+Program+Repair.+In+ISSTA.+31-42.^^^Matias Martinez and Martin Monperrus. 2016. ASTOR: A Program Repair Library for Java (Demo). In ISSTA. 441-444.***http://scholar.google.com/scholar?hl=en&q=Matias+Martinez+and+Martin+Monperrus.+2016.+ASTOR%3A+A+Program+Repair+Library+for+Java+%28Demo%29.+In+ISSTA.+441-444.^^^Oracle Corporation. 2020. Java Agent. https://bit.ly/3czmzFV Accessed June, 2020.***http://scholar.google.com/scholar?hl=en&q=Oracle+Corporation.+2020.+Java+Agent.+https%3A%2F%2Fbit.ly%2F3czmzFV+Accessed+June%2C+2020.^^^Edward K Smith, Earl T Barr, Claire Le Goues, and Yuriy Brun. 2015. Is the cure worse than the disease? overfitting in automated program repair. In FSE. 532-543.***http://scholar.google.com/scholar?hl=en&q=Edward+K+Smith%2C+Earl+T+Barr%2C+Claire+Le+Goues%2C+and+Yuriy+Brun.+2015.+Is+the+cure+worse+than+the+disease%3F+overfitting+in+automated+program+repair.+In+FSE.+532-543.^^^Shin H. Tan, Hiroaki Yoshida, Mukul R Prasad, and Abhik Roychoudhury. 2016. Anti-patterns in search-based program repair. In FSE. 727-738.***http://scholar.google.com/scholar?hl=en&q=Shin+H.+Tan%2C+Hiroaki+Yoshida%2C+Mukul+R+Prasad%2C+and+Abhik+Roychoudhury.+2016.+Anti-patterns+in+search-based+program+repair.+In+FSE.+727-738.^^^Christian von Essen and Barbara Jobstmann. 2015. Program repair without regret. In CAV. 26-50.***http://scholar.google.com/scholar?hl=en&q=Christian+von+Essen+and+Barbara+Jobstmann.+2015.+Program+repair+without+regret.+In+CAV.+26-50.^^^Ming Wen, Junjie Chen, Rongxin Wu, Dan Hao, and Shing-Chi Cheung. 2018. Context-aware patch generation for better automated program repair. In ICSE. 1-11.***http://scholar.google.com/scholar?hl=en&q=Ming+Wen%2C+Junjie+Chen%2C+Rongxin+Wu%2C+Dan+Hao%2C+and+Shing-Chi+Cheung.+2018.+Context-aware+patch+generation+for+better+automated+program+repair.+In+ICSE.+1-11.^^^Wikipedia contributors. 2020. Damerau-Levenshtein distance-Wikipedia, The Free Encyclopedia. https://bit.ly/2BrMOAj Accessed June 2020].***http://scholar.google.com/scholar?hl=en&q=Wikipedia+contributors.+2020.+Damerau-Levenshtein+distance-Wikipedia%2C+The+Free+Encyclopedia.+https%3A%2F%2Fbit.ly%2F2BrMOAj+Accessed+June+2020%5D.^^^Wikipedia contributors. 2020. List of JVM languages-Wikipedia, The Free Encyclopedia. https://bit.ly/3714hvf Accessed June, 2020.***http://scholar.google.com/scholar?hl=en&q=Wikipedia+contributors.+2020.+List+of+JVM+languages-Wikipedia%2C+The+Free+Encyclopedia.+https%3A%2F%2Fbit.ly%2F3714hvf+Accessed+June%2C+2020.^^^Qi Xin and Steven P Reiss. 2017. Identifying test-suite-overfitted patches through test case generation. In ISSTA. 226-236.***http://scholar.google.com/scholar?hl=en&q=Qi+Xin+and+Steven+P+Reiss.+2017.+Identifying+test-suite-overfitted+patches+through+test+case+generation.+In+ISSTA.+226-236.^^^Yingfei Xiong, Xinyuan Liu, Muhan Zeng, Lu Zhang, and Gang Huang. 2018. Identifying patch correctness in test-based program repair. In ICSE. 789-799.***http://scholar.google.com/scholar?hl=en&q=Yingfei+Xiong%2C+Xinyuan+Liu%2C+Muhan+Zeng%2C+Lu+Zhang%2C+and+Gang+Huang.+2018.+Identifying+patch+correctness+in+test-based+program+repair.+In+ICSE.+789-799.^^^Jinqiu Yang, Alexey Zhikhartsev, Yuefei Liu, and Lin Tan. 2017. Better test cases for better automated program repair. In FSE. 831-841.***http://scholar.google.com/scholar?hl=en&q=Jinqiu+Yang%2C+Alexey+Zhikhartsev%2C+Yuefei+Liu%2C+and+Lin+Tan.+2017.+Better+test+cases+for+better+automated+program+repair.+In+FSE.+831-841.^^^He Ye, Jian Gu, Matias Martinez, Thomas Durieux, and Martin Monperrus. 2019. Automated Classification of Overfitting Patches with Statically Extracted Code Features. arXiv ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=He+Ye%2C+Jian+Gu%2C+Matias+Martinez%2C+Thomas+Durieux%2C+and+Martin+Monperrus.+2019.+Automated+Classification+of+Overfitting+Patches+with+Statically+Extracted+Code+Features.+arXiv+%28+2019+%29.^^^He Ye, Matias Martinez, and Martin Monperrus. 2019. Automated Patch Assessment for Program Repair at Scale. arXiv ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=He+Ye%2C+Matias+Martinez%2C+and+Martin+Monperrus.+2019.+Automated+Patch+Assessment+for+Program+Repair+at+Scale.+arXiv+%28+2019+%29.^^^Zhongxing Yu, Matias Martinez, Benjamin Danglot, Thomas Durieux, and Martin Monperrus. 2018. Alleviating patch overfitting with automatic test generation: a study of feasibility and efectiveness for the Nopol repair system. ESE ( 2018 ), 33-67.***http://scholar.google.com/scholar?hl=en&q=Zhongxing+Yu%2C+Matias+Martinez%2C+Benjamin+Danglot%2C+Thomas+Durieux%2C+and+Martin+Monperrus.+2018.+Alleviating+patch+overfitting+with+automatic+test+generation%3A+a+study+of+feasibility+and+efectiveness+for+the+Nopol+repair+system.+ESE+%28+2018+%29%2C+33-67.^^^');
INSERT INTO `paper_ref` VALUES (8, 16, '[n.d.]. Bazel build tool. https://bazel.build/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Bazel+build+tool.+https%3A%2F%2Fbazel.build%2F.^^^[n.d.]. Buck build tool. https://buck.build/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Buck+build+tool.+https%3A%2F%2Fbuck.build%2F.^^^[n.d.]. distcc. https://github.com/distcc/distcc/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+distcc.+https%3A%2F%2Fgithub.com%2Fdistcc%2Fdistcc%2F.^^^[n.d.]. Feature Cross. https://developers.google.com/machine-learning/ crash-course/feature-crosses/video-lecture/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Feature+Cross.+https%3A%2F%2Fdevelopers.google.com%2Fmachine-learning%2F+crash-course%2Ffeature-crosses%2Fvideo-lecture%2F.^^^[n.d.]. GNU Make. https://www.gnu.org/software/make/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+GNU+Make.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fmake%2F.^^^[n.d.]. Gradle build tool. https://gradle.org/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Gradle+build+tool.+https%3A%2F%2Fgradle.org%2F.^^^[n.d.]. Maven. https://maven.apache.org/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Maven.+https%3A%2F%2Fmaven.apache.org%2F.^^^Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, et al. 2016. Tensorflow: A system for large-scale machine learning. In 12th {USENIX} Symposium on Operating Systems Design and Implementation ( { OSDI } 16). 265-283.***http://scholar.google.com/scholar?hl=en&q=Mart%C3%ADn+Abadi%2C+Paul+Barham%2C+Jianmin+Chen%2C+Zhifeng+Chen%2C+Andy+Davis%2C+Jeffrey+Dean%2C+Matthieu+Devin%2C+Sanjay+Ghemawat%2C+Geoffrey+Irving%2C+Michael+Isard%2C+et+al.+2016.+Tensorflow%3A+A+system+for+large-scale+machine+learning.+In+12th+%7BUSENIX%7D+Symposium+on+Operating+Systems+Design+and+Implementation+%28+%7B+OSDI+%7D+16%29.+265-283.^^^James C Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost, Jeffrey John Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher Heiser, Peter Hochschild, et al. 2013. Spanner: Google\'s globally distributed database. ACM Transactions on Computer Systems (TOCS) 31, 3 ( 2013 ), 8.***http://scholar.google.com/scholar?hl=en&q=James+C+Corbett%2C+Jeffrey+Dean%2C+Michael+Epstein%2C+Andrew+Fikes%2C+Christopher+Frost%2C+Jeffrey+John+Furman%2C+Sanjay+Ghemawat%2C+Andrey+Gubarev%2C+Christopher+Heiser%2C+Peter+Hochschild%2C+et+al.+2013.+Spanner%3A+Google%27s+globally+distributed+database.+ACM+Transactions+on+Computer+Systems+%28TOCS%29+31%2C+3+%28+2013+%29%2C+8.^^^Hamed Esfahani, Jonas Fietz, Qi Ke, Alexei Kolomiets, Erica Lan, Erik Mavrinac, Wolfram Schulte, Newton Sanches, and Srikanth Kandula. 2016. CloudBuild: Microsoft\'s distributed and caching build service. In Proceedings of the 38th International Conference on Software Engineering Companion. ACM, 11-20.***http://scholar.google.com/scholar?hl=en&q=Hamed+Esfahani%2C+Jonas+Fietz%2C+Qi+Ke%2C+Alexei+Kolomiets%2C+Erica+Lan%2C+Erik+Mavrinac%2C+Wolfram+Schulte%2C+Newton+Sanches%2C+and+Srikanth+Kandula.+2016.+CloudBuild%3A+Microsoft%27s+distributed+and+caching+build+service.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering+Companion.+ACM%2C+11-20.^^^Maurice Herlihy. 1991. Wait-free synchronization. ACM Transactions on Programming Languages and Systems (TOPLAS) 13, 1 ( 1991 ), 124-149.***http://scholar.google.com/scholar?hl=en&q=Maurice+Herlihy.+1991.+Wait-free+synchronization.+ACM+Transactions+on+Programming+Languages+and+Systems+%28TOPLAS%29+13%2C+1+%28+1991+%29%2C+124-149.^^^Frank Hutter, Lars Kotthoff, and Joaquin Vanschoren (Eds.). 2018. Automated Machine Learning: Methods, Systems, Challenges. Springer. In press, available at http://automl.org/book.***http://scholar.google.com/scholar?hl=en&q=Frank+Hutter%2C+Lars+Kotthoff%2C+and+Joaquin+Vanschoren+%28Eds.%29.+2018.+Automated+Machine+Learning%3A+Methods%2C+Systems%2C+Challenges.+Springer.+In+press%2C+available+at+http%3A%2F%2Fautoml.org%2Fbook.^^^Leslie Lamport. 1998. The part-time parliament. ACM Transactions on Computer Systems (TOCS) 16, 2 ( 1998 ), 133-169.***http://scholar.google.com/scholar?hl=en&q=Leslie+Lamport.+1998.+The+part-time+parliament.+ACM+Transactions+on+Computer+Systems+%28TOCS%29+16%2C+2+%28+1998+%29%2C+133-169.^^^Paul J Leach, Michael Mealling, and Rich Salz. 2005. A universally unique identifier (uuid) urn namespace. ( 2005 ).***http://scholar.google.com/scholar?hl=en&q=Paul+J+Leach%2C+Michael+Mealling%2C+and+Rich+Salz.+2005.+A+universally+unique+identifier+%28uuid%29+urn+namespace.+%28+2005+%29.^^^Abhishek Verma, Luis Pedrosa, Madhukar Korupolu, David Oppenheimer, Eric Tune, and John Wilkes. 2015. Large-scale cluster management at Google with Borg. In Proceedings of the Tenth European Conference on Computer Systems. 1-17.***http://scholar.google.com/scholar?hl=en&q=Abhishek+Verma%2C+Luis+Pedrosa%2C+Madhukar+Korupolu%2C+David+Oppenheimer%2C+Eric+Tune%2C+and+John+Wilkes.+2015.+Large-scale+cluster+management+at+Google+with+Borg.+In+Proceedings+of+the+Tenth+European+Conference+on+Computer+Systems.+1-17.^^^John G Ziegler and Nathaniel B Nichols. 1942. Optimum settings for automatic controllers. trans. ASME 64, 11 ( 1942 ).***http://scholar.google.com/scholar?hl=en&q=John+G+Ziegler+and+Nathaniel+B+Nichols.+1942.+Optimum+settings+for+automatic+controllers.+trans.+ASME+64%2C+11+%28+1942+%29.^^^');
INSERT INTO `paper_ref` VALUES (9, 68, '2014. Starcraft Reverse Engineered to run on ARM. https://news.ycombinator. com/item?id= 7372414.***http://scholar.google.com/scholar?hl=en&q=2014.+Starcraft+Reverse+Engineered+to+run+on+ARM.+https%3A%2F%2Fnews.ycombinator.+com%2Fitem%3Fid%3D+7372414.^^^2016. radare2. http://www.radare.org/r/.***http://scholar.google.com/scholar?hl=en&q=2016.+radare2.+http%3A%2F%2Fwww.radare.org%2Fr%2F.^^^2018. Diablo devolved-magic behind the 1996 computer game. https://github. com/diasurgical/devilution.***http://scholar.google.com/scholar?hl=en&q=2018.+Diablo+devolved-magic+behind+the+1996+computer+game.+https%3A%2F%2Fgithub.+com%2Fdiasurgical%2Fdevilution.^^^2018. Firmware Mod Kit. https://github.com/rampageX/firmware-mod-kit.***http://scholar.google.com/scholar?hl=en&q=2018.+Firmware+Mod+Kit.+https%3A%2F%2Fgithub.com%2FrampageX%2Ffirmware-mod-kit.^^^2018. Snowman decompiler. https://derevenets.com.***http://scholar.google.com/scholar?hl=en&q=2018.+Snowman+decompiler.+https%3A%2F%2Fderevenets.com.^^^2019. Moss: A System for Detecting Software Similarity. https://theory.stanford. edu/~aiken/moss.***http://scholar.google.com/scholar?hl=en&q=2019.+Moss%3A+A+System+for+Detecting+Software+Similarity.+https%3A%2F%2Ftheory.stanford.+edu%2F%7Eaiken%2Fmoss.^^^2019. Output of nocode Invalid C++ Code. https://github.com/yegord/snowman/ issues/196.***http://scholar.google.com/scholar?hl=en&q=2019.+Output+of+nocode+Invalid+C%2B%2B+Code.+https%3A%2F%2Fgithub.com%2Fyegord%2Fsnowman%2F+issues%2F196.^^^2020. Decompiler Flaws and Root Cause Analysis. https://www.dropbox.com/ sh/kqw7e19snfeukai/AADHZ45TAL9Kxi7v9nmdXfLCa?dl= 0.***http://scholar.google.com/scholar?hl=en&q=2020.+Decompiler+Flaws+and+Root+Cause+Analysis.+https%3A%2F%2Fwww.dropbox.com%2F+sh%2Fkqw7e19snfeukai%2FAADHZ45TAL9Kxi7v9nmdXfLCa%3Fdl%3D+0.^^^2020. Decompiler Fuzzing Test with EMI mutation. https://github.com/monkbai/ DecFuzzer.***http://scholar.google.com/scholar?hl=en&q=2020.+Decompiler+Fuzzing+Test+with+EMI+mutation.+https%3A%2F%2Fgithub.com%2Fmonkbai%2F+DecFuzzer.^^^Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim Gruen, Nathan Giles, and Rajeev Barua. 2013. A Compiler-level Intermediate Representation Based Binary Analysis and Rewriting System. In EuroSys \' 13.***http://scholar.google.com/scholar?hl=en&q=Kapil+Anand%2C+Matthew+Smithson%2C+Khaled+Elwazeer%2C+Aparna+Kotha%2C+Jim+Gruen%2C+Nathan+Giles%2C+and+Rajeev+Barua.+2013.+A+Compiler-level+Intermediate+Representation+Based+Binary+Analysis+and+Rewriting+System.+In+EuroSys+%27+13.^^^Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Dennis+Andriesse%2C+Xi+Chen%2C+Victor+van+der+Veen%2C+Asia+Slowinska%2C+and+Herbert+Bos.+2016.+An+In-Depth+Analysis+of+Disassembly+on+Full-Scale+x86%2Fx64+Binaries.+In+USENIX+Sec.^^^Gogul Balakrishnan and Thomas Reps. [n.d.]. DIVINE: DIscovering Variables IN Executables. In VMCAI 2007.***http://scholar.google.com/scholar?hl=en&q=Gogul+Balakrishnan+and+Thomas+Reps.+%5Bn.d.%5D.+DIVINE%3A+DIscovering+Variables+IN+Executables.+In+VMCAI+2007.^^^Gogul Balakrishnan and Thomas Reps. 2010. WYSINWYX: What You See is Not What You eXecute. ACM Trans. Program. Lang. Syst. 32, 6, Article 23 ( Aug. 2010 ), 84 pages.***http://scholar.google.com/scholar?hl=en&q=Gogul+Balakrishnan+and+Thomas+Reps.+2010.+WYSINWYX%3A+What+You+See+is+Not+What+You+eXecute.+ACM+Trans.+Program.+Lang.+Syst.+32%2C+6%2C+Article+23+%28+Aug.+2010+%29%2C+84+pages.^^^Tifany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David Brumley. 2014. ByteWeight: Learning to Recognize Functions in Binary Code. In Proceedings of the 23rd USENIX Conference on Security Symposium. USENIX Association.***http://scholar.google.com/scholar?hl=en&q=Tifany+Bao%2C+Jonathan+Burket%2C+Maverick+Woo%2C+Rafael+Turner%2C+and+David+Brumley.+2014.+ByteWeight%3A+Learning+to+Recognize+Functions+in+Binary+Code.+In+Proceedings+of+the+23rd+USENIX+Conference+on+Security+Symposium.+USENIX+Association.^^^Ahmed Bougacha. 2016. Dagger. https://github.com/repzret/dagger.***http://scholar.google.com/scholar?hl=en&q=Ahmed+Bougacha.+2016.+Dagger.+https%3A%2F%2Fgithub.com%2Frepzret%2Fdagger.^^^David Brumley, Ivan Jager, Thanassis Avgerinos, and Edward J Schwartz. 2011. BAP: A binary analysis platform (CAV).***http://scholar.google.com/scholar?hl=en&q=David+Brumley%2C+Ivan+Jager%2C+Thanassis+Avgerinos%2C+and+Edward+J+Schwartz.+2011.+BAP%3A+A+binary+analysis+platform+%28CAV%29.^^^David Brumley, JongHyup Lee, Edward J. Schwartz, and Maverick Woo. 2013. Native x86 Decompilation Using Semantics-Preserving Structural Analysis and Iterative Control-Flow Structuring. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). 353-368.***http://scholar.google.com/scholar?hl=en&q=David+Brumley%2C+JongHyup+Lee%2C+Edward+J.+Schwartz%2C+and+Maverick+Woo.+2013.+Native+x86+Decompilation+Using+Semantics-Preserving+Structural+Analysis+and+Iterative+Control-Flow+Structuring.+In+Presented+as+part+of+the+22nd+USENIX+Security+Symposium+%28USENIX+Security+13%29.+353-368.^^^Mahinthan Chandramohan, Yinxing Xue, Zhengzi Xu, Yang Liu, Chia Yuan Cho, and Hee Beng Kuan Tan. 2016. BinGo: Cross-architecture cross-OS Binary Search (FSE).***http://scholar.google.com/scholar?hl=en&q=Mahinthan+Chandramohan%2C+Yinxing+Xue%2C+Zhengzi+Xu%2C+Yang+Liu%2C+Chia+Yuan+Cho%2C+and+Hee+Beng+Kuan+Tan.+2016.+BinGo%3A+Cross-architecture+cross-OS+Binary+Search+%28FSE%29.^^^Yuting Chen, Ting Su, Chengnian Sun, Zhendong Su, and Jianjun Zhao. 2016. Coverage-directed Diferential Testing of JVM Implementations. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Yuting+Chen%2C+Ting+Su%2C+Chengnian+Sun%2C+Zhendong+Su%2C+and+Jianjun+Zhao.+2016.+Coverage-directed+Diferential+Testing+of+JVM+Implementations.+In+PLDI.^^^Zheng Leong Chua, Shiqi Shen, Prateek Saxena, and Zhenkai Liang. 2017. Neural Nets Can Learn Function Type Signatures From Binaries. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, 99-116.***http://scholar.google.com/scholar?hl=en&q=Zheng+Leong+Chua%2C+Shiqi+Shen%2C+Prateek+Saxena%2C+and+Zhenkai+Liang.+2017.+Neural+Nets+Can+Learn+Function+Type+Signatures+From+Binaries.+In+26th+USENIX+Security+Symposium+%28USENIX+Security+17%29.+USENIX+Association%2C+99-116.^^^Cristina Cifuentes. 1994. Reverse compilation techniques. Queensland University of Technology, Brisbane.***http://scholar.google.com/scholar?hl=en&q=Cristina+Cifuentes.+1994.+Reverse+compilation+techniques.+Queensland+University+of+Technology%2C+Brisbane.^^^Nassim Corteggiani, Giovanni Camurati, and Aurélien Francillon. 2018. Inception: System-Wide Security Testing of Real-World Embedded Systems Software. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Nassim+Corteggiani%2C+Giovanni+Camurati%2C+and+Aur%C3%A9lien+Francillon.+2018.+Inception%3A+System-Wide+Security+Testing+of+Real-World+Embedded+Systems+Software.+In+USENIX+Sec.^^^Al Danial. [n.d.]. CLOC. https://goo.gl/3KFACB.***http://scholar.google.com/scholar?hl=en&q=Al+Danial.+%5Bn.d.%5D.+CLOC.+https%3A%2F%2Fgoo.gl%2F3KFACB.^^^Sandeep Dasgupta, Sushant Dinesh, Deepan Venkatesh, Vikram S Adve, and Christopher W Fletcher. 2020. Scalable Validation for Binary Lifters.***http://scholar.google.com/scholar?hl=en&q=Sandeep+Dasgupta%2C+Sushant+Dinesh%2C+Deepan+Venkatesh%2C+Vikram+S+Adve%2C+and+Christopher+W+Fletcher.+2020.+Scalable+Validation+for+Binary+Lifters.^^^Yaniv David, Nimrod Partush, and Eran Yahav. 2018. FirmUp: Precise Static Detection of Common Vulnerabilities in Firmware. In ASPLOS.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David%2C+Nimrod+Partush%2C+and+Eran+Yahav.+2018.+FirmUp%3A+Precise+Static+Detection+of+Common+Vulnerabilities+in+Firmware.+In+ASPLOS.^^^Yaniv David and Eran Yahav. 2014. Tracelet-based Code Search in Executables. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David+and+Eran+Yahav.+2014.+Tracelet-based+Code+Search+in+Executables.+In+PLDI.^^^Zhui Deng, Xiangyu Zhang, and Dongyan Xu. 2013. BISTRO: Binary Component Extraction and Embedding for Software Security Applications.***http://scholar.google.com/scholar?hl=en&q=Zhui+Deng%2C+Xiangyu+Zhang%2C+and+Dongyan+Xu.+2013.+BISTRO%3A+Binary+Component+Extraction+and+Embedding+for+Software+Security+Applications.^^^Alessandro Di Federico, Pietro Fezzardi, and Giovanni Agosta. 2018. rev.ng: A Multi-Architecture Framework for Reverse Engineering and Vulnerability Discovery. In ICCST.***http://scholar.google.com/scholar?hl=en&q=Alessandro+Di+Federico%2C+Pietro+Fezzardi%2C+and+Giovanni+Agosta.+2018.+rev.ng%3A+A+Multi-Architecture+Framework+for+Reverse+Engineering+and+Vulnerability+Discovery.+In+ICCST.^^^Alessandro Di Federico, Mathias Payer, and Giovanni Agosta. 2017. Rev.Ng: A Unified Binary Analysis Framework to Recover CFGs and Function Boundaries. In CC.***http://scholar.google.com/scholar?hl=en&q=Alessandro+Di+Federico%2C+Mathias+Payer%2C+and+Giovanni+Agosta.+2017.+Rev.Ng%3A+A+Unified+Binary+Analysis+Framework+to+Recover+CFGs+and+Function+Boundaries.+In+CC.^^^Khaled ElWazeer, Kapil Anand, Aparna Kotha, Matthew Smithson, and Rajeev Barua. 2013. Scalable Variable and Data Type Detection in a Binary Rewriter. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Khaled+ElWazeer%2C+Kapil+Anand%2C+Aparna+Kotha%2C+Matthew+Smithson%2C+and+Rajeev+Barua.+2013.+Scalable+Variable+and+Data+Type+Detection+in+a+Binary+Rewriter.+In+PLDI.^^^Bauman Erick, Lin Zhiqiang, and Hamlen Kevin W. 2018. Superset Disassembly: Statically Rewriting x86 Binaries Without Heuristics. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Bauman+Erick%2C+Lin+Zhiqiang%2C+and+Hamlen+Kevin+W.+2018.+Superset+Disassembly%3A+Statically+Rewriting+x86+Binaries+Without+Heuristics.+In+NDSS.^^^Ivan Gotovchits, Rijnard van Tonder, and David Brumley. 2018. Saluki: finding taint-style vulnerabilities with static property checking. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Ivan+Gotovchits%2C+Rijnard+van+Tonder%2C+and+David+Brumley.+2018.+Saluki%3A+finding+taint-style+vulnerabilities+with+static+property+checking.+In+NDSS.^^^I. Guilfanov. 2001. A Simple Type System for Program Reengineering. In WCRE.***http://scholar.google.com/scholar?hl=en&q=I.+Guilfanov.+2001.+A+Simple+Type+System+for+Program+Reengineering.+In+WCRE.^^^SA Hex-Rays. 2014. IDA Pro: a cross-platform multi-processor disassembler and debugger.***http://scholar.google.com/scholar?hl=en&q=SA+Hex-Rays.+2014.+IDA+Pro%3A+a+cross-platform+multi-processor+disassembler+and+debugger.^^^Anastasis Keliris and Michail Maniatakos Yakdan. 2019. ICSREF: A Framework for Automated Reverse Engineering of Industrial Control Systems Binaries. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Anastasis+Keliris+and+Michail+Maniatakos+Yakdan.+2019.+ICSREF%3A+A+Framework+for+Automated+Reverse+Engineering+of+Industrial+Control+Systems+Binaries.+In+NDSS.^^^Soomin Kim, Markus Faerevaag, Minkyu Jung, SeungIl Jung, DongYeop Oh, JongHyup Lee, and Sang Kil Cha. 2017. Testing Intermediate Representations for Binary Analysis. In ASE.***http://scholar.google.com/scholar?hl=en&q=Soomin+Kim%2C+Markus+Faerevaag%2C+Minkyu+Jung%2C+SeungIl+Jung%2C+DongYeop+Oh%2C+JongHyup+Lee%2C+and+Sang+Kil+Cha.+2017.+Testing+Intermediate+Representations+for+Binary+Analysis.+In+ASE.^^^Taegyu Kim, Chung Hwan Kim, Hongjun Choi, Yonghwi Kwon, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2017. RevARM: A Platform-Agnostic ARM Binary Rewriter for Security Applications. In ACSAC.***http://scholar.google.com/scholar?hl=en&q=Taegyu+Kim%2C+Chung+Hwan+Kim%2C+Hongjun+Choi%2C+Yonghwi+Kwon%2C+Brendan+Saltaformaggio%2C+Xiangyu+Zhang%2C+and+Dongyan+Xu.+2017.+RevARM%3A+A+Platform-Agnostic+ARM+Binary+Rewriter+for+Security+Applications.+In+ACSAC.^^^Jakub Křoustek and Peter Matula. 2017. Retdec: An open-source machine-code decompiler. ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Jakub+K%C5%99oustek+and+Peter+Matula.+2017.+Retdec%3A+An+open-source+machine-code+decompiler.+%28+2017+%29.^^^Christopher Kruegel, William Robertson, Fredrik Valeur, and Giovanni Vigna. 2004. Static Disassembly of Obfuscated Binaries. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Christopher+Kruegel%2C+William+Robertson%2C+Fredrik+Valeur%2C+and+Giovanni+Vigna.+2004.+Static+Disassembly+of+Obfuscated+Binaries.+In+USENIX+Sec.^^^Vu Le, Mehrdad Afshari, and Zhendong Su. 2014. Compiler Validation via Equivalence Modulo Inputs. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Vu+Le%2C+Mehrdad+Afshari%2C+and+Zhendong+Su.+2014.+Compiler+Validation+via+Equivalence+Modulo+Inputs.+In+PLDI.^^^Vu Le, Chengnian Sun, and Zhendong Su. 2015. Finding Deep Compiler Bugs via Guided Stochastic Program Mutation. In OOPSLA.***http://scholar.google.com/scholar?hl=en&q=Vu+Le%2C+Chengnian+Sun%2C+and+Zhendong+Su.+2015.+Finding+Deep+Compiler+Bugs+via+Guided+Stochastic+Program+Mutation.+In+OOPSLA.^^^JongHyup Lee, Thanassis Avgerinos, and David Brumley. 2011. TIE: Principled Reverse Engineering of Types in Binary Programs. In NDSS.***http://scholar.google.com/scholar?hl=en&q=JongHyup+Lee%2C+Thanassis+Avgerinos%2C+and+David+Brumley.+2011.+TIE%3A+Principled+Reverse+Engineering+of+Types+in+Binary+Programs.+In+NDSS.^^^Lorenzo Martignoni, Stephen McCamant, Pongsin Poosankam, Dawn Song, and Petros Maniatis. 2012. Path-exploration Lifting: Hi-fi Tests for Lo-fi Emulators. In ASPLOS.***http://scholar.google.com/scholar?hl=en&q=Lorenzo+Martignoni%2C+Stephen+McCamant%2C+Pongsin+Poosankam%2C+Dawn+Song%2C+and+Petros+Maniatis.+2012.+Path-exploration+Lifting%3A+Hi-fi+Tests+for+Lo-fi+Emulators.+In+ASPLOS.^^^Lorenzo Martignoni, Roberto Paleari, Giampaolo Fresi Roglia, and Danilo Bruschi. 2010. Testing System Virtual Machines. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Lorenzo+Martignoni%2C+Roberto+Paleari%2C+Giampaolo+Fresi+Roglia%2C+and+Danilo+Bruschi.+2010.+Testing+System+Virtual+Machines.+In+ISSTA.^^^Lorenzo Martignoni, Roberto Paleari, Giampaolo Fresi Roglia, and Danilo Bruschi. 2009. Testing CPU Emulators. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Lorenzo+Martignoni%2C+Roberto+Paleari%2C+Giampaolo+Fresi+Roglia%2C+and+Danilo+Bruschi.+2009.+Testing+CPU+Emulators.+In+ISSTA.^^^Microsoft. 2018. llvm-mctoll. https://github.com/Microsoft/llvm-mctoll.***http://scholar.google.com/scholar?hl=en&q=Microsoft.+2018.+llvm-mctoll.+https%3A%2F%2Fgithub.com%2FMicrosoft%2Fllvm-mctoll.^^^Kenneth Miller, Yonghwi Kwon, Yi Sun, Zhuo Zhang, Xiangyu Zhang, and Zhiqiang Lin. 2019. Probabilistic Disassembly. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Kenneth+Miller%2C+Yonghwi+Kwon%2C+Yi+Sun%2C+Zhuo+Zhang%2C+Xiangyu+Zhang%2C+and+Zhiqiang+Lin.+2019.+Probabilistic+Disassembly.+In+ICSE.^^^Lily Hay Newman. 2019. The NSA makes Ghidra, a powerful cybersecurity tool, open source. https://www.wired.com/story/nsa-ghidra-open-source-tool/.***http://scholar.google.com/scholar?hl=en&q=Lily+Hay+Newman.+2019.+The+NSA+makes+Ghidra%2C+a+powerful+cybersecurity+tool%2C+open+source.+https%3A%2F%2Fwww.wired.com%2Fstory%2Fnsa-ghidra-open-source-tool%2F.^^^Matt Noonan, Alexey Loginov, and David Cok. 2016. Polymorphic Type Inference for Machine Code. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Matt+Noonan%2C+Alexey+Loginov%2C+and+David+Cok.+2016.+Polymorphic+Type+Inference+for+Machine+Code.+In+PLDI.^^^National Security Agency (NSA). 2018. Ghidra. https://www.nsa.gov/resources/ everyone/ghidra/.***http://scholar.google.com/scholar?hl=en&q=National+Security+Agency+%28NSA%29.+2018.+Ghidra.+https%3A%2F%2Fwww.nsa.gov%2Fresources%2F+everyone%2Fghidra%2F.^^^Roberto Paleari, Lorenzo Martignoni, Giampaolo Fresi Roglia, and Danilo Bruschi. 2010. N-version Disassembly: Diferential Testing of x86 Disassemblers. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Roberto+Paleari%2C+Lorenzo+Martignoni%2C+Giampaolo+Fresi+Roglia%2C+and+Danilo+Bruschi.+2010.+N-version+Disassembly%3A+Diferential+Testing+of+x86+Disassemblers.+In+ISSTA.^^^PNF. 2018. JEB Decompiler. https://www.pnfsoftware.com/.***http://scholar.google.com/scholar?hl=en&q=PNF.+2018.+JEB+Decompiler.+https%3A%2F%2Fwww.pnfsoftware.com%2F.^^^PNF. 2018. Type Library. https://www.pnfsoftware.com/blog/native-types-andtypelibs-with-jeb/.***http://scholar.google.com/scholar?hl=en&q=PNF.+2018.+Type+Library.+https%3A%2F%2Fwww.pnfsoftware.com%2Fblog%2Fnative-types-andtypelibs-with-jeb%2F.^^^Thomas Reps and Gogul Balakrishnan. 2008. Improved Memory-Access Analysis for x86 Executables. In CC.***http://scholar.google.com/scholar?hl=en&q=Thomas+Reps+and+Gogul+Balakrishnan.+2008.+Improved+Memory-Access+Analysis+for+x86+Executables.+In+CC.^^^rev.ng Srls. 2018. Rev.ng. https://rev.ng/.***http://scholar.google.com/scholar?hl=en&q=rev.ng+Srls.+2018.+Rev.ng.+https%3A%2F%2Frev.ng%2F.^^^Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jefrey Gennari, Jefrey S. Havrilla, and Charles Hines. 2018. Using Logic Programming to Recover C++ Classes and Methods from Compiled Executables (CCS \'18). Association for Computing Machinery, 426-441.***http://scholar.google.com/scholar?hl=en&q=Edward+J.+Schwartz%2C+Cory+F.+Cohen%2C+Michael+Duggan%2C+Jefrey+Gennari%2C+Jefrey+S.+Havrilla%2C+and+Charles+Hines.+2018.+Using+Logic+Programming+to+Recover+C%2B%2B+Classes+and+Methods+from+Compiled+Executables+%28CCS+%2718%29.+Association+for+Computing+Machinery%2C+426-441.^^^Hao Shi, Abdulla Alwabel, and Jelena Mirkovic. 2014. Cardinal Pill Testing of System Virtual Machines. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Hao+Shi%2C+Abdulla+Alwabel%2C+and+Jelena+Mirkovic.+2014.+Cardinal+Pill+Testing+of+System+Virtual+Machines.+In+USENIX+Sec.^^^Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing Functions in Binaries with Neural Networks. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Eui+Chul+Richard+Shin%2C+Dawn+Song%2C+and+Reza+Moazzezi.+2015.+Recognizing+Functions+in+Binaries+with+Neural+Networks.+In+USENIX+Sec.^^^Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena. 2008. BitBlaze: A new approach to computer security via binary analysis. In Information systems security. Springer, 1-25.***http://scholar.google.com/scholar?hl=en&q=Dawn+Song%2C+David+Brumley%2C+Heng+Yin%2C+Juan+Caballero%2C+Ivan+Jager%2C+Min+Gyung+Kang%2C+Zhenkai+Liang%2C+James+Newsome%2C+Pongsin+Poosankam%2C+and+Prateek+Saxena.+2008.+BitBlaze%3A+A+new+approach+to+computer+security+via+binary+analysis.+In+Information+systems+security.+Springer%2C+1-25.^^^Chengnian Sun, Vu Le, and Zhendong Su. 2016. Finding Compiler Bugs via Live Code Mutation. In OOPSLA.***http://scholar.google.com/scholar?hl=en&q=Chengnian+Sun%2C+Vu+Le%2C+and+Zhendong+Su.+2016.+Finding+Compiler+Bugs+via+Live+Code+Mutation.+In+OOPSLA.^^^Dullien Thomas and Sebastian Porst. 2009. REIL: A platform-independent intermediate representation of disassembled code for static code analysis. In CanSecWest.***http://scholar.google.com/scholar?hl=en&q=Dullien+Thomas+and+Sebastian+Porst.+2009.+REIL%3A+A+platform-independent+intermediate+representation+of+disassembled+code+for+static+code+analysis.+In+CanSecWest.^^^trailofbits. 2018. McSema. https://github.com/trailofbits/mcsema.***http://scholar.google.com/scholar?hl=en&q=trailofbits.+2018.+McSema.+https%3A%2F%2Fgithub.com%2Ftrailofbits%2Fmcsema.^^^Pei Wang, Qinkun Bao, Li Wang, Shuai Wang, Zhaofeng Chen, Tao Wei, and Dinghao Wu. 2018. Software Protection on the Go: A Large-scale Empirical Study on Mobile App Obfuscation. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Pei+Wang%2C+Qinkun+Bao%2C+Li+Wang%2C+Shuai+Wang%2C+Zhaofeng+Chen%2C+Tao+Wei%2C+and+Dinghao+Wu.+2018.+Software+Protection+on+the+Go%3A+A+Large-scale+Empirical+Study+on+Mobile+App+Obfuscation.+In+ICSE.^^^Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. 2017. Ramblr: Making Reassembly Great Again. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Ruoyu+Wang%2C+Yan+Shoshitaishvili%2C+Antonio+Bianchi%2C+Aravind+Machiry%2C+John+Grosen%2C+Paul+Grosen%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2017.+Ramblr%3A+Making+Reassembly+Great+Again.+In+NDSS.^^^Shuai Wang, Pei Wang, and Dinghao Wu. 2015. Reassembleable Disassembling. In USENIX Sec.***http://scholar.google.com/scholar?hl=en&q=Shuai+Wang%2C+Pei+Wang%2C+and+Dinghao+Wu.+2015.+Reassembleable+Disassembling.+In+USENIX+Sec.^^^Shuai Wang, Pei Wang, and Dinghao Wu. 2016. Uroboros: Instrumenting stripped binaries with static reassembling. In 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER), Vol. 1. IEEE, 236-247.***http://scholar.google.com/scholar?hl=en&q=Shuai+Wang%2C+Pei+Wang%2C+and+Dinghao+Wu.+2016.+Uroboros%3A+Instrumenting+stripped+binaries+with+static+reassembling.+In+2016+IEEE+23rd+International+Conference+on+Software+Analysis%2C+Evolution%2C+and+Reengineering+%28SANER%29%2C+Vol.+1.+IEEE%2C+236-247.^^^Khaled Yakdan, Sebastian Eschweiler, Elmar Gerhards-Padilla, and Matthew Smith. 2015. No More Gotos: Decompilation Using Pattern-Independent ControlFlow Structuring and Semantic-Preserving Transformations.. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Khaled+Yakdan%2C+Sebastian+Eschweiler%2C+Elmar+Gerhards-Padilla%2C+and+Matthew+Smith.+2015.+No+More+Gotos%3A+Decompilation+Using+Pattern-Independent+ControlFlow+Structuring+and+Semantic-Preserving+Transformations..+In+NDSS.^^^Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and Understanding Bugs in C Compilers. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Xuejun+Yang%2C+Yang+Chen%2C+Eric+Eide%2C+and+John+Regehr.+2011.+Finding+and+Understanding+Bugs+in+C+Compilers.+In+PLDI.^^^');
INSERT INTO `paper_ref` VALUES (10, 49, '2019. IEEE Standard for Floating-Point Arithmetic. IEEE Std 754-2019 (Revision of IEEE 754-2008) (July 2019 ), 1-84. https://doi.org/10.1109/IEEESTD. 2019.8766229 ***http://scholar.google.com/scholar?hl=en&q=2019.+IEEE+Standard+for+Floating-Point+Arithmetic.+IEEE+Std+754-2019+%28Revision+of+IEEE+754-2008%29+%28July+2019+%29%2C+1-84.+https%3A%2F%2Fdoi.org%2F10.1109%2FIEEESTD.+2019.8766229+10.1109%2FIEEESTD.2019.8766229^^^E. Anderson, Z. Bai, J. Dongarra, A. Greenbaum, A. McKenney, J. Du Croz, S. Hammarling, J. Demmel, C. Bischof, and D. Sorensen. 1990. LAPACK: A Portable Linear Algebra Library for High-performance Computers. In Proceedings of the 1990 ACM/IEEE Conference on Supercomputing (Supercomputing \'90). IEEE Computer Society Press, Los Alamitos, CA, USA, 2-11. http://dl.acm.org/citation. cfm?id= 110382. 110385***http://scholar.google.com/scholar?hl=en&q=E.+Anderson%2C+Z.+Bai%2C+J.+Dongarra%2C+A.+Greenbaum%2C+A.+McKenney%2C+J.+Du+Croz%2C+S.+Hammarling%2C+J.+Demmel%2C+C.+Bischof%2C+and+D.+Sorensen.+1990.+LAPACK%3A+A+Portable+Linear+Algebra+Library+for+High-performance+Computers.+In+Proceedings+of+the+1990+ACM%2FIEEE+Conference+on+Supercomputing+%28Supercomputing+%2790%29.+IEEE+Computer+Society+Press%2C+Los+Alamitos%2C+CA%2C+USA%2C+2-11.+http%3A%2F%2Fdl.acm.org%2Fcitation.+cfm%3Fid%3D+110382.+110385^^^Douglas N Arnold. 2000. The Explosion of the Ariane 5. ( 2000 ). http://wwwusers.math.umn.edu/~arnold/disasters/ariane.html***http://scholar.google.com/scholar?hl=en&q=Douglas+N+Arnold.+2000.+The+Explosion+of+the+Ariane+5.+%28+2000+%29.+http%3A%2F%2Fwwwusers.math.umn.edu%2F%7Earnold%2Fdisasters%2Fariane.html^^^Douglas N Arnold. 2000. The Patriot Missile Failure. ( 2000 ). http://wwwusers.math.umn.edu/~arnold/disasters/patriot.html***http://scholar.google.com/scholar?hl=en&q=Douglas+N+Arnold.+2000.+The+Patriot+Missile+Failure.+%28+2000+%29.+http%3A%2F%2Fwwwusers.math.umn.edu%2F%7Earnold%2Fdisasters%2Fpatriot.html^^^Roberto Bagnara, Matthieu Carlier, Roberta Gori, and Arnaud Gotlieb. 2013. Symbolic Path-Oriented Test Data Generation for Floating-Point Programs. In Sixth IEEE International Conference on Software Testing, Verification and Validation, ICST 2013, Luxembourg, Luxembourg, March 18-22, 2013. IEEE Computer Society, 1-10. https://doi.org/10.1109/ICST. 2013.17 ***http://scholar.google.com/scholar?hl=en&q=Roberto+Bagnara%2C+Matthieu+Carlier%2C+Roberta+Gori%2C+and+Arnaud+Gotlieb.+2013.+Symbolic+Path-Oriented+Test+Data+Generation+for+Floating-Point+Programs.+In+Sixth+IEEE+International+Conference+on+Software+Testing%2C+Verification+and+Validation%2C+ICST+2013%2C+Luxembourg%2C+Luxembourg%2C+March+18-22%2C+2013.+IEEE+Computer+Society%2C+1-10.+https%3A%2F%2Fdoi.org%2F10.1109%2FICST.+2013.17+10.1109%2FICST.2013.17^^^Tao Bao and Xiangyu Zhang. 2013. On-the-fly detection of instability problems in floating-point program execution. In Proceedings of the 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2013, part of SPLASH 2013, Indianapolis, IN, USA, October 26-31, 2013, Antony L. Hosking, Patrick Th. Eugster, and Cristina V. Lopes (Eds.). ACM, 817-832. https://doi.org/10.1145/2509136.2509526 ***http://scholar.google.com/scholar?hl=en&q=Tao+Bao+and+Xiangyu+Zhang.+2013.+On-the-fly+detection+of+instability+problems+in+floating-point+program+execution.+In+Proceedings+of+the+2013+ACM+SIGPLAN+International+Conference+on+Object+Oriented+Programming+Systems+Languages+%26+Applications%2C+OOPSLA+2013%2C+part+of+SPLASH+2013%2C+Indianapolis%2C+IN%2C+USA%2C+October+26-31%2C+2013%2C+Antony+L.+Hosking%2C+Patrick+Th.+Eugster%2C+and+Cristina+V.+Lopes+%28Eds.%29.+ACM%2C+817-832.+https%3A%2F%2Fdoi.org%2F10.1145%2F2509136.2509526+10.1145%2F2509136.2509526^^^Earl T. Barr, Thanh Vo, Vu Le, and Zhendong Su. 2013. Automatic detection of lfoating-point exceptions. In The 40th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL \'13, Rome, Italy-January 23-25, 2013, Roberto Giacobazzi and Radhia Cousot (Eds.). ACM, 549-560. https: //doi.org/10.1145/2429069.2429133 ***http://scholar.google.com/scholar?hl=en&q=Earl+T.+Barr%2C+Thanh+Vo%2C+Vu+Le%2C+and+Zhendong+Su.+2013.+Automatic+detection+of+lfoating-point+exceptions.+In+The+40th+Annual+ACM+SIGPLAN-SIGACT+Symposium+on+Principles+of+Programming+Languages%2C+POPL+%2713%2C+Rome%2C+Italy-January+23-25%2C+2013%2C+Roberto+Giacobazzi+and+Radhia+Cousot+%28Eds.%29.+ACM%2C+549-560.+https%3A+%2F%2Fdoi.org%2F10.1145%2F2429069.2429133+10.1145%2F2429069.2429133^^^Farnaz Behrang and Alessandro Orso. 2018. Automated test migration for mobile apps. In Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings, ICSE 2018, Gothenburg, Sweden, May 27-June 03, 2018, Michel Chaudron, Ivica Crnkovic, Marsha Chechik, and Mark Harman (Eds.). ACM, 384-385. https://doi.org/10.1145/3183440.3195019 ***http://scholar.google.com/scholar?hl=en&q=Farnaz+Behrang+and+Alessandro+Orso.+2018.+Automated+test+migration+for+mobile+apps.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%3A+Companion+Proceeedings%2C+ICSE+2018%2C+Gothenburg%2C+Sweden%2C+May+27-June+03%2C+2018%2C+Michel+Chaudron%2C+Ivica+Crnkovic%2C+Marsha+Chechik%2C+and+Mark+Harman+%28Eds.%29.+ACM%2C+384-385.+https%3A%2F%2Fdoi.org%2F10.1145%2F3183440.3195019+10.1145%2F3183440.3195019^^^Florian Benz, Andreas Hildebrandt, and Sebastian Hack. 2012. A dynamic program analysis to find floating-point accuracy problems. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI \' 12, Beijing, China-June 11-16, 2012, Jan Vitek, Haibo Lin, and Frank Tip (Eds.). ACM, 453-462. https://doi.org/10.1145/2254064.2254118 ***http://scholar.google.com/scholar?hl=en&q=Florian+Benz%2C+Andreas+Hildebrandt%2C+and+Sebastian+Hack.+2012.+A+dynamic+program+analysis+to+find+floating-point+accuracy+problems.+In+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+%27+12%2C+Beijing%2C+China-June+11-16%2C+2012%2C+Jan+Vitek%2C+Haibo+Lin%2C+and+Frank+Tip+%28Eds.%29.+ACM%2C+453-462.+https%3A%2F%2Fdoi.org%2F10.1145%2F2254064.2254118+10.1145%2F2254064.2254118^^^Phelim Boyle and Alex Potapchik. 2006. Application of high-precision computing for pricing arithmetic asian options. In Symbolic and Algebraic Computation, International Symposium, ISSAC 2006, Genoa, Italy, July 9-12, 2006, Proceedings, Barry M. Trager (Ed.). ACM, 39-46. https://doi.org/10.1145/1145768.1145782 ***http://scholar.google.com/scholar?hl=en&q=Phelim+Boyle+and+Alex+Potapchik.+2006.+Application+of+high-precision+computing+for+pricing+arithmetic+asian+options.+In+Symbolic+and+Algebraic+Computation%2C+International+Symposium%2C+ISSAC+2006%2C+Genoa%2C+Italy%2C+July+9-12%2C+2006%2C+Proceedings%2C+Barry+M.+Trager+%28Ed.%29.+ACM%2C+39-46.+https%3A%2F%2Fdoi.org%2F10.1145%2F1145768.1145782+10.1145%2F1145768.1145782^^^Nghi D. Q. Bui. 2019. Towards zero knowledge learning for cross language API mappings. In Proceedings of the 41st International Conference on Software Engineering: Companion Proceedings, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019., Gunter Mussbacher, Joanne M. Atlee, and Tevfik Bultan (Eds.). IEEE / ACM, 123-125. https://dl.acm.org/citation.cfm?id= 3339722***http://scholar.google.com/scholar?hl=en&q=Nghi+D.+Q.+Bui.+2019.+Towards+zero+knowledge+learning+for+cross+language+API+mappings.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%3A+Companion+Proceedings%2C+ICSE+2019%2C+Montreal%2C+QC%2C+Canada%2C+May+25-31%2C+2019.%2C+Gunter+Mussbacher%2C+Joanne+M.+Atlee%2C+and+Tevfik+Bultan+%28Eds.%29.+IEEE+%2F+ACM%2C+123-125.+https%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3339722^^^Tsong Yueh Chen, Fei-Ching Kuo, T. H. Tse, and Zhiquan Zhou. 2003. Metamorphic Testing and Beyond. In 11th International Workshop on Software Technology and Engineering Practice (STEP 2003 ), 19-21 September 2003, Amsterdam, The Netherlands. IEEE Computer Society, 94-100. https://doi.org/10.1109/STEP. 2003. 18 ***http://scholar.google.com/scholar?hl=en&q=Tsong+Yueh+Chen%2C+Fei-Ching+Kuo%2C+T.+H.+Tse%2C+and+Zhiquan+Zhou.+2003.+Metamorphic+Testing+and+Beyond.+In+11th+International+Workshop+on+Software+Technology+and+Engineering+Practice+%28STEP+2003+%29%2C+19-21+September+2003%2C+Amsterdam%2C+The+Netherlands.+IEEE+Computer+Society%2C+94-100.+https%3A%2F%2Fdoi.org%2F10.1109%2FSTEP.+2003.+18+10.1109%2FSTEP.2003.18^^^Yuting Chen, Ting Su, and Zhendong Su. 2019. Deep diferential testing of JVM implementations. In Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019, Joanne M. Atlee, Tevfik Bultan, and Jon Whittle (Eds.). IEEE / ACM, 1257-1268. https: //doi.org/10.1109/ICSE. 2019.00127 ***http://scholar.google.com/scholar?hl=en&q=Yuting+Chen%2C+Ting+Su%2C+and+Zhendong+Su.+2019.+Deep+diferential+testing+of+JVM+implementations.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+ICSE+2019%2C+Montreal%2C+QC%2C+Canada%2C+May+25-31%2C+2019%2C+Joanne+M.+Atlee%2C+Tevfik+Bultan%2C+and+Jon+Whittle+%28Eds.%29.+IEEE+%2F+ACM%2C+1257-1268.+https%3A+%2F%2Fdoi.org%2F10.1109%2FICSE.+2019.00127+10.1109%2FICSE.2019.00127^^^Yuting Chen and Zhendong Su. 2015. Guided diferential testing of certificate validation in SSL/TLS implementations. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30-September 4, 2015, Elisabetta Di Nitto, Mark Harman, and Patrick Heymans (Eds.). ACM, 793-804. https://doi.org/10.1145/2786805.2786835 ***http://scholar.google.com/scholar?hl=en&q=Yuting+Chen+and+Zhendong+Su.+2015.+Guided+diferential+testing+of+certificate+validation+in+SSL%2FTLS+implementations.+In+Proceedings+of+the+2015+10th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2015%2C+Bergamo%2C+Italy%2C+August+30-September+4%2C+2015%2C+Elisabetta+Di+Nitto%2C+Mark+Harman%2C+and+Patrick+Heymans+%28Eds.%29.+ACM%2C+793-804.+https%3A%2F%2Fdoi.org%2F10.1145%2F2786805.2786835+10.1145%2F2786805.2786835^^^Wei-Fan Chiang, Ganesh Gopalakrishnan, and Zvonimir Rakamaric. 2015. Practical Floating-Point Divergence Detection. In Languages and Compilers for Parallel Computing-28th International Workshop, LCPC 2015, Raleigh, NC, USA, September 9-11, 2015, Revised Selected Papers (Lecture Notes in Computer Science), Xipeng Shen, Frank Mueller, and James Tuck (Eds.), Vol. 9519. Springer, 271-286. https://doi.org/10.1007/978-3-319-29778-1_17 ***http://scholar.google.com/scholar?hl=en&q=Wei-Fan+Chiang%2C+Ganesh+Gopalakrishnan%2C+and+Zvonimir+Rakamaric.+2015.+Practical+Floating-Point+Divergence+Detection.+In+Languages+and+Compilers+for+Parallel+Computing-28th+International+Workshop%2C+LCPC+2015%2C+Raleigh%2C+NC%2C+USA%2C+September+9-11%2C+2015%2C+Revised+Selected+Papers+%28Lecture+Notes+in+Computer+Science%29%2C+Xipeng+Shen%2C+Frank+Mueller%2C+and+James+Tuck+%28Eds.%29%2C+Vol.+9519.+Springer%2C+271-286.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-29778-1_17+10.1007%2F978-3-319-29778-1_17^^^Wei-Fan Chiang, Ganesh Gopalakrishnan, Zvonimir Rakamaric, and Alexey Solovyev. 2014. Eficient search for inputs causing high floating-point errors. In ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP \'14, Orlando, FL, USA, February 15-19, 2014, José E. Moreira and James R. Larus (Eds.). ACM, 43-52. https://doi.org/10.1145/2555243.2555265 ***http://scholar.google.com/scholar?hl=en&q=Wei-Fan+Chiang%2C+Ganesh+Gopalakrishnan%2C+Zvonimir+Rakamaric%2C+and+Alexey+Solovyev.+2014.+Eficient+search+for+inputs+causing+high+floating-point+errors.+In+ACM+SIGPLAN+Symposium+on+Principles+and+Practice+of+Parallel+Programming%2C+PPoPP+%2714%2C+Orlando%2C+FL%2C+USA%2C+February+15-19%2C+2014%2C+Jos%C3%A9+E.+Moreira+and+James+R.+Larus+%28Eds.%29.+ACM%2C+43-52.+https%3A%2F%2Fdoi.org%2F10.1145%2F2555243.2555265+10.1145%2F2555243.2555265^^^Daniel DeFreez, Aditya V. Thakur, and Cindy Rubio-González. 2018. Path-based function embedding and its application to error-handling specification mining, See , 423-433. https://doi.org/10.1145/3236024.3236059 ***http://scholar.google.com/scholar?hl=en&q=Daniel+DeFreez%2C+Aditya+V.+Thakur%2C+and+Cindy+Rubio-Gonz%C3%A1lez.+2018.+Path-based+function+embedding+and+its+application+to+error-handling+specification+mining%2C+See+%2C+423-433.+https%3A%2F%2Fdoi.org%2F10.1145%2F3236024.3236059+10.1145%2F3236024.3236059^^^Saikat Dutta, Owolabi Legunsen, Zixin Huang, and Sasa Misailovic. 2018. Testing probabilistic programming systems, See , 574-586. https://doi.org/10.1145/ 3236024.3236057 ***http://scholar.google.com/scholar?hl=en&q=Saikat+Dutta%2C+Owolabi+Legunsen%2C+Zixin+Huang%2C+and+Sasa+Misailovic.+2018.+Testing+probabilistic+programming+systems%2C+See+%2C+574-586.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3236024.3236057+10.1145%2F3236024.3236057^^^Anthony Di Franco, Hui Guo, and Cindy Rubio-González. 2017. A comprehensive study of real-world numerical bug characteristics. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, ASE 2017, Urbana, IL, USA, October 30-November 03, 2017, Grigore Rosu, Massimiliano Di Penta, and Tien N. Nguyen (Eds.). IEEE Computer Society, 509-519. https://doi. org/10.1109/ASE. 2017.8115662 ***http://scholar.google.com/scholar?hl=en&q=Anthony+Di+Franco%2C+Hui+Guo%2C+and+Cindy+Rubio-Gonz%C3%A1lez.+2017.+A+comprehensive+study+of+real-world+numerical+bug+characteristics.+In+Proceedings+of+the+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2017%2C+Urbana%2C+IL%2C+USA%2C+October+30-November+03%2C+2017%2C+Grigore+Rosu%2C+Massimiliano+Di+Penta%2C+and+Tien+N.+Nguyen+%28Eds.%29.+IEEE+Computer+Society%2C+509-519.+https%3A%2F%2Fdoi.+org%2F10.1109%2FASE.+2017.8115662+10.1109%2FASE.2017.8115662^^^Zhoulai Fu, Zhaojun Bai, and Zhendong Su. 2015. Automated backward error analysis for numerical code. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2015, part of SPLASH 2015, Pittsburgh, PA, USA, October 25-30, 2015, Jonathan Aldrich and Patrick Eugster (Eds.). ACM, 639-654. https://doi.org/10. 1145/2814270.2814317 ***http://scholar.google.com/scholar?hl=en&q=Zhoulai+Fu%2C+Zhaojun+Bai%2C+and+Zhendong+Su.+2015.+Automated+backward+error+analysis+for+numerical+code.+In+Proceedings+of+the+2015+ACM+SIGPLAN+International+Conference+on+Object-Oriented+Programming%2C+Systems%2C+Languages%2C+and+Applications%2C+OOPSLA+2015%2C+part+of+SPLASH+2015%2C+Pittsburgh%2C+PA%2C+USA%2C+October+25-30%2C+2015%2C+Jonathan+Aldrich+and+Patrick+Eugster+%28Eds.%29.+ACM%2C+639-654.+https%3A%2F%2Fdoi.org%2F10.+1145%2F2814270.2814317+10.1145%2F2814270.2814317^^^Zhoulai Fu and Zhendong Su. 2017. Achieving high coverage for floating-point code via unconstrained programming. In Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2017, Barcelona, Spain, June 18-23, 2017, Albert Cohen and Martin T. Vechev (Eds.). ACM, 306-319. https://doi.org/10.1145/3062341.3062383 ***http://scholar.google.com/scholar?hl=en&q=Zhoulai+Fu+and+Zhendong+Su.+2017.+Achieving+high+coverage+for+floating-point+code+via+unconstrained+programming.+In+Proceedings+of+the+38th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+2017%2C+Barcelona%2C+Spain%2C+June+18-23%2C+2017%2C+Albert+Cohen+and+Martin+T.+Vechev+%28Eds.%29.+ACM%2C+306-319.+https%3A%2F%2Fdoi.org%2F10.1145%2F3062341.3062383+10.1145%2F3062341.3062383^^^Zhoulai Fu and Zhendong Su. 2019. Efective floating-point analysis via weakdistance minimization. In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2019, Phoenix, AZ, USA, June 22-26, 2019., Kathryn S. McKinley and Kathleen Fisher (Eds.). ACM, 439-452. https://doi.org/10.1145/3314221.3314632 ***http://scholar.google.com/scholar?hl=en&q=Zhoulai+Fu+and+Zhendong+Su.+2019.+Efective+floating-point+analysis+via+weakdistance+minimization.+In+Proceedings+of+the+40th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+2019%2C+Phoenix%2C+AZ%2C+USA%2C+June+22-26%2C+2019.%2C+Kathryn+S.+McKinley+and+Kathleen+Fisher+%28Eds.%29.+ACM%2C+439-452.+https%3A%2F%2Fdoi.org%2F10.1145%2F3314221.3314632+10.1145%2F3314221.3314632^^^Amparo Gil, Javier Segura, and Nico M. Temme. 2007. Numerical methods for special functions. SIAM. https://doi.org/10.1137/1.9780898717822 ***http://scholar.google.com/scholar?hl=en&q=Amparo+Gil%2C+Javier+Segura%2C+and+Nico+M.+Temme.+2007.+Numerical+methods+for+special+functions.+SIAM.+https%3A%2F%2Fdoi.org%2F10.1137%2F1.9780898717822+10.1137%2F1.9780898717822^^^Brian Gough. 2009. GNU Scientific Library Reference Manual-Third Edition (3rd ed.). Network Theory Ltd.***http://scholar.google.com/scholar?hl=en&q=Brian+Gough.+2009.+GNU+Scientific+Library+Reference+Manual-Third+Edition+%283rd+ed.%29.+Network+Theory+Ltd.^^^Hui Guo and Cindy Rubio-González. 2020. Eficient Generation of Error-Inducing Floating-Point Inputs via Symbolic Execution (To Appear). In International Conference on Software Engineering (ICSE).***http://scholar.google.com/scholar?hl=en&q=Hui+Guo+and+Cindy+Rubio-Gonz%C3%A1lez.+2020.+Eficient+Generation+of+Error-Inducing+Floating-Point+Inputs+via+Symbolic+Execution+%28To+Appear%29.+In+International+Conference+on+Software+Engineering+%28ICSE%29.^^^Fredrik Johansson et al. 2013. mpmath: a Python library for arbitrary-precision lfoating-point arithmetic (version 0.18). http://mpmath.org/.***http://scholar.google.com/scholar?hl=en&q=Fredrik+Johansson+et+al.+2013.+mpmath%3A+a+Python+library+for+arbitrary-precision+lfoating-point+arithmetic+%28version+0.18%29.+http%3A%2F%2Fmpmath.org%2F.^^^Eric Jones, Travis Oliphant, Pearu Peterson, et al. 2001-. SciPy: Open source scientific tools for Python. (2001-). http://www.scipy.org/***http://scholar.google.com/scholar?hl=en&q=Eric+Jones%2C+Travis+Oliphant%2C+Pearu+Peterson%2C+et+al.+2001-.+SciPy%3A+Open+source+scientific+tools+for+Python.+%282001-%29.+http%3A%2F%2Fwww.scipy.org%2F^^^Upulee Kanewala and James M. Bieman. 2013. Using machine learning techniques to detect metamorphic relations for programs without test oracles. In IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013, Pasadena, CA, USA, November 4-7, 2013. IEEE Computer Society, 1-10. https://doi.org/10. 1109/ISSRE. 2013.6698899 ***http://scholar.google.com/scholar?hl=en&q=Upulee+Kanewala+and+James+M.+Bieman.+2013.+Using+machine+learning+techniques+to+detect+metamorphic+relations+for+programs+without+test+oracles.+In+IEEE+24th+International+Symposium+on+Software+Reliability+Engineering%2C+ISSRE+2013%2C+Pasadena%2C+CA%2C+USA%2C+November+4-7%2C+2013.+IEEE+Computer+Society%2C+1-10.+https%3A%2F%2Fdoi.org%2F10.+1109%2FISSRE.+2013.6698899+10.1109%2FISSRE.2013.6698899^^^Christian Klinger, Maria Christakis, and Valentin Wüstholz. 2019. Diferentially testing soundness and precision of program analyzers. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019, Beijing, China, July 15-19, 2019, Dongmei Zhang and Anders Møller (Eds.). ACM, 239-250. https://doi.org/10.1145/3293882.3330553 ***http://scholar.google.com/scholar?hl=en&q=Christian+Klinger%2C+Maria+Christakis%2C+and+Valentin+W%C3%BCstholz.+2019.+Diferentially+testing+soundness+and+precision+of+program+analyzers.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2019%2C+Beijing%2C+China%2C+July+15-19%2C+2019%2C+Dongmei+Zhang+and+Anders+M%C3%B8ller+%28Eds.%29.+ACM%2C+239-250.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330553+10.1145%2F3293882.3330553^^^Gary T. Leavens, Alessandro Garcia, and Corina S. Pasareanu (Eds.). 2018. Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista, FL, USA, November 04-09, 2018. ACM. http://dl.acm.org/citation.cfm?id= 3236024***http://scholar.google.com/scholar?hl=en&q=Gary+T.+Leavens%2C+Alessandro+Garcia%2C+and+Corina+S.+Pasareanu+%28Eds.%29.+2018.+Proceedings+of+the+2018+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FSIGSOFT+FSE+2018%2C+Lake+Buena+Vista%2C+FL%2C+USA%2C+November+04-09%2C+2018.+ACM.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3236024^^^Daniel Lehmann and Michael Pradel. 2018. Feedback-directed diferential testing of interactive debuggers, See , 610-620. https://doi.org/10.1145/3236024. 3236037 ***http://scholar.google.com/scholar?hl=en&q=Daniel+Lehmann+and+Michael+Pradel.+2018.+Feedback-directed+diferential+testing+of+interactive+debuggers%2C+See+%2C+610-620.+https%3A%2F%2Fdoi.org%2F10.1145%2F3236024.+3236037+10.1145%2F3236024.3236037^^^A. D. MacDonald and Sanborn C. Brown. 1949. High Frequency Gas Discharge Breakdown in Helium. Phys. Rev. 75 (Feb 1949 ), 411-418. Issue 3. https://doi.org/ 10.1103/PhysRev.75.411 ***http://scholar.google.com/scholar?hl=en&q=A.+D.+MacDonald+and+Sanborn+C.+Brown.+1949.+High+Frequency+Gas+Discharge+Breakdown+in+Helium.+Phys.+Rev.+75+%28Feb+1949+%29%2C+411-418.+Issue+3.+https%3A%2F%2Fdoi.org%2F+10.1103%2FPhysRev.75.411+10.1103%2FPhysRev.75.411^^^Osni Marques, Christof Vömel, James Demmel, and Beresford N. Parlett. 2008. Algorithm 880: A testing infrastructure for symmetric tridiagonal eigensolvers. ACM Trans. Math. Softw. 35, 1 ( 2008 ), 8 : 1-8 : 13. https://doi.org/10.1145/1377603. 1377611 ***http://scholar.google.com/scholar?hl=en&q=Osni+Marques%2C+Christof+V%C3%B6mel%2C+James+Demmel%2C+and+Beresford+N.+Parlett.+2008.+Algorithm+880%3A+A+testing+infrastructure+for+symmetric+tridiagonal+eigensolvers.+ACM+Trans.+Math.+Softw.+35%2C+1+%28+2008+%29%2C+8+%3A+1-8+%3A+13.+https%3A%2F%2Fdoi.org%2F10.1145%2F1377603.+1377611+10.1145%2F1377603.1377611^^^William M. McKeeman. 1998. Diferential Testing for Software. Digital Technical Journal 10, 1 ( 1998 ), 100-107. http://www.hpl.hp.com/hpjournal/dtj/vol10num1/ vol10num1art9.pdf***http://scholar.google.com/scholar?hl=en&q=William+M.+McKeeman.+1998.+Diferential+Testing+for+Software.+Digital+Technical+Journal+10%2C+1+%28+1998+%29%2C+100-107.+http%3A%2F%2Fwww.hpl.hp.com%2Fhpjournal%2Fdtj%2Fvol10num1%2F+vol10num1art9.pdf^^^Trong Duc Nguyen, Anh Tuan Nguyen, and Tien N. Nguyen. 2016. Mapping API elements for code migration with vector representations. In Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016-Companion Volume, Laura K. Dillon, Willem Visser, and Laurie Williams (Eds.). ACM, 756-758. https://doi.org/10.1145/2889160.2892661 ***http://scholar.google.com/scholar?hl=en&q=Trong+Duc+Nguyen%2C+Anh+Tuan+Nguyen%2C+and+Tien+N.+Nguyen.+2016.+Mapping+API+elements+for+code+migration+with+vector+representations.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering%2C+ICSE+2016%2C+Austin%2C+TX%2C+USA%2C+May+14-22%2C+2016-Companion+Volume%2C+Laura+K.+Dillon%2C+Willem+Visser%2C+and+Laurie+Williams+%28Eds.%29.+ACM%2C+756-758.+https%3A%2F%2Fdoi.org%2F10.1145%2F2889160.2892661+10.1145%2F2889160.2892661^^^Trong Duc Nguyen, Anh Tuan Nguyen, Hung Dang Phan, and Tien N. Nguyen. 2017. Exploring API embedding for API usages and applications. In Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017, Sebastián Uchitel, Alessandro Orso, and Martin P. Robillard (Eds.). IEEE / ACM, 438-449. https://doi.org/10.1109/ICSE. 2017.47 ***http://scholar.google.com/scholar?hl=en&q=Trong+Duc+Nguyen%2C+Anh+Tuan+Nguyen%2C+Hung+Dang+Phan%2C+and+Tien+N.+Nguyen.+2017.+Exploring+API+embedding+for+API+usages+and+applications.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering%2C+ICSE+2017%2C+Buenos+Aires%2C+Argentina%2C+May+20-28%2C+2017%2C+Sebasti%C3%A1n+Uchitel%2C+Alessandro+Orso%2C+and+Martin+P.+Robillard+%28Eds.%29.+IEEE+%2F+ACM%2C+438-449.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2017.47+10.1109%2FICSE.2017.47^^^Michael Pradel and Koushik Sen. 2018. DeepBugs: a learning approach to namebased bug detection. PACMPL 2, OOPSLA ( 2018 ), 147 : 1-147 : 25. https://doi.org/ 10.1145/3276517 ***http://scholar.google.com/scholar?hl=en&q=Michael+Pradel+and+Koushik+Sen.+2018.+DeepBugs%3A+a+learning+approach+to+namebased+bug+detection.+PACMPL+2%2C+OOPSLA+%28+2018+%29%2C+147+%3A+1-147+%3A+25.+https%3A%2F%2Fdoi.org%2F+10.1145%2F3276517+10.1145%2F3276517^^^Xue Qin, Hao Zhong, and Xiaoyin Wang. 2019. TestMig: migrating GUI test cases from iOS to Android. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019, Beijing, China, July 15-19, 2019., Dongmei Zhang and Anders Møller (Eds.). ACM, 284-295. https: //doi.org/10.1145/3293882.3330575 ***http://scholar.google.com/scholar?hl=en&q=Xue+Qin%2C+Hao+Zhong%2C+and+Xiaoyin+Wang.+2019.+TestMig%3A+migrating+GUI+test+cases+from+iOS+to+Android.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2019%2C+Beijing%2C+China%2C+July+15-19%2C+2019.%2C+Dongmei+Zhang+and+Anders+M%C3%B8ller+%28Eds.%29.+ACM%2C+284-295.+https%3A+%2F%2Fdoi.org%2F10.1145%2F3293882.3330575+10.1145%2F3293882.3330575^^^Anirudh Santhiar, Omesh Pandita, and Aditya Kanade. 2014. Mining Unit Tests for Discovery and Migration of Math APIs. ACM Trans. Softw. Eng. Methodol. 24, 1 ( 2014 ), 4 : 1-4 : 33. https://doi.org/10.1145/2629506 ***http://scholar.google.com/scholar?hl=en&q=Anirudh+Santhiar%2C+Omesh+Pandita%2C+and+Aditya+Kanade.+2014.+Mining+Unit+Tests+for+Discovery+and+Migration+of+Math+APIs.+ACM+Trans.+Softw.+Eng.+Methodol.+24%2C+1+%28+2014+%29%2C+4+%3A+1-4+%3A+33.+https%3A%2F%2Fdoi.org%2F10.1145%2F2629506+10.1145%2F2629506^^^Chengnian Sun, Vu Le, and Zhendong Su. 2016. Finding and analyzing compiler warning defects. In Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016, Laura K. Dillon, Willem Visser, and Laurie Williams (Eds.). ACM, 203-213. https://doi.org/ 10.1145/2884781.2884879 ***http://scholar.google.com/scholar?hl=en&q=Chengnian+Sun%2C+Vu+Le%2C+and+Zhendong+Su.+2016.+Finding+and+analyzing+compiler+warning+defects.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering%2C+ICSE+2016%2C+Austin%2C+TX%2C+USA%2C+May+14-22%2C+2016%2C+Laura+K.+Dillon%2C+Willem+Visser%2C+and+Laurie+Williams+%28Eds.%29.+ACM%2C+203-213.+https%3A%2F%2Fdoi.org%2F+10.1145%2F2884781.2884879+10.1145%2F2884781.2884879^^^Enyi Tang, Earl T. Barr, Xuandong Li, and Zhendong Su. 2010. Perturbing numerical calculations for statistical analysis of floating-point program (in)stability. In Proceedings of the Nineteenth International Symposium on Software Testing and Analysis, ISSTA 2010, Trento, Italy, July 12-16, 2010, Paolo Tonella and Alessandro Orso (Eds.). ACM, 131-142. https://doi.org/10.1145/1831708.1831724 ***http://scholar.google.com/scholar?hl=en&q=Enyi+Tang%2C+Earl+T.+Barr%2C+Xuandong+Li%2C+and+Zhendong+Su.+2010.+Perturbing+numerical+calculations+for+statistical+analysis+of+floating-point+program+%28in%29stability.+In+Proceedings+of+the+Nineteenth+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2010%2C+Trento%2C+Italy%2C+July+12-16%2C+2010%2C+Paolo+Tonella+and+Alessandro+Orso+%28Eds.%29.+ACM%2C+131-142.+https%3A%2F%2Fdoi.org%2F10.1145%2F1831708.1831724+10.1145%2F1831708.1831724^^^Enyi Tang, Xiangyu Zhang, Norbert Th. Müller, Zhenyu Chen, and Xuandong Li. 2017. Software Numerical Instability Detection and Diagnosis by Combining Stochastic and Infinite-Precision Testing. IEEE Trans. Software Eng. 43, 10 ( 2017 ), 975-994. https://doi.org/10.1109/TSE. 2016.2642956 ***http://scholar.google.com/scholar?hl=en&q=Enyi+Tang%2C+Xiangyu+Zhang%2C+Norbert+Th.+M%C3%BCller%2C+Zhenyu+Chen%2C+and+Xuandong+Li.+2017.+Software+Numerical+Instability+Detection+and+Diagnosis+by+Combining+Stochastic+and+Infinite-Precision+Testing.+IEEE+Trans.+Software+Eng.+43%2C+10+%28+2017+%29%2C+975-994.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2016.2642956+10.1109%2FTSE.2016.2642956^^^Lode Vandevenne. 2014. jmat: Complex special functions, numerical linear algebra and statistics in JavaScript. https://github.com/lvandeve/jmat. ( 2014 ).***http://scholar.google.com/scholar?hl=en&q=Lode+Vandevenne.+2014.+jmat%3A+Complex+special+functions%2C+numerical+linear+algebra+and+statistics+in+JavaScript.+https%3A%2F%2Fgithub.com%2Flvandeve%2Fjmat.+%28+2014+%29.^^^Ran Wang, Daming Zou, Xinrui He, Yingfei Xiong, Lu Zhang, and Gang Huang. 2016. Detecting and fixing precision-specific operations for measuring floatingpoint errors. In Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, Seattle, WA, USA, November 13-18, 2016, Thomas Zimmermann, Jane Cleland-Huang, and Zhendong Su (Eds.). ACM, 619-630. https://doi.org/10.1145/2950290.2950355 ***http://scholar.google.com/scholar?hl=en&q=Ran+Wang%2C+Daming+Zou%2C+Xinrui+He%2C+Yingfei+Xiong%2C+Lu+Zhang%2C+and+Gang+Huang.+2016.+Detecting+and+fixing+precision-specific+operations+for+measuring+floatingpoint+errors.+In+Proceedings+of+the+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering%2C+FSE+2016%2C+Seattle%2C+WA%2C+USA%2C+November+13-18%2C+2016%2C+Thomas+Zimmermann%2C+Jane+Cleland-Huang%2C+and+Zhendong+Su+%28Eds.%29.+ACM%2C+619-630.+https%3A%2F%2Fdoi.org%2F10.1145%2F2950290.2950355+10.1145%2F2950290.2950355^^^Eric W Weisstein. [n. d.]. Special Function. ([n. d.]). http://mathworld.wolfram. com/SpecialFunction.html***http://scholar.google.com/scholar?hl=en&q=Eric+W+Weisstein.+%5Bn.+d.%5D.+Special+Function.+%28%5Bn.+d.%5D%29.+http%3A%2F%2Fmathworld.wolfram.+com%2FSpecialFunction.html^^^Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and understanding bugs in C compilers. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2011, San Jose, CA, USA, June 4-8, 2011, Mary W. Hall and David A. Padua (Eds.). ACM, 283-294. https://doi.org/10.1145/1993498.1993532 ***http://scholar.google.com/scholar?hl=en&q=Xuejun+Yang%2C+Yang+Chen%2C+Eric+Eide%2C+and+John+Regehr.+2011.+Finding+and+understanding+bugs+in+C+compilers.+In+Proceedings+of+the+32nd+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+2011%2C+San+Jose%2C+CA%2C+USA%2C+June+4-8%2C+2011%2C+Mary+W.+Hall+and+David+A.+Padua+%28Eds.%29.+ACM%2C+283-294.+https%3A%2F%2Fdoi.org%2F10.1145%2F1993498.1993532+10.1145%2F1993498.1993532^^^Yibiao Yang, Yuming Zhou, Hao Sun, Zhendong Su, Zhiqiang Zuo, Lei Xu, and Baowen Xu. 2019. Hunting for bugs in code coverage tools via randomized diferential testing. In Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019, Joanne M. Atlee, Tevfik Bultan, and Jon Whittle (Eds.). IEEE / ACM, 488-498. https://doi.org/10. 1109/ICSE. 2019.00061 ***http://scholar.google.com/scholar?hl=en&q=Yibiao+Yang%2C+Yuming+Zhou%2C+Hao+Sun%2C+Zhendong+Su%2C+Zhiqiang+Zuo%2C+Lei+Xu%2C+and+Baowen+Xu.+2019.+Hunting+for+bugs+in+code+coverage+tools+via+randomized+diferential+testing.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+ICSE+2019%2C+Montreal%2C+QC%2C+Canada%2C+May+25-31%2C+2019%2C+Joanne+M.+Atlee%2C+Tevfik+Bultan%2C+and+Jon+Whittle+%28Eds.%29.+IEEE+%2F+ACM%2C+488-498.+https%3A%2F%2Fdoi.org%2F10.+1109%2FICSE.+2019.00061+10.1109%2FICSE.2019.00061^^^Xin Yi, Liqian Chen, Xiaoguang Mao, and Tao Ji. 2019. Eficient automated repair of high floating-point errors in numerical libraries. PACMPL 3, POPL ( 2019 ), 56 : 1-56 : 29. https://doi.org/10.1145/3290369 ***http://scholar.google.com/scholar?hl=en&q=Xin+Yi%2C+Liqian+Chen%2C+Xiaoguang+Mao%2C+and+Tao+Ji.+2019.+Eficient+automated+repair+of+high+floating-point+errors+in+numerical+libraries.+PACMPL+3%2C+POPL+%28+2019+%29%2C+56+%3A+1-56+%3A+29.+https%3A%2F%2Fdoi.org%2F10.1145%2F3290369+10.1145%2F3290369^^^Daming Zou, Ran Wang, Yingfei Xiong, Lu Zhang, Zhendong Su, and Hong Mei. 2015. A Genetic Algorithm for Detecting Significant Floating-Point Inaccuracies. In 37th IEEE/ACM International Conference on Software Engineering, ICSE 2015, Florence, Italy, May 16-24, 2015, Volume 1, Antonia Bertolino, Gerardo Canfora, and Sebastian G. Elbaum (Eds.). IEEE Computer Society, 529-539. https://doi. org/10.1109/ICSE. 2015.70 ***http://scholar.google.com/scholar?hl=en&q=Daming+Zou%2C+Ran+Wang%2C+Yingfei+Xiong%2C+Lu+Zhang%2C+Zhendong+Su%2C+and+Hong+Mei.+2015.+A+Genetic+Algorithm+for+Detecting+Significant+Floating-Point+Inaccuracies.+In+37th+IEEE%2FACM+International+Conference+on+Software+Engineering%2C+ICSE+2015%2C+Florence%2C+Italy%2C+May+16-24%2C+2015%2C+Volume+1%2C+Antonia+Bertolino%2C+Gerardo+Canfora%2C+and+Sebastian+G.+Elbaum+%28Eds.%29.+IEEE+Computer+Society%2C+529-539.+https%3A%2F%2Fdoi.+org%2F10.1109%2FICSE.+2015.70+10.1109%2FICSE.2015.70^^^');
INSERT INTO `paper_ref` VALUES (11, 35, 'Statista. 2019. Number of apps available in leading app stores. Retrieved March 16, 2020 from https://www.statista.com/statistics/276623/number-of-appsavailable-in-leading-app-stores/***http://scholar.google.com/scholar?hl=en&q=Statista.+2019.+Number+of+apps+available+in+leading+app+stores.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Fwww.statista.com%2Fstatistics%2F276623%2Fnumber-of-appsavailable-in-leading-app-stores%2F^^^Statista. 2019. Percentage of mobile device website traffic worldwide. Retrieved March 16, 2020 from https://www.statista.com/statistics/277125/share-of-website-traffic-comingfrom-mobile-devices***http://scholar.google.com/scholar?hl=en&q=Statista.+2019.+Percentage+of+mobile+device+website+traffic+worldwide.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Fwww.statista.com%2Fstatistics%2F277125%2Fshare-of-website-traffic-comingfrom-mobile-devices^^^Tramontana Porfirio, Amalfitano Domenico, Amatucci Nicola and Fasolino Anna Rita. 2019. Automated functional testing of mobile applications: a systematic mapping study. Software Quality Journal 27, 1 ( March. 2019 ), 149-201. https://doi.org/10.1007/s11219-018-9418-6 ***http://scholar.google.com/scholar?hl=en&q=Tramontana+Porfirio%2C+Amalfitano+Domenico%2C+Amatucci+Nicola+and+Fasolino+Anna+Rita.+2019.+Automated+functional+testing+of+mobile+applications%3A+a+systematic+mapping+study.+Software+Quality+Journal+27%2C+1+%28+March.+2019+%29%2C+149-201.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs11219-018-9418-6+10.1007%2Fs11219-018-9418-6^^^Kong Pingfan, Li Li, Gao Jun, Liu Kui, Bissyande Tegawende F. and Klein Jacques. 2019. Automated Testing of Android Apps: A Systematic Literature Review. IEEE Transactions on Reliability 68, 1 (March 2019 ), 45-66. https://doi.org/10.1109/TR. 2018.2865733 ***http://scholar.google.com/scholar?hl=en&q=Kong+Pingfan%2C+Li+Li%2C+Gao+Jun%2C+Liu+Kui%2C+Bissyande+Tegawende+F.+and+Klein+Jacques.+2019.+Automated+Testing+of+Android+Apps%3A+A+Systematic+Literature+Review.+IEEE+Transactions+on+Reliability+68%2C+1+%28March+2019+%29%2C+45-66.+https%3A%2F%2Fdoi.org%2F10.1109%2FTR.+2018.2865733+10.1109%2FTR.2018.2865733^^^Espresso. Use Espresso to write concise, beautiful, and reliable Android UI tests. Retrieved March 16, 2020 from https://developer.android.com/training/testing/espresso***http://scholar.google.com/scholar?hl=en&q=Espresso.+Use+Espresso+to+write+concise%2C+beautiful%2C+and+reliable+Android+UI+tests.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Fdeveloper.android.com%2Ftraining%2Ftesting%2Fespresso^^^Xctest. Create and run unit tests, performance tests, and UI tests for your Xcode project. Retrieved March 16, 2020 from https://developer.apple.com/documentation/xctest***http://scholar.google.com/scholar?hl=en&q=Xctest.+Create+and+run+unit+tests%2C+performance+tests%2C+and+UI+tests+for+your+Xcode+project.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Fdeveloper.apple.com%2Fdocumentation%2Fxctest^^^Appium. Automation for Apps. Retrieved March 16, 2020 from http://appium.io***http://scholar.google.com/scholar?hl=en&q=Appium.+Automation+for+Apps.+Retrieved+March+16%2C+2020+from+http%3A%2F%2Fappium.io^^^Yeh Tom, Chang Tsung-Hsiang and Miller Robert C. 2009. Sikuli: using GUI screenshots for search and automation. In Proceedings of the 22nd annual ACM symposium on User interface software and technology (UIST \'09), Victoria, BC, Canada. Association for Computing Machinery, 183-192. https://doi.org/10.1145/1622176.1622213 ***http://scholar.google.com/scholar?hl=en&q=Yeh+Tom%2C+Chang+Tsung-Hsiang+and+Miller+Robert+C.+2009.+Sikuli%3A+using+GUI+screenshots+for+search+and+automation.+In+Proceedings+of+the+22nd+annual+ACM+symposium+on+User+interface+software+and+technology+%28UIST+%2709%29%2C+Victoria%2C+BC%2C+Canada.+Association+for+Computing+Machinery%2C+183-192.+https%3A%2F%2Fdoi.org%2F10.1145%2F1622176.1622213+10.1145%2F1622176.1622213^^^Eyeautomate. Visual Script Runner. Retrieved March 16, 2020 from https://eyeautomate.com/eyeautomate/***http://scholar.google.com/scholar?hl=en&q=Eyeautomate.+Visual+Script+Runner.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Feyeautomate.com%2Feyeautomate%2F^^^Gomez Lorenzo, Neamtiu Iulian, Azim Tanzirul and Millstein Todd. 2013. Reran: Timing-and touch-sensitive record and replay for android. In Proceedings of the 2013 35th International Conference on Software Engineering (ICSE \'13), San Francisco, CA, USA. IEEE, 72-81. https://doi.org/10.1109/ICSE. 2013.6606553 ***http://scholar.google.com/scholar?hl=en&q=Gomez+Lorenzo%2C+Neamtiu+Iulian%2C+Azim+Tanzirul+and+Millstein+Todd.+2013.+Reran%3A+Timing-and+touch-sensitive+record+and+replay+for+android.+In+Proceedings+of+the+2013+35th+International+Conference+on+Software+Engineering+%28ICSE+%2713%29%2C+San+Francisco%2C+CA%2C+USA.+IEEE%2C+72-81.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2013.6606553+10.1109%2FICSE.2013.6606553^^^Guo Jiaqi, Li Shuyue, Lou Jian-Guang, Yang Zijiang and Liu Ting. 2019. Sara: self-replay augmented record and replay for Android in industrial cases. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA \'19), Beijing, China. Association for Computing Machinery, 90-100. https://doi.org/10.1145/3293882.3330557 ***http://scholar.google.com/scholar?hl=en&q=Guo+Jiaqi%2C+Li+Shuyue%2C+Lou+Jian-Guang%2C+Yang+Zijiang+and+Liu+Ting.+2019.+Sara%3A+self-replay+augmented+record+and+replay+for+Android+in+industrial+cases.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%2719%29%2C+Beijing%2C+China.+Association+for+Computing+Machinery%2C+90-100.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330557+10.1145%2F3293882.3330557^^^Yu Shengcheng, Fang Chunrong, Feng Yang, Zhao Wenyuan and Chen Zhenyu. 2019. LIRAT: Layout and Image Recognition Driving Automated Mobile Testing of Cross-Platform. In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE \'19), San Diego, CA, USA. IEEE, 1066-1069. https://doi.org/10.1109/ASE. 2019.00103 ***http://scholar.google.com/scholar?hl=en&q=Yu+Shengcheng%2C+Fang+Chunrong%2C+Feng+Yang%2C+Zhao+Wenyuan+and+Chen+Zhenyu.+2019.+LIRAT%3A+Layout+and+Image+Recognition+Driving+Automated+Mobile+Testing+of+Cross-Platform.+In+Proceedings+of+the+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%2719%29%2C+San+Diego%2C+CA%2C+USA.+IEEE%2C+1066-1069.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2019.00103+10.1109%2FASE.2019.00103^^^Monkey. UI/Application Exerciser Monkey. Retrieved March 16, 2020 from https://developer.android.com/studio/test/monkey***http://scholar.google.com/scholar?hl=en&q=Monkey.+UI%2FApplication+Exerciser+Monkey.+Retrieved+March+16%2C+2020+from+https%3A%2F%2Fdeveloper.android.com%2Fstudio%2Ftest%2Fmonkey^^^Osman Mohamed S and Wasmi Hiba Ayyed. 2019. Improved Monkey Tool for Random Testing in Mobile Applications. In Proceedings of the 2019 IEEE Jordan International Joint Conference on Electrical Engineering and Information Technology (JEEIT \'19), Amman, Jordan, Jordan. IEEE, 658-662. https://doi.org/10.1109/JEEIT. 2019.8717506 ***http://scholar.google.com/scholar?hl=en&q=Osman+Mohamed+S+and+Wasmi+Hiba+Ayyed.+2019.+Improved+Monkey+Tool+for+Random+Testing+in+Mobile+Applications.+In+Proceedings+of+the+2019+IEEE+Jordan+International+Joint+Conference+on+Electrical+Engineering+and+Information+Technology+%28JEEIT+%2719%29%2C+Amman%2C+Jordan%2C+Jordan.+IEEE%2C+658-662.+https%3A%2F%2Fdoi.org%2F10.1109%2FJEEIT.+2019.8717506+10.1109%2FJEEIT.2019.8717506^^^Machiry Aravind, Tahiliani Rohan and Naik Mayur. 2013. Dynodroid: an input generation system for Android apps. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (ESEC/FSE \'13), Saint Petersburg, Russia. Association for Computing Machinery, 224-234. https://doi.org/10.1145/2491411.2491450 ***http://scholar.google.com/scholar?hl=en&q=Machiry+Aravind%2C+Tahiliani+Rohan+and+Naik+Mayur.+2013.+Dynodroid%3A+an+input+generation+system+for+Android+apps.+In+Proceedings+of+the+2013+9th+Joint+Meeting+on+Foundations+of+Software+Engineering+%28ESEC%2FFSE+%2713%29%2C+Saint+Petersburg%2C+Russia.+Association+for+Computing+Machinery%2C+224-234.+https%3A%2F%2Fdoi.org%2F10.1145%2F2491411.2491450+10.1145%2F2491411.2491450^^^Amalfitano Domenico, Fasolino Anna Rita, Tramontana Porfirio, Ta Bryan Dzung and Memon Atif M. 2014. MobiGUITAR: Automated model-based testing of mobile apps. Ieee Software 32, 5 (April 2014 ), 53-59. https://doi.org/10.1109/MS. 2014.55 ***http://scholar.google.com/scholar?hl=en&q=Amalfitano+Domenico%2C+Fasolino+Anna+Rita%2C+Tramontana+Porfirio%2C+Ta+Bryan+Dzung+and+Memon+Atif+M.+2014.+MobiGUITAR%3A+Automated+model-based+testing+of+mobile+apps.+Ieee+Software+32%2C+5+%28April+2014+%29%2C+53-59.+https%3A%2F%2Fdoi.org%2F10.1109%2FMS.+2014.55+10.1109%2FMS.2014.55^^^Salihu Ibrahim-Anka, Ibrahim Rosziati, Ahmed Bestoun S, Zamli Kamal Z and Usman Asmau. 2019. AMOGA: a static-dynamic model generation strategy for mobile apps testing. IEEE Access 7 (January 2019 ), 17158-17173. https://doi.org/10.1109/ACCESS. 2019.2895504 ***http://scholar.google.com/scholar?hl=en&q=Salihu+Ibrahim-Anka%2C+Ibrahim+Rosziati%2C+Ahmed+Bestoun+S%2C+Zamli+Kamal+Z+and+Usman+Asmau.+2019.+AMOGA%3A+a+static-dynamic+model+generation+strategy+for+mobile+apps+testing.+IEEE+Access+7+%28January+2019+%29%2C+17158-17173.+https%3A%2F%2Fdoi.org%2F10.1109%2FACCESS.+2019.2895504+10.1109%2FACCESS.2019.2895504^^^Amalfitano Domenico, Amatucci Nicola, Fasolino Anna Rita and Tramontana Porfirio. 2015. AGRippin: a novel search based testing technique for Android applications. In Proceedings of the 3rd International Workshop on Software Development Lifecycle for Mobile (DeMobile \'15), Bergamo, Italy. Association for Computing Machinery, 5-12. https://doi.org/10.1145/2804345.2804348 ***http://scholar.google.com/scholar?hl=en&q=Amalfitano+Domenico%2C+Amatucci+Nicola%2C+Fasolino+Anna+Rita+and+Tramontana+Porfirio.+2015.+AGRippin%3A+a+novel+search+based+testing+technique+for+Android+applications.+In+Proceedings+of+the+3rd+International+Workshop+on+Software+Development+Lifecycle+for+Mobile+%28DeMobile+%2715%29%2C+Bergamo%2C+Italy.+Association+for+Computing+Machinery%2C+5-12.+https%3A%2F%2Fdoi.org%2F10.1145%2F2804345.2804348+10.1145%2F2804345.2804348^^^Mao Ke, Harman Mark and Jia Yue. 2016. Sapienz: multi-objective automated testing for Android applications. In Proceedings of the 25th International Symposium on Software Testing and Analysis (ISSTA \'16), Saarbrücken, Germany. Association for Computing Machinery, 94-105. https://doi.org/10.1145/2931037.2931054 ***http://scholar.google.com/scholar?hl=en&q=Mao+Ke%2C+Harman+Mark+and+Jia+Yue.+2016.+Sapienz%3A+multi-objective+automated+testing+for+Android+applications.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%2716%29%2C+Saarbr%C3%BCcken%2C+Germany.+Association+for+Computing+Machinery%2C+94-105.+https%3A%2F%2Fdoi.org%2F10.1145%2F2931037.2931054+10.1145%2F2931037.2931054^^^Qin Xue, Zhong Hao and Wang Xiaoyin. 2019. TestMig: migrating GUI test cases from iOS to Android. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA \'19), Beijing, China. Association for Computing Machinery, 284-295. https://doi.org/10.1145/3293882.3330575 ***http://scholar.google.com/scholar?hl=en&q=Qin+Xue%2C+Zhong+Hao+and+Wang+Xiaoyin.+2019.+TestMig%3A+migrating+GUI+test+cases+from+iOS+to+Android.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%2719%29%2C+Beijing%2C+China.+Association+for+Computing+Machinery%2C+284-295.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330575+10.1145%2F3293882.3330575^^^Behrang Farnaz and Orso Alessandro. 2019. Test migration between mobile apps with similar functionality. In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE \'19), San Diego, CA, USA, USA IEEE, 54-65. https://doi.org/10.1109/ASE. 2019.00016 ***http://scholar.google.com/scholar?hl=en&q=Behrang+Farnaz+and+Orso+Alessandro.+2019.+Test+migration+between+mobile+apps+with+similar+functionality.+In+Proceedings+of+the+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%2719%29%2C+San+Diego%2C+CA%2C+USA%2C+USA+IEEE%2C+54-65.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2019.00016+10.1109%2FASE.2019.00016^^^Lin Jun-Wei, Jabbarvand Reyhaneh and Malek Sam. 2019. Test Transfer Across Mobile Apps Through Semantic Mapping. In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE \'19), San Diego, CA, USA, USA. IEEE, 42-53. https://doi.org/10.1109/ASE. 2019.00015 ***http://scholar.google.com/scholar?hl=en&q=Lin+Jun-Wei%2C+Jabbarvand+Reyhaneh+and+Malek+Sam.+2019.+Test+Transfer+Across+Mobile+Apps+Through+Semantic+Mapping.+In+Proceedings+of+the+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%2719%29%2C+San+Diego%2C+CA%2C+USA%2C+USA.+IEEE%2C+42-53.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2019.00015+10.1109%2FASE.2019.00015^^^Choi Wontae, Necula George and Sen Koushik. 2013. Guided GUI testing of android apps with minimal restart and approximate learning. SIGPLAN Not. 48, 10 ( October 2013 ), 623-640. https://doi.org/10.1145/2544173.2509552 ***http://scholar.google.com/scholar?hl=en&q=Choi+Wontae%2C+Necula+George+and+Sen+Koushik.+2013.+Guided+GUI+testing+of+android+apps+with+minimal+restart+and+approximate+learning.+SIGPLAN+Not.+48%2C+10+%28+October+2013+%29%2C+623-640.+https%3A%2F%2Fdoi.org%2F10.1145%2F2544173.2509552+10.1145%2F2544173.2509552^^^Li Yuanchun, Yang Ziyue, Guo Yao and Chen Xiangqun. 2017. DroidBot: a lightweight UI-guided test input generator for Android. In Proceedings of the 2017 IEEE/ACM 39th International Conference on Software Engineering Companion ( ICSE-C), Buenos Aires, Argentina. IEEE, 23-26. https://doi.org/10.1109/ICSE-C. 2017.8 ***http://scholar.google.com/scholar?hl=en&q=Li+Yuanchun%2C+Yang+Ziyue%2C+Guo+Yao+and+Chen+Xiangqun.+2017.+DroidBot%3A+a+lightweight+UI-guided+test+input+generator+for+Android.+In+Proceedings+of+the+2017+IEEE%2FACM+39th+International+Conference+on+Software+Engineering+Companion+%28+ICSE-C%29%2C+Buenos+Aires%2C+Argentina.+IEEE%2C+23-26.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE-C.+2017.8+10.1109%2FICSE-C.2017.8^^^Li Yuanchun, Yang Ziyue, Guo Yao and Chen Xiangqun. 2019. Humanoid: A Deep Learning-Based Approach to Automated Black-box Android App Testing. In Proceedings of the 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE \'19), San Diego, CA, USA. IEEE, 1070-1073. https://doi.org/10.1109/ASE. 2019.00104 ***http://scholar.google.com/scholar?hl=en&q=Li+Yuanchun%2C+Yang+Ziyue%2C+Guo+Yao+and+Chen+Xiangqun.+2019.+Humanoid%3A+A+Deep+Learning-Based+Approach+to+Automated+Black-box+Android+App+Testing.+In+Proceedings+of+the+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%2719%29%2C+San+Diego%2C+CA%2C+USA.+IEEE%2C+1070-1073.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2019.00104+10.1109%2FASE.2019.00104^^^Alzaylaee Mohammed K, Yerima Suleiman Y and Sezer Sakir. 2020. DL-Droid: Deep learning based android malware detection using real devices. Computers & Security 89 ( February 2020 ), 101663. https://doi.org/10.1016/j.cose. 2019.101663 ***http://scholar.google.com/scholar?hl=en&q=Alzaylaee+Mohammed+K%2C+Yerima+Suleiman+Y+and+Sezer+Sakir.+2020.+DL-Droid%3A+Deep+learning+based+android+malware+detection+using+real+devices.+Computers+%26+Security+89+%28+February+2020+%29%2C+101663.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.cose.+2019.101663+10.1016%2Fj.cose.2019.101663^^^Koroglu Yavuz, Sen Alper, Muslu Ozlem, Mete Yunus, Ulker Ceyda, Tanriverdi Tolga and Donmez Yunus. 2018. QBE: QLearning-based exploration of android applications. In Proceedings of the 2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST \'18), Vasteras, Sweden. IEEE, 105-115. https://doi.org/10.1109/ICST. 2018.00020 ***http://scholar.google.com/scholar?hl=en&q=Koroglu+Yavuz%2C+Sen+Alper%2C+Muslu+Ozlem%2C+Mete+Yunus%2C+Ulker+Ceyda%2C+Tanriverdi+Tolga+and+Donmez+Yunus.+2018.+QBE%3A+QLearning-based+exploration+of+android+applications.+In+Proceedings+of+the+2018+IEEE+11th+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST+%2718%29%2C+Vasteras%2C+Sweden.+IEEE%2C+105-115.+https%3A%2F%2Fdoi.org%2F10.1109%2FICST.+2018.00020+10.1109%2FICST.2018.00020^^^Vuong Thi Anh Tuyet and Takada Shingo. 2018. A reinforcement learning based approach to automated testing of Android applications. In Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation ( A-TEST \' 19 ), Lake Buena Vista, FL, USA. Association for Computing Machinery, 31-37. https://doi.org/10.1145/3278186.3278191 ***http://scholar.google.com/scholar?hl=en&q=Vuong+Thi+Anh+Tuyet+and+Takada+Shingo.+2018.+A+reinforcement+learning+based+approach+to+automated+testing+of+Android+applications.+In+Proceedings+of+the+9th+ACM+SIGSOFT+International+Workshop+on+Automating+TEST+Case+Design%2C+Selection%2C+and+Evaluation+%28+A-TEST+%27+19+%29%2C+Lake+Buena+Vista%2C+FL%2C+USA.+Association+for+Computing+Machinery%2C+31-37.+https%3A%2F%2Fdoi.org%2F10.1145%2F3278186.3278191+10.1145%2F3278186.3278191^^^Craciunescu Mihai, Mocanu Stefan, Dobre Cristian and Dobrescu Radu. 2018. Robot based automated testing procedure dedicated to mobile devices. In Proceedings of the 2018 25th International Conference on Systems, Signals and Image Processing (IWSSIP \'18), Maribor, Slovenia. IEEE, 1-4. https://doi.org/10.1109/IWSSIP. 2018.8439614 ***http://scholar.google.com/scholar?hl=en&q=Craciunescu+Mihai%2C+Mocanu+Stefan%2C+Dobre+Cristian+and+Dobrescu+Radu.+2018.+Robot+based+automated+testing+procedure+dedicated+to+mobile+devices.+In+Proceedings+of+the+2018+25th+International+Conference+on+Systems%2C+Signals+and+Image+Processing+%28IWSSIP+%2718%29%2C+Maribor%2C+Slovenia.+IEEE%2C+1-4.+https%3A%2F%2Fdoi.org%2F10.1109%2FIWSSIP.+2018.8439614+10.1109%2FIWSSIP.2018.8439614^^^Mao Ke, Harman Mark and Jia Yue. 2017. Robotic testing of mobile apps for truly black-box automation. Ieee Software 34, 2 (March 2017 ), 11-16. https://doi.org/10.1109/MS. 2017.49 ***http://scholar.google.com/scholar?hl=en&q=Mao+Ke%2C+Harman+Mark+and+Jia+Yue.+2017.+Robotic+testing+of+mobile+apps+for+truly+black-box+automation.+Ieee+Software+34%2C+2+%28March+2017+%29%2C+11-16.+https%3A%2F%2Fdoi.org%2F10.1109%2FMS.+2017.49+10.1109%2FMS.2017.49^^^Redmon Joseph and Farhadi Ali. 2018. Yolov3: An incremental improvement. arXiv: 1804.02767. Retrieved from https://arxiv.org/abs/ 1804.02767***http://scholar.google.com/scholar?hl=en&q=Redmon+Joseph+and+Farhadi+Ali.+2018.+Yolov3%3A+An+incremental+improvement.+arXiv%3A+1804.02767.+Retrieved+from+https%3A%2F%2Farxiv.org%2Fabs%2F+1804.02767^^^Deka Biplab, Huang Zifeng, Franzen Chad, Hibschman Joshua, Afergan Daniel, Li Yang, Nichols Jeffrey and Kumar Ranjitha. 2017. Rico: A Mobile App Dataset for Building Data-Driven Design Applications. In Proceedings of the 30th Annual ACM Symposium on User Interface Software and Technology (UIST \'17), Québec City, QC, Canada. Association for Computing Machinery, 845-854. https://doi.org/10.1145/3126594.3126651 ***http://scholar.google.com/scholar?hl=en&q=Deka+Biplab%2C+Huang+Zifeng%2C+Franzen+Chad%2C+Hibschman+Joshua%2C+Afergan+Daniel%2C+Li+Yang%2C+Nichols+Jeffrey+and+Kumar+Ranjitha.+2017.+Rico%3A+A+Mobile+App+Dataset+for+Building+Data-Driven+Design+Applications.+In+Proceedings+of+the+30th+Annual+ACM+Symposium+on+User+Interface+Software+and+Technology+%28UIST+%2717%29%2C+Qu%C3%A9bec+City%2C+QC%2C+Canada.+Association+for+Computing+Machinery%2C+845-854.+https%3A%2F%2Fdoi.org%2F10.1145%2F3126594.3126651+10.1145%2F3126594.3126651^^^Dizaji Kamran Ghasedi, Herandi Amirhossein, Deng Cheng, Cai Weidong and Huang Heng. 2017. Deep Clustering via Joint Convolutional Autoencoder Embedding and Relative Entropy Minimization. In Proceedings of the 2017 IEEE International Conference on Computer Vision (ICCV \'17), Venice, Italy. IEEE, 5747-5756. https://doi.org/10.1109/ICCV. 2017.612 ***http://scholar.google.com/scholar?hl=en&q=Dizaji+Kamran+Ghasedi%2C+Herandi+Amirhossein%2C+Deng+Cheng%2C+Cai+Weidong+and+Huang+Heng.+2017.+Deep+Clustering+via+Joint+Convolutional+Autoencoder+Embedding+and+Relative+Entropy+Minimization.+In+Proceedings+of+the+2017+IEEE+International+Conference+on+Computer+Vision+%28ICCV+%2717%29%2C+Venice%2C+Italy.+IEEE%2C+5747-5756.+https%3A%2F%2Fdoi.org%2F10.1109%2FICCV.+2017.612+10.1109%2FICCV.2017.612^^^Degott Christian, Jr. Nataniel P. Borges and Zeller Andreas. 2019. Learning user interface element interactions. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA \' 19), Beijing, China. Association for Computing Machinery, 296-306. https://doi.org/10.1145/3293882.3330569 ***http://scholar.google.com/scholar?hl=en&q=Degott+Christian%2C+Jr.+Nataniel+P.+Borges+and+Zeller+Andreas.+2019.+Learning+user+interface+element+interactions.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+%27+19%29%2C+Beijing%2C+China.+Association+for+Computing+Machinery%2C+296-306.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330569+10.1145%2F3293882.3330569^^^Borges Nataniel P., Gómez Maria and Zeller Andreas. 2018. Guiding app testing with mined interaction models. In Proceedings of the 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft \'18), Gothenburg, Sweden. Association for Computing Machinery, 133-143. https://doi.org/10.1145/3197231.3197243 ***http://scholar.google.com/scholar?hl=en&q=Borges+Nataniel+P.%2C+G%C3%B3mez+Maria+and+Zeller+Andreas.+2018.+Guiding+app+testing+with+mined+interaction+models.+In+Proceedings+of+the+5th+International+Conference+on+Mobile+Software+Engineering+and+Systems+%28MOBILESoft+%2718%29%2C+Gothenburg%2C+Sweden.+Association+for+Computing+Machinery%2C+133-143.+https%3A%2F%2Fdoi.org%2F10.1145%2F3197231.3197243+10.1145%2F3197231.3197243^^^');
INSERT INTO `paper_ref` VALUES (12, 42, 'Brenda S Baker. 1995. On finding duplication and near-duplication in large software systems. In Proceedings of the 2nd Working Conference on Reverse Engineering. IEEE, 86-95.***http://scholar.google.com/scholar?hl=en&q=Brenda+S+Baker.+1995.+On+finding+duplication+and+near-duplication+in+large+software+systems.+In+Proceedings+of+the+2nd+Working+Conference+on+Reverse+Engineering.+IEEE%2C+86-95.^^^Magdalena Balazinska, Ettore Merlo, Michel Dagenais, Bruno Lague, and Kostas Kontogiannis. 2000. Advanced clone-analysis to support object-oriented system refactoring. In Proceedings of the 7th Working Conference on Reverse Engineering. IEEE, 98-107.***http://scholar.google.com/scholar?hl=en&q=Magdalena+Balazinska%2C+Ettore+Merlo%2C+Michel+Dagenais%2C+Bruno+Lague%2C+and+Kostas+Kontogiannis.+2000.+Advanced+clone-analysis+to+support+object-oriented+system+refactoring.+In+Proceedings+of+the+7th+Working+Conference+on+Reverse+Engineering.+IEEE%2C+98-107.^^^Stefan Bellon, Rainer Koschke, Giulio Antoniol, Jens Krinke, and Ettore Merlo. 2007. Comparison and evaluation of clone detection tools. IEEE Transactions on software engineering 33, 9 ( 2007 ), 577-591.***http://scholar.google.com/scholar?hl=en&q=Stefan+Bellon%2C+Rainer+Koschke%2C+Giulio+Antoniol%2C+Jens+Krinke%2C+and+Ettore+Merlo.+2007.+Comparison+and+evaluation+of+clone+detection+tools.+IEEE+Transactions+on+software+engineering+33%2C+9+%28+2007+%29%2C+577-591.^^^Wen-Ke Chen, Bengu Li, and Rajiv Gupta. 2003. Code compaction of matching single-entry multiple-exit regions. In Proceedings of the 10th International Static Analysis Symposium. Springer, 401-417.***http://scholar.google.com/scholar?hl=en&q=Wen-Ke+Chen%2C+Bengu+Li%2C+and+Rajiv+Gupta.+2003.+Code+compaction+of+matching+single-entry+multiple-exit+regions.+In+Proceedings+of+the+10th+International+Static+Analysis+Symposium.+Springer%2C+401-417.^^^Aditya Grover and Jure Leskovec. 2016. node2vec: Scalable feature learning for networks. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 855-864.***http://scholar.google.com/scholar?hl=en&q=Aditya+Grover+and+Jure+Leskovec.+2016.+node2vec%3A+Scalable+feature+learning+for+networks.+In+Proceedings+of+the+22nd+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining.+ACM%2C+855-864.^^^Reid Holmes and Gail C Murphy. 2005. Using structural context to recommend source code examples. In Proceedings of the 27th International Conference on Software Engineering. IEEE, 117-125.***http://scholar.google.com/scholar?hl=en&q=Reid+Holmes+and+Gail+C+Murphy.+2005.+Using+structural+context+to+recommend+source+code+examples.+In+Proceedings+of+the+27th+International+Conference+on+Software+Engineering.+IEEE%2C+117-125.^^^Chenping Hou, Feiping Nie, Xuelong Li, Dongyun Yi, and Yi Wu. 2014. Joint embedding learning and sparse regression: A framework for unsupervised feature selection. IEEE Transactions on Cybernetics 44, 6 ( 2014 ), 793-804.***http://scholar.google.com/scholar?hl=en&q=Chenping+Hou%2C+Feiping+Nie%2C+Xuelong+Li%2C+Dongyun+Yi%2C+and+Yi+Wu.+2014.+Joint+embedding+learning+and+sparse+regression%3A+A+framework+for+unsupervised+feature+selection.+IEEE+Transactions+on+Cybernetics+44%2C+6+%28+2014+%29%2C+793-804.^^^Sohei Ito. 2018. Semantical equivalence of the control flow graph and the program dependence graph. arXiv preprint arXiv: 1803. 02976 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Sohei+Ito.+2018.+Semantical+equivalence+of+the+control+flow+graph+and+the+program+dependence+graph.+arXiv+preprint+arXiv%3A+1803.+02976+%28+2018+%29.^^^Lingxiao Jiang, Ghassan Misherghi, Zhendong Su, and Stephane Glondu. 2007. Deckard: Scalable and accurate tree-based detection of code clones. In Proceedings of the 29th International Conference on Software Engineering. IEEE, 96-105.***http://scholar.google.com/scholar?hl=en&q=Lingxiao+Jiang%2C+Ghassan+Misherghi%2C+Zhendong+Su%2C+and+Stephane+Glondu.+2007.+Deckard%3A+Scalable+and+accurate+tree-based+detection+of+code+clones.+In+Proceedings+of+the+29th+International+Conference+on+Software+Engineering.+IEEE%2C+96-105.^^^Lingxiao Jiang, Zhendong Su, and Edwin Chiu. 2007. Context-based detection of clone-related bugs. In Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT symposium on the Foundations of Software Engineering. ACM, 55-64.***http://scholar.google.com/scholar?hl=en&q=Lingxiao+Jiang%2C+Zhendong+Su%2C+and+Edwin+Chiu.+2007.+Context-based+detection+of+clone-related+bugs.+In+Proceedings+of+the+6th+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+SIGSOFT+symposium+on+the+Foundations+of+Software+Engineering.+ACM%2C+55-64.^^^Nal Kalchbrenner, Edward Grefenstette, and Phil Blunsom. 2014. A convolutional neural network for modelling sentences. arXiv preprint arXiv:1404.2188 ( 2014 ).***http://scholar.google.com/scholar?hl=en&q=Nal+Kalchbrenner%2C+Edward+Grefenstette%2C+and+Phil+Blunsom.+2014.+A+convolutional+neural+network+for+modelling+sentences.+arXiv+preprint+arXiv%3A1404.2188+%28+2014+%29.^^^Iman Keivanloo, Juergen Rilling, and Ying Zou. 2014. Spotting working code examples. In Proceedings of the 36th International Conference on Software Engineering. ACM, 664-675.***http://scholar.google.com/scholar?hl=en&q=Iman+Keivanloo%2C+Juergen+Rilling%2C+and+Ying+Zou.+2014.+Spotting+working+code+examples.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering.+ACM%2C+664-675.^^^Diederik P Kingma and Jimmy Ba. 2014. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980 ( 2014 ).***http://scholar.google.com/scholar?hl=en&q=Diederik+P+Kingma+and+Jimmy+Ba.+2014.+Adam%3A+A+method+for+stochastic+optimization.+arXiv+preprint+arXiv%3A1412.6980+%28+2014+%29.^^^Raghavan Komondoor and Susan Horwitz. 2001. Using slicing to identify duplication in source code. In Proceedings of the 8th International Symposium on Static Analysis. Springer, 40-56.***http://scholar.google.com/scholar?hl=en&q=Raghavan+Komondoor+and+Susan+Horwitz.+2001.+Using+slicing+to+identify+duplication+in+source+code.+In+Proceedings+of+the+8th+International+Symposium+on+Static+Analysis.+Springer%2C+40-56.^^^Jens Krinke. 2001. Identifying similar code with program dependence graphs. In Proceedings of 8th Working Conference on Reverse Engineering. IEEE, 301-309.***http://scholar.google.com/scholar?hl=en&q=Jens+Krinke.+2001.+Identifying+similar+code+with+program+dependence+graphs.+In+Proceedings+of+8th+Working+Conference+on+Reverse+Engineering.+IEEE%2C+301-309.^^^Omer Levy, Yoav Goldberg, and Ido Dagan. 2015. Improving distributional similarity with lessons learned from word embeddings. Transactions of the Association for Computational Linguistics 3 ( 2015 ), 211-225.***http://scholar.google.com/scholar?hl=en&q=Omer+Levy%2C+Yoav+Goldberg%2C+and+Ido+Dagan.+2015.+Improving+distributional+similarity+with+lessons+learned+from+word+embeddings.+Transactions+of+the+Association+for+Computational+Linguistics+3+%28+2015+%29%2C+211-225.^^^Zhenmin Li, Shan Lu, Suvda Myagmar, and Yuanyuan Zhou. 2004. CP-Miner: A tool for finding copy-paste and related bugs in operating system code. In Proceedings of the 6th Symposium on Operating Systems Design & Implementation. USENIX, 289-302.***http://scholar.google.com/scholar?hl=en&q=Zhenmin+Li%2C+Shan+Lu%2C+Suvda+Myagmar%2C+and+Yuanyuan+Zhou.+2004.+CP-Miner%3A+A+tool+for+finding+copy-paste+and+related+bugs+in+operating+system+code.+In+Proceedings+of+the+6th+Symposium+on+Operating+Systems+Design+%26+Implementation.+USENIX%2C+289-302.^^^Chao Liu, Chen Chen, Jiawei Han, and Philip S Yu. 2006. GPLAG: Detection of software plagiarism by program dependence graph analysis. In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 872-881.***http://scholar.google.com/scholar?hl=en&q=Chao+Liu%2C+Chen+Chen%2C+Jiawei+Han%2C+and+Philip+S+Yu.+2006.+GPLAG%3A+Detection+of+software+plagiarism+by+program+dependence+graph+analysis.+In+Proceedings+of+the+12th+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining.+ACM%2C+872-881.^^^Xing Liu and P Gontey. 1987. Program translation by manipulating abstract syntax trees. In Proceedings of the C++ Workshop. 345-360.***http://scholar.google.com/scholar?hl=en&q=Xing+Liu+and+P+Gontey.+1987.+Program+translation+by+manipulating+abstract+syntax+trees.+In+Proceedings+of+the+C%2B%2B+Workshop.+345-360.^^^Na Meng, Lisa Hua, Miryung Kim, and Kathryn S McKinley. 2015. Does automated refactoring obviate systematic editing?. In Proceedings of the 37th International Conference on Software Engineering. IEEE, 392-402.***http://scholar.google.com/scholar?hl=en&q=Na+Meng%2C+Lisa+Hua%2C+Miryung+Kim%2C+and+Kathryn+S+McKinley.+2015.+Does+automated+refactoring+obviate+systematic+editing%3F.+In+Proceedings+of+the+37th+International+Conference+on+Software+Engineering.+IEEE%2C+392-402.^^^Tomas Mikolov, Kai Chen, Greg Corrado, and Jefrey Dean. 2013. Eficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781 ( 2013 ).***http://scholar.google.com/scholar?hl=en&q=Tomas+Mikolov%2C+Kai+Chen%2C+Greg+Corrado%2C+and+Jefrey+Dean.+2013.+Eficient+estimation+of+word+representations+in+vector+space.+arXiv+preprint+arXiv%3A1301.3781+%28+2013+%29.^^^Lili Mou, Ge Li, Lu Zhang, Tao Wang, and Zhi Jin. 2016. Convolutional neural networks over tree structures for programming language processing. In Proceedings of the 30th AAAI Conference on Artificial Intelligence.***http://scholar.google.com/scholar?hl=en&q=Lili+Mou%2C+Ge+Li%2C+Lu+Zhang%2C+Tao+Wang%2C+and+Zhi+Jin.+2016.+Convolutional+neural+networks+over+tree+structures+for+programming+language+processing.+In+Proceedings+of+the+30th+AAAI+Conference+on+Artificial+Intelligence.^^^Annamalai Narayanan, Mahinthan Chandramohan, Rajasekar Venkatesan, Lihui Chen, Yang Liu, and Shantanu Jaiswal. 2017. graph2vec: Learning distributed representations of graphs. arXiv preprint arXiv:1707.05005 ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Annamalai+Narayanan%2C+Mahinthan+Chandramohan%2C+Rajasekar+Venkatesan%2C+Lihui+Chen%2C+Yang+Liu%2C+and+Shantanu+Jaiswal.+2017.+graph2vec%3A+Learning+distributed+representations+of+graphs.+arXiv+preprint+arXiv%3A1707.05005+%28+2017+%29.^^^Manziba Akanda Nishi and Kostadin Damevski. 2018. Scalable code clone detection and search based on adaptive prefix filtering. Journal of Systems and Software 137 ( 2018 ), 130-142.***http://scholar.google.com/scholar?hl=en&q=Manziba+Akanda+Nishi+and+Kostadin+Damevski.+2018.+Scalable+code+clone+detection+and+search+based+on+adaptive+prefix+filtering.+Journal+of+Systems+and+Software+137+%28+2018+%29%2C+130-142.^^^Mingdong Ou, Peng Cui, Jian Pei, Ziwei Zhang, and Wenwu Zhu. 2016. Asymmetric transitivity preserving graph embedding. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 1105-1114.***http://scholar.google.com/scholar?hl=en&q=Mingdong+Ou%2C+Peng+Cui%2C+Jian+Pei%2C+Ziwei+Zhang%2C+and+Wenwu+Zhu.+2016.+Asymmetric+transitivity+preserving+graph+embedding.+In+Proceedings+of+the+22nd+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining.+ACM%2C+1105-1114.^^^J-F Patenaude, Ettore Merlo, Michel Dagenais, and Bruno Laguë. 1999. Extending software quality assessment techniques to java systems. In Proceedings of the 7th International Workshop on Program Comprehension. IEEE, 49-56.***http://scholar.google.com/scholar?hl=en&q=J-F+Patenaude%2C+Ettore+Merlo%2C+Michel+Dagenais%2C+and+Bruno+Lagu%C3%AB.+1999.+Extending+software+quality+assessment+techniques+to+java+systems.+In+Proceedings+of+the+7th+International+Workshop+on+Program+Comprehension.+IEEE%2C+49-56.^^^Daniel Perez and Shigeru Chiba. 2019. Cross-language clone detection by learning over abstract syntax trees. In Proceedings of the 16th IEEE/ACM International Conference on Mining Software Repositories (MSR). IEEE, 518-528.***http://scholar.google.com/scholar?hl=en&q=Daniel+Perez+and+Shigeru+Chiba.+2019.+Cross-language+clone+detection+by+learning+over+abstract+syntax+trees.+In+Proceedings+of+the+16th+IEEE%2FACM+International+Conference+on+Mining+Software+Repositories+%28MSR%29.+IEEE%2C+518-528.^^^Dhavleesh Rattan, Rajesh Bhatia, and Maninder Singh. 2013. Software clone detection: A systematic review. Information and Software Technology 55, 7 ( 2013 ), 1165-1199.***http://scholar.google.com/scholar?hl=en&q=Dhavleesh+Rattan%2C+Rajesh+Bhatia%2C+and+Maninder+Singh.+2013.+Software+clone+detection%3A+A+systematic+review.+Information+and+Software+Technology+55%2C+7+%28+2013+%29%2C+1165-1199.^^^Chanchal K Roy and James R Cordy. 2008. NICAD: Accurate detection of nearmiss intentional clones using flexible pretty-printing and code normalization. In Proceedings of the 16th IEEE International Conference on Program Comprehension. IEEE, 172-181.***http://scholar.google.com/scholar?hl=en&q=Chanchal+K+Roy+and+James+R+Cordy.+2008.+NICAD%3A+Accurate+detection+of+nearmiss+intentional+clones+using+flexible+pretty-printing+and+code+normalization.+In+Proceedings+of+the+16th+IEEE+International+Conference+on+Program+Comprehension.+IEEE%2C+172-181.^^^Hitesh Sajnani, Vaibhav Saini, Jefrey Svajlenko, Chanchal K Roy, and Cristina V Lopes. 2016. SourcererCC: Scaling code clone detection to big-code. In Proceedings of the 38th International Conference on Software Engineering. IEEE, 1157-1168.***http://scholar.google.com/scholar?hl=en&q=Hitesh+Sajnani%2C+Vaibhav+Saini%2C+Jefrey+Svajlenko%2C+Chanchal+K+Roy%2C+and+Cristina+V+Lopes.+2016.+SourcererCC%3A+Scaling+code+clone+detection+to+big-code.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering.+IEEE%2C+1157-1168.^^^Abdullah Sheneamer and Jugal Kalita. 2016. Semantic clone detection using machine learning. In Proceedings of the 15th IEEE International Conference on Machine Learning and Applications. IEEE, 1024-1028.***http://scholar.google.com/scholar?hl=en&q=Abdullah+Sheneamer+and+Jugal+Kalita.+2016.+Semantic+clone+detection+using+machine+learning.+In+Proceedings+of+the+15th+IEEE+International+Conference+on+Machine+Learning+and+Applications.+IEEE%2C+1024-1028.^^^Daniel Svozil, Vladimir Kvasnicka, and Jiri Pospichal. 1997. Introduction to multilayer feed-forward neural networks. Chemometrics and Intelligent Laboratory Systems 39, 1 ( 1997 ), 43-62.***http://scholar.google.com/scholar?hl=en&q=Daniel+Svozil%2C+Vladimir+Kvasnicka%2C+and+Jiri+Pospichal.+1997.+Introduction+to+multilayer+feed-forward+neural+networks.+Chemometrics+and+Intelligent+Laboratory+Systems+39%2C+1+%28+1997+%29%2C+43-62.^^^Nikolaos Tsantalis, Davood Mazinanian, and Giri Panamoottil Krishnan. 2015. Assessing the refactorability of software clones. IEEE Transactions on Software Engineering 41, 11 ( 2015 ), 1055-1090.***http://scholar.google.com/scholar?hl=en&q=Nikolaos+Tsantalis%2C+Davood+Mazinanian%2C+and+Giri+Panamoottil+Krishnan.+2015.+Assessing+the+refactorability+of+software+clones.+IEEE+Transactions+on+Software+Engineering+41%2C+11+%28+2015+%29%2C+1055-1090.^^^Nikolaos Tsantalis, Davood Mazinanian, and Shahriar Rostami. 2017. Clone refactoring with lambda expressions. In Proceedings of the 39th International Conference on Software Engineering. IEEE Press, 60-70.***http://scholar.google.com/scholar?hl=en&q=Nikolaos+Tsantalis%2C+Davood+Mazinanian%2C+and+Shahriar+Rostami.+2017.+Clone+refactoring+with+lambda+expressions.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering.+IEEE+Press%2C+60-70.^^^Michele Tufano, Cody Watson, Gabriele Bavota, Massimiliano Di Penta, Martin White, and Denys Poshyvanyk. 2018. Deep learning similarities from diferent representations of source code. In Proceedings of the 15th IEEE/ACM International Conference on Mining Software Repositories. IEEE, 542-553.***http://scholar.google.com/scholar?hl=en&q=Michele+Tufano%2C+Cody+Watson%2C+Gabriele+Bavota%2C+Massimiliano+Di+Penta%2C+Martin+White%2C+and+Denys+Poshyvanyk.+2018.+Deep+learning+similarities+from+diferent+representations+of+source+code.+In+Proceedings+of+the+15th+IEEE%2FACM+International+Conference+on+Mining+Software+Repositories.+IEEE%2C+542-553.^^^Tim A Wagner, Vance Maverick, Susan L Graham, and Michael A Harrison. 1994. Accurate static estimators for program optimization. ACM Sigplan Notices 29, 6 ( 1994 ), 85-96.***http://scholar.google.com/scholar?hl=en&q=Tim+A+Wagner%2C+Vance+Maverick%2C+Susan+L+Graham%2C+and+Michael+A+Harrison.+1994.+Accurate+static+estimators+for+program+optimization.+ACM+Sigplan+Notices+29%2C+6+%28+1994+%29%2C+85-96.^^^Daixin Wang, Peng Cui, and Wenwu Zhu. 2016. Structural deep network embedding. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 1225-1234.***http://scholar.google.com/scholar?hl=en&q=Daixin+Wang%2C+Peng+Cui%2C+and+Wenwu+Zhu.+2016.+Structural+deep+network+embedding.+In+Proceedings+of+the+22nd+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining.+ACM%2C+1225-1234.^^^Huihui Wei and Ming Li. 2017. Supervised deep features for software functional clone detection by exploiting lexical and syntactical information in source code.. In Proceedings of the 26th International Joint Conference on Artificial Intelligence. 3034-3040.***http://scholar.google.com/scholar?hl=en&q=Huihui+Wei+and+Ming+Li.+2017.+Supervised+deep+features+for+software+functional+clone+detection+by+exploiting+lexical+and+syntactical+information+in+source+code..+In+Proceedings+of+the+26th+International+Joint+Conference+on+Artificial+Intelligence.+3034-3040.^^^Westley Weimer, ThanhVu Nguyen, Claire Le Goues, and Stephanie Forrest. 2009. Automatically finding patches using genetic programming. In Proceedings of 31st IEEE International Conference on Software Engineering. IEEE, 364-374.***http://scholar.google.com/scholar?hl=en&q=Westley+Weimer%2C+ThanhVu+Nguyen%2C+Claire+Le+Goues%2C+and+Stephanie+Forrest.+2009.+Automatically+finding+patches+using+genetic+programming.+In+Proceedings+of+31st+IEEE+International+Conference+on+Software+Engineering.+IEEE%2C+364-374.^^^Martin White, Michele Tufano, Christopher Vendome, and Denys Poshyvanyk. 2016. Deep learning code fragments for code clone detection. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering. ACM, 87-98.***http://scholar.google.com/scholar?hl=en&q=Martin+White%2C+Michele+Tufano%2C+Christopher+Vendome%2C+and+Denys+Poshyvanyk.+2016.+Deep+learning+code+fragments+for+code+clone+detection.+In+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+ACM%2C+87-98.^^^Jian Zhang, Xu Wang, Hongyu Zhang, Hailong Sun, Kaixuan Wang, and Xudong Liu. 2019. A novel neural source code representation based on abstract syntax tree. In Proceedings of the 41st International Conference on Software Engineering. IEEE, 783-794.***http://scholar.google.com/scholar?hl=en&q=Jian+Zhang%2C+Xu+Wang%2C+Hongyu+Zhang%2C+Hailong+Sun%2C+Kaixuan+Wang%2C+and+Xudong+Liu.+2019.+A+novel+neural+source+code+representation+based+on+abstract+syntax+tree.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering.+IEEE%2C+783-794.^^^Gang Zhao and Jef Huang. 2018. Deepsim: deep learning code functional similarity. In Proceedings of the 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, 141-151.***http://scholar.google.com/scholar?hl=en&q=Gang+Zhao+and+Jef+Huang.+2018.+Deepsim%3A+deep+learning+code+functional+similarity.+In+Proceedings+of+the+26th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+ACM%2C+141-151.^^^');
INSERT INTO `paper_ref` VALUES (13, 10, '2019. T.J. Watson Libraries for Analysis. https://github.com/wala/WALA/wiki***http://scholar.google.com/scholar?hl=en&q=2019.+T.J.+Watson+Libraries+for+Analysis.+https%3A%2F%2Fgithub.com%2Fwala%2FWALA%2Fwiki^^^Lei Ai, Zhiqiu Huang, Weiwei Li, Yu Zhou, and Yaoshen Yu. 2019. SENSORY: Leveraging Code Statement Sequence Information for Code Snippets Recommendation. In 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC), Vol. 1. IEEE, 27-36.***http://scholar.google.com/scholar?hl=en&q=Lei+Ai%2C+Zhiqiu+Huang%2C+Weiwei+Li%2C+Yu+Zhou%2C+and+Yaoshen+Yu.+2019.+SENSORY%3A+Leveraging+Code+Statement+Sequence+Information+for+Code+Snippets+Recommendation.+In+2019+IEEE+43rd+Annual+Computer+Software+and+Applications+Conference+%28COMPSAC%29%2C+Vol.+1.+IEEE%2C+27-36.^^^Bruno Antunes, Barbara Furtado, and Paulo Gomes. 2014. Context-based search, recommendation and browsing in software development. In Context in Computing. Springer, 45-62.***http://scholar.google.com/scholar?hl=en&q=Bruno+Antunes%2C+Barbara+Furtado%2C+and+Paulo+Gomes.+2014.+Context-based+search%2C+recommendation+and+browsing+in+software+development.+In+Context+in+Computing.+Springer%2C+45-62.^^^Gordon Fraser and Andrea Arcuri. 2011. Evosuite: automatic test suite generation for object-oriented software. In Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering. 416-419.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2011.+Evosuite%3A+automatic+test+suite+generation+for+object-oriented+software.+In+Proceedings+of+the+19th+ACM+SIGSOFT+symposium+and+the+13th+European+conference+on+Foundations+of+software+engineering.+416-419.^^^Marc R Hofmann, B Janiczak, and E Mandrikov. 2011. Eclemma-jacoco java code coverage library.***http://scholar.google.com/scholar?hl=en&q=Marc+R+Hofmann%2C+B+Janiczak%2C+and+E+Mandrikov.+2011.+Eclemma-jacoco+java+code+coverage+library.^^^Roya Hosseini and Peter Brusilovsky. 2013. Javaparser: A fine-grain concept indexing tool for java problems. In CEUR Workshop Proceedings, Vol. 1009. University of Pittsburgh, 60-63.***http://scholar.google.com/scholar?hl=en&q=Roya+Hosseini+and+Peter+Brusilovsky.+2013.+Javaparser%3A+A+fine-grain+concept+indexing+tool+for+java+problems.+In+CEUR+Workshop+Proceedings%2C+Vol.+1009.+University+of+Pittsburgh%2C+60-63.^^^Werner Janjic and Colin Atkinson. 2013. Utilizing software reuse experience for automated test recommendation.***http://scholar.google.com/scholar?hl=en&q=Werner+Janjic+and+Colin+Atkinson.+2013.+Utilizing+software+reuse+experience+for+automated+test+recommendation.^^^Raphael Pham, Yauheni Stoliar, and Kurt Schneider. 2015. Automatically recommending test code examples to inexperienced developers. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. 890-893.***http://scholar.google.com/scholar?hl=en&q=Raphael+Pham%2C+Yauheni+Stoliar%2C+and+Kurt+Schneider.+2015.+Automatically+recommending+test+code+examples+to+inexperienced+developers.+In+Proceedings+of+the+2015+10th+Joint+Meeting+on+Foundations+of+Software+Engineering.+890-893.^^^Mohammad Masudur Rahman and Chanchal K Roy. 2014. On the use of context in recommending exception handling code examples. In 2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation. IEEE, 285-294.***http://scholar.google.com/scholar?hl=en&q=Mohammad+Masudur+Rahman+and+Chanchal+K+Roy.+2014.+On+the+use+of+context+in+recommending+exception+handling+code+examples.+In+2014+IEEE+14th+International+Working+Conference+on+Source+Code+Analysis+and+Manipulation.+IEEE%2C+285-294.^^^Mark Weiser. 1984. Program slicing. IEEE Transactions on software engineering 4 ( 1984 ), 352-357.***http://scholar.google.com/scholar?hl=en&q=Mark+Weiser.+1984.+Program+slicing.+IEEE+Transactions+on+software+engineering+4+%28+1984+%29%2C+352-357.^^^');
INSERT INTO `paper_ref` VALUES (14, 12, 'Apache. 2019. Cassandra. https://cassandra.apache.org/***http://scholar.google.com/scholar?hl=en&q=Apache.+2019.+Cassandra.+https%3A%2F%2Fcassandra.apache.org%2F^^^Bela Ban. 2019. JGroups. http://www.jgroups.org/***http://scholar.google.com/scholar?hl=en&q=Bela+Ban.+2019.+JGroups.+http%3A%2F%2Fwww.jgroups.org%2F^^^Standard Performance Evaluation Corporation. 2013. SPECjbb2005. https://www. spec.org/jbb2005/***http://scholar.google.com/scholar?hl=en&q=Standard+Performance+Evaluation+Corporation.+2013.+SPECjbb2005.+https%3A%2F%2Fwww.+spec.org%2Fjbb2005%2F^^^Eclipse. 2020. Eclipse Java development tools. https://www.eclipse.org/jdt/***http://scholar.google.com/scholar?hl=en&q=Eclipse.+2020.+Eclipse+Java+development+tools.+https%3A%2F%2Fwww.eclipse.org%2Fjdt%2F^^^Hypersonic SQL Group. 2019. HSQLDB-100 % Java Database. http://hsqldb.org/***http://scholar.google.com/scholar?hl=en&q=Hypersonic+SQL+Group.+2019.+HSQLDB-100+%25+Java+Database.+http%3A%2F%2Fhsqldb.org%2F^^^IBM. 2018. The t. j. watson libraries for analysis. http://wala.sourceforge.net/ wiki/index.php/Main_Pag***http://scholar.google.com/scholar?hl=en&q=IBM.+2018.+The+t.+j.+watson+libraries+for+analysis.+http%3A%2F%2Fwala.sourceforge.net%2F+wiki%2Findex.php%2FMain_Pag^^^Kohsuke Kawaguchi. 2019. Jenkins. https://jenkins.io/***http://scholar.google.com/scholar?hl=en&q=Kohsuke+Kawaguchi.+2019.+Jenkins.+https%3A%2F%2Fjenkins.io%2F^^^B. McCloskey, F. Zhou, D. Gay, and E. A. Brewer. 2006. Autolocker: synchronization inference for atomic sections. In Conference record of the 33rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages. Association for Computing Machinery, 346-358.***http://scholar.google.com/scholar?hl=en&q=B.+McCloskey%2C+F.+Zhou%2C+D.+Gay%2C+and+E.+A.+Brewer.+2006.+Autolocker%3A+synchronization+inference+for+atomic+sections.+In+Conference+record+of+the+33rd+ACM+SIGPLAN-SIGACT+symposium+on+Principles+of+programming+languages.+Association+for+Computing+Machinery%2C+346-358.^^^Benjamin Muskalla. 2008. Concurrency-related refactorings for JDT. https: //wiki.eclipse.org/Concurrency-related_refactorings_for_JDT***http://scholar.google.com/scholar?hl=en&q=Benjamin+Muskalla.+2008.+Concurrency-related+refactorings+for+JDT.+https%3A+%2F%2Fwiki.eclipse.org%2FConcurrency-related_refactorings_for_JDT^^^M. Schäfer, M. Sridharan, J. Dolby, and F. Tip. 2011. Refactoring Java programs for flexible locking. In Proceedings of the 33rd International Conference on Software Engineering. ACM, 71-80.***http://scholar.google.com/scholar?hl=en&q=M.+Sch%C3%A4fer%2C+M.+Sridharan%2C+J.+Dolby%2C+and+F.+Tip.+2011.+Refactoring+Java+programs+for+flexible+locking.+In+Proceedings+of+the+33rd+International+Conference+on+Software+Engineering.+ACM%2C+71-80.^^^Sixth and Red River Software. 2007. Locksmith. https://plugins.jetbrains.com/ plugin/1358-locksmith***http://scholar.google.com/scholar?hl=en&q=Sixth+and+Red+River+Software.+2007.+Locksmith.+https%3A%2F%2Fplugins.jetbrains.com%2F+plugin%2F1358-locksmith^^^Y. Zhang, S. Dong, X. Zhang, H. Liu, and D. Zhang. 2019. Automated Refactoring for Stampedlock. IEEE Access 7, 1 ( 2019 ), 104900-104911.***http://scholar.google.com/scholar?hl=en&q=Y.+Zhang%2C+S.+Dong%2C+X.+Zhang%2C+H.+Liu%2C+and+D.+Zhang.+2019.+Automated+Refactoring+for+Stampedlock.+IEEE+Access+7%2C+1+%28+2019+%29%2C+104900-104911.^^^');
INSERT INTO `paper_ref` VALUES (15, 71, '[n.d.]. http://www.swmath. org/software/18294***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+http%3A%2F%2Fwww.swmath.+org%2Fsoftware%2F18294^^^2020. https://www.top500.org/featured/systems/tianhe-2/***http://scholar.google.com/scholar?hl=en&q=2020.+https%3A%2F%2Fwww.top500.org%2Ffeatured%2Fsystems%2Ftianhe-2%2F^^^Hala Ashi. 2008. Numerical methods for stif systems. Ph.D. Dissertation. University of Nottingham.***http://scholar.google.com/scholar?hl=en&q=Hala+Ashi.+2008.+Numerical+methods+for+stif+systems.+Ph.D.+Dissertation.+University+of+Nottingham.^^^Stefanie L Baker, Aravinda Munasinghe, Bibifatima Kaupbayeva, Nin Rebecca Kang, Marie Certiat, Hironobu Murata, Krzysztof Matyjaszewski, Ping Lin, Coray M Colina, and Alan J Russell. 2019. Puri Fi Cation By Tuning Protein Solubility. Nature Communications ( 2019 ), 1-12.***http://scholar.google.com/scholar?hl=en&q=Stefanie+L+Baker%2C+Aravinda+Munasinghe%2C+Bibifatima+Kaupbayeva%2C+Nin+Rebecca+Kang%2C+Marie+Certiat%2C+Hironobu+Murata%2C+Krzysztof+Matyjaszewski%2C+Ping+Lin%2C+Coray+M+Colina%2C+and+Alan+J+Russell.+2019.+Puri+Fi+Cation+By+Tuning+Protein+Solubility.+Nature+Communications+%28+2019+%29%2C+1-12.^^^Earl T. Barr, Thanh Vo, Vu Le, and Zhendong Su. 2013. Automatic detection of lfoating-point exceptions. POPL: Principles of Programming Languages ( 2013 ), 549-560.***http://scholar.google.com/scholar?hl=en&q=Earl+T.+Barr%2C+Thanh+Vo%2C+Vu+Le%2C+and+Zhendong+Su.+2013.+Automatic+detection+of+lfoating-point+exceptions.+POPL%3A+Principles+of+Programming+Languages+%28+2013+%29%2C+549-560.^^^Peter Bauer, Alan Thorpe, and Gilbert Brunet. 2015. The quiet revolution of numerical weather prediction. Nature 525, 7567 ( 2015 ), 47-55.***http://scholar.google.com/scholar?hl=en&q=Peter+Bauer%2C+Alan+Thorpe%2C+and+Gilbert+Brunet.+2015.+The+quiet+revolution+of+numerical+weather+prediction.+Nature+525%2C+7567+%28+2015+%29%2C+47-55.^^^Florian Benz, Andreas Hildebrandt, and Sebastian Hack. 2012. A dynamic program analysis to find floating-point accuracy problems. In Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation-PLDI \'12, Vol. 47. ACM Press, New York, New York, USA, 453.***http://scholar.google.com/scholar?hl=en&q=Florian+Benz%2C+Andreas+Hildebrandt%2C+and+Sebastian+Hack.+2012.+A+dynamic+program+analysis+to+find+floating-point+accuracy+problems.+In+Proceedings+of+the+33rd+ACM+SIGPLAN+conference+on+Programming+Language+Design+and+Implementation-PLDI+%2712%2C+Vol.+47.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+453.^^^William Boyd, Samuel Shaner, Lulu Li, Benoit Forget, and Kord Smith. 2014. The OpenMOC Method of Characteristics Neutral Particle Transport Code. Annals of Nuclear Energy 68 ( 2014 ), 43-52.***http://scholar.google.com/scholar?hl=en&q=William+Boyd%2C+Samuel+Shaner%2C+Lulu+Li%2C+Benoit+Forget%2C+and+Kord+Smith.+2014.+The+OpenMOC+Method+of+Characteristics+Neutral+Particle+Transport+Code.+Annals+of+Nuclear+Energy+68+%28+2014+%29%2C+43-52.^^^Junjie Chen, Jiaqi Han, Peiyi Sun, Lingming Zhang, Dan Hao, and Lu Zhang. 2019. Compiler Bug Isolation via Efective Witness Test Program Generation. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (Tallinn, Estonia) (ESEC/FSE 2019 ). Association for Computing Machinery, New York, NY, USA, 223-234.***http://scholar.google.com/scholar?hl=en&q=Junjie+Chen%2C+Jiaqi+Han%2C+Peiyi+Sun%2C+Lingming+Zhang%2C+Dan+Hao%2C+and+Lu+Zhang.+2019.+Compiler+Bug+Isolation+via+Efective+Witness+Test+Program+Generation.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28Tallinn%2C+Estonia%29+%28ESEC%2FFSE+2019+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+223-234.^^^J. Chen, G. Wang, D. Hao, Y. Xiong, H. Zhang, and L. Zhang. 2019. HistoryGuided Configuration Diversification for Compiler Test-Program Generation. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). 305-316.***http://scholar.google.com/scholar?hl=en&q=J.+Chen%2C+G.+Wang%2C+D.+Hao%2C+Y.+Xiong%2C+H.+Zhang%2C+and+L.+Zhang.+2019.+HistoryGuided+Configuration+Diversification+for+Compiler+Test-Program+Generation.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+305-316.^^^T.Y. Chen and T.H. Tse. 2002. Metamorphic testing of programs on partial diferential equations: a case study. In Proceedings 26th Annual International Computer Software and Applications (COMPSAC\'02). IEEE Computer Society, Washington, DC, USA, 327-333.***http://scholar.google.com/scholar?hl=en&q=T.Y.+Chen+and+T.H.+Tse.+2002.+Metamorphic+testing+of+programs+on+partial+diferential+equations%3A+a+case+study.+In+Proceedings+26th+Annual+International+Computer+Software+and+Applications+%28COMPSAC%2702%29.+IEEE+Computer+Society%2C+Washington%2C+DC%2C+USA%2C+327-333.^^^Tsong Yueh Chen, Joshua WK Ho, Huai Liu, and Xiaoyuan Xie. 2009. An innovative approach for testing bioinformatics programs using metamorphic testing. In BMC Bioinformatics, Vol. 10. 24.***http://scholar.google.com/scholar?hl=en&q=Tsong+Yueh+Chen%2C+Joshua+WK+Ho%2C+Huai+Liu%2C+and+Xiaoyuan+Xie.+2009.+An+innovative+approach+for+testing+bioinformatics+programs+using+metamorphic+testing.+In+BMC+Bioinformatics%2C+Vol.+10.+24.^^^Tsong Yueh Chen, Pak Lok Poon, and Xiaoyuan Xie. 2016. METRIC: METamorphic Relation Identification based on the Category-choice framework. Journal of Systems and Software 116 ( 2016 ), 177-190.***http://scholar.google.com/scholar?hl=en&q=Tsong+Yueh+Chen%2C+Pak+Lok+Poon%2C+and+Xiaoyuan+Xie.+2016.+METRIC%3A+METamorphic+Relation+Identification+based+on+the+Category-choice+framework.+Journal+of+Systems+and+Software+116+%28+2016+%29%2C+177-190.^^^Tsong Yueh Chen, Changai Sun, Guan Wang, Baohong Mu, Huai Liu, and Zhaoshun Wang. 2012. A Metamorphic Relation-Based Approach to Testing Web Services Without Oracles. International Journal of Web Services Research 9, 1 ( 2012 ), 51-73.***http://scholar.google.com/scholar?hl=en&q=Tsong+Yueh+Chen%2C+Changai+Sun%2C+Guan+Wang%2C+Baohong+Mu%2C+Huai+Liu%2C+and+Zhaoshun+Wang.+2012.+A+Metamorphic+Relation-Based+Approach+to+Testing+Web+Services+Without+Oracles.+International+Journal+of+Web+Services+Research+9%2C+1+%28+2012+%29%2C+51-73.^^^Wei-Fan Chiang, Mark Baranowski, Ian Briggs, Alexey Solovyev, Ganesh Gopalakrishnan, and Zvonimir Rakamarić. 2017. Rigorous floating-point mixedprecision tuning. In POPL 2017. ACM Press, New York, New York, USA, 300-315.***http://scholar.google.com/scholar?hl=en&q=Wei-Fan+Chiang%2C+Mark+Baranowski%2C+Ian+Briggs%2C+Alexey+Solovyev%2C+Ganesh+Gopalakrishnan%2C+and+Zvonimir+Rakamari%C4%87.+2017.+Rigorous+floating-point+mixedprecision+tuning.+In+POPL+2017.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+300-315.^^^Wei-Fan Chiang, Ganesh Gopalakrishnan, Zvonimir Rakamaric, and Alexey Solovyev. 2014. Eficient search for inputs causing high floating-point errors. In Proceedings of the 19th ACM SIGPLAN symposium on Principles and practice of parallel programming-PPoPP \'14. ACM Press, New York, New York, USA, 43-52.***http://scholar.google.com/scholar?hl=en&q=Wei-Fan+Chiang%2C+Ganesh+Gopalakrishnan%2C+Zvonimir+Rakamaric%2C+and+Alexey+Solovyev.+2014.+Eficient+search+for+inputs+causing+high+floating-point+errors.+In+Proceedings+of+the+19th+ACM+SIGPLAN+symposium+on+Principles+and+practice+of+parallel+programming-PPoPP+%2714.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+43-52.^^^Anthony T Chronopoulos and Gang Wang. 1996. Trafic flow simulation through parallel processing. Transportation Research Record 1566, 1566 ( 1996 ), 31-38.***http://scholar.google.com/scholar?hl=en&q=Anthony+T+Chronopoulos+and+Gang+Wang.+1996.+Trafic+flow+simulation+through+parallel+processing.+Transportation+Research+Record+1566%2C+1566+%28+1996+%29%2C+31-38.^^^Yifeng Cui, Kim B. Olsen, Thomas H. Jordan, Kwangyoon Lee, Jun Zhou, Patrick Small, Daniel Roten, Geofrey Ely, Dhabaleswar K. Panda, Amit Chourasia, and et al. 2010. Scalable Earthquake Simulation on Petascale Supercomputers. In Proceedings of the 2010 ACM/IEEE International Conference for High Performance Computing, Networking, Storage and Analysis (SC \'10). IEEE Computer Society, USA, 1-20.***http://scholar.google.com/scholar?hl=en&q=Yifeng+Cui%2C+Kim+B.+Olsen%2C+Thomas+H.+Jordan%2C+Kwangyoon+Lee%2C+Jun+Zhou%2C+Patrick+Small%2C+Daniel+Roten%2C+Geofrey+Ely%2C+Dhabaleswar+K.+Panda%2C+Amit+Chourasia%2C+and+et+al.+2010.+Scalable+Earthquake+Simulation+on+Petascale+Supercomputers.+In+Proceedings+of+the+2010+ACM%2FIEEE+International+Conference+for+High+Performance+Computing%2C+Networking%2C+Storage+and+Analysis+%28SC+%2710%29.+IEEE+Computer+Society%2C+USA%2C+1-20.^^^Junhua Ding and Xin Hua Hu. 2017. Application of metamorphic testing monitored by test adequacy in a Monte Carlo simulation program. Software Quality Journal 25, 3 ( 2017 ), 841-869.***http://scholar.google.com/scholar?hl=en&q=Junhua+Ding+and+Xin+Hua+Hu.+2017.+Application+of+metamorphic+testing+monitored+by+test+adequacy+in+a+Monte+Carlo+simulation+program.+Software+Quality+Journal+25%2C+3+%28+2017+%29%2C+841-869.^^^J. Ding, X. Li, and X. Hu. 2019. Testing Scientific Software with Invariant Relations: A Case Study. In 2019 IEEE 19th International Conference on Software Quality, Reliability and Security (QRS). 406-417.***http://scholar.google.com/scholar?hl=en&q=J.+Ding%2C+X.+Li%2C+and+X.+Hu.+2019.+Testing+Scientific+Software+with+Invariant+Relations%3A+A+Case+Study.+In+2019+IEEE+19th+International+Conference+on+Software+Quality%2C+Reliability+and+Security+%28QRS%29.+406-417.^^^Aaron Y. Dunn, Laurent Capolungo, Enrique Martinez, and Mohammed Cherkaoui. 2013. Spatially resolved stochastic cluster dynamics for radiation damage evolution in nanostructured metals. Journal of Nuclear Materials 443, 1 ( 2013 ), 128-139.***http://scholar.google.com/scholar?hl=en&q=Aaron+Y.+Dunn%2C+Laurent+Capolungo%2C+Enrique+Martinez%2C+and+Mohammed+Cherkaoui.+2013.+Spatially+resolved+stochastic+cluster+dynamics+for+radiation+damage+evolution+in+nanostructured+metals.+Journal+of+Nuclear+Materials+443%2C+1+%28+2013+%29%2C+128-139.^^^E E Lewis, M A Smith, N Tsoulfanidis, G Palmiotti, T A Taiwo, R N Blomquist. 2001. Benchmark specification for Deterministic 2-D/3-D MOX fuel assembly transport calculations without spatial homogenisation (C5G7 MOX).***http://scholar.google.com/scholar?hl=en&q=E+E+Lewis%2C+M+A+Smith%2C+N+Tsoulfanidis%2C+G+Palmiotti%2C+T+A+Taiwo%2C+R+N+Blomquist.+2001.+Benchmark+specification+for+Deterministic+2-D%2F3-D+MOX+fuel+assembly+transport+calculations+without+spatial+homogenisation+%28C5G7+MOX%29.^^^L Eca and M Hoekstra. 2013. Verification and validation for marine applications of CFD. International shipbuilding progress 60 ( 2013 ), 107-141.***http://scholar.google.com/scholar?hl=en&q=L+Eca+and+M+Hoekstra.+2013.+Verification+and+validation+for+marine+applications+of+CFD.+International+shipbuilding+progress+60+%28+2013+%29%2C+107-141.^^^Robert B. Evans and Alberto Savoia. 2007. Diferential testing: A new approach to change detection, In ESEC/FSE 2007. 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2007, 549-552.***http://scholar.google.com/scholar?hl=en&q=Robert+B.+Evans+and+Alberto+Savoia.+2007.+Diferential+testing%3A+A+new+approach+to+change+detection%2C+In+ESEC%2FFSE+2007.+6th+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2007%2C+549-552.^^^S. M. Yiu F. T. Chan, T. Y. Chen, S. C. Cheung, M. F. Lau. 1998. Application of Metamorphic Testing in Numerical Analysis. In Proceedings of the IASTED International Conference on Software Engineering. 191-197.***http://scholar.google.com/scholar?hl=en&q=S.+M.+Yiu+F.+T.+Chan%2C+T.+Y.+Chen%2C+S.+C.+Cheung%2C+M.+F.+Lau.+1998.+Application+of+Metamorphic+Testing+in+Numerical+Analysis.+In+Proceedings+of+the+IASTED+International+Conference+on+Software+Engineering.+191-197.^^^Jun-Xuan Fan, Shu-Zhong Shen, Douglas H Erwin, Peter M Sadler, Norman MacLeod, Qiu-Ming Cheng, Xu-Dong Hou, Jiao Yang, Xiang-Dong Wang, Yue Wang, Hua Zhang, Xu Chen, Guo-Xiang Li, Yi-Chun Zhang, Yu-Kun Shi, DongXun Yuan, Qing Chen, Lin-Na Zhang, Chao Li, and Ying-Ying Zhao. 2020. A high-resolution summary of Cambrian to Early Triassic marine invertebrate biodiversity. Science 367, 6475 (Jan 2020 ), 272-277.***http://scholar.google.com/scholar?hl=en&q=Jun-Xuan+Fan%2C+Shu-Zhong+Shen%2C+Douglas+H+Erwin%2C+Peter+M+Sadler%2C+Norman+MacLeod%2C+Qiu-Ming+Cheng%2C+Xu-Dong+Hou%2C+Jiao+Yang%2C+Xiang-Dong+Wang%2C+Yue+Wang%2C+Hua+Zhang%2C+Xu+Chen%2C+Guo-Xiang+Li%2C+Yi-Chun+Zhang%2C+Yu-Kun+Shi%2C+DongXun+Yuan%2C+Qing+Chen%2C+Lin-Na+Zhang%2C+Chao+Li%2C+and+Ying-Ying+Zhao.+2020.+A+high-resolution+summary+of+Cambrian+to+Early+Triassic+marine+invertebrate+biodiversity.+Science+367%2C+6475+%28Jan+2020+%29%2C+272-277.^^^Anthony Di Franco, Hui Guo, and Cindy Rubio-gonzález. 2017. A Comprehensive Study of Real-World Numerical Bug. ASE\' 17 ( 2017 ), 509-519.***http://scholar.google.com/scholar?hl=en&q=Anthony+Di+Franco%2C+Hui+Guo%2C+and+Cindy+Rubio-gonz%C3%A1lez.+2017.+A+Comprehensive+Study+of+Real-World+Numerical+Bug.+ASE%27+17+%28+2017+%29%2C+509-519.^^^Haohuan Fu, Conghui He, Bingwei Chen, Zekun Yin, Zhenguo Zhang, Wenqiang Zhang, Tingjian Zhang, Wei Xue, Weiguo Liu, Wanwang Yin, and et al. 2017. 18.9-Pflops Nonlinear Earthquake Simulation on Sunway TaihuLight: Enabling Depiction of 18-Hz and 8-Meter Scenarios. In Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis (Denver, Colorado) ( SC \'17). Association for Computing Machinery, New York, NY, USA, Article 2, 12 pages.***http://scholar.google.com/scholar?hl=en&q=Haohuan+Fu%2C+Conghui+He%2C+Bingwei+Chen%2C+Zekun+Yin%2C+Zhenguo+Zhang%2C+Wenqiang+Zhang%2C+Tingjian+Zhang%2C+Wei+Xue%2C+Weiguo+Liu%2C+Wanwang+Yin%2C+and+et+al.+2017.+18.9-Pflops+Nonlinear+Earthquake+Simulation+on+Sunway+TaihuLight%3A+Enabling+Depiction+of+18-Hz+and+8-Meter+Scenarios.+In+Proceedings+of+the+International+Conference+for+High+Performance+Computing%2C+Networking%2C+Storage+and+Analysis+%28Denver%2C+Colorado%29+%28+SC+%2717%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+Article+2%2C+12+pages.^^^Haohuan Fu, Junfeng Liao, Jinzhe Yang, Lanning Wang, Zhenya Song, Xiaomeng Huang, Chao Yang, Wei Xue, Fangfang Liu, Fangli Qiao, Wei Zhao, Xunqiang Yin, Chaofeng Hou, Chenglong Zhang, Wei Ge, Jian Zhang, Yangang Wang, Chunbo Zhou, and Guangwen Yang. 2016. The Sunway TaihuLight supercomputer: system and applications. Science China Information Sciences 59, 7 ( 2016 ), 072001. https://doi.org/10.1007/s11432-016-5588-7 ***http://scholar.google.com/scholar?hl=en&q=Haohuan+Fu%2C+Junfeng+Liao%2C+Jinzhe+Yang%2C+Lanning+Wang%2C+Zhenya+Song%2C+Xiaomeng+Huang%2C+Chao+Yang%2C+Wei+Xue%2C+Fangfang+Liu%2C+Fangli+Qiao%2C+Wei+Zhao%2C+Xunqiang+Yin%2C+Chaofeng+Hou%2C+Chenglong+Zhang%2C+Wei+Ge%2C+Jian+Zhang%2C+Yangang+Wang%2C+Chunbo+Zhou%2C+and+Guangwen+Yang.+2016.+The+Sunway+TaihuLight+supercomputer%3A+system+and+applications.+Science+China+Information+Sciences+59%2C+7+%28+2016+%29%2C+072001.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs11432-016-5588-7+10.1007%2Fs11432-016-5588-7^^^Zhoulai Fu and Zhendong Su. 2017. Achieving high coverage for floating-point code via unconstrained programming. In Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation-PLDI 2017. ACM Press, New York, New York, USA, 306-319. arXiv: 1704. 03394***http://scholar.google.com/scholar?hl=en&q=Zhoulai+Fu+and+Zhendong+Su.+2017.+Achieving+high+coverage+for+floating-point+code+via+unconstrained+programming.+In+Proceedings+of+the+38th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation-PLDI+2017.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+306-319.+arXiv%3A+1704.+03394^^^S Sara Gilani, H Montazeri, and Bje Bert Blocken. 2016. CFD simulation of stratiifed indoor environment in displacement ventilation : validation and sensitivity analysis. Building and Environment 95 ( 2016 ), 299-313.***http://scholar.google.com/scholar?hl=en&q=S+Sara+Gilani%2C+H+Montazeri%2C+and+Bje+Bert+Blocken.+2016.+CFD+simulation+of+stratiifed+indoor+environment+in+displacement+ventilation+%3A+validation+and+sensitivity+analysis.+Building+and+Environment+95+%28+2016+%29%2C+299-313.^^^Geofrey Gunow, Benoit Forget, and Kord Smith. 2019. Full core 3D simulation of the BEAVRS benchmark with OpenMOC. Annals of Nuclear Energy 134 ( 2019 ), 299-304.***http://scholar.google.com/scholar?hl=en&q=Geofrey+Gunow%2C+Benoit+Forget%2C+and+Kord+Smith.+2019.+Full+core+3D+simulation+of+the+BEAVRS+benchmark+with+OpenMOC.+Annals+of+Nuclear+Energy+134+%28+2019+%29%2C+299-304.^^^Hui Guo and Cindy Rubio-González. 2018. Exploiting community structure for lfoating-point precision tuning. ISSTA 2018-Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis 333 ( 2018 ), 333-343.***http://scholar.google.com/scholar?hl=en&q=Hui+Guo+and+Cindy+Rubio-Gonz%C3%A1lez.+2018.+Exploiting+community+structure+for+lfoating-point+precision+tuning.+ISSTA+2018-Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+333+%28+2018+%29%2C+333-343.^^^Jon C Helton, Jay D Johnson, Cedric J Sallaberry, and Curtis B Storlie. 2006. Survey of sampling-based methods for uncertainty and sensitivity analysis. Reliability Engineering & System Safety 91, 10 ( 2006 ), 1175-1209.***http://scholar.google.com/scholar?hl=en&q=Jon+C+Helton%2C+Jay+D+Johnson%2C+Cedric+J+Sallaberry%2C+and+Curtis+B+Storlie.+2006.+Survey+of+sampling-based+methods+for+uncertainty+and+sensitivity+analysis.+Reliability+Engineering+%26+System+Safety+91%2C+10+%28+2006+%29%2C+1175-1209.^^^Upulee Kanewala, James M. Bieman, and Asa Ben-Hur. 2016. Predicting Metamorphic Relations for Testing Scientific Software: A Machine Learning Approach Using Graph Kernels. Softw. Test. Verif. Reliab. 26, 3 (May 2016 ), 245-269.***http://scholar.google.com/scholar?hl=en&q=Upulee+Kanewala%2C+James+M.+Bieman%2C+and+Asa+Ben-Hur.+2016.+Predicting+Metamorphic+Relations+for+Testing+Scientific+Software%3A+A+Machine+Learning+Approach+Using+Graph+Kernels.+Softw.+Test.+Verif.+Reliab.+26%2C+3+%28May+2016+%29%2C+245-269.^^^Jinhan Kim, Robert Feldt, and Shin Yoo. 2019. Guiding Deep Learning System Testing Using Surprise Adequacy. In Proceedings of the 41st International Conference on Software Engineering (Montreal, Quebec, Canada) ( ICSE \'19). IEEE Press, 1039-1049.***http://scholar.google.com/scholar?hl=en&q=Jinhan+Kim%2C+Robert+Feldt%2C+and+Shin+Yoo.+2019.+Guiding+Deep+Learning+System+Testing+Using+Surprise+Adequacy.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28Montreal%2C+Quebec%2C+Canada%29+%28+ICSE+%2719%29.+IEEE+Press%2C+1039-1049.^^^Vu Le, Chengnian Sun, and Zhendong Su. 2015. Finding Deep Compiler Bugs via Guided Stochastic Program Mutation. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (Pittsburgh, PA, USA) ( OOPSLA 2015 ). Association for Computing Machinery, New York, NY, USA, 386-399.***http://scholar.google.com/scholar?hl=en&q=Vu+Le%2C+Chengnian+Sun%2C+and+Zhendong+Su.+2015.+Finding+Deep+Compiler+Bugs+via+Guided+Stochastic+Program+Mutation.+In+Proceedings+of+the+2015+ACM+SIGPLAN+International+Conference+on+Object-Oriented+Programming%2C+Systems%2C+Languages%2C+and+Applications+%28Pittsburgh%2C+PA%2C+USA%29+%28+OOPSLA+2015+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+386-399.^^^Wonyeol Lee, Rahul Sharma, and Alex Aiken. 2016. Verifying bit-manipulations of floating-point. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation-PLDI 2016. ACM Press, New York, New York, USA, 70-84.***http://scholar.google.com/scholar?hl=en&q=Wonyeol+Lee%2C+Rahul+Sharma%2C+and+Alex+Aiken.+2016.+Verifying+bit-manipulations+of+floating-point.+In+Proceedings+of+the+37th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation-PLDI+2016.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+70-84.^^^Mckeeman W M. 1998. Diferential Testing for Software. Digital Technical Journal 10, 1 ( 1998 ), 100-107.***http://scholar.google.com/scholar?hl=en&q=Mckeeman+W+M.+1998.+Diferential+Testing+for+Software.+Digital+Technical+Journal+10%2C+1+%28+1998+%29%2C+100-107.^^^Jinqiu Yang Mahdi Nejadgholi. 2019. A Study of Oracle Approximations in Testing Deep Learning Libraries. In ASE\'19. IEEE/ACM, ACM.***http://scholar.google.com/scholar?hl=en&q=Jinqiu+Yang+Mahdi+Nejadgholi.+2019.+A+Study+of+Oracle+Approximations+in+Testing+Deep+Learning+Libraries.+In+ASE%2719.+IEEE%2FACM%2C+ACM.^^^Ke Mao, Mark Harman, and Yue Jia. 2016. Sapienz: Multi-Objective Automated Testing for Android Applications. In ISSTA\' 16 (Saarbrücken, Germany) ( ISSTA 2016 ). Association for Computing Machinery, New York, NY, USA, 94-105.***http://scholar.google.com/scholar?hl=en&q=Ke+Mao%2C+Mark+Harman%2C+and+Yue+Jia.+2016.+Sapienz%3A+Multi-Objective+Automated+Testing+for+Android+Applications.+In+ISSTA%27+16+%28Saarbr%C3%BCcken%2C+Germany%29+%28+ISSTA+2016+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+94-105.^^^Harshitha Menon, Michael O. Lam, Daniel Osei-Kufuor, Markus Schordan, Scott Lloyd, Kathryn Mohror, and Jefrey Hittinger. 2019. ADAPT: Algorithmic diferentiation applied to floating-point precision tuning. SC\'19 ( 2019 ), 614-626.***http://scholar.google.com/scholar?hl=en&q=Harshitha+Menon%2C+Michael+O.+Lam%2C+Daniel+Osei-Kufuor%2C+Markus+Schordan%2C+Scott+Lloyd%2C+Kathryn+Mohror%2C+and+Jefrey+Hittinger.+2019.+ADAPT%3A+Algorithmic+diferentiation+applied+to+floating-point+precision+tuning.+SC%2719+%28+2019+%29%2C+614-626.^^^Nariman Mirzaei, Joshua Garcia, Hamid Bagheri, Alireza Sadeghi, and Sam Malek. 2016. Reducing Combinatorics in GUI Testing of Android Applications. In Proceedings of the 38th International Conference on Software Engineering (Austin, Texas) ( ICSE \'16). Association for Computing Machinery, New York, NY, USA, 559-570.***http://scholar.google.com/scholar?hl=en&q=Nariman+Mirzaei%2C+Joshua+Garcia%2C+Hamid+Bagheri%2C+Alireza+Sadeghi%2C+and+Sam+Malek.+2016.+Reducing+Combinatorics+in+GUI+Testing+of+Android+Applications.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering+%28Austin%2C+Texas%29+%28+ICSE+%2716%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+559-570.^^^David Monniaux. 2008. The pitfalls of verifying floating-point computations. ACM Transactions on Programming Languages and Systems 30, 3 (may 2008 ), 1-41. arXiv: 0701192 [cs]***http://scholar.google.com/scholar?hl=en&q=David+Monniaux.+2008.+The+pitfalls+of+verifying+floating-point+computations.+ACM+Transactions+on+Programming+Languages+and+Systems+30%2C+3+%28may+2008+%29%2C+1-41.+arXiv%3A+0701192+%5Bcs%5D^^^George Mozdzynski, Mats Hamrud, and Nils Wedi. 2015. A Partitioned Global Address Space implementation of the European Centre for Medium Range Weather Forecasts Integrated Forecasting System. The International Journal of High Performance Computing Applications 29, 3 ( 2015 ), 261-273. arXiv:https://doi.org/10.1177/1094342015576773 ***http://scholar.google.com/scholar?hl=en&q=George+Mozdzynski%2C+Mats+Hamrud%2C+and+Nils+Wedi.+2015.+A+Partitioned+Global+Address+Space+implementation+of+the+European+Centre+for+Medium+Range+Weather+Forecasts+Integrated+Forecasting+System.+The+International+Journal+of+High+Performance+Computing+Applications+29%2C+3+%28+2015+%29%2C+261-273.+arXiv%3Ahttps%3A%2F%2Fdoi.org%2F10.1177%2F1094342015576773+10.1177%2F1094342015576773^^^Pavel Panchekha, Alex Sanchez-Stern, James R. Wilcox, and Zachary Tatlock. 2015. Automatically improving accuracy for floating point expressions. In Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation-PLDI 2015. ACM Press, New York, New York, USA, 1-11. arXiv:arXiv: 1603. 09436***http://scholar.google.com/scholar?hl=en&q=Pavel+Panchekha%2C+Alex+Sanchez-Stern%2C+James+R.+Wilcox%2C+and+Zachary+Tatlock.+2015.+Automatically+improving+accuracy+for+floating+point+expressions.+In+Proceedings+of+the+36th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation-PLDI+2015.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+1-11.+arXiv%3AarXiv%3A+1603.+09436^^^Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. 2019. DeepXplore: Automated Whitebox Testing of Deep Learning Systems. GetMobile: Mobile Comp. and Comm. 22, 3 (Jan. 2019 ), 36-38.***http://scholar.google.com/scholar?hl=en&q=Kexin+Pei%2C+Yinzhi+Cao%2C+Junfeng+Yang%2C+and+Suman+Jana.+2019.+DeepXplore%3A+Automated+Whitebox+Testing+of+Deep+Learning+Systems.+GetMobile%3A+Mobile+Comp.+and+Comm.+22%2C+3+%28Jan.+2019+%29%2C+36-38.^^^Qing Peng, Fanjiang Meng, Yizhong Yang, Chenyang Lu, Huiqiu Deng, Lumin Wang, Suvranu De, and Fei Gao. 2018. Shockwave generates 100 dislocation loops in bcc iron. Nature Communications 9, 1 ( 2018 ), 4880.***http://scholar.google.com/scholar?hl=en&q=Qing+Peng%2C+Fanjiang+Meng%2C+Yizhong+Yang%2C+Chenyang+Lu%2C+Huiqiu+Deng%2C+Lumin+Wang%2C+Suvranu+De%2C+and+Fei+Gao.+2018.+Shockwave+generates+100+dislocation+loops+in+bcc+iron.+Nature+Communications+9%2C+1+%28+2018+%29%2C+4880.^^^Stephanie A. Pitts, Xianming Bai, and Yongfeng Zhang. 2017. Light Water Reactor Sustainability Program Modeling of Cu Precipitate Contributions to Reactor Pressure Vessel Steel Microstructure Evolution and Embrittlement.***http://scholar.google.com/scholar?hl=en&q=Stephanie+A.+Pitts%2C+Xianming+Bai%2C+and+Yongfeng+Zhang.+2017.+Light+Water+Reactor+Sustainability+Program+Modeling+of+Cu+Precipitate+Contributions+to+Reactor+Pressure+Vessel+Steel+Microstructure+Evolution+and+Embrittlement.^^^Steve Plimpton. 1995. Fast Parallel Algorithms for Short-range Molecular Dynamics. J. Comput. Phys. 117, 1 (March 1995 ), 1-19.***http://scholar.google.com/scholar?hl=en&q=Steve+Plimpton.+1995.+Fast+Parallel+Algorithms+for+Short-range+Molecular+Dynamics.+J.+Comput.+Phys.+117%2C+1+%28March+1995+%29%2C+1-19.^^^Patrick J Roache. 1998. Verification and Validation in Computational Science and Engineering.***http://scholar.google.com/scholar?hl=en&q=Patrick+J+Roache.+1998.+Verification+and+Validation+in+Computational+Science+and+Engineering.^^^Christopher J. Roy and William L. Oberkampf. 2011. A comprehensive framework for verification, validation, and uncertainty quantification in scientific computing. Computer Methods in Applied Mechanics and Engineering 200, 25-28 ( 2011 ), 2131-2144.***http://scholar.google.com/scholar?hl=en&q=Christopher+J.+Roy+and+William+L.+Oberkampf.+2011.+A+comprehensive+framework+for+verification%2C+validation%2C+and+uncertainty+quantification+in+scientific+computing.+Computer+Methods+in+Applied+Mechanics+and+Engineering+200%2C+25-28+%28+2011+%29%2C+2131-2144.^^^Cindy Rubio-gonz, Cuong Nguyen, Hong Diep Nguyen, James Demmel, William Kahan, Koushik Sen, David H Bailey, Costin Iancu, and David Hough. 2013. Precimonious : Tuning Assistant for Floating-Point Precision Categories and Subject Descriptors. SC\' 13 ( 2013 ).***http://scholar.google.com/scholar?hl=en&q=Cindy+Rubio-gonz%2C+Cuong+Nguyen%2C+Hong+Diep+Nguyen%2C+James+Demmel%2C+William+Kahan%2C+Koushik+Sen%2C+David+H+Bailey%2C+Costin+Iancu%2C+and+David+Hough.+2013.+Precimonious+%3A+Tuning+Assistant+for+Floating-Point+Precision+Categories+and+Subject+Descriptors.+SC%27+13+%28+2013+%29.^^^Cindy Rubio-Gonzalez, Cuong Nguyen, Benjamin Mehne, Koushik Sen, James Demmel, William Kahan, Costin Iancu, Wim Lavrijsen, David H. Bailey, and David Hough. 2016. Floating-point precision tuning using blame analysis. In ICSE\'16. 1074-1085.***http://scholar.google.com/scholar?hl=en&q=Cindy+Rubio-Gonzalez%2C+Cuong+Nguyen%2C+Benjamin+Mehne%2C+Koushik+Sen%2C+James+Demmel%2C+William+Kahan%2C+Costin+Iancu%2C+Wim+Lavrijsen%2C+David+H.+Bailey%2C+and+David+Hough.+2016.+Floating-point+precision+tuning+using+blame+analysis.+In+ICSE%2716.+1074-1085.^^^Alex Sanchez-Stern, Pavel Panchekha, Sorin Lerner, and Zachary Tatlock. 2018. Finding root causes of floating point error. In Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation-PLDI 2018. ACM Press, New York, New York, USA, 256-269.***http://scholar.google.com/scholar?hl=en&q=Alex+Sanchez-Stern%2C+Pavel+Panchekha%2C+Sorin+Lerner%2C+and+Zachary+Tatlock.+2018.+Finding+root+causes+of+floating+point+error.+In+Proceedings+of+the+39th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation-PLDI+2018.+ACM+Press%2C+New+York%2C+New+York%2C+USA%2C+256-269.^^^Felix Schyboll, Uwe Jaekel, Francesco Petruccione, and Heiko Neeb. 2019. Dipolar induced spin-lattice relaxation in the myelin sheath: A molecular dynamics study. Scientific reports 9, 1 ( 2019 ), 14813.***http://scholar.google.com/scholar?hl=en&q=Felix+Schyboll%2C+Uwe+Jaekel%2C+Francesco+Petruccione%2C+and+Heiko+Neeb.+2019.+Dipolar+induced+spin-lattice+relaxation+in+the+myelin+sheath%3A+A+molecular+dynamics+study.+Scientific+reports+9%2C+1+%28+2019+%29%2C+14813.^^^Sergio Segura, Gordon Fraser, Ana B. Sanchez, and Antonio Ruiz-Cortes. 2016. A Survey on Metamorphic Testing. IEEE Transactions on Software Engineering 42, 9 ( 2016 ), 805-824.***http://scholar.google.com/scholar?hl=en&q=Sergio+Segura%2C+Gordon+Fraser%2C+Ana+B.+Sanchez%2C+and+Antonio+Ruiz-Cortes.+2016.+A+Survey+on+Metamorphic+Testing.+IEEE+Transactions+on+Software+Engineering+42%2C+9+%28+2016+%29%2C+805-824.^^^Sergio Segura, José A. Parejo, Javier Troya, and Antonio Ruiz-Cortés. 2018. Metamorphic Testing of RESTful Web APIs. In Proceedings of the 40th International Conference on Software Engineering (Gothenburg, Sweden) (ICSE \'18). Association for Computing Machinery, New York, NY, USA, 882.***http://scholar.google.com/scholar?hl=en&q=Sergio+Segura%2C+Jos%C3%A9+A.+Parejo%2C+Javier+Troya%2C+and+Antonio+Ruiz-Cort%C3%A9s.+2018.+Metamorphic+Testing+of+RESTful+Web+APIs.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28Gothenburg%2C+Sweden%29+%28ICSE+%2718%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+882.^^^Alexey Solovyev, Marek S. Baranowski, Ian Briggs, Charles Jacobsen, Zvonimir Rakamariundefined, and Ganesh Gopalakrishnan. 2018. Rigorous Estimation of Floating-Point Round-Of Errors with Symbolic Taylor Expansions. ACM Trans. Program. Lang. Syst. 41, 1, Article 2 ( Dec. 2018 ), 39 pages. https://doi.org/10. 1145/3230733 ***http://scholar.google.com/scholar?hl=en&q=Alexey+Solovyev%2C+Marek+S.+Baranowski%2C+Ian+Briggs%2C+Charles+Jacobsen%2C+Zvonimir+Rakamariundefined%2C+and+Ganesh+Gopalakrishnan.+2018.+Rigorous+Estimation+of+Floating-Point+Round-Of+Errors+with+Symbolic+Taylor+Expansions.+ACM+Trans.+Program.+Lang.+Syst.+41%2C+1%2C+Article+2+%28+Dec.+2018+%29%2C+39+pages.+https%3A%2F%2Fdoi.org%2F10.+1145%2F3230733+10.1145%2F3230733^^^A Stamou and Ioannis Katsiris. 2006. Verification of a CFD model for indoor airflow and heat transfer. Building and Environment 41, 9 ( 2006 ), 1171-1181.***http://scholar.google.com/scholar?hl=en&q=A+Stamou+and+Ioannis+Katsiris.+2006.+Verification+of+a+CFD+model+for+indoor+airflow+and+heat+transfer.+Building+and+Environment+41%2C+9+%28+2006+%29%2C+1171-1181.^^^Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang Pu, Yang Liu, and Zhendong Su. 2017. Guided, Stochastic Model-Based GUI Testing of Android Apps. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (Paderborn, Germany) (ESEC/FSE 2017 ). Association for Computing Machinery, New York, NY, USA, 245-256.***http://scholar.google.com/scholar?hl=en&q=Ting+Su%2C+Guozhu+Meng%2C+Yuting+Chen%2C+Ke+Wu%2C+Weiming+Yang%2C+Yao+Yao%2C+Geguang+Pu%2C+Yang+Liu%2C+and+Zhendong+Su.+2017.+Guided%2C+Stochastic+Model-Based+GUI+Testing+of+Android+Apps.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering+%28Paderborn%2C+Germany%29+%28ESEC%2FFSE+2017+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+245-256.^^^S M Yiu T. Y. Chen S. C. Cheung. 1998. Metamorphic testing: a new approach for generating next test cases. Technical Report HKUST-CS98-01. Hong Kong University of Science and Technology.***http://scholar.google.com/scholar?hl=en&q=S+M+Yiu+T.+Y.+Chen+S.+C.+Cheung.+1998.+Metamorphic+testing%3A+a+new+approach+for+generating+next+test+cases.+Technical+Report+HKUST-CS98-01.+Hong+Kong+University+of+Science+and+Technology.^^^Toshikazu Takeda and Hideaki Ikeda. 1991. 3-D Neutron Transport Benchmarks. Journal of Nuclear Science and Technology 28, 7 ( 1991 ), 656-669.***http://scholar.google.com/scholar?hl=en&q=Toshikazu+Takeda+and+Hideaki+Ikeda.+1991.+3-D+Neutron+Transport+Benchmarks.+Journal+of+Nuclear+Science+and+Technology+28%2C+7+%28+1991+%29%2C+656-669.^^^Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi Ray. 2018. DeepTest: Automated Testing of Deep-Neural-Network-driven Autonomous Cars. In ICSE\'18. arXiv:1708.08559***http://scholar.google.com/scholar?hl=en&q=Yuchi+Tian%2C+Kexin+Pei%2C+Suman+Jana%2C+and+Baishakhi+Ray.+2018.+DeepTest%3A+Automated+Testing+of+Deep-Neural-Network-driven+Autonomous+Cars.+In+ICSE%2718.+arXiv%3A1708.08559^^^Xiaoyuan Xie, Joshua W.K. Ho, Christian Murphy, Gail Kaiser, Baowen Xu, and Tsong Yueh Chen. 2011. Testing and validating machine learning classifiers by metamorphic testing. Journal of Systems and Software 84, 4 ( 2011 ), 544-558.***http://scholar.google.com/scholar?hl=en&q=Xiaoyuan+Xie%2C+Joshua+W.K.+Ho%2C+Christian+Murphy%2C+Gail+Kaiser%2C+Baowen+Xu%2C+and+Tsong+Yueh+Chen.+2011.+Testing+and+validating+machine+learning+classifiers+by+metamorphic+testing.+Journal+of+Systems+and+Software+84%2C+4+%28+2011+%29%2C+544-558.^^^Xin Yi, Liqian Chen, Xiaoguang Mao, and Tao Ji. 2017. Automated Repair of High Inaccuracies in Numerical Programs. In ICSME\'17. IEEE, 514-518.***http://scholar.google.com/scholar?hl=en&q=Xin+Yi%2C+Liqian+Chen%2C+Xiaoguang+Mao%2C+and+Tao+Ji.+2017.+Automated+Repair+of+High+Inaccuracies+in+Numerical+Programs.+In+ICSME%2717.+IEEE%2C+514-518.^^^Xin Yi, Liqian Chen, Xiaoguang Mao, and Tao Ji. 2018. Eficient Global Search for Inputs Triggering High Floating-Point Inaccuracies. Proceedings-Asia-Pacific Software Engineering Conference, APSEC 2017-Decem ( 2018 ), 11-20.***http://scholar.google.com/scholar?hl=en&q=Xin+Yi%2C+Liqian+Chen%2C+Xiaoguang+Mao%2C+and+Tao+Ji.+2018.+Eficient+Global+Search+for+Inputs+Triggering+High+Floating-Point+Inaccuracies.+Proceedings-Asia-Pacific+Software+Engineering+Conference%2C+APSEC+2017-Decem+%28+2018+%29%2C+11-20.^^^Xin Yi, Liqian Chen, Xiaoguang Mao, and Tao Ji. 2019. Eficient automated repair of high floating-point errors in numerical libraries. Proceedings of the ACM on Programming Languages 3, POPL (jan 2019 ), 1-29.***http://scholar.google.com/scholar?hl=en&q=Xin+Yi%2C+Liqian+Chen%2C+Xiaoguang+Mao%2C+and+Tao+Ji.+2019.+Eficient+automated+repair+of+high+floating-point+errors+in+numerical+libraries.+Proceedings+of+the+ACM+on+Programming+Languages+3%2C+POPL+%28jan+2019+%29%2C+1-29.^^^Jie Zhang, Junjie Chen, Dan Hao, Yingfei Xiong, Bing Xie, Lu Zhang, and Hong Mei. 2014. Search-Based Inference of Polynomial Metamorphic Relations. In ASE\' 14 ( Vasteras, Sweden). Association for Computing Machinery, New York, NY, USA, 701-712.***http://scholar.google.com/scholar?hl=en&q=Jie+Zhang%2C+Junjie+Chen%2C+Dan+Hao%2C+Yingfei+Xiong%2C+Bing+Xie%2C+Lu+Zhang%2C+and+Hong+Mei.+2014.+Search-Based+Inference+of+Polynomial+Metamorphic+Relations.+In+ASE%27+14+%28+Vasteras%2C+Sweden%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+701-712.^^^Daming Zou, Ran Wang, Yingfei Xiong, Lu Zhang, Zhendong Su, and Hong Mei. 2015. A Genetic Algorithm for Detecting Significant Floating-Point Inaccuracies. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering. IEEE, 529-539.***http://scholar.google.com/scholar?hl=en&q=Daming+Zou%2C+Ran+Wang%2C+Yingfei+Xiong%2C+Lu+Zhang%2C+Zhendong+Su%2C+and+Hong+Mei.+2015.+A+Genetic+Algorithm+for+Detecting+Significant+Floating-Point+Inaccuracies.+In+2015+IEEE%2FACM+37th+IEEE+International+Conference+on+Software+Engineering.+IEEE%2C+529-539.^^^Daming Zou, Muhan Zeng, Yingfei Xiong, Zhoulai Fu, L U Zhang, and Zhendong Su. 2020. Detecting Floating-Point Errors via Atomic Conditions. In Proceedings of the ACM on Programming Languages, Vol. 4. 1-27.***http://scholar.google.com/scholar?hl=en&q=Daming+Zou%2C+Muhan+Zeng%2C+Yingfei+Xiong%2C+Zhoulai+Fu%2C+L+U+Zhang%2C+and+Zhendong+Su.+2020.+Detecting+Floating-Point+Errors+via+Atomic+Conditions.+In+Proceedings+of+the+ACM+on+Programming+Languages%2C+Vol.+4.+1-27.^^^');
INSERT INTO `paper_ref` VALUES (16, 69, 'Android Open Source Project. https://source.android.com/.***http://scholar.google.com/scholar?hl=en&q=Android+Open+Source+Project.+https%3A%2F%2Fsource.android.com%2F.^^^ARM Mapping Symbols. http://infocenter.arm.com/help/index.jsp?topic=/com. arm.doc.dui0474f/CHDGFCDI.html.***http://scholar.google.com/scholar?hl=en&q=ARM+Mapping+Symbols.+http%3A%2F%2Finfocenter.arm.com%2Fhelp%2Findex.jsp%3Ftopic%3D%2Fcom.+arm.doc.dui0474f%2FCHDGFCDI.html.^^^Arm Mbed OS. https://www.mbed.com/en/.***http://scholar.google.com/scholar?hl=en&q=Arm+Mbed+OS.+https%3A%2F%2Fwww.mbed.com%2Fen%2F.^^^B, BL, BX, BLX, and BXJ. http://infocenter.arm.com/help/index.jsp?topic=/com. arm.doc.dui0489c/Cihfddaf.html.***http://scholar.google.com/scholar?hl=en&q=B%2C+BL%2C+BX%2C+BLX%2C+and+BXJ.+http%3A%2F%2Finfocenter.arm.com%2Fhelp%2Findex.jsp%3Ftopic%3D%2Fcom.+arm.doc.dui0489c%2FCihfddaf.html.^^^Binary Ninja : A New Kind Of Reversing Platform. https://binary.ninja/.***http://scholar.google.com/scholar?hl=en&q=Binary+Ninja+%3A+A+New+Kind+Of+Reversing+Platform.+https%3A%2F%2Fbinary.ninja%2F.^^^Buildroot : Making Embedded Linux Easy. https://buildroot.org.***http://scholar.google.com/scholar?hl=en&q=Buildroot+%3A+Making+Embedded+Linux+Easy.+https%3A%2F%2Fbuildroot.org.^^^Capstone: The Ultimate Disassembly. http://www.capstone-engine.org/.***http://scholar.google.com/scholar?hl=en&q=Capstone%3A+The+Ultimate+Disassembly.+http%3A%2F%2Fwww.capstone-engine.org%2F.^^^Clang : Documentation. https://clang.llvm.org/docs/CommandGuide/clang.html.***http://scholar.google.com/scholar?hl=en&q=Clang+%3A+Documentation.+https%3A%2F%2Fclang.llvm.org%2Fdocs%2FCommandGuide%2Fclang.html.^^^Debian Popularity Contest. https://popcon.debian.org/by_inst.***http://scholar.google.com/scholar?hl=en&q=Debian+Popularity+Contest.+https%3A%2F%2Fpopcon.debian.org%2Fby_inst.^^^GCC: Options That Control Optimization. https://gcc.gnu.org/onlinedocs/gcc/ Optimize-Options.html.***http://scholar.google.com/scholar?hl=en&q=GCC%3A+Options+That+Control+Optimization.+https%3A%2F%2Fgcc.gnu.org%2Fonlinedocs%2Fgcc%2F+Optimize-Options.html.^^^Ghidra : A Software Reverse Engineering(SRE) Suite of Tools Developed by NSA. https://ghidra-sre.org/.***http://scholar.google.com/scholar?hl=en&q=Ghidra+%3A+A+Software+Reverse+Engineering%28SRE%29+Suite+of+Tools+Developed+by+NSA.+https%3A%2F%2Fghidra-sre.org%2F.^^^Hopper Disassembler. https://www.hopperapp.com/.***http://scholar.google.com/scholar?hl=en&q=Hopper+Disassembler.+https%3A%2F%2Fwww.hopperapp.com%2F.^^^IDA Pro. https://www.hex-rays.com/products/ida/.***http://scholar.google.com/scholar?hl=en&q=IDA+Pro.+https%3A%2F%2Fwww.hex-rays.com%2Fproducts%2Fida%2F.^^^Issues submitted to BAP. https://github.com/BinaryAnalysisPlatform/bap/issues/ 951.***http://scholar.google.com/scholar?hl=en&q=Issues+submitted+to+BAP.+https%3A%2F%2Fgithub.com%2FBinaryAnalysisPlatform%2Fbap%2Fissues%2F+951.^^^Issues submitted to Binary Ninja. https://github.com/Vector35/binaryninja-api/ issues/1359.***http://scholar.google.com/scholar?hl=en&q=Issues+submitted+to+Binary+Ninja.+https%3A%2F%2Fgithub.com%2FVector35%2Fbinaryninja-api%2F+issues%2F1359.^^^Issues submitted to Ghidra. https://github.com/NationalSecurityAgency/ghidra/ issues/657.***http://scholar.google.com/scholar?hl=en&q=Issues+submitted+to+Ghidra.+https%3A%2F%2Fgithub.com%2FNationalSecurityAgency%2Fghidra%2F+issues%2F657.^^^Issues submitted to Radare2. https://github.com/radareorg/radare2/issues/14223.***http://scholar.google.com/scholar?hl=en&q=Issues+submitted+to+Radare2.+https%3A%2F%2Fgithub.com%2Fradareorg%2Fradare2%2Fissues%2F14223.^^^Objdump-Display Information from Object Files. https://linux.die.net/man/1/ objdump.***http://scholar.google.com/scholar?hl=en&q=Objdump-Display+Information+from+Object+Files.+https%3A%2F%2Flinux.die.net%2Fman%2F1%2F+objdump.^^^OpenWRT. https://openwrt.org/.***http://scholar.google.com/scholar?hl=en&q=OpenWRT.+https%3A%2F%2Fopenwrt.org%2F.^^^Paradyn Project. Dyninst: Putting the Performance in High Performance Computing. https://www.dyninst.org/.***http://scholar.google.com/scholar?hl=en&q=Paradyn+Project.+Dyninst%3A+Putting+the+Performance+in+High+Performance+Computing.+https%3A%2F%2Fwww.dyninst.org%2F.^^^Psutil. https://psutil.readthedocs.io.***http://scholar.google.com/scholar?hl=en&q=Psutil.+https%3A%2F%2Fpsutil.readthedocs.io.^^^Radare2. https://rada.re/r/.***http://scholar.google.com/scholar?hl=en&q=Radare2.+https%3A%2F%2Frada.re%2Fr%2F.^^^The FreeRTOS Kernel. https://www.freertos.org/.***http://scholar.google.com/scholar?hl=en&q=The+FreeRTOS+Kernel.+https%3A%2F%2Fwww.freertos.org%2F.^^^Tigist Abera, N Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman, Andrew Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik. 2016. C-FLAT: control-flow attestation for embedded systems software. In Proceedings of the 23th ACM Conference on Computer and Communications Security.***http://scholar.google.com/scholar?hl=en&q=Tigist+Abera%2C+N+Asokan%2C+Lucas+Davi%2C+Jan-Erik+Ekberg%2C+Thomas+Nyman%2C+Andrew+Paverd%2C+Ahmad-Reza+Sadeghi%2C+and+Gene+Tsudik.+2016.+C-FLAT%3A+control-flow+attestation+for+embedded+systems+software.+In+Proceedings+of+the+23th+ACM+Conference+on+Computer+and+Communications+Security.^^^Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert Bos. 2016. An In-depth Analysis of Disassembly on Full-scale x86/x64 Binaries. In Proceedings of the 25th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Dennis+Andriesse%2C+Xi+Chen%2C+Victor+van+der+Veen%2C+Asia+Slowinska%2C+and+Herbert+Bos.+2016.+An+In-depth+Analysis+of+Disassembly+on+Full-scale+x86%2Fx64+Binaries.+In+Proceedings+of+the+25th+USENIX+Security+Symposium.^^^Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein, Jaime Cochran, Zakir Durumeric, J. Alex Halderman, Luca Invernizzi, Michalis Kallitsis, Deepak Kumar, Chaz Lever, Zane Ma, Joshua Mason, Damian Menscher, Chad Seaman, Nick Sullivan, Kurt Thomas, and Yi Zhou. 2017. Understanding the Mirai Botnet. In Proceedings of the 26th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Manos+Antonakakis%2C+Tim+April%2C+Michael+Bailey%2C+Matt+Bernhard%2C+Elie+Bursztein%2C+Jaime+Cochran%2C+Zakir+Durumeric%2C+J.+Alex+Halderman%2C+Luca+Invernizzi%2C+Michalis+Kallitsis%2C+Deepak+Kumar%2C+Chaz+Lever%2C+Zane+Ma%2C+Joshua+Mason%2C+Damian+Menscher%2C+Chad+Seaman%2C+Nick+Sullivan%2C+Kurt+Thomas%2C+and+Yi+Zhou.+2017.+Understanding+the+Mirai+Botnet.+In+Proceedings+of+the+26th+USENIX+Security+Symposium.^^^Tifany Bao, Johnathon Burket, Maverick Woo, Rafael Turner, and David Brumley. 2014. Byteweight: Learning to Recognize Functions in Binary Code. In Proceedings of the 23th USENIX Conference on Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Tifany+Bao%2C+Johnathon+Burket%2C+Maverick+Woo%2C+Rafael+Turner%2C+and+David+Brumley.+2014.+Byteweight%3A+Learning+to+Recognize+Functions+in+Binary+Code.+In+Proceedings+of+the+23th+USENIX+Conference+on+Security+Symposium.^^^Erick Bauman, Zhiqiang Lin, Kevin W Hamlen, Ahmad M Mustafa, Gbadebo Ayoade, Khaled Al-Naami, Latifur Khan, Kevin W Hamlen, Bhavani M Thuraisingham, Frederico Araujo, et al. 2018. Superset Disassembly: Statically Rewriting x86 Binaries Without Heuristics. In Proceedings of the 25th Network and Distributed Systems Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Erick+Bauman%2C+Zhiqiang+Lin%2C+Kevin+W+Hamlen%2C+Ahmad+M+Mustafa%2C+Gbadebo+Ayoade%2C+Khaled+Al-Naami%2C+Latifur+Khan%2C+Kevin+W+Hamlen%2C+Bhavani+M+Thuraisingham%2C+Frederico+Araujo%2C+et+al.+2018.+Superset+Disassembly%3A+Statically+Rewriting+x86+Binaries+Without+Heuristics.+In+Proceedings+of+the+25th+Network+and+Distributed+Systems+Security+Symposium.^^^M Ammar Ben Khadra, Dominik Stofel, and Wolfgang Kunz. 2016. Speculative Disassembly of Binary Code. In Proceedings of the International Conference on Compilers, Architectures and Synthesis for Embedded Systems.***http://scholar.google.com/scholar?hl=en&q=M+Ammar+Ben+Khadra%2C+Dominik+Stofel%2C+and+Wolfgang+Kunz.+2016.+Speculative+Disassembly+of+Binary+Code.+In+Proceedings+of+the+International+Conference+on+Compilers%2C+Architectures+and+Synthesis+for+Embedded+Systems.^^^David Brumley, Ivan Jager, Thanassis Avgerinos, and Edward J. Schwartz. 2011. BAP: A Binary Analysis Platform. In Proceedings of the 23rd International Conference on Computer Aided Verification.***http://scholar.google.com/scholar?hl=en&q=David+Brumley%2C+Ivan+Jager%2C+Thanassis+Avgerinos%2C+and+Edward+J.+Schwartz.+2011.+BAP%3A+A+Binary+Analysis+Platform.+In+Proceedings+of+the+23rd+International+Conference+on+Computer+Aided+Verification.^^^Cristina Cifuentes and Mike Van Emmerik. 2001. Recovery of jump table case statements from binary code. Science of Computer Programming 40, 2-3 ( 2001 ), 171-188.***http://scholar.google.com/scholar?hl=en&q=Cristina+Cifuentes+and+Mike+Van+Emmerik.+2001.+Recovery+of+jump+table+case+statements+from+binary+code.+Science+of+Computer+Programming+40%2C+2-3+%28+2001+%29%2C+171-188.^^^Andrei Costin, Jonas Zaddach, Aurelien Francillon, and Davide Balzarotti. 2014. A Large-Scale Analysis of the Security of Embedded Firmwares. In Proceedings of the 23rd USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Andrei+Costin%2C+Jonas+Zaddach%2C+Aurelien+Francillon%2C+and+Davide+Balzarotti.+2014.+A+Large-Scale+Analysis+of+the+Security+of+Embedded+Firmwares.+In+Proceedings+of+the+23rd+USENIX+Security+Symposium.^^^Andrei Costin, Apostolis Zarras, and AurÃľlien Francillon. 2016. Automated Dynamic Firmware Analysis at Scale: A Case Study on Embedded Web Interfaces. In Proceedings of the 11th ACM Asia Conference on Computer and Communications Security.***http://scholar.google.com/scholar?hl=en&q=Andrei+Costin%2C+Apostolis+Zarras%2C+and+Aur%C3%83%C4%BElien+Francillon.+2016.+Automated+Dynamic+Firmware+Analysis+at+Scale%3A+A+Case+Study+on+Embedded+Web+Interfaces.+In+Proceedings+of+the+11th+ACM+Asia+Conference+on+Computer+and+Communications+Security.^^^Daming D. Chen, Manuel Egele, Maverick Woo, and David Brumley. 2016. Towards Automated Dynamic Analysis for Linux-based Embedded Firmware. In Proceedings of the 23rd Symposium on Network and Distributed System Security.***http://scholar.google.com/scholar?hl=en&q=Daming+D.+Chen%2C+Manuel+Egele%2C+Maverick+Woo%2C+and+David+Brumley.+2016.+Towards+Automated+Dynamic+Analysis+for+Linux-based+Embedded+Firmware.+In+Proceedings+of+the+23rd+Symposium+on+Network+and+Distributed+System+Security.^^^Yaniv David, Nimrod Partush, and Eran Yahav. 2018. FirmUp: Precise Static Detection of Common Vulnerabilities in Firmware. In Proceedings of the 23rd International Conference on Architectural Support for Programming Languages and Operating Systems.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David%2C+Nimrod+Partush%2C+and+Eran+Yahav.+2018.+FirmUp%3A+Precise+Static+Detection+of+Common+Vulnerabilities+in+Firmware.+In+Proceedings+of+the+23rd+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems.^^^Andriesse Dennis, Asia Slowinska, and Bos Herbert. 2017. Compiler-Agnostic Function Detection in Binaries. In Proceedings of the 2nd IEEE European Symposium on Security and Privacy.***http://scholar.google.com/scholar?hl=en&q=Andriesse+Dennis%2C+Asia+Slowinska%2C+and+Bos+Herbert.+2017.+Compiler-Agnostic+Function+Detection+in+Binaries.+In+Proceedings+of+the+2nd+IEEE+European+Symposium+on+Security+and+Privacy.^^^Michael J. Eager. Introduction to the DWARF Debugging Format. http://www. dwarfstd.org/doc/DebuggingusingDWARF-2012.pdf.***http://scholar.google.com/scholar?hl=en&q=Michael+J.+Eager.+Introduction+to+the+DWARF+Debugging+Format.+http%3A%2F%2Fwww.+dwarfstd.org%2Fdoc%2FDebuggingusingDWARF-2012.pdf.^^^Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. 2016. discovRE: Eficient Cross-Architecture Identification of Bugs in Binary Code. In Proceedings of the 23rd Network and Distributed System Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Eschweiler%2C+Khaled+Yakdan%2C+and+Elmar+Gerhards-Padilla.+2016.+discovRE%3A+Eficient+Cross-Architecture+Identification+of+Bugs+in+Binary+Code.+In+Proceedings+of+the+23rd+Network+and+Distributed+System+Security+Symposium.^^^Bo Feng, Alejandro Mera, and Long Lu. 2020. P2IM: Scalable and Hardwareindependent Firmware Testing via Automatic Peripheral Interface Modeling. In Proceedings of the 29th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Bo+Feng%2C+Alejandro+Mera%2C+and+Long+Lu.+2020.+P2IM%3A+Scalable+and+Hardwareindependent+Firmware+Testing+via+Automatic+Peripheral+Interface+Modeling.+In+Proceedings+of+the+29th+USENIX+Security+Symposium.^^^Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng Yin. 2016. Scalable Graph-based Bug Search for Firmware Images. In Proceedings of the 23th ACM Conference on Computer and Communications Security.***http://scholar.google.com/scholar?hl=en&q=Qian+Feng%2C+Rundong+Zhou%2C+Chengcheng+Xu%2C+Yao+Cheng%2C+Brian+Testa%2C+and+Heng+Yin.+2016.+Scalable+Graph-based+Bug+Search+for+Firmware+Images.+In+Proceedings+of+the+23th+ACM+Conference+on+Computer+and+Communications+Security.^^^Grant Hernandez, Farhaan Fowze, Tuba Yavuz, Kevin RB Butler, et al. 2017. FirmUSB: Vetting USB Device Firmware using Domain Informed Symbolic Execution. In Proceedings of the 24th ACM Conference on Computer and Communications Security.***http://scholar.google.com/scholar?hl=en&q=Grant+Hernandez%2C+Farhaan+Fowze%2C+Tuba+Yavuz%2C+Kevin+RB+Butler%2C+et+al.+2017.+FirmUSB%3A+Vetting+USB+Device+Firmware+using+Domain+Informed+Symbolic+Execution.+In+Proceedings+of+the+24th+ACM+Conference+on+Computer+and+Communications+Security.^^^Emily R Jacobson, Nathan Rosenblum, and Barton P Miller. 2011. Labeling Library Functions in Stripped Binaries. In Proceedings of the 10th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools.***http://scholar.google.com/scholar?hl=en&q=Emily+R+Jacobson%2C+Nathan+Rosenblum%2C+and+Barton+P+Miller.+2011.+Labeling+Library+Functions+in+Stripped+Binaries.+In+Proceedings+of+the+10th+ACM+SIGPLAN-SIGSOFT+workshop+on+Program+analysis+for+software+tools.^^^Pascal Junod, Julien Rinaldini, Johan Wehrli, and Julie Michielin. 2015. ObfuscatorLLVM-Software Protection for the Masses. In Proceedings of the 1st International Workshop on Software Protection.***http://scholar.google.com/scholar?hl=en&q=Pascal+Junod%2C+Julien+Rinaldini%2C+Johan+Wehrli%2C+and+Julie+Michielin.+2015.+ObfuscatorLLVM-Software+Protection+for+the+Masses.+In+Proceedings+of+the+1st+International+Workshop+on+Software+Protection.^^^Nikos Karampatziakis. 2010. Static Analysis of Binary Executables Using Structural SVMs. In Proceedings of the 23rd Advances in Neural Information Processing Systems.***http://scholar.google.com/scholar?hl=en&q=Nikos+Karampatziakis.+2010.+Static+Analysis+of+Binary+Executables+Using+Structural+SVMs.+In+Proceedings+of+the+23rd+Advances+in+Neural+Information+Processing+Systems.^^^Christopher Kruegel, William Robertson, Fredrik Valeur, and Giovanni Vigna. 2004. Static Disassembly of Obfuscated Binaries. In Proceedings of the 13th Conference on USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Christopher+Kruegel%2C+William+Robertson%2C+Fredrik+Valeur%2C+and+Giovanni+Vigna.+2004.+Static+Disassembly+of+Obfuscated+Binaries.+In+Proceedings+of+the+13th+Conference+on+USENIX+Security+Symposium.^^^Christopher Kruegel, William Robertson, Fredrik Valeur, and Giovanni Vigna. 2004. Static disassembly of obfuscated binaries. In Proceedings of the 12th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Christopher+Kruegel%2C+William+Robertson%2C+Fredrik+Valeur%2C+and+Giovanni+Vigna.+2004.+Static+disassembly+of+obfuscated+binaries.+In+Proceedings+of+the+12th+USENIX+Security+Symposium.^^^Chandramohan Mahinthan, Xue Yinxing, Xu Zhengzi, Liu Yang, Cho Chia Yuan, and Tan Hee Beng Kuan. 2016. Bingo: Cross-architecture cross-os binary search. In Proceedings of the 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering.***http://scholar.google.com/scholar?hl=en&q=Chandramohan+Mahinthan%2C+Xue+Yinxing%2C+Xu+Zhengzi%2C+Liu+Yang%2C+Cho+Chia+Yuan%2C+and+Tan+Hee+Beng+Kuan.+2016.+Bingo%3A+Cross-architecture+cross-os+binary+search.+In+Proceedings+of+the+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.^^^Kenneth Miller, Yonghwi Kwon, Yi Sun, Zhuo Zhang, Xiangyu Zhang, and Zhiqiang Lin. 2019. Probabilistic disassembly. In Proceedings of the 41st International Conference on Software Engineering.***http://scholar.google.com/scholar?hl=en&q=Kenneth+Miller%2C+Yonghwi+Kwon%2C+Yi+Sun%2C+Zhuo+Zhang%2C+Xiangyu+Zhang%2C+and+Zhiqiang+Lin.+2019.+Probabilistic+disassembly.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering.^^^Mathias Payer, Antonio Barresi, and Thomas R Gross. 2015. Fine-grained Controllfow Integrity Through Binary Hardening. In Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment.***http://scholar.google.com/scholar?hl=en&q=Mathias+Payer%2C+Antonio+Barresi%2C+and+Thomas+R+Gross.+2015.+Fine-grained+Controllfow+Integrity+Through+Binary+Hardening.+In+Proceedings+of+the+International+Conference+on+Detection+of+Intrusions+and+Malware%2C+and+Vulnerability+Assessment.^^^Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and Thorsten Holz. 2015. Cross-architecture bug search in binary executables. In Proceedings of the 2015 IEEE Symposium on Security and Privacy. IEEE.***http://scholar.google.com/scholar?hl=en&q=Jannik+Pewny%2C+Behrad+Garmany%2C+Robert+Gawlik%2C+Christian+Rossow%2C+and+Thorsten+Holz.+2015.+Cross-architecture+bug+search+in+binary+executables.+In+Proceedings+of+the+2015+IEEE+Symposium+on+Security+and+Privacy.+IEEE.^^^Manish Prasad and Tzi-cker Chiueh. 2003. A Binary Rewriting Defense Against Stack based Bufer Overflow Attacks.. In Proceedings of the USENIX Annual Technical Conference.***http://scholar.google.com/scholar?hl=en&q=Manish+Prasad+and+Tzi-cker+Chiueh.+2003.+A+Binary+Rewriting+Defense+Against+Stack+based+Bufer+Overflow+Attacks..+In+Proceedings+of+the+USENIX+Annual+Technical+Conference.^^^Rui Qiao and R Sekar. 2017. Function interface analysis: A principled approach for function recognition in COTS binaries. In Proceedings of the 47th International Conference on Dependable Systems and Networks.***http://scholar.google.com/scholar?hl=en&q=Rui+Qiao+and+R+Sekar.+2017.+Function+interface+analysis%3A+A+principled+approach+for+function+recognition+in+COTS+binaries.+In+Proceedings+of+the+47th+International+Conference+on+Dependable+Systems+and+Networks.^^^Nathan E Rosenblum, Xiaojin Zhu, Barton P Miller, and Karen Hunt. 2008. Learning to Analyze Binary Computer Code.. In Proceedings of the 23rd AAAI Conference on Artificial Intelligence.***http://scholar.google.com/scholar?hl=en&q=Nathan+E+Rosenblum%2C+Xiaojin+Zhu%2C+Barton+P+Miller%2C+and+Karen+Hunt.+2008.+Learning+to+Analyze+Binary+Computer+Code..+In+Proceedings+of+the+23rd+AAAI+Conference+on+Artificial+Intelligence.^^^Benjamin Schwarz, Saumya Debray, and Gregory Andrews. 2002. Disassembly of Executable Code Revisited. In Proceedings of the 9th Working Conference on Reverse Engineering.***http://scholar.google.com/scholar?hl=en&q=Benjamin+Schwarz%2C+Saumya+Debray%2C+and+Gregory+Andrews.+2002.+Disassembly+of+Executable+Code+Revisited.+In+Proceedings+of+the+9th+Working+Conference+on+Reverse+Engineering.^^^Eui Chul Richard Shin, Dawn Song, and Reza Moazzezi. 2015. Recognizing Functions in Binaries with Neural Networks.. In Proceedings of the 24th USENIX Conference on Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Eui+Chul+Richard+Shin%2C+Dawn+Song%2C+and+Reza+Moazzezi.+2015.+Recognizing+Functions+in+Binaries+with+Neural+Networks..+In+Proceedings+of+the+24th+USENIX+Conference+on+Security+Symposium.^^^Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2015. Firmalice: Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings of the 22th Annual Symposium on Network and Distributed System Security.***http://scholar.google.com/scholar?hl=en&q=Yan+Shoshitaishvili%2C+Ruoyu+Wang%2C+Christophe+Hauser%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2015.+Firmalice%3A+Automatic+Detection+of+Authentication+Bypass+Vulnerabilities+in+Binary+Firmware.+In+Proceedings+of+the+22th+Annual+Symposium+on+Network+and+Distributed+System+Security.^^^Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, et al. 2016. Sok:(State of) the Art of War: Ofensive Techniques in Binary Analysis. In Proceedings of the 37th IEEE Symposium on Security and Privacy.***http://scholar.google.com/scholar?hl=en&q=Yan+Shoshitaishvili%2C+Ruoyu+Wang%2C+Christopher+Salls%2C+Nick+Stephens%2C+Mario+Polino%2C+Andrew+Dutcher%2C+John+Grosen%2C+Siji+Feng%2C+Christophe+Hauser%2C+Christopher+Kruegel%2C+et+al.+2016.+Sok%3A%28State+of%29+the+Art+of+War%3A+Ofensive+Techniques+in+Binary+Analysis.+In+Proceedings+of+the+37th+IEEE+Symposium+on+Security+and+Privacy.^^^Saleh Soltan, Prateek Mittal, and H. Vincent Poor. 2018. BlackIoT: IoT Botnet of High Wattage Devices Can Disrupt the Power Grid. In Proceedings of the 27th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Saleh+Soltan%2C+Prateek+Mittal%2C+and+H.+Vincent+Poor.+2018.+BlackIoT%3A+IoT+Botnet+of+High+Wattage+Devices+Can+Disrupt+the+Power+Grid.+In+Proceedings+of+the+27th+USENIX+Security+Symposium.^^^Kim Taegyu, Chung Hwan Kim, Choi Hongjun, Yonghwi Kwon, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu less. 2017. RevARM: A PlatformAgnostic ARM Binary Rewriter for Security Applications. In Proceedings of the 37th Annual Computer Security Applications Conference.***http://scholar.google.com/scholar?hl=en&q=Kim+Taegyu%2C+Chung+Hwan+Kim%2C+Choi+Hongjun%2C+Yonghwi+Kwon%2C+Brendan+Saltaformaggio%2C+Xiangyu+Zhang%2C+and+Dongyan+Xu+less.+2017.+RevARM%3A+A+PlatformAgnostic+ARM+Binary+Rewriter+for+Security+Applications.+In+Proceedings+of+the+37th+Annual+Computer+Security+Applications+Conference.^^^Veen Victor, Goktas Enes, Contag Moritz, Pawlowski Andre, Chen Xi, Rawat Sanjay, Bos Herbert, Holz Thorsten, Athanasopoulos Elias, and Giufrida Cristiano. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Proceedings of the 37th IEEE Symposium on Security and Privacy.***http://scholar.google.com/scholar?hl=en&q=Veen+Victor%2C+Goktas+Enes%2C+Contag+Moritz%2C+Pawlowski+Andre%2C+Chen+Xi%2C+Rawat+Sanjay%2C+Bos+Herbert%2C+Holz+Thorsten%2C+Athanasopoulos+Elias%2C+and+Giufrida+Cristiano.+2016.+A+Tough+Call%3A+Mitigating+Advanced+Code-Reuse+Attacks+at+the+Binary+Level.+In+Proceedings+of+the+37th+IEEE+Symposium+on+Security+and+Privacy.^^^Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. 2017. Ramblr: Making reassembly great again. In Proceedings of the 24th Annual Symposium on Network and Distributed System Security.***http://scholar.google.com/scholar?hl=en&q=Ruoyu+Wang%2C+Yan+Shoshitaishvili%2C+Antonio+Bianchi%2C+Aravind+Machiry%2C+John+Grosen%2C+Paul+Grosen%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2017.+Ramblr%3A+Making+reassembly+great+again.+In+Proceedings+of+the+24th+Annual+Symposium+on+Network+and+Distributed+System+Security.^^^Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017. Neural Network-based Graph Embedding for Cross-Platform Binary Code Similarity Detection. In Proceedings of the 24th ACM Conference on Computer and Communications Security.***http://scholar.google.com/scholar?hl=en&q=Xiaojun+Xu%2C+Chang+Liu%2C+Qian+Feng%2C+Heng+Yin%2C+Le+Song%2C+and+Dawn+Song.+2017.+Neural+Network-based+Graph+Embedding+for+Cross-Platform+Binary+Code+Similarity+Detection.+In+Proceedings+of+the+24th+ACM+Conference+on+Computer+and+Communications+Security.^^^Xue Yinxing, Xu Zhengzi, Chandramohan Mahinthan, and Liu Yang. 2018. Accurate and scalable cross-architecture cross-os binary code search with emulation. IEEE Transactions on Software Engineering 45, 11 ( 2018 ), 1125-1149.***http://scholar.google.com/scholar?hl=en&q=Xue+Yinxing%2C+Xu+Zhengzi%2C+Chandramohan+Mahinthan%2C+and+Liu+Yang.+2018.+Accurate+and+scalable+cross-architecture+cross-os+binary+code+search+with+emulation.+IEEE+Transactions+on+Software+Engineering+45%2C+11+%28+2018+%29%2C+1125-1149.^^^Jonas Zaddach, Luca Bruno, Aurelien Francillon, and Davide Balzarotti. 2014. AVATAR: A framework to support dynamic security analysis of embedded systems\' firmwares. In Proceedings of the 21st Symposium on Network and Distributed System Security.***http://scholar.google.com/scholar?hl=en&q=Jonas+Zaddach%2C+Luca+Bruno%2C+Aurelien+Francillon%2C+and+Davide+Balzarotti.+2014.+AVATAR%3A+A+framework+to+support+dynamic+security+analysis+of+embedded+systems%27+firmwares.+In+Proceedings+of+the+21st+Symposium+on+Network+and+Distributed+System+Security.^^^Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dawn Song, and Wei Zou. 2013. Practical Control Flow Integrity and Randomization for Binary Executables. In Proceedings of the 34th IEEE Symposium on Security and Privacy. IEEE.***http://scholar.google.com/scholar?hl=en&q=Chao+Zhang%2C+Tao+Wei%2C+Zhaofeng+Chen%2C+Lei+Duan%2C+Laszlo+Szekeres%2C+Stephen+McCamant%2C+Dawn+Song%2C+and+Wei+Zou.+2013.+Practical+Control+Flow+Integrity+and+Randomization+for+Binary+Executables.+In+Proceedings+of+the+34th+IEEE+Symposium+on+Security+and+Privacy.+IEEE.^^^Fangfang Zhang, Heqing Huang, Sencun Zhu, Dinghao Wu, and Peng Liu. 2014. ViewDroid: Towards obfuscation-resilient mobile application repackaging detection. In Proceedings of the 2014 ACM conference on Security and privacy in wireless & mobile networks. ACM, 25-36.***http://scholar.google.com/scholar?hl=en&q=Fangfang+Zhang%2C+Heqing+Huang%2C+Sencun+Zhu%2C+Dinghao+Wu%2C+and+Peng+Liu.+2014.+ViewDroid%3A+Towards+obfuscation-resilient+mobile+application+repackaging+detection.+In+Proceedings+of+the+2014+ACM+conference+on+Security+and+privacy+in+wireless+%26+mobile+networks.+ACM%2C+25-36.^^^Mingwei Zhang and R Sekar. 2013. Control Flow Integrity for COTS Binaries. In Proceedings of the 22nd USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Mingwei+Zhang+and+R+Sekar.+2013.+Control+Flow+Integrity+for+COTS+Binaries.+In+Proceedings+of+the+22nd+USENIX+Security+Symposium.^^^Mingwei Zhang and R Sekar. 2015. Control Flow and Code Integrity for COTS Binaries: An Efective Defense Against Real-world ROP Attacks. In Proceedings of the 31st Annual Computer Security Applications Conference.***http://scholar.google.com/scholar?hl=en&q=Mingwei+Zhang+and+R+Sekar.+2015.+Control+Flow+and+Code+Integrity+for+COTS+Binaries%3A+An+Efective+Defense+Against+Real-world+ROP+Attacks.+In+Proceedings+of+the+31st+Annual+Computer+Security+Applications+Conference.^^^Xu Zhengzi, Chen Bihuan, Chandramohan Mahinthan, Liu Yang, and Song Fu. 2017. Spain: security patch analysis for binaries towards understanding the pain and pills. In Proceedings of the 39th International Conference on Software Engineering.***http://scholar.google.com/scholar?hl=en&q=Xu+Zhengzi%2C+Chen+Bihuan%2C+Chandramohan+Mahinthan%2C+Liu+Yang%2C+and+Song+Fu.+2017.+Spain%3A+security+patch+analysis+for+binaries+towards+understanding+the+pain+and+pills.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering.^^^');
INSERT INTO `paper_ref` VALUES (17, 19, 'Rui Abreu, Peter Zoeteweij, and Arjan J. C. van Gemund. 2007. On the Accuracy of Spectrum-based Fault Localization. In Testing: Academic and Industrial Conference Practice and Research Techniques. IEEE, 89-98.***http://scholar.google.com/scholar?hl=en&q=Rui+Abreu%2C+Peter+Zoeteweij%2C+and+Arjan+J.+C.+van+Gemund.+2007.+On+the+Accuracy+of+Spectrum-based+Fault+Localization.+In+Testing%3A+Academic+and+Industrial+Conference+Practice+and+Research+Techniques.+IEEE%2C+89-98.^^^Anton Babenko, Leonardo Mariani, and Fabrizio Pastore. 2009. AVA: Automated Interpretation of Dynamically Detected Anomalies. In Proceedings of the Eighteenth International Symposium on Software Testing and Analysis. ACM, 237-248.***http://scholar.google.com/scholar?hl=en&q=Anton+Babenko%2C+Leonardo+Mariani%2C+and+Fabrizio+Pastore.+2009.+AVA%3A+Automated+Interpretation+of+Dynamically+Detected+Anomalies.+In+Proceedings+of+the+Eighteenth+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+237-248.^^^Ezio Bartocci, Thomas Ferrère, Niveditha Manjunath, and Dejan Nickovic. 2018. Localizing Faults in Simulink/Stateflow Models with STL. In Proceedings of the 21st International Conference on Hybrid Systems: Computation and Control. ACM, 197-206.***http://scholar.google.com/scholar?hl=en&q=Ezio+Bartocci%2C+Thomas+Ferr%C3%A8re%2C+Niveditha+Manjunath%2C+and+Dejan+Nickovic.+2018.+Localizing+Faults+in+Simulink%2FStateflow+Models+with+STL.+In+Proceedings+of+the+21st+International+Conference+on+Hybrid+Systems%3A+Computation+and+Control.+ACM%2C+197-206.^^^Ezio Bartocci, Niveditha Manjunath, Leonardo Mariani, Cristinel Mateis, and Dejan Nickovic. 2019. Automatic Failure Explanation in CPS Models. In Software Engineering and Formal Methods (LNCS), Vol. 11724. Springer, 69-86.***http://scholar.google.com/scholar?hl=en&q=Ezio+Bartocci%2C+Niveditha+Manjunath%2C+Leonardo+Mariani%2C+Cristinel+Mateis%2C+and+Dejan+Nickovic.+2019.+Automatic+Failure+Explanation+in+CPS+Models.+In+Software+Engineering+and+Formal+Methods+%28LNCS%29%2C+Vol.+11724.+Springer%2C+69-86.^^^Mitra T. Befrouei, Chao Wang, and Georg Weissenbacher. 2016. Abstraction and Mining of Traces to Explain Concurrency Bugs. Formal Methods in System Design 49, 1-2 ( 2016 ), 1-32.***http://scholar.google.com/scholar?hl=en&q=Mitra+T.+Befrouei%2C+Chao+Wang%2C+and+Georg+Weissenbacher.+2016.+Abstraction+and+Mining+of+Traces+to+Explain+Concurrency+Bugs.+Formal+Methods+in+System+Design+49%2C+1-2+%28+2016+%29%2C+1-32.^^^Jyotirmoy V. Deshmukh, Xiaoqing Jin, Rupak Majumdar, and Vinayak S. Prabhu. 2018. Parameter optimization in control software using statistical fault localization techniques. In Proceedings of the 9th ACM/IEEE International Conference on Cyber-Physical Systems. IEEE, 220-231.***http://scholar.google.com/scholar?hl=en&q=Jyotirmoy+V.+Deshmukh%2C+Xiaoqing+Jin%2C+Rupak+Majumdar%2C+and+Vinayak+S.+Prabhu.+2018.+Parameter+optimization+in+control+software+using+statistical+fault+localization+techniques.+In+Proceedings+of+the+9th+ACM%2FIEEE+International+Conference+on+Cyber-Physical+Systems.+IEEE%2C+220-231.^^^Michael D. Ernst, Jef H. Perkins, Philip J. Guo, Stephen McCamant, Carlos Pacheco, Matthew S. Tschantz, and Chen Xiao. 2007. The Daikon system for dynamic detection of likely invariants. Science of Computer Programming 69, 1-3 ( 2007 ), 35-45.***http://scholar.google.com/scholar?hl=en&q=Michael+D.+Ernst%2C+Jef+H.+Perkins%2C+Philip+J.+Guo%2C+Stephen+McCamant%2C+Carlos+Pacheco%2C+Matthew+S.+Tschantz%2C+and+Chen+Xiao.+2007.+The+Daikon+system+for+dynamic+detection+of+likely+invariants.+Science+of+Computer+Programming+69%2C+1-3+%28+2007+%29%2C+35-45.^^^Jason Ghidella and Pieter Mosterman. 2005. Requirements-based testing in aircraft control design. In AIAA Modeling and Simulation Technologies Conference and Exhibit.***http://scholar.google.com/scholar?hl=en&q=Jason+Ghidella+and+Pieter+Mosterman.+2005.+Requirements-based+testing+in+aircraft+control+design.+In+AIAA+Modeling+and+Simulation+Technologies+Conference+and+Exhibit.^^^Bardh Hoxha, Houssam Abbas, and Georgios Fainekos. 2015. Benchmarks for Temporal Logic Requirements for Automotive Systems. In ARCH14-15. 1st and 2nd International Workshop on Applied veRification for Continuous and Hybrid Systems (EPiC Series in Computing), Vol. 34. 25-30.***http://scholar.google.com/scholar?hl=en&q=Bardh+Hoxha%2C+Houssam+Abbas%2C+and+Georgios+Fainekos.+2015.+Benchmarks+for+Temporal+Logic+Requirements+for+Automotive+Systems.+In+ARCH14-15.+1st+and+2nd+International+Workshop+on+Applied+veRification+for+Continuous+and+Hybrid+Systems+%28EPiC+Series+in+Computing%29%2C+Vol.+34.+25-30.^^^Bing Liu, Lucia Lucia, Shiva Nejati, and Lionel C. Briand. 2017. Improving fault localization for Simulink models using search-based testing and prediction models. In IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE Computer Society, 359-370.***http://scholar.google.com/scholar?hl=en&q=Bing+Liu%2C+Lucia+Lucia%2C+Shiva+Nejati%2C+and+Lionel+C.+Briand.+2017.+Improving+fault+localization+for+Simulink+models+using+search-based+testing+and+prediction+models.+In+IEEE+24th+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29.+IEEE+Computer+Society%2C+359-370.^^^Bing Liu, Lucia Lucia, Shiva Nejati, Lionel C. Briand, and Thomas Bruckmann. 2016. Localizing Multiple Faults in Simulink Models. In IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE Computer Society, 146-156.***http://scholar.google.com/scholar?hl=en&q=Bing+Liu%2C+Lucia+Lucia%2C+Shiva+Nejati%2C+Lionel+C.+Briand%2C+and+Thomas+Bruckmann.+2016.+Localizing+Multiple+Faults+in+Simulink+Models.+In+IEEE+23rd+International+Conference+on+Software+Analysis%2C+Evolution%2C+and+Reengineering+%28SANER%29.+IEEE+Computer+Society%2C+146-156.^^^Bing Liu, Lucia Lucia, Shiva Nejati, Lionel C. Briand, and Thomas Bruckmann. 2016. Simulink fault localization: an iterative statistical debugging approach. Software Testing, Verification and Reliability 26, 6 ( 2016 ), 431-459.***http://scholar.google.com/scholar?hl=en&q=Bing+Liu%2C+Lucia+Lucia%2C+Shiva+Nejati%2C+Lionel+C.+Briand%2C+and+Thomas+Bruckmann.+2016.+Simulink+fault+localization%3A+an+iterative+statistical+debugging+approach.+Software+Testing%2C+Verification+and+Reliability+26%2C+6+%28+2016+%29%2C+431-459.^^^Oded Maler and Dejan Nickovic. 2013. Monitoring properties of analog and mixed-signal circuits. Software Tools for Technology Transfer 15, 3 ( 2013 ), 247-268.***http://scholar.google.com/scholar?hl=en&q=Oded+Maler+and+Dejan+Nickovic.+2013.+Monitoring+properties+of+analog+and+mixed-signal+circuits.+Software+Tools+for+Technology+Transfer+15%2C+3+%28+2013+%29%2C+247-268.^^^Leonardo Mariani, Fabrizio Pastore, and Mauro Pezzè. 2011. Dynamic Analysis for Diagnosing Integration Faults. IEEE Transactions on Software Engineering (TSE) 37, 4 ( 2011 ), 486-508.***http://scholar.google.com/scholar?hl=en&q=Leonardo+Mariani%2C+Fabrizio+Pastore%2C+and+Mauro+Pezz%C3%A8.+2011.+Dynamic+Analysis+for+Diagnosing+Integration+Faults.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+37%2C+4+%28+2011+%29%2C+486-508.^^^Dejan Nickovic and Tomoya Yamaguchi. 2020. RTAMT: Online Robustness Monitors from STL. arXiv: 2005. 11827 [cs.LO]***http://scholar.google.com/scholar?hl=en&q=Dejan+Nickovic+and+Tomoya+Yamaguchi.+2020.+RTAMT%3A+Online+Robustness+Monitors+from+STL.+arXiv%3A+2005.+11827+%5Bcs.LO%5D^^^Chris Parnin and Alex Orso. 2011. Are automated debugging techniques actually helping programmers?. In Proceedings of the 2011 International Symposium on Software Testing and Analysis. ACM, 199-209.***http://scholar.google.com/scholar?hl=en&q=Chris+Parnin+and+Alex+Orso.+2011.+Are+automated+debugging+techniques+actually+helping+programmers%3F.+In+Proceedings+of+the+2011+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+199-209.^^^Fabrizio Pastore, Leonardo Mariani, Antti E. Johannes Hyvärinen, Grigory Fedyukovich, Natasha Sharygina, Stephan Sehestedt, and Ali Muhammad. 2014. Verification-aided regression testing. In Proceedings of the 2014 International Symposium on Software Testing and Analysis. ACM, 37-48.***http://scholar.google.com/scholar?hl=en&q=Fabrizio+Pastore%2C+Leonardo+Mariani%2C+Antti+E.+Johannes+Hyv%C3%A4rinen%2C+Grigory+Fedyukovich%2C+Natasha+Sharygina%2C+Stephan+Sehestedt%2C+and+Ali+Muhammad.+2014.+Verification-aided+regression+testing.+In+Proceedings+of+the+2014+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+37-48.^^^Fabrizio Pastore, Daniela Micucci, and Leonardo Mariani. 2017. Timed k-Tail: Automatic Inference of Timed Automata. In IEEE International Conference on Software Testing, Verification and Validation (ICST). IEEE, 401-411.***http://scholar.google.com/scholar?hl=en&q=Fabrizio+Pastore%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2017.+Timed+k-Tail%3A+Automatic+Inference+of+Timed+Automata.+In+IEEE+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST%29.+IEEE%2C+401-411.^^^Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. A Survey on Software Fault Localization. IEEE Transactions on Software Engineering 42, 8 ( 2016 ), 707-740.***http://scholar.google.com/scholar?hl=en&q=Eric+Wong%2C+Ruizhi+Gao%2C+Yihao+Li%2C+Rui+Abreu%2C+and+Franz+Wotawa.+2016.+A+Survey+on+Software+Fault+Localization.+IEEE+Transactions+on+Software+Engineering+42%2C+8+%28+2016+%29%2C+707-740.^^^');
INSERT INTO `paper_ref` VALUES (18, 14, 'Rui Abreu, Peter Zoeteweij, Rob Golsteijn, and Arjan J. C. van Gemund. 2009. A Practical Evaluation of Spectrum-based Fault Localization. JSS ( 2009 ).***http://scholar.google.com/scholar?hl=en&q=Rui+Abreu%2C+Peter+Zoeteweij%2C+Rob+Golsteijn%2C+and+Arjan+J.+C.+van+Gemund.+2009.+A+Practical+Evaluation+of+Spectrum-based+Fault+Localization.+JSS+%28+2009+%29.^^^Ivan Bratko. 2001. Prolog programming for artificial intelligence. Pearson education.***http://scholar.google.com/scholar?hl=en&q=Ivan+Bratko.+2001.+Prolog+programming+for+artificial+intelligence.+Pearson+education.^^^Alexandros Efremidis, Joshua Schmidt, Sebastian Krings, and Philipp Körner. 2018. Measuring coverage of prolog programs using mutation testing. In International Workshop on Functional and Constraint Logic Programming. Springer, 39-55.***http://scholar.google.com/scholar?hl=en&q=Alexandros+Efremidis%2C+Joshua+Schmidt%2C+Sebastian+Krings%2C+and+Philipp+K%C3%B6rner.+2018.+Measuring+coverage+of+prolog+programs+using+mutation+testing.+In+International+Workshop+on+Functional+and+Constraint+Logic+Programming.+Springer%2C+39-55.^^^Daniel Jackson. 2002. Alloy: A Lightweight Object Modelling Notation. ACM TOSEM ( 2002 ).***http://scholar.google.com/scholar?hl=en&q=Daniel+Jackson.+2002.+Alloy%3A+A+Lightweight+Object+Modelling+Notation.+ACM+TOSEM+%28+2002+%29.^^^James A. Jones and Mary Jean Harrold. 2005. Empirical Evaluation of the Tarantula Automatic Fault-localization Technique. In ASE.***http://scholar.google.com/scholar?hl=en&q=James+A.+Jones+and+Mary+Jean+Harrold.+2005.+Empirical+Evaluation+of+the+Tarantula+Automatic+Fault-localization+Technique.+In+ASE.^^^Simon Marlow et al. 2010. Haskell 2010 language report. Available online http://www. haskell. org/(May 2011 ) ( 2010 ).***http://scholar.google.com/scholar?hl=en&q=Simon+Marlow+et+al.+2010.+Haskell+2010+language+report.+Available+online+http%3A%2F%2Fwww.+haskell.+org%2F%28May+2011+%29+%28+2010+%29.^^^S. Moon, Y. Kim, M. Kim, and S. Yoo. 2014. Ask the Mutants: Mutating Faulty Programs for Fault Localization. In ICST.***http://scholar.google.com/scholar?hl=en&q=S.+Moon%2C+Y.+Kim%2C+M.+Kim%2C+and+S.+Yoo.+2014.+Ask+the+Mutants%3A+Mutating+Faulty+Programs+for+Fault+Localization.+In+ICST.^^^Lee Naish, Hua Jie Lee, and Kotagiri Ramamohanarao. 2011. A Model for Spectrabased Software Diagnosis. TSE ( 2011 ).***http://scholar.google.com/scholar?hl=en&q=Lee+Naish%2C+Hua+Jie+Lee%2C+and+Kotagiri+Ramamohanarao.+2011.+A+Model+for+Spectrabased+Software+Diagnosis.+TSE+%28+2011+%29.^^^Philip J. Pratt and Mary Z. Last. 2008. A Guide to SQL (8th ed.). Course Technology Press.***http://scholar.google.com/scholar?hl=en&q=Philip+J.+Pratt+and+Mary+Z.+Last.+2008.+A+Guide+to+SQL+%288th+ed.%29.+Course+Technology+Press.^^^Mark Reitblatt, Marco Canini, Arjun Guha, and Nate Foster. 2013. FatTire: Declarative Fault Tolerance for Software-Defined Networks. In ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking. 109-114.***http://scholar.google.com/scholar?hl=en&q=Mark+Reitblatt%2C+Marco+Canini%2C+Arjun+Guha%2C+and+Nate+Foster.+2013.+FatTire%3A+Declarative+Fault+Tolerance+for+Software-Defined+Networks.+In+ACM+SIGCOMM+Workshop+on+Hot+Topics+in+Software+Defined+Networking.+109-114.^^^Maarten W. Van Someren. 1990. What\'s wrong? Understanding beginners\' problems with Prolog. Instructional Science 19, 4 /5 ( 1990 ), 257-282.***http://scholar.google.com/scholar?hl=en&q=Maarten+W.+Van+Someren.+1990.+What%27s+wrong%3F+Understanding+beginners%27+problems+with+Prolog.+Instructional+Science+19%2C+4+%2F5+%28+1990+%29%2C+257-282.^^^Jan Wielemaker, Tom Schrijvers, Markus Triska, and Torbjörn Lager. 2012. Swiprolog. Theory and Practice of Logic Programming 12, 1-2 ( 2012 ), 67-96.***http://scholar.google.com/scholar?hl=en&q=Jan+Wielemaker%2C+Tom+Schrijvers%2C+Markus+Triska%2C+and+Torbj%C3%B6rn+Lager.+2012.+Swiprolog.+Theory+and+Practice+of+Logic+Programming+12%2C+1-2+%28+2012+%29%2C+67-96.^^^Shanshan Yang and Mike Joy. 2007. Approaches for Learning Prolog Programming. Innovation in Teaching and Learning in Information and Computer Sciences 6, 4 ( 2007 ), 88-107.***http://scholar.google.com/scholar?hl=en&q=Shanshan+Yang+and+Mike+Joy.+2007.+Approaches+for+Learning+Prolog+Programming.+Innovation+in+Teaching+and+Learning+in+Information+and+Computer+Sciences+6%2C+4+%28+2007+%29%2C+88-107.^^^Pamela Zave. 2012. Using Lightweight Modeling to Understand Chord. SIGCOMM Comput. Commun. Rev. 42 ( 2012 ), 49-57.***http://scholar.google.com/scholar?hl=en&q=Pamela+Zave.+2012.+Using+Lightweight+Modeling+to+Understand+Chord.+SIGCOMM+Comput.+Commun.+Rev.+42+%28+2012+%29%2C+49-57.^^^');
INSERT INTO `paper_ref` VALUES (19, 27, 'VeriSmart benchmark. https://github.com/kupl/VeriSmart-benchmarks.***http://scholar.google.com/scholar?hl=en&q=VeriSmart+benchmark.+https%3A%2F%2Fgithub.com%2Fkupl%2FVeriSmart-benchmarks.^^^Elvira Albert, Jesús Correas, Pablo Gordillo, Guillermo Román-Díez, and Albert Rubio. Gasol: Gas analysis and optimization for ethereum smart contracts, 2019.***http://scholar.google.com/scholar?hl=en&q=Elvira+Albert%2C+Jes%C3%BAs+Correas%2C+Pablo+Gordillo%2C+Guillermo+Rom%C3%A1n-D%C3%ADez%2C+and+Albert+Rubio.+Gasol%3A+Gas+analysis+and+optimization+for+ethereum+smart+contracts%2C+2019.^^^James H. Andrews, Alex Groce, Melissa Weston, and Ru-Gang Xu. Random test run length and efectiveness. In Automated Software Engineering, pages 19-28, 2008.***http://scholar.google.com/scholar?hl=en&q=James+H.+Andrews%2C+Alex+Groce%2C+Melissa+Weston%2C+and+Ru-Gang+Xu.+Random+test+run+length+and+efectiveness.+In+Automated+Software+Engineering%2C+pages+19-28%2C+2008.^^^Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. A survey of attacks on Ethereum smart contracts SoK. In International Conference on Principles of Security and Trust, pages 164-186, 2017.***http://scholar.google.com/scholar?hl=en&q=Nicola+Atzei%2C+Massimo+Bartoletti%2C+and+Tiziana+Cimoli.+A+survey+of+attacks+on+Ethereum+smart+contracts+SoK.+In+International+Conference+on+Principles+of+Security+and+Trust%2C+pages+164-186%2C+2017.^^^Vitalik Buterin. Ethereum: A next-generation smart contract and decentralized application platform. https://github.com/ethereum/wiki/wiki/White-Paper, 2013.***http://scholar.google.com/scholar?hl=en&q=Vitalik+Buterin.+Ethereum%3A+A+next-generation+smart+contract+and+decentralized+application+platform.+https%3A%2F%2Fgithub.com%2Fethereum%2Fwiki%2Fwiki%2FWhite-Paper%2C+2013.^^^Chain Security. https://github.com/ChainSecurity/ChainFuzz.***http://scholar.google.com/scholar?hl=en&q=Chain+Security.+https%3A%2F%2Fgithub.com%2FChainSecurity%2FChainFuzz.^^^Koen Claessen and John Hughes. QuickCheck: a lightweight tool for random testing of Haskell programs. In International Conference on Functional Programming (ICFP), pages 268-279, 2000.***http://scholar.google.com/scholar?hl=en&q=Koen+Claessen+and+John+Hughes.+QuickCheck%3A+a+lightweight+tool+for+random+testing+of+Haskell+programs.+In+International+Conference+on+Functional+Programming+%28ICFP%29%2C+pages+268-279%2C+2000.^^^ConsenSys. Mythril: a security analysis tool for ethereum smart contracts. https://github.com/ConsenSys/mythril-classic, 2017.***http://scholar.google.com/scholar?hl=en&q=ConsenSys.+Mythril%3A+a+security+analysis+tool+for+ethereum+smart+contracts.+https%3A%2F%2Fgithub.com%2FConsenSys%2Fmythril-classic%2C+2017.^^^Consensys Diligence. https://mythx.io/.***http://scholar.google.com/scholar?hl=en&q=Consensys+Diligence.+https%3A%2F%2Fmythx.io%2F.^^^Josselin Feist, Gustavo Grieco, and Alex Groce. Slither: A static analysis framework for smart contracts. In International Workshop on Emerging Trends in Software Engineering for Blockchain, 2019.***http://scholar.google.com/scholar?hl=en&q=Josselin+Feist%2C+Gustavo+Grieco%2C+and+Alex+Groce.+Slither%3A+A+static+analysis+framework+for+smart+contracts.+In+International+Workshop+on+Emerging+Trends+in+Software+Engineering+for+Blockchain%2C+2019.^^^Alex Groce, Josselin Feist, Gustavo Grieco, and Michael Colburn. What are the actual flaws in important smart contracts (and how can we find them) ? In International Conference on Financial Cryptography and Data Security, 2020.***http://scholar.google.com/scholar?hl=en&q=Alex+Groce%2C+Josselin+Feist%2C+Gustavo+Grieco%2C+and+Michael+Colburn.+What+are+the+actual+flaws+in+important+smart+contracts+%28and+how+can+we+find+them%29+%3F+In+International+Conference+on+Financial+Cryptography+and+Data+Security%2C+2020.^^^Alex Groce, Josie Holmes, Darko Marinov, August Shi, and Lingming Zhang. An extensible, regular-expression-based tool for multi-language mutant generation. In Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings, ICSE \'18, pages 25-28, New York, NY, USA, 2018. ACM.***http://scholar.google.com/scholar?hl=en&q=Alex+Groce%2C+Josie+Holmes%2C+Darko+Marinov%2C+August+Shi%2C+and+Lingming+Zhang.+An+extensible%2C+regular-expression-based+tool+for+multi-language+mutant+generation.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%3A+Companion+Proceeedings%2C+ICSE+%2718%2C+pages+25-28%2C+New+York%2C+NY%2C+USA%2C+2018.+ACM.^^^Alex Groce, Chaoqiang Zhang, Eric Eide, Yang Chen, and John Regehr. Swarm testing. In International Symposium on Software Testing and Analysis, pages 78-88, 2012.***http://scholar.google.com/scholar?hl=en&q=Alex+Groce%2C+Chaoqiang+Zhang%2C+Eric+Eide%2C+Yang+Chen%2C+and+John+Regehr.+Swarm+testing.+In+International+Symposium+on+Software+Testing+and+Analysis%2C+pages+78-88%2C+2012.^^^Gerard Holzmann, Rajeev Joshi, and Alex Groce. Swarm verification techniques. IEEE Transactions on Software Engineering, 37 ( 6 ): 845-857, 2011.***http://scholar.google.com/scholar?hl=en&q=Gerard+Holzmann%2C+Rajeev+Joshi%2C+and+Alex+Groce.+Swarm+verification+techniques.+IEEE+Transactions+on+Software+Engineering%2C+37+%28+6+%29%3A+845-857%2C+2011.^^^Gerard J. Holzmann. The SPIN Model Checker: Primer and Reference Manual. Addison-Wesley Professional, 2003.***http://scholar.google.com/scholar?hl=en&q=Gerard+J.+Holzmann.+The+SPIN+Model+Checker%3A+Primer+and+Reference+Manual.+Addison-Wesley+Professional%2C+2003.^^^Bo Jiang, Ye Liu, and WK Chan. Contractfuzzer: Fuzzing smart contracts for vulnerability detection. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pages 259-269, 2018.***http://scholar.google.com/scholar?hl=en&q=Bo+Jiang%2C+Ye+Liu%2C+and+WK+Chan.+Contractfuzzer%3A+Fuzzing+smart+contracts+for+vulnerability+detection.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering%2C+pages+259-269%2C+2018.^^^Caroline Lemieux, Rohan Padhye, Koushik Sen, and Dawn Song. Perfuzz: Automatically generating pathological inputs. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, pages 254-265, 2018.***http://scholar.google.com/scholar?hl=en&q=Caroline+Lemieux%2C+Rohan+Padhye%2C+Koushik+Sen%2C+and+Dawn+Song.+Perfuzz%3A+Automatically+generating+pathological+inputs.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+pages+254-265%2C+2018.^^^Fuchen Ma, Ying Fu, Meng Ren, Wanting Sun, Zhe Liu, Yu Jiang, Jun Sun, and Jiaguang Sun. Gasfuzz: Generating high gas consumption inputs to avoid out-ofgas vulnerability, 2019.***http://scholar.google.com/scholar?hl=en&q=Fuchen+Ma%2C+Ying+Fu%2C+Meng+Ren%2C+Wanting+Sun%2C+Zhe+Liu%2C+Yu+Jiang%2C+Jun+Sun%2C+and+Jiaguang+Sun.+Gasfuzz%3A+Generating+high+gas+consumption+inputs+to+avoid+out-ofgas+vulnerability%2C+2019.^^^Bernhard Mueller. https://github.com/b-mueller/solfuzz.***http://scholar.google.com/scholar?hl=en&q=Bernhard+Mueller.+https%3A%2F%2Fgithub.com%2Fb-mueller%2Fsolfuzz.^^^Carlos Pacheco, Shuvendu K. Lahiri, Michael D. Ernst, and Thomas Ball. Feedbackdirected random test generation. In International Conference on Software Engineering, pages 75-84, 2007.***http://scholar.google.com/scholar?hl=en&q=Carlos+Pacheco%2C+Shuvendu+K.+Lahiri%2C+Michael+D.+Ernst%2C+and+Thomas+Ball.+Feedbackdirected+random+test+generation.+In+International+Conference+on+Software+Engineering%2C+pages+75-84%2C+2007.^^^Mike Papadakis, Marinos Kintis, Jie Zhang, Yue Jia, Yves Le Traon, and Mark Harman. Mutation testing advances: an analysis and survey. In Advances in Computers, volume 112, pages 275-378. Elsevier, 2019.***http://scholar.google.com/scholar?hl=en&q=Mike+Papadakis%2C+Marinos+Kintis%2C+Jie+Zhang%2C+Yue+Jia%2C+Yves+Le+Traon%2C+and+Mark+Harman.+Mutation+testing+advances%3A+an+analysis+and+survey.+In+Advances+in+Computers%2C+volume+112%2C+pages+275-378.+Elsevier%2C+2019.^^^Sunbeom So, Myungho Lee, Jisu Park, Heejo Lee, and Hakjoo Oh. VeriSmart: A highly precise safety verifier for ethereum smart contracts. In IEEE Symposium on Security & Privacy, 2020.***http://scholar.google.com/scholar?hl=en&q=Sunbeom+So%2C+Myungho+Lee%2C+Jisu+Park%2C+Heejo+Lee%2C+and+Hakjoo+Oh.+VeriSmart%3A+A+highly+precise+safety+verifier+for+ethereum+smart+contracts.+In+IEEE+Symposium+on+Security+%26+Privacy%2C+2020.^^^Trail of Bits. Echidna: Ethereum fuzz testing framework. https://github.com/ crytic/echidna, 2018.***http://scholar.google.com/scholar?hl=en&q=Trail+of+Bits.+Echidna%3A+Ethereum+fuzz+testing+framework.+https%3A%2F%2Fgithub.com%2F+crytic%2Fechidna%2C+2018.^^^Trail of Bits. Trail of bits security reviews. https://github.com/trailofbits/ publications#security-reviews, 2019.***http://scholar.google.com/scholar?hl=en&q=Trail+of+Bits.+Trail+of+bits+security+reviews.+https%3A%2F%2Fgithub.com%2Ftrailofbits%2F+publications%23security-reviews%2C+2019.^^^Gavin Wood. Ethereum: a secure decentralised generalised transaction ledger. http://gavwood.com/paper.pdf, 2014.***http://scholar.google.com/scholar?hl=en&q=Gavin+Wood.+Ethereum%3A+a+secure+decentralised+generalised+transaction+ledger.+http%3A%2F%2Fgavwood.com%2Fpaper.pdf%2C+2014.^^^Valentin Wüstholz and Maria Christakis. Targeted greybox fuzzing with static lookahead analysis. In International Conference on Software Engineering, 2020.***http://scholar.google.com/scholar?hl=en&q=Valentin+W%C3%BCstholz+and+Maria+Christakis.+Targeted+greybox+fuzzing+with+static+lookahead+analysis.+In+International+Conference+on+Software+Engineering%2C+2020.^^^Michal Zalewski. american fuzzy lop (2.35b). http://lcamtuf.coredump.cx/afl/. Accessed December 20, 2016.***http://scholar.google.com/scholar?hl=en&q=Michal+Zalewski.+american+fuzzy+lop+%282.35b%29.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl%2F.+Accessed+December+20%2C+2016.^^^');
INSERT INTO `paper_ref` VALUES (20, 45, 'Sumaya Almanee, Mathias Payer, and Joshua Garcia. 2019. Too Quiet in the Library: A Study of Native Third-Party Libraries in Android. arXiv:cs.CR/ 1911.09716***http://scholar.google.com/scholar?hl=en&q=Sumaya+Almanee%2C+Mathias+Payer%2C+and+Joshua+Garcia.+2019.+Too+Quiet+in+the+Library%3A+A+Study+of+Native+Third-Party+Libraries+in+Android.+arXiv%3Acs.CR%2F+1911.09716^^^Dennis Andriesse, Xi Chen, Victor Van Der Veen, Asia Slowinska, and Herbert Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries. In Proceedings of the 25th USENIX Conference on Security Symposium (SEC\'16). USENIX Association, USA, 583-600.***http://scholar.google.com/scholar?hl=en&q=Dennis+Andriesse%2C+Xi+Chen%2C+Victor+Van+Der+Veen%2C+Asia+Slowinska%2C+and+Herbert+Bos.+2016.+An+In-Depth+Analysis+of+Disassembly+on+Full-Scale+x86%2Fx64+Binaries.+In+Proceedings+of+the+25th+USENIX+Conference+on+Security+Symposium+%28SEC%2716%29.+USENIX+Association%2C+USA%2C+583-600.^^^Gogul Balakrishnan, Radu Gruian, Thomas Reps, and Tim Teitelbaum. 2005. CodeSurfer/x86-A Platform for Analyzing x86 Executables. In Compiler Construction, Rastislav Bodik (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 250-254.***http://scholar.google.com/scholar?hl=en&q=Gogul+Balakrishnan%2C+Radu+Gruian%2C+Thomas+Reps%2C+and+Tim+Teitelbaum.+2005.+CodeSurfer%2Fx86-A+Platform+for+Analyzing+x86+Executables.+In+Compiler+Construction%2C+Rastislav+Bodik+%28Ed.%29.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+250-254.^^^George Balatsouras and Yannis Smaragdakis. 2016. Structure-Sensitive Points-To Analysis for C and C++. In Static Analysis, Xavier Rival (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 84-104.***http://scholar.google.com/scholar?hl=en&q=George+Balatsouras+and+Yannis+Smaragdakis.+2016.+Structure-Sensitive+Points-To+Analysis+for+C+and+C%2B%2B.+In+Static+Analysis%2C+Xavier+Rival+%28Ed.%29.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+84-104.^^^Martin Bravenboer and Yannis Smaragdakis. 2009. Strictly Declarative Specification of Sophisticated Points-to Analyses. In Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA \'09). ACM, New York, NY, USA, 243-262. https://doi.org/ 10.1145/1640089.1640108 ***http://scholar.google.com/scholar?hl=en&q=Martin+Bravenboer+and+Yannis+Smaragdakis.+2009.+Strictly+Declarative+Specification+of+Sophisticated+Points-to+Analyses.+In+Proceedings+of+the+24th+ACM+SIGPLAN+Conference+on+Object+Oriented+Programming+Systems+Languages+and+Applications+%28OOPSLA+%2709%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+243-262.+https%3A%2F%2Fdoi.org%2F+10.1145%2F1640089.1640108+10.1145%2F1640089.1640108^^^David Chisnall, Brooks Davis, Khilan Gudka, David Brazdil, Alexandre Joannou, Jonathan Woodruf, A. Theodore Markettos, J. Edward Maste, Robert Norton, Stacey Son, and et al. 2017. CHERI JNI: Sinking the Java Security Model into the C. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS \'17). Association for Computing Machinery, New York, NY, USA, 569-583. https://doi.org/10.1145/3037697.3037725 ***http://scholar.google.com/scholar?hl=en&q=David+Chisnall%2C+Brooks+Davis%2C+Khilan+Gudka%2C+David+Brazdil%2C+Alexandre+Joannou%2C+Jonathan+Woodruf%2C+A.+Theodore+Markettos%2C+J.+Edward+Maste%2C+Robert+Norton%2C+Stacey+Son%2C+and+et+al.+2017.+CHERI+JNI%3A+Sinking+the+Java+Security+Model+into+the+C.+In+Proceedings+of+the+Twenty-Second+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems+%28ASPLOS+%2717%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+569-583.+https%3A%2F%2Fdoi.org%2F10.1145%2F3037697.3037725+10.1145%2F3037697.3037725^^^Mihai Christodorescu, Nicholas Kidd, and Wen-Han Goh. 2005. String Analysis for x86 Binaries. ( 2005 ), 88-95. https://doi.org/10.1145/1108792.1108814 ***http://scholar.google.com/scholar?hl=en&q=Mihai+Christodorescu%2C+Nicholas+Kidd%2C+and+Wen-Han+Goh.+2005.+String+Analysis+for+x86+Binaries.+%28+2005+%29%2C+88-95.+https%3A%2F%2Fdoi.org%2F10.1145%2F1108792.1108814+10.1145%2F1108792.1108814^^^DWARF Standards Committee. [n. d.]. The DWARF Debugging Standard. http://dwarfstd.org/.***http://scholar.google.com/scholar?hl=en&q=DWARF+Standards+Committee.+%5Bn.+d.%5D.+The+DWARF+Debugging+Standard.+http%3A%2F%2Fdwarfstd.org%2F.^^^Radare2 Contributors. 2020. ESIL-Radare2 Book. https://radare.gitbooks.io/ radare2book/disassembling/esil.html.***http://scholar.google.com/scholar?hl=en&q=Radare2+Contributors.+2020.+ESIL-Radare2+Book.+https%3A%2F%2Fradare.gitbooks.io%2F+radare2book%2Fdisassembling%2Fesil.html.^^^WALA Developers. 2019. T.J. Watson Libraries for Analysis (WALA). http://wala.sourceforge.net.***http://scholar.google.com/scholar?hl=en&q=WALA+Developers.+2019.+T.J.+Watson+Libraries+for+Analysis+%28WALA%29.+http%3A%2F%2Fwala.sourceforge.net.^^^Jens Dietrich, Henrik Schole, Li Sui, and Ewan D. Tempero. 2017. XCorpus-An executable Corpus of Java Programs. Journal of Object Technology 16, 4 ( 2017 ), 1 : 1-24. https://doi.org/10.5381/jot. 2017. 16.4.a1 ***http://scholar.google.com/scholar?hl=en&q=Jens+Dietrich%2C+Henrik+Schole%2C+Li+Sui%2C+and+Ewan+D.+Tempero.+2017.+XCorpus-An+executable+Corpus+of+Java+Programs.+Journal+of+Object+Technology+16%2C+4+%28+2017+%29%2C+1+%3A+1-24.+https%3A%2F%2Fdoi.org%2F10.5381%2Fjot.+2017.+16.4.a1+10.5381%2Fjot.2017.16.4.a1^^^Jens Dietrich, Li Sui, Shawn Rasheed, and Amjed Tahir. 2017. On the Construction of Soundness Oracles. In Proceedings of the 6th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis (SOAP 2017 ). Association for Computing Machinery, New York, NY, USA, 37-42. https://doi.org/10.1145/ 3088515.3088520 ***http://scholar.google.com/scholar?hl=en&q=Jens+Dietrich%2C+Li+Sui%2C+Shawn+Rasheed%2C+and+Amjed+Tahir.+2017.+On+the+Construction+of+Soundness+Oracles.+In+Proceedings+of+the+6th+ACM+SIGPLAN+International+Workshop+on+State+Of+the+Art+in+Program+Analysis+%28SOAP+2017+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+37-42.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3088515.3088520+10.1145%2F3088515.3088520^^^Antonio Flores-Montoya and Eric M. Schulte. 2019. Datalog Disassembly. CoRR abs/ 1906.03969 ( 2019 ). arXiv: 1906.03969 http://arxiv.org/abs/ 1906.03969***http://scholar.google.com/scholar?hl=en&q=Antonio+Flores-Montoya+and+Eric+M.+Schulte.+2019.+Datalog+Disassembly.+CoRR+abs%2F+1906.03969+%28+2019+%29.+arXiv%3A+1906.03969+http%3A%2F%2Farxiv.org%2Fabs%2F+1906.03969^^^Free Software Foundation. 2017. GNU Binutils. https://www.gnu.org/software/ binutils/.***http://scholar.google.com/scholar?hl=en&q=Free+Software+Foundation.+2017.+GNU+Binutils.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2F+binutils%2F.^^^The Apache Software Foundation. 2019. Apache Tomcat Native Library-Documentation Index. http://tomcat.apache.org/native-doc/.***http://scholar.google.com/scholar?hl=en&q=The+Apache+Software+Foundation.+2019.+Apache+Tomcat+Native+Library-Documentation+Index.+http%3A%2F%2Ftomcat.apache.org%2Fnative-doc%2F.^^^George Fourtounis and Yannis Smaragdakis. 2019. Deep Static Modeling of invokedynamic. In 33rd European Conference on Object-Oriented Programming, ECOOP 2019, July 15-19, 2019, London, United Kingdom (LIPIcs), Alastair F. Donaldson (Ed.), Vol. 134. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 15 : 1-15 : 28. https://doi.org/10.4230/LIPIcs.ECOOP. 2019.15 ***http://scholar.google.com/scholar?hl=en&q=George+Fourtounis+and+Yannis+Smaragdakis.+2019.+Deep+Static+Modeling+of+invokedynamic.+In+33rd+European+Conference+on+Object-Oriented+Programming%2C+ECOOP+2019%2C+July+15-19%2C+2019%2C+London%2C+United+Kingdom+%28LIPIcs%29%2C+Alastair+F.+Donaldson+%28Ed.%29%2C+Vol.+134.+Schloss+Dagstuhl-Leibniz-Zentrum+fuer+Informatik%2C+15+%3A+1-15+%3A+28.+https%3A%2F%2Fdoi.org%2F10.4230%2FLIPIcs.ECOOP.+2019.15+10.4230%2FLIPIcs.ECOOP.2019.15^^^Michael Furr and Jefrey S. Foster. 2006. Polymorphic Type Inference for the JNI. In Programming Languages and Systems, Peter Sestoft (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 309-324.***http://scholar.google.com/scholar?hl=en&q=Michael+Furr+and+Jefrey+S.+Foster.+2006.+Polymorphic+Type+Inference+for+the+JNI.+In+Programming+Languages+and+Systems%2C+Peter+Sestoft+%28Ed.%29.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+309-324.^^^Google. 2020. Android ABIs-Android NDK-Android Developers. https:// developer.android.com/ndk/guides/abis.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Android+ABIs-Android+NDK-Android+Developers.+https%3A%2F%2F+developer.android.com%2Fndk%2Fguides%2Fabis.^^^Google. 2020. Shared Libraries on Android. https://chromium.googlesource.com/ chromium/src/+/master/docs/android_native_libraries.md.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Shared+Libraries+on+Android.+https%3A%2F%2Fchromium.googlesource.com%2F+chromium%2Fsrc%2F%2B%2Fmaster%2Fdocs%2Fandroid_native_libraries.md.^^^Google. 2020. Shrink, obfuscate, and optimize your app | Android Developers. https://developer.android.com/studio/build/shrink-code.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Shrink%2C+obfuscate%2C+and+optimize+your+app+%7C+Android+Developers.+https%3A%2F%2Fdeveloper.android.com%2Fstudio%2Fbuild%2Fshrink-code.^^^Neville Grech, George Fourtounis, Adrian Francalanza, and Yannis Smaragdakis. 2017. Heaps Don\'t Lie: Countering Unsoundness with Heap Snapshots. Proceedings of the ACM on Programming Languages 1, OOPSLA, Article 68 (Oct. 2017 ), 27 pages. https://doi.org/10.1145/3133892 ***http://scholar.google.com/scholar?hl=en&q=Neville+Grech%2C+George+Fourtounis%2C+Adrian+Francalanza%2C+and+Yannis+Smaragdakis.+2017.+Heaps+Don%27t+Lie%3A+Countering+Unsoundness+with+Heap+Snapshots.+Proceedings+of+the+ACM+on+Programming+Languages+1%2C+OOPSLA%2C+Article+68+%28Oct.+2017+%29%2C+27+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3133892+10.1145%2F3133892^^^Y. Gu, K. Sun, P. Su, Q. Li, Y. Lu, L. Ying, and D. Feng. 2017. JGRE: An Analysis of JNI Global Reference Exhaustion Vulnerabilities in Android. In 2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). 427-438. https://doi.org/10.1109/DSN. 2017.40 ***http://scholar.google.com/scholar?hl=en&q=Y.+Gu%2C+K.+Sun%2C+P.+Su%2C+Q.+Li%2C+Y.+Lu%2C+L.+Ying%2C+and+D.+Feng.+2017.+JGRE%3A+An+Analysis+of+JNI+Global+Reference+Exhaustion+Vulnerabilities+in+Android.+In+2017+47th+Annual+IEEE%2FIFIP+International+Conference+on+Dependable+Systems+and+Networks+%28DSN%29.+427-438.+https%3A%2F%2Fdoi.org%2F10.1109%2FDSN.+2017.40+10.1109%2FDSN.2017.40^^^Guardsquare. 2020. ProGuard-Oficial website-Java and Android Apps optimizer. https://www.guardsquare.com/en/products/proguard.***http://scholar.google.com/scholar?hl=en&q=Guardsquare.+2020.+ProGuard-Oficial+website-Java+and+Android+Apps+optimizer.+https%3A%2F%2Fwww.guardsquare.com%2Fen%2Fproducts%2Fproguard.^^^Chua Hock-Chuan. 2018. Java Native Interface Tutorial. https://www3.ntu.edu. sg/home/ehchua/programming/java/JavaNativeInterface.html.***http://scholar.google.com/scholar?hl=en&q=Chua+Hock-Chuan.+2018.+Java+Native+Interface+Tutorial.+https%3A%2F%2Fwww3.ntu.edu.+sg%2Fhome%2Fehchua%2Fprogramming%2Fjava%2FJavaNativeInterface.html.^^^Facebook Inc. 2019. Redex-An Android Bytecode Optimizer. https://fbredex. com/.***http://scholar.google.com/scholar?hl=en&q=Facebook+Inc.+2019.+Redex-An+Android+Bytecode+Optimizer.+https%3A%2F%2Ffbredex.+com%2F.^^^Sungho Lee. 2019. JNI Program Analysis with Automatically Extracted C Semantic Summary. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2019 ). Association for Computing Machinery, New York, NY, USA, 448-451. https://doi.org/10.1145/3293882.3338990 ***http://scholar.google.com/scholar?hl=en&q=Sungho+Lee.+2019.+JNI+Program+Analysis+with+Automatically+Extracted+C+Semantic+Summary.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+2019+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+448-451.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3338990+10.1145%2F3293882.3338990^^^John R. Levine. 1999. Linkers and Loaders (1st ed.). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.***http://scholar.google.com/scholar?hl=en&q=John+R.+Levine.+1999.+Linkers+and+Loaders+%281st+ed.%29.+Morgan+Kaufmann+Publishers+Inc.%2C+San+Francisco%2C+CA%2C+USA.^^^Siliang Li and Gang Tan. 2009. Finding Bugs in Exceptional Situations of JNI Programs. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS \'09). Association for Computing Machinery, New York, NY, USA, 442-452. https://doi.org/10.1145/1653662.1653716 ***http://scholar.google.com/scholar?hl=en&q=Siliang+Li+and+Gang+Tan.+2009.+Finding+Bugs+in+Exceptional+Situations+of+JNI+Programs.+In+Proceedings+of+the+16th+ACM+Conference+on+Computer+and+Communications+Security+%28CCS+%2709%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+442-452.+https%3A%2F%2Fdoi.org%2F10.1145%2F1653662.1653716+10.1145%2F1653662.1653716^^^Sheng Liang. 1999. Java Native Interface: Programmer\'s Guide and Specification (1st ed.). Addison-Wesley Longman Publishing Co., Inc., USA.***http://scholar.google.com/scholar?hl=en&q=Sheng+Liang.+1999.+Java+Native+Interface%3A+Programmer%27s+Guide+and+Specification+%281st+ed.%29.+Addison-Wesley+Longman+Publishing+Co.%2C+Inc.%2C+USA.^^^Benjamin Livshits, Manu Sridharan, Yannis Smaragdakis, Ondřej Lhoták, J. Nelson Amaral, Bor-Yuh Evan Chang, Samuel Z. Guyer, Uday P. Khedker, Anders Møller, and Dimitrios Vardoulakis. 2015. In Defense of Soundiness: A Manifesto. Commun. ACM 58, 2 (Jan. 2015 ), 44-46. https://doi.org/10.1145/2644805 ***http://scholar.google.com/scholar?hl=en&q=Benjamin+Livshits%2C+Manu+Sridharan%2C+Yannis+Smaragdakis%2C+Ond%C5%99ej+Lhot%C3%A1k%2C+J.+Nelson+Amaral%2C+Bor-Yuh+Evan+Chang%2C+Samuel+Z.+Guyer%2C+Uday+P.+Khedker%2C+Anders+M%C3%B8ller%2C+and+Dimitrios+Vardoulakis.+2015.+In+Defense+of+Soundiness%3A+A+Manifesto.+Commun.+ACM+58%2C+2+%28Jan.+2015+%29%2C+44-46.+https%3A%2F%2Fdoi.org%2F10.1145%2F2644805+10.1145%2F2644805^^^Oracle. 2020. Java Native Interface Specification Contents. https://docs.oracle. com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html.***http://scholar.google.com/scholar?hl=en&q=Oracle.+2020.+Java+Native+Interface+Specification+Contents.+https%3A%2F%2Fdocs.oracle.+com%2Fjavase%2F8%2Fdocs%2Ftechnotes%2Fguides%2Fjni%2Fspec%2FjniTOC.html.^^^OSDev.org. 2019. ELF (Executable and Linkable Format). https://wiki.osdev.org/ ELF.***http://scholar.google.com/scholar?hl=en&q=OSDev.org.+2019.+ELF+%28Executable+and+Linkable+Format%29.+https%3A%2F%2Fwiki.osdev.org%2F+ELF.^^^Michael Reif, Florian Kübler, Michael Eichberg, Dominik Helm, and Mira Mezini. 2019. Judge: Identifying, Understanding, and Evaluating Sources of Unsoundness in Call Graphs. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2019 ). Association for Computing Machinery, New York, NY, USA, 251-261. https://doi.org/10.1145/3293882.3330555 ***http://scholar.google.com/scholar?hl=en&q=Michael+Reif%2C+Florian+K%C3%BCbler%2C+Michael+Eichberg%2C+Dominik+Helm%2C+and+Mira+Mezini.+2019.+Judge%3A+Identifying%2C+Understanding%2C+and+Evaluating+Sources+of+Unsoundness+in+Call+Graphs.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+2019+%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+251-261.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330555+10.1145%2F3293882.3330555^^^Philipp Dominik Schubert, Ben Hermann, and Eric Bodden. 2019. PhASAR: An Inter-procedural Static Analysis Framework for C/C++. In Tools and Algorithms for the Construction and Analysis of Systems, Tomáš Vojnar and Lijun Zhang (Eds.). Springer International Publishing, Cham, 393-410.***http://scholar.google.com/scholar?hl=en&q=Philipp+Dominik+Schubert%2C+Ben+Hermann%2C+and+Eric+Bodden.+2019.+PhASAR%3A+An+Inter-procedural+Static+Analysis+Framework+for+C%2FC%2B%2B.+In+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems%2C+Tom%C3%A1%C5%A1+Vojnar+and+Lijun+Zhang+%28Eds.%29.+Springer+International+Publishing%2C+Cham%2C+393-410.^^^Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Ofensive Techniques in Binary Analysis. In IEEE Symposium on Security and Privacy.***http://scholar.google.com/scholar?hl=en&q=Yan+Shoshitaishvili%2C+Ruoyu+Wang%2C+Christopher+Salls%2C+Nick+Stephens%2C+Mario+Polino%2C+Audrey+Dutcher%2C+John+Grosen%2C+Siji+Feng%2C+Christophe+Hauser%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+SoK%3A+%28State+of%29+The+Art+of+War%3A+Ofensive+Techniques+in+Binary+Analysis.+In+IEEE+Symposium+on+Security+and+Privacy.^^^Yannis Smaragdakis, George Balatsouras, George Kastrinis, and Martin Bravenboer. 2015. More Sound Static Handling of Java Reflection. In Programming Languages and Systems-13th Asian Symposium, APLAS 2015, Pohang, South Korea, November 30-December 2, 2015, Proceedings (Lecture Notes in Computer Science), Xinyu Feng and Sungwoo Park (Eds.), Vol. 9458. Springer, 485-503. https://doi.org/10.1007/978-3-319-26529-2_26 ***http://scholar.google.com/scholar?hl=en&q=Yannis+Smaragdakis%2C+George+Balatsouras%2C+George+Kastrinis%2C+and+Martin+Bravenboer.+2015.+More+Sound+Static+Handling+of+Java+Reflection.+In+Programming+Languages+and+Systems-13th+Asian+Symposium%2C+APLAS+2015%2C+Pohang%2C+South+Korea%2C+November+30-December+2%2C+2015%2C+Proceedings+%28Lecture+Notes+in+Computer+Science%29%2C+Xinyu+Feng+and+Sungwoo+Park+%28Eds.%29%2C+Vol.+9458.+Springer%2C+485-503.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-26529-2_26+10.1007%2F978-3-319-26529-2_26^^^Li Sui, Jens Dietrich, Michael Emery, Shawn Rasheed, and Amjed Tahir. 2018. On the Soundness of Call Graph Construction in the Presence of Dynamic Language Features-A Benchmark and Tool Evaluation. In Programming Languages and Systems, Sukyoung Ryu (Ed.). Springer International Publishing, Cham, 69-88.***http://scholar.google.com/scholar?hl=en&q=Li+Sui%2C+Jens+Dietrich%2C+Michael+Emery%2C+Shawn+Rasheed%2C+and+Amjed+Tahir.+2018.+On+the+Soundness+of+Call+Graph+Construction+in+the+Presence+of+Dynamic+Language+Features-A+Benchmark+and+Tool+Evaluation.+In+Programming+Languages+and+Systems%2C+Sukyoung+Ryu+%28Ed.%29.+Springer+International+Publishing%2C+Cham%2C+69-88.^^^Li Sui, Jens Dietrich, Amjed Tahir, and George Fourtounis. 2020. On the Recall of Static Call Graph Construction in Practice. To appear in ICSE 2020.***http://scholar.google.com/scholar?hl=en&q=Li+Sui%2C+Jens+Dietrich%2C+Amjed+Tahir%2C+and+George+Fourtounis.+2020.+On+the+Recall+of+Static+Call+Graph+Construction+in+Practice.+To+appear+in+ICSE+2020.^^^Mengtao Sun and Gang Tan. 2014. NativeGuard: Protecting Android Applications from Third-Party Native Libraries. In Proceedings of the 2014 ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec \'14). Association for Computing Machinery, New York, NY, USA, 165-176. https://doi.org/10.1145/ 2627393.2627396 ***http://scholar.google.com/scholar?hl=en&q=Mengtao+Sun+and+Gang+Tan.+2014.+NativeGuard%3A+Protecting+Android+Applications+from+Third-Party+Native+Libraries.+In+Proceedings+of+the+2014+ACM+Conference+on+Security+and+Privacy+in+Wireless+and+Mobile+Networks+%28WiSec+%2714%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+165-176.+https%3A%2F%2Fdoi.org%2F10.1145%2F+2627393.2627396+10.1145%2F2627393.2627396^^^Gang Tan, Srimat Chakradhar, Raghunathan Srivaths, and Ravi Daniel Wang. 2006. Safe Java native interface. In Proceedings of the 2006 IEEE International Symposium on Secure Software Engineering. 97-106.***http://scholar.google.com/scholar?hl=en&q=Gang+Tan%2C+Srimat+Chakradhar%2C+Raghunathan+Srivaths%2C+and+Ravi+Daniel+Wang.+2006.+Safe+Java+native+interface.+In+Proceedings+of+the+2006+IEEE+International+Symposium+on+Secure+Software+Engineering.+97-106.^^^Sam Tolomei. 2017. Shrinking APKs, growing installs-How your app\'s APK size impacts install conversion rates. https://medium.com/googleplaydev/shrinkingapks-growing-installs-5d3fcba23ce2. (Nov. 2017 ).***http://scholar.google.com/scholar?hl=en&q=Sam+Tolomei.+2017.+Shrinking+APKs%2C+growing+installs-How+your+app%27s+APK+size+impacts+install+conversion+rates.+https%3A%2F%2Fmedium.com%2Fgoogleplaydev%2Fshrinkingapks-growing-installs-5d3fcba23ce2.+%28Nov.+2017+%29.^^^Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and Vijay Sundaresan. 1999. Soot-a Java Bytecode Optimization Framework. In Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research (CASCON \'99). IBM Press, 13.***http://scholar.google.com/scholar?hl=en&q=Raja+Vall%C3%A9e-Rai%2C+Phong+Co%2C+Etienne+Gagnon%2C+Laurie+Hendren%2C+Patrick+Lam%2C+and+Vijay+Sundaresan.+1999.+Soot-a+Java+Bytecode+Optimization+Framework.+In+Proceedings+of+the+1999+Conference+of+the+Centre+for+Advanced+Studies+on+Collaborative+Research+%28CASCON+%2799%29.+IBM+Press%2C+13.^^^Fengguo Wei, Xingwei Lin, Xinming Ou, Ting Chen, and Xiaosong Zhang. 2018. JN-SAF: Precise and Eficient NDK/JNI-Aware Inter-Language Static Analysis Framework for Security Vetting of Android Applications with Native Code. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS \'18). Association for Computing Machinery, New York, NY, USA, 1137-1150. https://doi.org/10.1145/3243734.3243835 ***http://scholar.google.com/scholar?hl=en&q=Fengguo+Wei%2C+Xingwei+Lin%2C+Xinming+Ou%2C+Ting+Chen%2C+and+Xiaosong+Zhang.+2018.+JN-SAF%3A+Precise+and+Eficient+NDK%2FJNI-Aware+Inter-Language+Static+Analysis+Framework+for+Security+Vetting+of+Android+Applications+with+Native+Code.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+%2718%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+1137-1150.+https%3A%2F%2Fdoi.org%2F10.1145%2F3243734.3243835+10.1145%2F3243734.3243835^^^Fengguo Wei, Sankardas Roy, Xinming Ou, and Robby. 2018. Amandroid: A Precise and General Inter-Component Data Flow Analysis Framework for Security Vetting of Android Apps. ACM Transactions on Privacy and Security 21, 3, Article 14 ( April 2018 ), 32 pages. https://doi.org/10.1145/3183575 ***http://scholar.google.com/scholar?hl=en&q=Fengguo+Wei%2C+Sankardas+Roy%2C+Xinming+Ou%2C+and+Robby.+2018.+Amandroid%3A+A+Precise+and+General+Inter-Component+Data+Flow+Analysis+Framework+for+Security+Vetting+of+Android+Apps.+ACM+Transactions+on+Privacy+and+Security+21%2C+3%2C+Article+14+%28+April+2018+%29%2C+32+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3183575+10.1145%2F3183575^^^Dominik Wermke, Nicolas Huaman, Yasemin Acar, Bradley Reaves, Patrick Traynor, and Sascha Fahl. 2018. A Large Scale Investigation of Obfuscation Use in Google Play. In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC \'18). Association for Computing Machinery, New York, NY, USA, 222-235. https://doi.org/10.1145/3274694.3274726 ***http://scholar.google.com/scholar?hl=en&q=Dominik+Wermke%2C+Nicolas+Huaman%2C+Yasemin+Acar%2C+Bradley+Reaves%2C+Patrick+Traynor%2C+and+Sascha+Fahl.+2018.+A+Large+Scale+Investigation+of+Obfuscation+Use+in+Google+Play.+In+Proceedings+of+the+34th+Annual+Computer+Security+Applications+Conference+%28ACSAC+%2718%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+222-235.+https%3A%2F%2Fdoi.org%2F10.1145%2F3274694.3274726+10.1145%2F3274694.3274726^^^');
INSERT INTO `paper_ref` VALUES (21, 12, 'Daniel Berrar and Werner Dubitzky. 2019. Should significance testing be abandoned in machine learning? IJDSA 7, 4 ( 2019 ), 247-257.***http://scholar.google.com/scholar?hl=en&q=Daniel+Berrar+and+Werner+Dubitzky.+2019.+Should+significance+testing+be+abandoned+in+machine+learning%3F+IJDSA+7%2C+4+%28+2019+%29%2C+247-257.^^^Reuben Binns. [n.d.]. Fairness in Machine Learning: Lessons from Political Philosophy. ([n. d.]). arXiv:1712.03586 http://arxiv.org/abs/1712.03586***http://scholar.google.com/scholar?hl=en&q=Reuben+Binns.+%5Bn.d.%5D.+Fairness+in+Machine+Learning%3A+Lessons+from+Political+Philosophy.+%28%5Bn.+d.%5D%29.+arXiv%3A1712.03586+http%3A%2F%2Farxiv.org%2Fabs%2F1712.03586^^^Sahaj Garg, Vincent Perot, Nicole Limtiaco, Ankur Taly, Ed H. Chi, and Alex Beutel. [n.d.]. Counterfactual Fairness in Text Classification through Robustness. ([n. d.]). arXiv: 1809.10610 http://arxiv.org/abs/ 1809.10610***http://scholar.google.com/scholar?hl=en&q=Sahaj+Garg%2C+Vincent+Perot%2C+Nicole+Limtiaco%2C+Ankur+Taly%2C+Ed+H.+Chi%2C+and+Alex+Beutel.+%5Bn.d.%5D.+Counterfactual+Fairness+in+Text+Classification+through+Robustness.+%28%5Bn.+d.%5D%29.+arXiv%3A+1809.10610+http%3A%2F%2Farxiv.org%2Fabs%2F+1809.10610^^^Zichen Guo, Tieke He, Zemin Qin, Zicong Xie, and Jia Liu. 2019. A Content-Based Recommendation Framework for Judicial Cases. In ICPCSEE. Springer, 76-88.***http://scholar.google.com/scholar?hl=en&q=Zichen+Guo%2C+Tieke+He%2C+Zemin+Qin%2C+Zicong+Xie%2C+and+Jia+Liu.+2019.+A+Content-Based+Recommendation+Framework+for+Judicial+Cases.+In+ICPCSEE.+Springer%2C+76-88.^^^Tie-Ke He, Hao Lian, Ze-Min Qin, Zhen-Yu Chen, and Bin Luo. 2018. PTM: A Topic Model for the Inferring of the Penalty. JCST 33, 4 ( 2018 ), 756-767.***http://scholar.google.com/scholar?hl=en&q=Tie-Ke+He%2C+Hao+Lian%2C+Ze-Min+Qin%2C+Zhen-Yu+Chen%2C+and+Bin+Luo.+2018.+PTM%3A+A+Topic+Model+for+the+Inferring+of+the+Penalty.+JCST+33%2C+4+%28+2018+%29%2C+756-767.^^^Michael Kamp. 2019. Black-Box Parallelization for Machine Learning. Ph.D. Dissertation. Universitäts-und Landesbibliothek Bonn.***http://scholar.google.com/scholar?hl=en&q=Michael+Kamp.+2019.+Black-Box+Parallelization+for+Machine+Learning.+Ph.D.+Dissertation.+Universit%C3%A4ts-und+Landesbibliothek+Bonn.^^^Stuart Lottier. [n.d.]. Distribution of Criminal Ofenses in Metropolitan Regions. 29, 1 ([n. d.]), 37. https://doi.org/10.2307/1137347 ***http://scholar.google.com/scholar?hl=en&q=Stuart+Lottier.+%5Bn.d.%5D.+Distribution+of+Criminal+Ofenses+in+Metropolitan+Regions.+29%2C+1+%28%5Bn.+d.%5D%29%2C+37.+https%3A%2F%2Fdoi.org%2F10.2307%2F1137347+10.2307%2F1137347^^^Jason Wei and Kai Zou. [n.d.]. EDA: Easy Data Augmentation Techniques for Boosting Performance on Text Classification Tasks. ([n. d.]). arXiv: 1901.11196 http://arxiv.org/abs/ 1901.11196***http://scholar.google.com/scholar?hl=en&q=Jason+Wei+and+Kai+Zou.+%5Bn.d.%5D.+EDA%3A+Easy+Data+Augmentation+Techniques+for+Boosting+Performance+on+Text+Classification+Tasks.+%28%5Bn.+d.%5D%29.+arXiv%3A+1901.11196+http%3A%2F%2Farxiv.org%2Fabs%2F+1901.11196^^^Chaojun Xiao, Haoxi Zhong, Zhipeng Guo, et al. 2018. Cail2018: A large-scale legal dataset for judgment prediction. arXiv preprint arXiv: 1807. 02478 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Chaojun+Xiao%2C+Haoxi+Zhong%2C+Zhipeng+Guo%2C+et+al.+2018.+Cail2018%3A+A+large-scale+legal+dataset+for+judgment+prediction.+arXiv+preprint+arXiv%3A+1807.+02478+%28+2018+%29.^^^Zihuan Xu, Tieke He, Hao Lian, Jiabing Wan, and Hui Wang. 2019. Case Facts Analysis Method Based on Deep Learning. In WISA. Springer, 92-97.***http://scholar.google.com/scholar?hl=en&q=Zihuan+Xu%2C+Tieke+He%2C+Hao+Lian%2C+Jiabing+Wan%2C+and+Hui+Wang.+2019.+Case+Facts+Analysis+Method+Based+on+Deep+Learning.+In+WISA.+Springer%2C+92-97.^^^Ge Yan, Yu Li, Shu Zhang, and Zhenyu Chen. 2019. Data Augmentation for Deep Learning of Judgment Documents. In IScIDE. Springer, 232-242.***http://scholar.google.com/scholar?hl=en&q=Ge+Yan%2C+Yu+Li%2C+Shu+Zhang%2C+and+Zhenyu+Chen.+2019.+Data+Augmentation+for+Deep+Learning+of+Judgment+Documents.+In+IScIDE.+Springer%2C+232-242.^^^Adams Wei Yu, David Dohan, Minh-Thang Luong, Rui Zhao, Kai Chen, Mohammad Norouzi, and Quoc V. Le. [n.d.]. QANet: Combining Local Convolution with Global Self-Attention for Reading Comprehension. ([n. d.]). arXiv: 1804.09541 http://arxiv.org/abs/ 1804.09541***http://scholar.google.com/scholar?hl=en&q=Adams+Wei+Yu%2C+David+Dohan%2C+Minh-Thang+Luong%2C+Rui+Zhao%2C+Kai+Chen%2C+Mohammad+Norouzi%2C+and+Quoc+V.+Le.+%5Bn.d.%5D.+QANet%3A+Combining+Local+Convolution+with+Global+Self-Attention+for+Reading+Comprehension.+%28%5Bn.+d.%5D%29.+arXiv%3A+1804.09541+http%3A%2F%2Farxiv.org%2Fabs%2F+1804.09541^^^');
INSERT INTO `paper_ref` VALUES (22, 32, 'N Anastopoulos and N Koziris. 2008. Facilitating eficient synchronization of asymmetric threads on hyper-threaded processors. In Parallel and Distributed Processing, 2008. IPDPS 2008. IEEE International Symposium on. IEEE, 1-8.***http://scholar.google.com/scholar?hl=en&q=N+Anastopoulos+and+N+Koziris.+2008.+Facilitating+eficient+synchronization+of+asymmetric+threads+on+hyper-threaded+processors.+In+Parallel+and+Distributed+Processing%2C+2008.+IPDPS+2008.+IEEE+International+Symposium+on.+IEEE%2C+1-8.^^^B Barhoush and I Alsmadi. 2013. Infeasible Paths Detection Using Static Analysis. Ijj.Acm. Org II, Iii ( 2013 ).***http://scholar.google.com/scholar?hl=en&q=B+Barhoush+and+I+Alsmadi.+2013.+Infeasible+Paths+Detection+Using+Static+Analysis.+Ijj.Acm.+Org+II%2C+Iii+%28+2013+%29.^^^R Bodík, R Gupta, and M L Sofa. 1997. Refining data flow information using infeasible paths. ACM SIGSOFT Software Engineering Notes 22, 6 ( 1997 ), 361-377.***http://scholar.google.com/scholar?hl=en&q=R+Bod%C3%ADk%2C+R+Gupta%2C+and+M+L+Sofa.+1997.+Refining+data+flow+information+using+infeasible+paths.+ACM+SIGSOFT+Software+Engineering+Notes+22%2C+6+%28+1997+%29%2C+361-377.^^^P M S Bueno and M Jino. 2000. Identification of potentially infeasible program paths by monitoring the search for test data. Proceedings ASE 2000: 15th IEEE International Conference on Automated Software Engineering ( 2000 ), 209-218.***http://scholar.google.com/scholar?hl=en&q=P+M+S+Bueno+and+M+Jino.+2000.+Identification+of+potentially+infeasible+program+paths+by+monitoring+the+search+for+test+data.+Proceedings+ASE+2000%3A+15th+IEEE+International+Conference+on+Automated+Software+Engineering+%28+2000+%29%2C+209-218.^^^IS Chung, Hyeon S Kim, H S Bae, Y R Kwon, and D G Lee. 1999. Testing of concurrent programs after specification changes. In Software Maintenance, 1999. (ICSM\'99) Proceedings. IEEE International Conference on. IEEE, 199-208.***http://scholar.google.com/scholar?hl=en&q=IS+Chung%2C+Hyeon+S+Kim%2C+H+S+Bae%2C+Y+R+Kwon%2C+and+D+G+Lee.+1999.+Testing+of+concurrent+programs+after+specification+changes.+In+Software+Maintenance%2C+1999.+%28ICSM%2799%29+Proceedings.+IEEE+International+Conference+on.+IEEE%2C+199-208.^^^Lori A. Clarke. 1976. A system to generate test data and symbolically execute programs. IEEE Transactions on software engineering 3 ( 1976 ), 215-222.***http://scholar.google.com/scholar?hl=en&q=Lori+A.+Clarke.+1976.+A+system+to+generate+test+data+and+symbolically+execute+programs.+IEEE+Transactions+on+software+engineering+3+%28+1976+%29%2C+215-222.^^^S S Dahiya, J K Chhabra, and S Kumar. 2011. PSO Based Pseudo Dynamic Method for Automated Test Case Generation Using Interpreter. 147 pages. arXiv:9780201398298***http://scholar.google.com/scholar?hl=en&q=S+S+Dahiya%2C+J+K+Chhabra%2C+and+S+Kumar.+2011.+PSO+Based+Pseudo+Dynamic+Method+for+Automated+Test+Case+Generation+Using+Interpreter.+147+pages.+arXiv%3A9780201398298^^^M Delahaye, B Botella, and A Gotlieb. 2015. Infeasible path generalization in dynamic symbolic execution. Information and Software Technology 58 ( 2015 ), 403-418.***http://scholar.google.com/scholar?hl=en&q=M+Delahaye%2C+B+Botella%2C+and+A+Gotlieb.+2015.+Infeasible+path+generalization+in+dynamic+symbolic+execution.+Information+and+Software+Technology+58+%28+2015+%29%2C+403-418.^^^Carl Dionne, Marc Feeley, and Jocelyn Desbien. 1996. A Taxonomy of Distributed Debuggers Based on Execution Replay.. In PDPTA. 203-214.***http://scholar.google.com/scholar?hl=en&q=Carl+Dionne%2C+Marc+Feeley%2C+and+Jocelyn+Desbien.+1996.+A+Taxonomy+of+Distributed+Debuggers+Based+on+Execution+Replay..+In+PDPTA.+203-214.^^^P G Frankl. 1987. The Use of Data Flow Information for the Selection and Evaluation of Software Test Data. Ph.D. Dissertation. New York, NY, USA. AAI8801533.***http://scholar.google.com/scholar?hl=en&q=P+G+Frankl.+1987.+The+Use+of+Data+Flow+Information+for+the+Selection+and+Evaluation+of+Software+Test+Data.+Ph.D.+Dissertation.+New+York%2C+NY%2C+USA.+AAI8801533.^^^D Gong, T Tian, and X Yao. 2012. Grouping target paths for evolutionary generation of test data in parallel. Journal of Systems and Software 85, 11 ( 2012 ), 2531-2540.***http://scholar.google.com/scholar?hl=en&q=D+Gong%2C+T+Tian%2C+and+X+Yao.+2012.+Grouping+target+paths+for+evolutionary+generation+of+test+data+in+parallel.+Journal+of+Systems+and+Software+85%2C+11+%28+2012+%29%2C+2531-2540.^^^D. Hedley and M. A. Hennell. 1985. The causes and efects of infeasible paths in computer programs. ( 1985 ), 259-266.***http://scholar.google.com/scholar?hl=en&q=D.+Hedley+and+M.+A.+Hennell.+1985.+The+causes+and+efects+of+infeasible+paths+in+computer+programs.+%28+1985+%29%2C+259-266.^^^I. Hermadi and M. A. Ahmed. 2003. Genetic Algorithm based Test Data Generator. The 2003 Congress on Evolutionary Computation, 2003. CEC \'03. May ( 2003 ), 184.***http://scholar.google.com/scholar?hl=en&q=I.+Hermadi+and+M.+A.+Ahmed.+2003.+Genetic+Algorithm+based+Test+Data+Generator.+The+2003+Congress+on+Evolutionary+Computation%2C+2003.+CEC+%2703.+May+%28+2003+%29%2C+184.^^^I. Hermadi, C. Lokan, and R. Sarker. 2014. Dynamic stopping criteria for searchbased test data generation for path testing. Information and Software Technology 56, 4 ( 2014 ), 395-407.***http://scholar.google.com/scholar?hl=en&q=I.+Hermadi%2C+C.+Lokan%2C+and+R.+Sarker.+2014.+Dynamic+stopping+criteria+for+searchbased+test+data+generation+for+path+testing.+Information+and+Software+Technology+56%2C+4+%28+2014+%29%2C+395-407.^^^D Kundu, M Sarma, and D Samanta. 2015. A UML model-based approach to detect infeasible paths. Journal of Systems and Software 107 ( 2015 ), 71-92.***http://scholar.google.com/scholar?hl=en&q=D+Kundu%2C+M+Sarma%2C+and+D+Samanta.+2015.+A+UML+model-based+approach+to+detect+infeasible+paths.+Journal+of+Systems+and+Software+107+%28+2015+%29%2C+71-92.^^^Y Lei and R Cz. 2005. A new algorithm for reachability testing of concurrent programs. In Software Reliability Engineering, 2005. ISSRE 2005. 16th IEEE International Symposium on. IEEE, 10-pp.***http://scholar.google.com/scholar?hl=en&q=Y+Lei+and+R+Cz.+2005.+A+new+algorithm+for+reachability+testing+of+concurrent+programs.+In+Software+Reliability+Engineering%2C+2005.+ISSRE+2005.+16th+IEEE+International+Symposium+on.+IEEE%2C+10-pp.^^^N. Malevris, D. F. Yates, and A. Veevers. 1990. Predictive metric for likely feasibility of program paths. Information and Software Technology 32, 2 ( 1990 ), 115-118.***http://scholar.google.com/scholar?hl=en&q=N.+Malevris%2C+D.+F.+Yates%2C+and+A.+Veevers.+1990.+Predictive+metric+for+likely+feasibility+of+program+paths.+Information+and+Software+Technology+32%2C+2+%28+1990+%29%2C+115-118.^^^A W Marashdih and Z F Zaaba. 2018. Infeasible paths in static analysis: Problems and challenges. AIP Conference Proceedings 2016, September ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=A+W+Marashdih+and+Z+F+Zaaba.+2018.+Infeasible+paths+in+static+analysis%3A+Problems+and+challenges.+AIP+Conference+Proceedings+2016%2C+September+%28+2018+%29.^^^P. McMinn. 2011. Search-based software testing: Past, present and future. In Software testing, verification and validation workshops (icstw), 2011 ieee fourth international conference on. IEEE, 153-163.***http://scholar.google.com/scholar?hl=en&q=P.+McMinn.+2011.+Search-based+software+testing%3A+Past%2C+present+and+future.+In+Software+testing%2C+verification+and+validation+workshops+%28icstw%29%2C+2011+ieee+fourth+international+conference+on.+IEEE%2C+153-163.^^^G J Myers, C Sandler, and T Badgett. 2011. The art of software testing. John Wiley & Sons.***http://scholar.google.com/scholar?hl=en&q=G+J+Myers%2C+C+Sandler%2C+and+T+Badgett.+2011.+The+art+of+software+testing.+John+Wiley+%26+Sons.^^^M N Ngo and H B K Tan. 2007. Detecting large number of infeasible paths through recognizing their patterns. Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering-ESEC-FSE \' 07 ( 2007 ), 215.***http://scholar.google.com/scholar?hl=en&q=M+N+Ngo+and+H+B+K+Tan.+2007.+Detecting+large+number+of+infeasible+paths+through+recognizing+their+patterns.+Proceedings+of+the+the+6th+joint+meeting+of+the+European+software+engineering+conference+and+the+ACM+SIGSOFT+symposium+on+The+foundations+of+software+engineering-ESEC-FSE+%27+07+%28+2007+%29%2C+215.^^^M N Ngo and Hee B K Tan. 2008. Heuristics-based infeasible path detection for dynamic test data generation. Information and Software Technology 50, 7-8 ( 2008 ), 641-655.***http://scholar.google.com/scholar?hl=en&q=M+N+Ngo+and+Hee+B+K+Tan.+2008.+Heuristics-based+infeasible+path+detection+for+dynamic+test+data+generation.+Information+and+Software+Technology+50%2C+7-8+%28+2008+%29%2C+641-655.^^^P Pacheco. 2011. An introduction to parallel programming. Elsevier.***http://scholar.google.com/scholar?hl=en&q=P+Pacheco.+2011.+An+introduction+to+parallel+programming.+Elsevier.^^^K Petersen, S Vakkalanka, and L Kuzniarz. 2015. Guidelines for conducting systematic mapping studies in software engineering: An update. Information and Software Technology 64 ( 2015 ), 1-18.***http://scholar.google.com/scholar?hl=en&q=K+Petersen%2C+S+Vakkalanka%2C+and+L+Kuzniarz.+2015.+Guidelines+for+conducting+systematic+mapping+studies+in+software+engineering%3A+An+update.+Information+and+Software+Technology+64+%28+2015+%29%2C+1-18.^^^G H.L. Pinto and S R Vergilio. 2010. A multi-objective genetic algorithm to test data generation. Proceedings-International Conference on Tools with Artificial Intelligence, ICTAI 1 ( 2010 ), 129-134.***http://scholar.google.com/scholar?hl=en&q=G+H.L.+Pinto+and+S+R+Vergilio.+2010.+A+multi-objective+genetic+algorithm+to+test+data+generation.+Proceedings-International+Conference+on+Tools+with+Artificial+Intelligence%2C+ICTAI+1+%28+2010+%29%2C+129-134.^^^SRS Souza, Silvia Regina Vergilio, PSL Souza, AS Simao, and Alexandre Ceolin Hausen. 2008. Structural testing criteria for message-passing parallel programs. Concurrency and Computation: Practice and Experience 20 ( November 2008 ), 1893-1916. Issue 16.***http://scholar.google.com/scholar?hl=en&q=SRS+Souza%2C+Silvia+Regina+Vergilio%2C+PSL+Souza%2C+AS+Simao%2C+and+Alexandre+Ceolin+Hausen.+2008.+Structural+testing+criteria+for+message-passing+parallel+programs.+Concurrency+and+Computation%3A+Practice+and+Experience+20+%28+November+2008+%29%2C+1893-1916.+Issue+16.^^^K Tai et al. 1999. Automated test sequence generation using sequencing constraints for concurrent programs. In Software Engineering for Parallel and Distributed Systems, 1999. Proceedings. International Symposium on. IEEE, 97-108.***http://scholar.google.com/scholar?hl=en&q=K+Tai+et+al.+1999.+Automated+test+sequence+generation+using+sequencing+constraints+for+concurrent+programs.+In+Software+Engineering+for+Parallel+and+Distributed+Systems%2C+1999.+Proceedings.+International+Symposium+on.+IEEE%2C+97-108.^^^H. Takagi. 2015. Interactive evolutionary computation for analyzing human characteristics. In Emergent Trends in Robotics and Intelligent Systems. Springer, 189-195.***http://scholar.google.com/scholar?hl=en&q=H.+Takagi.+2015.+Interactive+evolutionary+computation+for+analyzing+human+characteristics.+In+Emergent+Trends+in+Robotics+and+Intelligent+Systems.+Springer%2C+189-195.^^^S R Vergilio, J C Maldonado, and M Jino. 1992. Non-executable paths: Characterization, Prediction and Determination to Support Program Testing-In Portuguese.***http://scholar.google.com/scholar?hl=en&q=S+R+Vergilio%2C+J+C+Maldonado%2C+and+M+Jino.+1992.+Non-executable+paths%3A+Characterization%2C+Prediction+and+Determination+to+Support+Program+Testing-In+Portuguese.^^^S R Vergilio, J C Maldonado, and M Jino. 2006. Infeasible paths in the context of data flow based testing criteria: Identification, classification and prediction. Journal of the Brazilian Computer Society 12, 1 ( 2006 ), 73-88.***http://scholar.google.com/scholar?hl=en&q=S+R+Vergilio%2C+J+C+Maldonado%2C+and+M+Jino.+2006.+Infeasible+paths+in+the+context+of+data+flow+based+testing+criteria%3A+Identification%2C+classification+and+prediction.+Journal+of+the+Brazilian+Computer+Society+12%2C+1+%28+2006+%29%2C+73-88.^^^C Wohlin. 2014. Guidelines for Snowballing in Systematic Literature Studies and a Replication in Software Engineering. In Proceedings of the 18th International Conference on Evaluation and Assessment in Software Engineering (London, England, United Kingdom) (EASE \'14). ACM, New York, NY, USA, Article 38, 10 pages.***http://scholar.google.com/scholar?hl=en&q=C+Wohlin.+2014.+Guidelines+for+Snowballing+in+Systematic+Literature+Studies+and+a+Replication+in+Software+Engineering.+In+Proceedings+of+the+18th+International+Conference+on+Evaluation+and+Assessment+in+Software+Engineering+%28London%2C+England%2C+United+Kingdom%29+%28EASE+%2714%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+Article+38%2C+10+pages.^^^D Yates and N Malevris. 1989. Reducing the efects of infeasible paths in branch testing. ACM SIGSOFT Software Engineering Notes 14, 8 ( 1989 ), 48-54.***http://scholar.google.com/scholar?hl=en&q=D+Yates+and+N+Malevris.+1989.+Reducing+the+efects+of+infeasible+paths+in+branch+testing.+ACM+SIGSOFT+Software+Engineering+Notes+14%2C+8+%28+1989+%29%2C+48-54.^^^');
INSERT INTO `paper_ref` VALUES (23, 45, '2016. Analysis of the DAO exploit. https://hackingdistributed.com/ 2016 /06/18/ analysis-of-the-dao-exploit***http://scholar.google.com/scholar?hl=en&q=2016.+Analysis+of+the+DAO+exploit.+https%3A%2F%2Fhackingdistributed.com%2F+2016+%2F06%2F18%2F+analysis-of-the-dao-exploit^^^2017. History of Ethereum Security Vulnerabilities, Hacks, and Their Fixes. https://applicature.com/blog/blockchain-technology/ history-ofethereum-security-vulnerabilities-hacks-and-their-fixes***http://scholar.google.com/scholar?hl=en&q=2017.+History+of+Ethereum+Security+Vulnerabilities%2C+Hacks%2C+and+Their+Fixes.+https%3A%2F%2Fapplicature.com%2Fblog%2Fblockchain-technology%2F+history-ofethereum-security-vulnerabilities-hacks-and-their-fixes^^^2017. The parity wallet breach. https://bitcoinexchangeguide.com/parity-walletbreach***http://scholar.google.com/scholar?hl=en&q=2017.+The+parity+wallet+breach.+https%3A%2F%2Fbitcoinexchangeguide.com%2Fparity-walletbreach^^^2017. Remix-Solidity IDE. http://remix.ethereum.org***http://scholar.google.com/scholar?hl=en&q=2017.+Remix-Solidity+IDE.+http%3A%2F%2Fremix.ethereum.org^^^2018. eth-mutants. https://github.com/federicobond/eth-mutants***http://scholar.google.com/scholar?hl=en&q=2018.+eth-mutants.+https%3A%2F%2Fgithub.com%2Ffedericobond%2Feth-mutants^^^2018. New batchOverflow Bug in Multiple ERC20 Smart Contracts (CVE2018-10299). https://medium.com/@peckshield/alert-new-batchoverflow-bugin-multiple-erc20-smart-contracts-cve-2018-10299-511067db6536***http://scholar.google.com/scholar?hl=en&q=2018.+New+batchOverflow+Bug+in+Multiple+ERC20+Smart+Contracts+%28CVE2018-10299%29.+https%3A%2F%2Fmedium.com%2F%40peckshield%2Falert-new-batchoverflow-bugin-multiple-erc20-smart-contracts-cve-2018-10299-511067db6536^^^2020. CVE-2018-10299 Detail. https://nvd.nist.gov/vuln/detail/CVE-2018-10299***http://scholar.google.com/scholar?hl=en&q=2020.+CVE-2018-10299+Detail.+https%3A%2F%2Fnvd.nist.gov%2Fvuln%2Fdetail%2FCVE-2018-10299^^^2020. INFURA. https://infura.io***http://scholar.google.com/scholar?hl=en&q=2020.+INFURA.+https%3A%2F%2Finfura.io^^^2020. MetaMask. https://metamask.io***http://scholar.google.com/scholar?hl=en&q=2020.+MetaMask.+https%3A%2F%2Fmetamask.io^^^2020. solidity-security-blog. https://github.com/sigp/solidity-security-blog***http://scholar.google.com/scholar?hl=en&q=2020.+solidity-security-blog.+https%3A%2F%2Fgithub.com%2Fsigp%2Fsolidity-security-blog^^^Sefa Akca, Ajitha Rajan, and Chao Peng. 2019. SolAnalyser: A Framework for Analysing and Testing Smart Contracts. In 2019 26th Asia-Pacific Software Engineering Conference (APSEC). IEEE, 482-489.***http://scholar.google.com/scholar?hl=en&q=Sefa+Akca%2C+Ajitha+Rajan%2C+and+Chao+Peng.+2019.+SolAnalyser%3A+A+Framework+for+Analysing+and+Testing+Smart+Contracts.+In+2019+26th+Asia-Pacific+Software+Engineering+Conference+%28APSEC%29.+IEEE%2C+482-489.^^^Sidney Amani, Myriam Bégel, Maksym Bortin, and Mark Staples. 2018. Towards verifying ethereum smart contract bytecode in Isabelle/HOL. In Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. ACM, 66-77.***http://scholar.google.com/scholar?hl=en&q=Sidney+Amani%2C+Myriam+B%C3%A9gel%2C+Maksym+Bortin%2C+and+Mark+Staples.+2018.+Towards+verifying+ethereum+smart+contract+bytecode+in+Isabelle%2FHOL.+In+Proceedings+of+the+7th+ACM+SIGPLAN+International+Conference+on+Certified+Programs+and+Proofs.+ACM%2C+66-77.^^^Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. 2017. A survey of attacks on ethereum smart contracts (sok). In Principles of Security and Trust. Springer, 164-186.***http://scholar.google.com/scholar?hl=en&q=Nicola+Atzei%2C+Massimo+Bartoletti%2C+and+Tiziana+Cimoli.+2017.+A+survey+of+attacks+on+ethereum+smart+contracts+%28sok%29.+In+Principles+of+Security+and+Trust.+Springer%2C+164-186.^^^Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Anitha Gollamudi, Georges Gonthier, Nadim Kobeissi, Natalia Kulatova, Aseem Rastogi, Thomas Sibut-Pinote, Nikhil Swamy, et al. 2016. Formal verification of smart contracts: Short paper. In Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security. ACM, 91-96.***http://scholar.google.com/scholar?hl=en&q=Karthikeyan+Bhargavan%2C+Antoine+Delignat-Lavaud%2C+C%C3%A9dric+Fournet%2C+Anitha+Gollamudi%2C+Georges+Gonthier%2C+Nadim+Kobeissi%2C+Natalia+Kulatova%2C+Aseem+Rastogi%2C+Thomas+Sibut-Pinote%2C+Nikhil+Swamy%2C+et+al.+2016.+Formal+verification+of+smart+contracts%3A+Short+paper.+In+Proceedings+of+the+2016+ACM+Workshop+on+Programming+Languages+and+Analysis+for+Security.+ACM%2C+91-96.^^^Richard Bonett, Kaushal Kafle, Kevin Moran, Adwait Nadkarni, and Denys Poshyvanyk. 2018. Discovering flaws in security-focused static analysis tools for Android using systematic mutation. In 27th {USENIX} Security Symposium ({USENIX} Security 18). 1263-1280.***http://scholar.google.com/scholar?hl=en&q=Richard+Bonett%2C+Kaushal+Kafle%2C+Kevin+Moran%2C+Adwait+Nadkarni%2C+and+Denys+Poshyvanyk.+2018.+Discovering+flaws+in+security-focused+static+analysis+tools+for+Android+using+systematic+mutation.+In+27th+%7BUSENIX%7D+Security+Symposium+%28%7BUSENIX%7D+Security+18%29.+1263-1280.^^^Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz. 2018. Vandal: A Scalable Security Analysis Framework for Smart Contracts. arXiv preprint arXiv: 1809. 03981 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Lexi+Brent%2C+Anton+Jurisevic%2C+Michael+Kong%2C+Eric+Liu%2C+Francois+Gauthier%2C+Vincent+Gramoli%2C+Ralph+Holz%2C+and+Bernhard+Scholz.+2018.+Vandal%3A+A+Scalable+Security+Analysis+Framework+for+Smart+Contracts.+arXiv+preprint+arXiv%3A+1809.+03981+%28+2018+%29.^^^Vitalik Buterin. 2014. Ethereum: A next-generation smart contract and decentralized application platform. URL https://github. com/ethereum/wiki/wiki/% 5BEnglish% 5D-White-Paper 7 ( 2014 ).***http://scholar.google.com/scholar?hl=en&q=Vitalik+Buterin.+2014.+Ethereum%3A+A+next-generation+smart+contract+and+decentralized+application+platform.+URL+https%3A%2F%2Fgithub.+com%2Fethereum%2Fwiki%2Fwiki%2F%25+5BEnglish%25+5D-White-Paper+7+%28+2014+%29.^^^WK Chan and Bo Jiang. 2018. Fuse: An Architecture for Smart Contract Fuzz Testing Service. In 2018 25th Asia-Pacific Software Engineering Conference (APSEC). IEEE, 707-708.***http://scholar.google.com/scholar?hl=en&q=WK+Chan+and+Bo+Jiang.+2018.+Fuse%3A+An+Architecture+for+Smart+Contract+Fuzz+Testing+Service.+In+2018+25th+Asia-Pacific+Software+Engineering+Conference+%28APSEC%29.+IEEE%2C+707-708.^^^Christopher D Clack, Vikram A Bakshi, and Lee Braine. 2016. Smart contract templates: foundations, design landscape and research directions. arXiv preprint arXiv:1608.00771 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Christopher+D+Clack%2C+Vikram+A+Bakshi%2C+and+Lee+Braine.+2016.+Smart+contract+templates%3A+foundations%2C+design+landscape+and+research+directions.+arXiv+preprint+arXiv%3A1608.00771+%28+2016+%29.^^^Crytic. [n.d.]. Echdina. https://github.com/crytic/echidna***http://scholar.google.com/scholar?hl=en&q=Crytic.+%5Bn.d.%5D.+Echdina.+https%3A%2F%2Fgithub.com%2Fcrytic%2Fechidna^^^Chris Dannen. 2017. Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners. Springer.***http://scholar.google.com/scholar?hl=en&q=Chris+Dannen.+2017.+Introducing+Ethereum+and+Solidity%3A+Foundations+of+Cryptocurrency+and+Blockchain+Programming+for+Beginners.+Springer.^^^Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An Eficient SMT Solver. In Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS\'08/ETAPS\'08). 337-340.***http://scholar.google.com/scholar?hl=en&q=Leonardo+De+Moura+and+Nikolaj+Bj%C3%B8rner.+2008.+Z3%3A+An+Eficient+SMT+Solver.+In+Proceedings+of+the+Theory+and+Practice+of+Software%2C+14th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28TACAS%2708%2FETAPS%2708%29.+337-340.^^^Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda, Tim Leek, Andrea Mambretti, Wil Robertson, Frederick Ulrich, and Ryan Whelan. 2016. Lava: Large-scale automated vulnerability addition. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 110-121.***http://scholar.google.com/scholar?hl=en&q=Brendan+Dolan-Gavitt%2C+Patrick+Hulin%2C+Engin+Kirda%2C+Tim+Leek%2C+Andrea+Mambretti%2C+Wil+Robertson%2C+Frederick+Ulrich%2C+and+Ryan+Whelan.+2016.+Lava%3A+Large-scale+automated+vulnerability+addition.+In+2016+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+IEEE%2C+110-121.^^^Thomas Durieux, João F Ferreira, Rui Abreu, and Pedro Cruz. 2019. Empirical Review of Automated Analysis Tools on 47 ,587 Ethereum Smart Contracts. arXiv preprint arXiv: 1910. 10601 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Thomas+Durieux%2C+Jo%C3%A3o+F+Ferreira%2C+Rui+Abreu%2C+and+Pedro+Cruz.+2019.+Empirical+Review+of+Automated+Analysis+Tools+on+47+%2C587+Ethereum+Smart+Contracts.+arXiv+preprint+arXiv%3A+1910.+10601+%28+2019+%29.^^^Etherscan. [n.d.]. Etherscan. https://etherscan.io***http://scholar.google.com/scholar?hl=en&q=Etherscan.+%5Bn.d.%5D.+Etherscan.+https%3A%2F%2Fetherscan.io^^^Josselin Feist, Gustavo Grieco, and Alex Groce. 2019. Slither: a static analysis framework for smart contracts. In 2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB). IEEE, 8-15.***http://scholar.google.com/scholar?hl=en&q=Josselin+Feist%2C+Gustavo+Grieco%2C+and+Alex+Groce.+2019.+Slither%3A+a+static+analysis+framework+for+smart+contracts.+In+2019+IEEE%2FACM+2nd+International+Workshop+on+Emerging+Trends+in+Software+Engineering+for+Blockchain+%28WETSEB%29.+IEEE%2C+8-15.^^^Yu Feng, Emina Torlak, and Rastislav Bodík. 2019. Precise Attack Synthesis for Smart Contracts. CoRR abs/ 1902.06067 ( 2019 ). arXiv: 1902.06067 http://arxiv.org/ abs/ 1902.06067***http://scholar.google.com/scholar?hl=en&q=Yu+Feng%2C+Emina+Torlak%2C+and+Rastislav+Bod%C3%ADk.+2019.+Precise+Attack+Synthesis+for+Smart+Contracts.+CoRR+abs%2F+1902.06067+%28+2019+%29.+arXiv%3A+1902.06067+http%3A%2F%2Farxiv.org%2F+abs%2F+1902.06067^^^Ilya Grishchenko, Matteo Mafei, and Clara Schneidewind. 2018. A Semantic Framework for the Security Analysis of Ethereum smart contracts. In International Conference on Principles of Security and Trust. Springer, 243-269.***http://scholar.google.com/scholar?hl=en&q=Ilya+Grishchenko%2C+Matteo+Mafei%2C+and+Clara+Schneidewind.+2018.+A+Semantic+Framework+for+the+Security+Analysis+of+Ethereum+smart+contracts.+In+International+Conference+on+Principles+of+Security+and+Trust.+Springer%2C+243-269.^^^Everett Hildenbrandt, Manasvi Saxena, Xiaoran Zhu, Nishant Rodrigues, Philip Daian, Dwight Guth, and Grigore Rosu. 2017. Kevm: A complete semantics of the ethereum virtual machine. Technical Report.***http://scholar.google.com/scholar?hl=en&q=Everett+Hildenbrandt%2C+Manasvi+Saxena%2C+Xiaoran+Zhu%2C+Nishant+Rodrigues%2C+Philip+Daian%2C+Dwight+Guth%2C+and+Grigore+Rosu.+2017.+Kevm%3A+A+complete+semantics+of+the+ethereum+virtual+machine.+Technical+Report.^^^Yoichi Hirai. 2017. Defining the ethereum virtual machine for interactive theorem provers. In International Conference on Financial Cryptography and Data Security. Springer, 520-535.***http://scholar.google.com/scholar?hl=en&q=Yoichi+Hirai.+2017.+Defining+the+ethereum+virtual+machine+for+interactive+theorem+provers.+In+International+Conference+on+Financial+Cryptography+and+Data+Security.+Springer%2C+520-535.^^^Bo Jiang, Ye Liu, and WK Chan. 2018. Contractfuzzer: Fuzzing smart contracts for vulnerability detection. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, 259-269.***http://scholar.google.com/scholar?hl=en&q=Bo+Jiang%2C+Ye+Liu%2C+and+WK+Chan.+2018.+Contractfuzzer%3A+Fuzzing+smart+contracts+for+vulnerability+detection.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+ACM%2C+259-269.^^^Johannes Krupp and Christian Rossow. 2018. teether: Gnawing at ethereum to automatically exploit smart contracts. In 27th {USENIX} Security Symposium ({USENIX} Security 18 ). {USENIX Association}, 1317-1333.***http://scholar.google.com/scholar?hl=en&q=Johannes+Krupp+and+Christian+Rossow.+2018.+teether%3A+Gnawing+at+ethereum+to+automatically+exploit+smart+contracts.+In+27th+%7BUSENIX%7D+Security+Symposium+%28%7BUSENIX%7D+Security+18+%29.+%7BUSENIX+Association%7D%2C+1317-1333.^^^Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor. 2016. Making smart contracts smarter. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 254-269.***http://scholar.google.com/scholar?hl=en&q=Loi+Luu%2C+Duc-Hiep+Chu%2C+Hrishi+Olickel%2C+Prateek+Saxena%2C+and+Aquinas+Hobor.+2016.+Making+smart+contracts+smarter.+In+Proceedings+of+the+2016+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+ACM%2C+254-269.^^^Florian Mathieu and Ryno Mathee. 2017. Blocktix: decentralized event hosting and ticket distribution network. https://www.cryptoground.com/storage/files/ 1527588859-blocktix-wp-draft.pdf***http://scholar.google.com/scholar?hl=en&q=Florian+Mathieu+and+Ryno+Mathee.+2017.+Blocktix%3A+decentralized+event+hosting+and+ticket+distribution+network.+https%3A%2F%2Fwww.cryptoground.com%2Fstorage%2Ffiles%2F+1527588859-blocktix-wp-draft.pdf^^^Mark Mossberg, Felipe Manzano, Eric Hennenfent, Alex Groce, Gustavo Grieco, Josselin Feist, Trent Brunson, and Artem Dinaburg. 2019. Manticore: A userfriendly symbolic execution framework for binaries and smart contracts. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 1186-1189.***http://scholar.google.com/scholar?hl=en&q=Mark+Mossberg%2C+Felipe+Manzano%2C+Eric+Hennenfent%2C+Alex+Groce%2C+Gustavo+Grieco%2C+Josselin+Feist%2C+Trent+Brunson%2C+and+Artem+Dinaburg.+2019.+Manticore%3A+A+userfriendly+symbolic+execution+framework+for+binaries+and+smart+contracts.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+1186-1189.^^^Bernhard Mueller. 2018. Smashing ethereum smart contracts for fun and real profit. HITB SECCONF Amsterdam ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Bernhard+Mueller.+2018.+Smashing+ethereum+smart+contracts+for+fun+and+real+profit.+HITB+SECCONF+Amsterdam+%28+2018+%29.^^^Reza M Parizi, Ali Dehghantanha, Kim-Kwang Raymond Choo, and Amritraj Singh. 2018. Empirical vulnerability analysis of automated smart contracts security testing on blockchains. In Proceedings of the 28th Annual International Conference on Computer Science and Software Engineering. IBM Corp., 103-113.***http://scholar.google.com/scholar?hl=en&q=Reza+M+Parizi%2C+Ali+Dehghantanha%2C+Kim-Kwang+Raymond+Choo%2C+and+Amritraj+Singh.+2018.+Empirical+vulnerability+analysis+of+automated+smart+contracts+security+testing+on+blockchains.+In+Proceedings+of+the+28th+Annual+International+Conference+on+Computer+Science+and+Software+Engineering.+IBM+Corp.%2C+103-113.^^^Chao Peng, Sefa Akca, and Ajitha Rajan. 2019. SIF: A Framework for Solidity Contract Instrumentation and Analysis. In 2019 26th Asia-Pacific Software Engineering Conference (APSEC). IEEE, 466-473.***http://scholar.google.com/scholar?hl=en&q=Chao+Peng%2C+Sefa+Akca%2C+and+Ajitha+Rajan.+2019.+SIF%3A+A+Framework+for+Solidity+Contract+Instrumentation+and+Analysis.+In+2019+26th+Asia-Pacific+Software+Engineering+Conference+%28APSEC%29.+IEEE%2C+466-473.^^^Daniel Perez and Benjamin Livshits. 2019. Smart Contract Vulnerabilities: Does Anyone Care? arXiv preprint arXiv: 1902. 06710 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Daniel+Perez+and+Benjamin+Livshits.+2019.+Smart+Contract+Vulnerabilities%3A+Does+Anyone+Care%3F+arXiv+preprint+arXiv%3A+1902.+06710+%28+2019+%29.^^^Jannik Pewny and Thorsten Holz. 2016. EvilCoder: automated bug insertion. In Proceedings of the 32nd Annual Conference on Computer Security Applications. ACM, 214-225.***http://scholar.google.com/scholar?hl=en&q=Jannik+Pewny+and+Thorsten+Holz.+2016.+EvilCoder%3A+automated+bug+insertion.+In+Proceedings+of+the+32nd+Annual+Conference+on+Computer+Security+Applications.+ACM%2C+214-225.^^^Ferdian Thung, David Lo, Lingxiao Jiang, Foyzur Rahman, Premkumar T Devanbu, et al. 2012. To what extent could we detect field defects? an empirical study of false negatives in static bug finding tools. In Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering. ACM, 50-59.***http://scholar.google.com/scholar?hl=en&q=Ferdian+Thung%2C+David+Lo%2C+Lingxiao+Jiang%2C+Foyzur+Rahman%2C+Premkumar+T+Devanbu%2C+et+al.+2012.+To+what+extent+could+we+detect+field+defects%3F+an+empirical+study+of+false+negatives+in+static+bug+finding+tools.+In+Proceedings+of+the+27th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+ACM%2C+50-59.^^^Sergei Tikhomirov, Ekaterina Voskresenskaya, Ivan Ivanitskiy, Ramil Takhaviev, Evgeny Marchenko, and Yaroslav Alexandrov. 2018. SmartCheck: Static Analysis of Ethereum Smart Contracts. ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Sergei+Tikhomirov%2C+Ekaterina+Voskresenskaya%2C+Ivan+Ivanitskiy%2C+Ramil+Takhaviev%2C+Evgeny+Marchenko%2C+and+Yaroslav+Alexandrov.+2018.+SmartCheck%3A+Static+Analysis+of+Ethereum+Smart+Contracts.+%28+2018+%29.^^^Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian Buenzli, and Martin Vechev. 2018. Securify: Practical security analysis of smart contracts. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 67-82.***http://scholar.google.com/scholar?hl=en&q=Petar+Tsankov%2C+Andrei+Dan%2C+Dana+Drachsler-Cohen%2C+Arthur+Gervais%2C+Florian+Buenzli%2C+and+Martin+Vechev.+2018.+Securify%3A+Practical+security+analysis+of+smart+contracts.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+67-82.^^^Xingya Wang, Haoran Wu, Weisong Sun, and Yuan Zhao. 2019. Towards Generating Cost-Efective Test-Suite for Ethereum Smart Contract. In 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, 549-553.***http://scholar.google.com/scholar?hl=en&q=Xingya+Wang%2C+Haoran+Wu%2C+Weisong+Sun%2C+and+Yuan+Zhao.+2019.+Towards+Generating+Cost-Efective+Test-Suite+for+Ethereum+Smart+Contract.+In+2019+IEEE+26th+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29.+IEEE%2C+549-553.^^^Haoran Wu, Xingya Wang, Jiehui Xu, Weiqin Zou, Lingming Zhang, and Zhenyu Chen. 2019. Mutation testing for ethereum smart contract. arXiv preprint arXiv: 1908. 03707 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Haoran+Wu%2C+Xingya+Wang%2C+Jiehui+Xu%2C+Weiqin+Zou%2C+Lingming+Zhang%2C+and+Zhenyu+Chen.+2019.+Mutation+testing+for+ethereum+smart+contract.+arXiv+preprint+arXiv%3A+1908.+03707+%28+2019+%29.^^^');
INSERT INTO `paper_ref` VALUES (24, 50, '2014. CVE-2014-0160. https://cve.mitre.org/cgi-bin/cvename.cgi?name= cve2014-0160.***http://scholar.google.com/scholar?hl=en&q=2014.+CVE-2014-0160.+https%3A%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3D+cve2014-0160.^^^2015. CVE-2015-1791. https://cve.mitre.org/cgi-bin/cvename.cgi?name= cve2015-1791.***http://scholar.google.com/scholar?hl=en&q=2015.+CVE-2015-1791.+https%3A%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3D+cve2015-1791.^^^2020. CVE Details. https://www.cvedetails.com/.***http://scholar.google.com/scholar?hl=en&q=2020.+CVE+Details.+https%3A%2F%2Fwww.cvedetails.com%2F.^^^2020. CVE List. https://cve.mitre.org/index.html.***http://scholar.google.com/scholar?hl=en&q=2020.+CVE+List.+https%3A%2F%2Fcve.mitre.org%2Findex.html.^^^2020. Diaphora. https://github.com/joxeankoret/diaphora.***http://scholar.google.com/scholar?hl=en&q=2020.+Diaphora.+https%3A%2F%2Fgithub.com%2Fjoxeankoret%2Fdiaphora.^^^2020. IDA Pro. https://www.hex-rays.com/products/ida/.***http://scholar.google.com/scholar?hl=en&q=2020.+IDA+Pro.+https%3A%2F%2Fwww.hex-rays.com%2Fproducts%2Fida%2F.^^^2020. NVD. https://nvd.nist.gov/.***http://scholar.google.com/scholar?hl=en&q=2020.+NVD.+https%3A%2F%2Fnvd.nist.gov%2F.^^^2020. Open Source Data and Results for the Paper. https://sites.google.com/view/ submission-for-issta-2020.***http://scholar.google.com/scholar?hl=en&q=2020.+Open+Source+Data+and+Results+for+the+Paper.+https%3A%2F%2Fsites.google.com%2Fview%2F+submission-for-issta-2020.^^^2020. OpenSSL Vulnerabilities. https://www.openssl.org/news/vulnerabilities. html.***http://scholar.google.com/scholar?hl=en&q=2020.+OpenSSL+Vulnerabilities.+https%3A%2F%2Fwww.openssl.org%2Fnews%2Fvulnerabilities.+html.^^^Martial Bourquin, Andy King, and Edward Robbins. 2013. Binslayer: accurate comparison of binary executables. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop. ACM, 4.***http://scholar.google.com/scholar?hl=en&q=Martial+Bourquin%2C+Andy+King%2C+and+Edward+Robbins.+2013.+Binslayer%3A+accurate+comparison+of+binary+executables.+In+Proceedings+of+the+2nd+ACM+SIGPLAN+Program+Protection+and+Reverse+Engineering+Workshop.+ACM%2C+4.^^^Mahinthan Chandramohan, Yinxing Xue, Zhengzi Xu, Yang Liu, Chia Yuan Cho, and Hee Beng Kuan Tan. 2016. BinGo: Cross-architecture cross-os binary search. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 678-689.***http://scholar.google.com/scholar?hl=en&q=Mahinthan+Chandramohan%2C+Yinxing+Xue%2C+Zhengzi+Xu%2C+Yang+Liu%2C+Chia+Yuan+Cho%2C+and+Hee+Beng+Kuan+Tan.+2016.+BinGo%3A+Cross-architecture+cross-os+binary+search.+In+Proceedings+of+the+2016+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+ACM%2C+678-689.^^^Christopher S Corley, Nicholas A Kraft, Letha H Etzkorn, and Stacy K Lukins. 2011. Recovering traceability links between source code and fixed bugs via patch analysis. In Proceedings of the 6th International Workshop on Traceability in Emerging Forms of Software Engineering. ACM, 31-37.***http://scholar.google.com/scholar?hl=en&q=Christopher+S+Corley%2C+Nicholas+A+Kraft%2C+Letha+H+Etzkorn%2C+and+Stacy+K+Lukins.+2011.+Recovering+traceability+links+between+source+code+and+fixed+bugs+via+patch+analysis.+In+Proceedings+of+the+6th+International+Workshop+on+Traceability+in+Emerging+Forms+of+Software+Engineering.+ACM%2C+31-37.^^^Yaniv David, Nimrod Partush, and Eran Yahav. 2016. Statistical similarity of binaries. ACM SIGPLAN Notices 51, 6 ( 2016 ), 266-280.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David%2C+Nimrod+Partush%2C+and+Eran+Yahav.+2016.+Statistical+similarity+of+binaries.+ACM+SIGPLAN+Notices+51%2C+6+%28+2016+%29%2C+266-280.^^^Yaniv David, Nimrod Partush, and Eran Yahav. 2018. Firmup: Precise static detection of common vulnerabilities in firmware. In ACM SIGPLAN Notices, Vol. 53. ACM, 392-404.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David%2C+Nimrod+Partush%2C+and+Eran+Yahav.+2018.+Firmup%3A+Precise+static+detection+of+common+vulnerabilities+in+firmware.+In+ACM+SIGPLAN+Notices%2C+Vol.+53.+ACM%2C+392-404.^^^Yaniv David and Eran Yahav. 2014. Tracelet-based code search in executables. Acm Sigplan Notices 49, 6 ( 2014 ), 349-360.***http://scholar.google.com/scholar?hl=en&q=Yaniv+David+and+Eran+Yahav.+2014.+Tracelet-based+code+search+in+executables.+Acm+Sigplan+Notices+49%2C+6+%28+2014+%29%2C+349-360.^^^Ruian Duan, Ashish Bijlani, Meng Xu, Taesoo Kim, and Wenke Lee. 2017. Identifying open-source license violation and 1-day security risk at large scale. In Proceedings of the 2017 ACM SIGSAC Conference on computer and communications security. ACM, 2169-2185.***http://scholar.google.com/scholar?hl=en&q=Ruian+Duan%2C+Ashish+Bijlani%2C+Meng+Xu%2C+Taesoo+Kim%2C+and+Wenke+Lee.+2017.+Identifying+open-source+license+violation+and+1-day+security+risk+at+large+scale.+In+Proceedings+of+the+2017+ACM+SIGSAC+Conference+on+computer+and+communications+security.+ACM%2C+2169-2185.^^^Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. 2014. Blanket execution: Dynamic similarity testing for program binaries and components. USENIX.***http://scholar.google.com/scholar?hl=en&q=Manuel+Egele%2C+Maverick+Woo%2C+Peter+Chapman%2C+and+David+Brumley.+2014.+Blanket+execution%3A+Dynamic+similarity+testing+for+program+binaries+and+components.+USENIX.^^^Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. 2016. discovRE: Eficient Cross-Architecture Identification of Bugs in Binary Code. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Eschweiler%2C+Khaled+Yakdan%2C+and+Elmar+Gerhards-Padilla.+2016.+discovRE%3A+Eficient+Cross-Architecture+Identification+of+Bugs+in+Binary+Code.+In+NDSS.^^^Mohammad Reza Farhadi, Benjamin C. M. Fung, Philippe Charland, and Mourad Debbabi. 2014. BinClone: Detecting Code Clones in Malware. In Proceedings of the 8th International Conference on Software Security and Reliability. 78-87.***http://scholar.google.com/scholar?hl=en&q=Mohammad+Reza+Farhadi%2C+Benjamin+C.+M.+Fung%2C+Philippe+Charland%2C+and+Mourad+Debbabi.+2014.+BinClone%3A+Detecting+Code+Clones+in+Malware.+In+Proceedings+of+the+8th+International+Conference+on+Software+Security+and+Reliability.+78-87.^^^Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng Yin. 2016. Scalable graph-based bug search for firmware images. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 480-491.***http://scholar.google.com/scholar?hl=en&q=Qian+Feng%2C+Rundong+Zhou%2C+Chengcheng+Xu%2C+Yao+Cheng%2C+Brian+Testa%2C+and+Heng+Yin.+2016.+Scalable+graph-based+bug+search+for+firmware+images.+In+Proceedings+of+the+2016+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+ACM%2C+480-491.^^^Halvar Flake. 2004. Structural comparison of executable objects. In Proc. of the International GI Workshop on Detection of Intrusions and Malware & Vulnerability Assessment, number P-46 in Lecture Notes in Informatics. Citeseer, 161-174.***http://scholar.google.com/scholar?hl=en&q=Halvar+Flake.+2004.+Structural+comparison+of+executable+objects.+In+Proc.+of+the+International+GI+Workshop+on+Detection+of+Intrusions+and+Malware+%26+Vulnerability+Assessment%2C+number+P-46+in+Lecture+Notes+in+Informatics.+Citeseer%2C+161-174.^^^Debin Gao, Michael K Reiter, and Dawn Song. 2008. Binhunt: Automatically ifnding semantic diferences in binary programs. In International Conference on Information and Communications Security. Springer, 238-255.***http://scholar.google.com/scholar?hl=en&q=Debin+Gao%2C+Michael+K+Reiter%2C+and+Dawn+Song.+2008.+Binhunt%3A+Automatically+ifnding+semantic+diferences+in+binary+programs.+In+International+Conference+on+Information+and+Communications+Security.+Springer%2C+238-255.^^^Yikun Hu, Yuanyuan Zhang, Juanru Li, and Dawu Gu. 2017. Binary code clone detection across architectures and compiling configurations. In Proceedings of the 25th International Conference on Program Comprehension. IEEE Press, 88-98.***http://scholar.google.com/scholar?hl=en&q=Yikun+Hu%2C+Yuanyuan+Zhang%2C+Juanru+Li%2C+and+Dawu+Gu.+2017.+Binary+code+clone+detection+across+architectures+and+compiling+configurations.+In+Proceedings+of+the+25th+International+Conference+on+Program+Comprehension.+IEEE+Press%2C+88-98.^^^Yikun Hu, Yuanyuan Zhang, Juanru Li, Hui Wang, Bodong Li, and Dawu Gu. 2018. BinMatch: A Semantics-based Hybrid Approach on Binary Code Clone Analysis. In 2018 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, 104-114.***http://scholar.google.com/scholar?hl=en&q=Yikun+Hu%2C+Yuanyuan+Zhang%2C+Juanru+Li%2C+Hui+Wang%2C+Bodong+Li%2C+and+Dawu+Gu.+2018.+BinMatch%3A+A+Semantics-based+Hybrid+Approach+on+Binary+Code+Clone+Analysis.+In+2018+IEEE+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+IEEE%2C+104-114.^^^Jiyong Jang, David Brumley, and Shobha Venkataraman. 2011. BitShred: feature hashing malware for scalable triage and semantic analysis. In Proceedings of the 18th ACM Conference on Computer and Communications Security. 309-320.***http://scholar.google.com/scholar?hl=en&q=Jiyong+Jang%2C+David+Brumley%2C+and+Shobha+Venkataraman.+2011.+BitShred%3A+feature+hashing+malware+for+scalable+triage+and+semantic+analysis.+In+Proceedings+of+the+18th+ACM+Conference+on+Computer+and+Communications+Security.+309-320.^^^Lingxiao Jiang and Zhendong Su. 2009. Automatic mining of functionally equivalent code fragments via random testing. In Proceedings of the eighteenth international symposium on Software testing and analysis. ACM, 81-92.***http://scholar.google.com/scholar?hl=en&q=Lingxiao+Jiang+and+Zhendong+Su.+2009.+Automatic+mining+of+functionally+equivalent+code+fragments+via+random+testing.+In+Proceedings+of+the+eighteenth+international+symposium+on+Software+testing+and+analysis.+ACM%2C+81-92.^^^Miryung Kim and David Notkin. 2009. Discovering and representing systematic code changes. In 2009 IEEE 31st International Conference on Software Engineering. IEEE, 309-319.***http://scholar.google.com/scholar?hl=en&q=Miryung+Kim+and+David+Notkin.+2009.+Discovering+and+representing+systematic+code+changes.+In+2009+IEEE+31st+International+Conference+on+Software+Engineering.+IEEE%2C+309-319.^^^Seulbae Kim, Seunghoon Woo, Heejo Lee, and Hakjoo Oh. 2017. VUDDY: a scalable approach for vulnerable code clone discovery. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 595-614.***http://scholar.google.com/scholar?hl=en&q=Seulbae+Kim%2C+Seunghoon+Woo%2C+Heejo+Lee%2C+and+Hakjoo+Oh.+2017.+VUDDY%3A+a+scalable+approach+for+vulnerable+code+clone+discovery.+In+Security+and+Privacy+%28SP%29%2C+2017+IEEE+Symposium+on.+IEEE%2C+595-614.^^^Frank Li and Vern Paxson. 2017. A large-scale empirical study of security patches. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2201-2215.***http://scholar.google.com/scholar?hl=en&q=Frank+Li+and+Vern+Paxson.+2017.+A+large-scale+empirical+study+of+security+patches.+In+Proceedings+of+the+2017+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+ACM%2C+2201-2215.^^^Hong Lin, Dongdong Zhao, Linjun Ran, Mushuai Han, Jing Tian, Jianwen Xiang, Xian Ma, and Yingshou Zhong. 2017. CVSSA: Cross-Architecture Vulnerability Search in Firmware Based on Support Vector Machine and Attributed Control Flow Graph. In Dependable Systems and Their Applications (DSA), 2017 International Conference on. IEEE, 35-41.***http://scholar.google.com/scholar?hl=en&q=Hong+Lin%2C+Dongdong+Zhao%2C+Linjun+Ran%2C+Mushuai+Han%2C+Jing+Tian%2C+Jianwen+Xiang%2C+Xian+Ma%2C+and+Yingshou+Zhong.+2017.+CVSSA%3A+Cross-Architecture+Vulnerability+Search+in+Firmware+Based+on+Support+Vector+Machine+and+Attributed+Control+Flow+Graph.+In+Dependable+Systems+and+Their+Applications+%28DSA%29%2C+2017+International+Conference+on.+IEEE%2C+35-41.^^^Bingchang Liu, Wei Huo, Chao Zhang, Wenchao Li, Feng Li, Aihua Piao, and Wei Zou. 2018. Dif: cross-version binary code similarity detection with DNN. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, 667-678.***http://scholar.google.com/scholar?hl=en&q=Bingchang+Liu%2C+Wei+Huo%2C+Chao+Zhang%2C+Wenchao+Li%2C+Feng+Li%2C+Aihua+Piao%2C+and+Wei+Zou.+2018.+Dif%3A+cross-version+binary+code+similarity+detection+with+DNN.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+ACM%2C+667-678.^^^Danjun Liu, Yao Li, Yong Tang, Baosheng Wang, and Wei Xie. 2018. VMPBL: Identifying Vulnerable Functions Based on Machine Learning Combining Patched Information and Binary Comparison Technique by LCS. In 2018 17th IEEE International Conference On Trust, Security And Privacy In Computing And Communications/12th IEEE International Conference On Big Data Science And Engineering (TrustCom/BigDataSE). IEEE, 800-807.***http://scholar.google.com/scholar?hl=en&q=Danjun+Liu%2C+Yao+Li%2C+Yong+Tang%2C+Baosheng+Wang%2C+and+Wei+Xie.+2018.+VMPBL%3A+Identifying+Vulnerable+Functions+Based+on+Machine+Learning+Combining+Patched+Information+and+Binary+Comparison+Technique+by+LCS.+In+2018+17th+IEEE+International+Conference+On+Trust%2C+Security+And+Privacy+In+Computing+And+Communications%2F12th+IEEE+International+Conference+On+Big+Data+Science+And+Engineering+%28TrustCom%2FBigDataSE%29.+IEEE%2C+800-807.^^^Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. 2014. Semantics-based obfuscation-resilient binary code similarity comparison with applications to software plagiarism detection. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 389-400.***http://scholar.google.com/scholar?hl=en&q=Lannan+Luo%2C+Jiang+Ming%2C+Dinghao+Wu%2C+Peng+Liu%2C+and+Sencun+Zhu.+2014.+Semantics-based+obfuscation-resilient+binary+code+similarity+comparison+with+applications+to+software+plagiarism+detection.+In+Proceedings+of+the+22nd+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+ACM%2C+389-400.^^^Xiaozhu Meng and Barton P Miller. 2016. Binary code is not easy. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 24-35.***http://scholar.google.com/scholar?hl=en&q=Xiaozhu+Meng+and+Barton+P+Miller.+2016.+Binary+code+is+not+easy.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+24-35.^^^Jiang Ming, Meng Pan, and Debin Gao. 2012. iBinHunt: Binary hunting with inter-procedural control flow. In International Conference on Information Security and Cryptology. Springer, 92-109.***http://scholar.google.com/scholar?hl=en&q=Jiang+Ming%2C+Meng+Pan%2C+and+Debin+Gao.+2012.+iBinHunt%3A+Binary+hunting+with+inter-procedural+control+flow.+In+International+Conference+on+Information+Security+and+Cryptology.+Springer%2C+92-109.^^^Jiang Ming, Dongpeng Xu, Yufei Jiang, and Dinghao Wu. 2017. BinSim: Tracebased semantic binary difing via system call sliced segment equivalence checking. In Proceedings of the 26th USENIX Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Jiang+Ming%2C+Dongpeng+Xu%2C+Yufei+Jiang%2C+and+Dinghao+Wu.+2017.+BinSim%3A+Tracebased+semantic+binary+difing+via+system+call+sliced+segment+equivalence+checking.+In+Proceedings+of+the+26th+USENIX+Security+Symposium.^^^Hoan Anh Nguyen, Anh Tuan Nguyen, Tung Thanh Nguyen, Tien N Nguyen, and Hridesh Rajan. 2013. A study of repetitiveness of code changes in software evolution. In Proceedings of the 28th IEEE/ACM International Conference on Automated Software Engineering. IEEE Press, 180-190.***http://scholar.google.com/scholar?hl=en&q=Hoan+Anh+Nguyen%2C+Anh+Tuan+Nguyen%2C+Tung+Thanh+Nguyen%2C+Tien+N+Nguyen%2C+and+Hridesh+Rajan.+2013.+A+study+of+repetitiveness+of+code+changes+in+software+evolution.+In+Proceedings+of+the+28th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+IEEE+Press%2C+180-190.^^^Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and Thorsten Holz. 2015. Cross-architecture bug search in binary executables. In Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 709-724.***http://scholar.google.com/scholar?hl=en&q=Jannik+Pewny%2C+Behrad+Garmany%2C+Robert+Gawlik%2C+Christian+Rossow%2C+and+Thorsten+Holz.+2015.+Cross-architecture+bug+search+in+binary+executables.+In+Security+and+Privacy+%28SP%29%2C+2015+IEEE+Symposium+on.+IEEE%2C+709-724.^^^Jannik Pewny, Felix Schuster, Lukas Bernhard, Thorsten Holz, and Christian Rossow. 2014. Leveraging semantic signatures for bug search in binary programs. In Proceedings of the 30th Annual Computer Security Applications Conference. ACM, 406-415.***http://scholar.google.com/scholar?hl=en&q=Jannik+Pewny%2C+Felix+Schuster%2C+Lukas+Bernhard%2C+Thorsten+Holz%2C+and+Christian+Rossow.+2014.+Leveraging+semantic+signatures+for+bug+search+in+binary+programs.+In+Proceedings+of+the+30th+Annual+Computer+Security+Applications+Conference.+ACM%2C+406-415.^^^Andreas Saebjørnsen, Jeremiah Willcock, Thomas Panas, Daniel Quinlan, and Zhendong Su. 2009. Detecting code clones in binary executables. In Proceedings of the eighteenth international symposium on Software testing and analysis. ACM, 117-128.***http://scholar.google.com/scholar?hl=en&q=Andreas+Saebj%C3%B8rnsen%2C+Jeremiah+Willcock%2C+Thomas+Panas%2C+Daniel+Quinlan%2C+and+Zhendong+Su.+2009.+Detecting+code+clones+in+binary+executables.+In+Proceedings+of+the+eighteenth+international+symposium+on+Software+testing+and+analysis.+ACM%2C+117-128.^^^Mauricio Soto, Ferdian Thung, Chu-Pan Wong, Claire Le Goues, and David Lo. 2016. A deeper look into bug fixes: patterns, replacements, deletions, and additions. In Proceedings of the 13th International Conference on Mining Software Repositories. ACM, 512-515.***http://scholar.google.com/scholar?hl=en&q=Mauricio+Soto%2C+Ferdian+Thung%2C+Chu-Pan+Wong%2C+Claire+Le+Goues%2C+and+David+Lo.+2016.+A+deeper+look+into+bug+fixes%3A+patterns%2C+replacements%2C+deletions%2C+and+additions.+In+Proceedings+of+the+13th+International+Conference+on+Mining+Software+Repositories.+ACM%2C+512-515.^^^Yuan Tian, Julia Lawall, and David Lo. 2012. Identifying linux bug fixing patches. In Proceedings of the 34th International Conference on Software Engineering. IEEE Press, 386-396.***http://scholar.google.com/scholar?hl=en&q=Yuan+Tian%2C+Julia+Lawall%2C+and+David+Lo.+2012.+Identifying+linux+bug+fixing+patches.+In+Proceedings+of+the+34th+International+Conference+on+Software+Engineering.+IEEE+Press%2C+386-396.^^^Zhenzhou Tian, Ting Liu, Qinghua Zheng, Eryue Zhuang, Ming Fan, and Zijiang Yang. 2017. Reviving sequential program birthmarking for multithreaded software plagiarism detection. IEEE Transactions on Software Engineering 44, 5 ( 2017 ), 491-511.***http://scholar.google.com/scholar?hl=en&q=Zhenzhou+Tian%2C+Ting+Liu%2C+Qinghua+Zheng%2C+Eryue+Zhuang%2C+Ming+Fan%2C+and+Zijiang+Yang.+2017.+Reviving+sequential+program+birthmarking+for+multithreaded+software+plagiarism+detection.+IEEE+Transactions+on+Software+Engineering+44%2C+5+%28+2017+%29%2C+491-511.^^^Haijun Wang, Xiaofei Xie, Shang-Wei Lin, Yun Lin, Yuekang Li, Shengchao Qin, Yang Liu, and Ting Liu. 2019. Locating vulnerabilities in binaries via memory layout recovering. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. 718-728.***http://scholar.google.com/scholar?hl=en&q=Haijun+Wang%2C+Xiaofei+Xie%2C+Shang-Wei+Lin%2C+Yun+Lin%2C+Yuekang+Li%2C+Shengchao+Qin%2C+Yang+Liu%2C+and+Ting+Liu.+2019.+Locating+vulnerabilities+in+binaries+via+memory+layout+recovering.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+718-728.^^^Cheng Wen, Haijun Wang, Yuekang Li, Shengchao Qin, Yang Liu, Zhiwu Xu, Hongxu Chen, Xiaofei Xie, Geguang Pu, and Ting Liu. 2020. Memlock: Memory usage guided fuzzing. In Proceedings of the 42nd International Conference on Software Engineering. IEEE.***http://scholar.google.com/scholar?hl=en&q=Cheng+Wen%2C+Haijun+Wang%2C+Yuekang+Li%2C+Shengchao+Qin%2C+Yang+Liu%2C+Zhiwu+Xu%2C+Hongxu+Chen%2C+Xiaofei+Xie%2C+Geguang+Pu%2C+and+Ting+Liu.+2020.+Memlock%3A+Memory+usage+guided+fuzzing.+In+Proceedings+of+the+42nd+International+Conference+on+Software+Engineering.+IEEE.^^^Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017. Neural network-based graph embedding for cross-platform binary code similarity detection. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 363-376.***http://scholar.google.com/scholar?hl=en&q=Xiaojun+Xu%2C+Chang+Liu%2C+Qian+Feng%2C+Heng+Yin%2C+Le+Song%2C+and+Dawn+Song.+2017.+Neural+network-based+graph+embedding+for+cross-platform+binary+code+similarity+detection.+In+Proceedings+of+the+2017+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+ACM%2C+363-376.^^^Zhengzi Xu, Bihuan Chen, Mahinthan Chandramohan, Yang Liu, and Fu Song. 2017. SPAIN: security patch analysis for binaries towards understanding the pain and pills. In Proceedings of the 39th International Conference on Software Engineering. IEEE Press, 462-472.***http://scholar.google.com/scholar?hl=en&q=Zhengzi+Xu%2C+Bihuan+Chen%2C+Mahinthan+Chandramohan%2C+Yang+Liu%2C+and+Fu+Song.+2017.+SPAIN%3A+security+patch+analysis+for+binaries+towards+understanding+the+pain+and+pills.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering.+IEEE+Press%2C+462-472.^^^Yinxing Xue, Zhengzi Xu, Mahinthan Chandramohan, and Yang Liu. 2018. Accurate and Scalable Cross-Architecture Cross-OS Binary Code Search with Emulation. IEEE Transactions on Software Engineering ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Yinxing+Xue%2C+Zhengzi+Xu%2C+Mahinthan+Chandramohan%2C+and+Yang+Liu.+2018.+Accurate+and+Scalable+Cross-Architecture+Cross-OS+Binary+Code+Search+with+Emulation.+IEEE+Transactions+on+Software+Engineering+%28+2018+%29.^^^Hang Zhang and Zhiyun Qian. 2018. Precise and accurate patch presence test for binaries. In 27th {USENIX} Security Symposium ({USENIX} Security 18). 887-902.***http://scholar.google.com/scholar?hl=en&q=Hang+Zhang+and+Zhiyun+Qian.+2018.+Precise+and+accurate+patch+presence+test+for+binaries.+In+27th+%7BUSENIX%7D+Security+Symposium+%28%7BUSENIX%7D+Security+18%29.+887-902.^^^Hao Zhong and Zhendong Su. 2015. An empirical study on real bug fixes. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 913-923.***http://scholar.google.com/scholar?hl=en&q=Hao+Zhong+and+Zhendong+Su.+2015.+An+empirical+study+on+real+bug+fixes.+In+Proceedings+of+the+37th+International+Conference+on+Software+Engineering-Volume+1.+IEEE+Press%2C+913-923.^^^');
INSERT INTO `paper_ref` VALUES (25, 47, '[n.d.]. 42crunch. https://42crunch.com/***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+42crunch.+https%3A%2F%2F42crunch.com%2F^^^[n.d.]. Apigee Docs. https://docs.apigee.com/***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Apigee+Docs.+https%3A%2F%2Fdocs.apigee.com%2F^^^[n.d.]. Postman | API Development Environment. https://www.getpostman.com/***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Postman+%7C+API+Development+Environment.+https%3A%2F%2Fwww.getpostman.com%2F^^^[n.d.]. vREST-Automated REST API Testing Tool. https://vrest.io/***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+vREST-Automated+REST+API+Testing+Tool.+https%3A%2F%2Fvrest.io%2F^^^[n.d.]. The World\'s Most Popular Testing Tool | SoapUI. https://www.soapui.org/***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+The+World%27s+Most+Popular+Testing+Tool+%7C+SoapUI.+https%3A%2F%2Fwww.soapui.org%2F^^^2019. Azure SDK. https://github.com/Azure/azure-sdk***http://scholar.google.com/scholar?hl=en&q=2019.+Azure+SDK.+https%3A%2F%2Fgithub.com%2FAzure%2Fazure-sdk^^^S. Allamaraju. 2010. RESTful Web Services Cookbook. O\'Reilly.***http://scholar.google.com/scholar?hl=en&q=S.+Allamaraju.+2010.+RESTful+Web+Services+Cookbook.+O%27Reilly.^^^Amazon. 2019. Amazon Web Services (AWS)-Cloud Computing Services. https: //aws.amazon.com/***http://scholar.google.com/scholar?hl=en&q=Amazon.+2019.+Amazon+Web+Services+%28AWS%29-Cloud+Computing+Services.+https%3A+%2F%2Faws.amazon.com%2F^^^APIFuzzer [n.d.]. APIFuzzer. https://github.com/KissPeter/APIFuzzer.***http://scholar.google.com/scholar?hl=en&q=APIFuzzer+%5Bn.d.%5D.+APIFuzzer.+https%3A%2F%2Fgithub.com%2FKissPeter%2FAPIFuzzer.^^^AppSpider [n.d.]. AppSpider. https://www.rapid7.com/products/appspider.***http://scholar.google.com/scholar?hl=en&q=AppSpider+%5Bn.d.%5D.+AppSpider.+https%3A%2F%2Fwww.rapid7.com%2Fproducts%2Fappspider.^^^Andrea Arcuri. 2019. RESTful API Automated Test Case Generation with EvoMaster. ACM Transactions on Software Engineering and Methodology 28, 1 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2019.+RESTful+API+Automated+Test+Case+Generation+with+EvoMaster.+ACM+Transactions+on+Software+Engineering+and+Methodology+28%2C+1+%28+2019+%29.^^^Vaggelis Atlidakis, Patrice Godefroid, and Marina Polishchuk. 2019. RESTler: Stateful REST API Fuzzing. In Proceedings of the 41st International Conference on Software Engineering (Montreal, Quebec, Canada) ( ICSE \'19). IEEE Press, Piscataway, NJ, USA, 748-758. https://doi.org/10.1109/ICSE. 2019.00083 ***http://scholar.google.com/scholar?hl=en&q=Vaggelis+Atlidakis%2C+Patrice+Godefroid%2C+and+Marina+Polishchuk.+2019.+RESTler%3A+Stateful+REST+API+Fuzzing.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28Montreal%2C+Quebec%2C+Canada%29+%28+ICSE+%2719%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+748-758.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2019.00083+10.1109%2FICSE.2019.00083^^^Earl T. Barr, Mark Harman, Phil McMinn, Muzammil Shahbaz, and Shin Yoo. 2015. The Oracle Problem in Software Testing: A Survey. IEEE Transactions on Software Engineering 41, 5 ( 2015 ), 507-525.***http://scholar.google.com/scholar?hl=en&q=Earl+T.+Barr%2C+Mark+Harman%2C+Phil+McMinn%2C+Muzammil+Shahbaz%2C+and+Shin+Yoo.+2015.+The+Oracle+Problem+in+Software+Testing%3A+A+Survey.+IEEE+Transactions+on+Software+Engineering+41%2C+5+%28+2015+%29%2C+507-525.^^^Boofuzz [n.d.]. BooFuzz. https://github.com/jtpereyda/boofuzz.***http://scholar.google.com/scholar?hl=en&q=Boofuzz+%5Bn.d.%5D.+BooFuzz.+https%3A%2F%2Fgithub.com%2Fjtpereyda%2Fboofuzz.^^^Burp [n.d.]. Burp Suite. https://portswigger.net/burp.***http://scholar.google.com/scholar?hl=en&q=Burp+%5Bn.d.%5D.+Burp+Suite.+https%3A%2F%2Fportswigger.net%2Fburp.^^^Yang Chen, Alex Groce, Chaoqiang Zhang, Weng-Keen Wong, Xiaoli Fern, Eric Eide, and John Regehr. 2013. Taming compiler fuzzers. In ACM SIGPLAN Notices, Vol. 48. ACM, 197-208.***http://scholar.google.com/scholar?hl=en&q=Yang+Chen%2C+Alex+Groce%2C+Chaoqiang+Zhang%2C+Weng-Keen+Wong%2C+Xiaoli+Fern%2C+Eric+Eide%2C+and+John+Regehr.+2013.+Taming+compiler+fuzzers.+In+ACM+SIGPLAN+Notices%2C+Vol.+48.+ACM%2C+197-208.^^^Brett Daniel, Danny Dig, Kely Garcia, and Darko Marinov. 2007. Automated Testing of Refactoring Engines. In Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering (Dubrovnik, Croatia) (ESEC-FSE \'07). ACM, New York, NY, USA, 185-194. https://doi.org/10.1145/1287624.1287651 ***http://scholar.google.com/scholar?hl=en&q=Brett+Daniel%2C+Danny+Dig%2C+Kely+Garcia%2C+and+Darko+Marinov.+2007.+Automated+Testing+of+Refactoring+Engines.+In+Proceedings+of+the+the+6th+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+SIGSOFT+Symposium+on+The+Foundations+of+Software+Engineering+%28Dubrovnik%2C+Croatia%29+%28ESEC-FSE+%2707%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+185-194.+https%3A%2F%2Fdoi.org%2F10.1145%2F1287624.1287651+10.1145%2F1287624.1287651^^^Alastair F. Donaldson, Hugues Evrard, Andrei Lascu, and Paul Thomson. 2017. Automated Testing of Graphics Shader Compilers. Proc. ACM Program. Lang. 1, OOPSLA, Article 93 (Oct. 2017 ), 29 pages. https://doi.org/10.1145/3133917 ***http://scholar.google.com/scholar?hl=en&q=Alastair+F.+Donaldson%2C+Hugues+Evrard%2C+Andrei+Lascu%2C+and+Paul+Thomson.+2017.+Automated+Testing+of+Graphics+Shader+Compilers.+Proc.+ACM+Program.+Lang.+1%2C+OOPSLA%2C+Article+93+%28Oct.+2017+%29%2C+29+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3133917+10.1145%2F3133917^^^Tiago Espinha, Andy Zaidman, and Hans-Gerhard Gross. 2014. Web API growing pains: Stories from client developers and their code. In Proceedings of the 2014 Software Evolution Week-IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE) (Antwerp, Belgium).***http://scholar.google.com/scholar?hl=en&q=Tiago+Espinha%2C+Andy+Zaidman%2C+and+Hans-Gerhard+Gross.+2014.+Web+API+growing+pains%3A+Stories+from+client+developers+and+their+code.+In+Proceedings+of+the+2014+Software+Evolution+Week-IEEE+Conference+on+Software+Maintenance%2C+Reengineering%2C+and+Reverse+Engineering+%28CSMR-WCRE%29+%28Antwerp%2C+Belgium%29.^^^Roy T. Fielding. 2000. Architectural styles and the design of network-based software architectures. Vol. 7. University of California, Irvine Doctoral dissertation.***http://scholar.google.com/scholar?hl=en&q=Roy+T.+Fielding.+2000.+Architectural+styles+and+the+design+of+network-based+software+architectures.+Vol.+7.+University+of+California%2C+Irvine+Doctoral+dissertation.^^^Roy T. Fielding and Richard N. Taylor. 2002. Principled design of the modern Web architecture. ACM Transactions on Internet Technology (TOIT) 2, 2 ( 2002 ), 115-150.***http://scholar.google.com/scholar?hl=en&q=Roy+T.+Fielding+and+Richard+N.+Taylor.+2002.+Principled+design+of+the+modern+Web+architecture.+ACM+Transactions+on+Internet+Technology+%28TOIT%29+2%2C+2+%28+2002+%29%2C+115-150.^^^Zack Grossbart. 2019. JSON Dif-The semantic JSON compare tool. http://www.jsondif.com/***http://scholar.google.com/scholar?hl=en&q=Zack+Grossbart.+2019.+JSON+Dif-The+semantic+JSON+compare+tool.+http%3A%2F%2Fwww.jsondif.com%2F^^^Microsoft REST API Guidelines Working Group. 2019. Microsoft REST API Guidelines. https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md***http://scholar.google.com/scholar?hl=en&q=Microsoft+REST+API+Guidelines+Working+Group.+2019.+Microsoft+REST+API+Guidelines.+https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fapi-guidelines%2Fblob%2FvNext%2FGuidelines.md^^^Chris Hawblitzel, Shuvendu K. Lahiri, Kshama Pawar, Hammad Hashm, Sedar Gokbulut, Lakshan Fernando, Dave Detlefs, and Scott Wadsworth. 2013. Will You Still Compile Me Tomorrow?. In Proceedings of the 2013 21st ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering ( Saint Petersburg, Russia) (ESEC/FSE 2013). ACM, New York, NY, USA.***http://scholar.google.com/scholar?hl=en&q=Chris+Hawblitzel%2C+Shuvendu+K.+Lahiri%2C+Kshama+Pawar%2C+Hammad+Hashm%2C+Sedar+Gokbulut%2C+Lakshan+Fernando%2C+Dave+Detlefs%2C+and+Scott+Wadsworth.+2013.+Will+You+Still+Compile+Me+Tomorrow%3F.+In+Proceedings+of+the+2013+21st+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28+Saint+Petersburg%2C+Russia%29+%28ESEC%2FFSE+2013%29.+ACM%2C+New+York%2C+NY%2C+USA.^^^Christian Klinger, Maria Christakis, and Valentin Wüstholz. 2019. Diferentially testing soundness and precision of program analyzers. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 239-250.***http://scholar.google.com/scholar?hl=en&q=Christian+Klinger%2C+Maria+Christakis%2C+and+Valentin+W%C3%BCstholz.+2019.+Diferentially+testing+soundness+and+precision+of+program+analyzers.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+239-250.^^^Vu Le, Mehrdad Afshari, and Zhendong Su. 2014. Compiler Validation via Equivalence Modulo Inputs. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (Edinburgh, United Kingdom) (PLDI \'14). ACM, New York, NY, USA, 216-226. https://doi.org/10.1145/2594291. 2594334 ***http://scholar.google.com/scholar?hl=en&q=Vu+Le%2C+Mehrdad+Afshari%2C+and+Zhendong+Su.+2014.+Compiler+Validation+via+Equivalence+Modulo+Inputs.+In+Proceedings+of+the+35th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28Edinburgh%2C+United+Kingdom%29+%28PLDI+%2714%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+216-226.+https%3A%2F%2Fdoi.org%2F10.1145%2F2594291.+2594334+10.1145%2F2594291.2594334^^^Daniel Lehmann and Michael Pradel. 2018. Feedback-directed Diferential Testing of Interactive Debuggers. In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (Lake Buena Vista, FL, USA) ( ESEC/FSE 2018). ACM, New York, NY, USA, 610-620. https://doi.org/10.1145/3236024.3236037 ***http://scholar.google.com/scholar?hl=en&q=Daniel+Lehmann+and+Michael+Pradel.+2018.+Feedback-directed+Diferential+Testing+of+Interactive+Debuggers.+In+Proceedings+of+the+2018+26th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28Lake+Buena+Vista%2C+FL%2C+USA%29+%28+ESEC%2FFSE+2018%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+610-620.+https%3A%2F%2Fdoi.org%2F10.1145%2F3236024.3236037+10.1145%2F3236024.3236037^^^Hareton KN Leung and Lee White. 1989. Insights into regression testing (software testing). In Proceedings. Conference on Software Maintenance-1989. IEEE, 60-69.***http://scholar.google.com/scholar?hl=en&q=Hareton+KN+Leung+and+Lee+White.+1989.+Insights+into+regression+testing+%28software+testing%29.+In+Proceedings.+Conference+on+Software+Maintenance-1989.+IEEE%2C+60-69.^^^Jun Li, Yingfei Xiong, Xuanzhe Liu, and Lu Zhang. 2013. How Does Web Service API Evolution Afect Clients?. In Proceedings of the 2013 IEEE 20th International Conference on Web Services (Santa Clara, CA).***http://scholar.google.com/scholar?hl=en&q=Jun+Li%2C+Yingfei+Xiong%2C+Xuanzhe+Liu%2C+and+Lu+Zhang.+2013.+How+Does+Web+Service+API+Evolution+Afect+Clients%3F.+In+Proceedings+of+the+2013+IEEE+20th+International+Conference+on+Web+Services+%28Santa+Clara%2C+CA%29.^^^Christopher Lidbury, Andrei Lascu, Nathan Chong, and Alastair F. Donaldson. 2015. Many-core Compiler Fuzzing. In Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation (Portland, OR, USA) ( PLDI \'15). ACM, New York, NY, USA, 65-76. https://doi.org/10.1145/ 2737924.2737986 ***http://scholar.google.com/scholar?hl=en&q=Christopher+Lidbury%2C+Andrei+Lascu%2C+Nathan+Chong%2C+and+Alastair+F.+Donaldson.+2015.+Many-core+Compiler+Fuzzing.+In+Proceedings+of+the+36th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28Portland%2C+OR%2C+USA%29+%28+PLDI+%2715%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+65-76.+https%3A%2F%2Fdoi.org%2F10.1145%2F+2737924.2737986+10.1145%2F2737924.2737986^^^Haopeng Liu, Shan Lu, Madan Musuvathi, and Suman Nath. 2019. What Bugs Cause Production Cloud Incidents?. In Proceedings of HotOS\'2019 (Bertinoro, Italy).***http://scholar.google.com/scholar?hl=en&q=Haopeng+Liu%2C+Shan+Lu%2C+Madan+Musuvathi%2C+and+Suman+Nath.+2019.+What+Bugs+Cause+Production+Cloud+Incidents%3F.+In+Proceedings+of+HotOS%272019+%28Bertinoro%2C+Italy%29.^^^Mark Masse. 2011. REST API Design Rulebook: Designing Consistent RESTful Web Service Interfaces. \" O\'Reilly Media, Inc.\".***http://scholar.google.com/scholar?hl=en&q=Mark+Masse.+2011.+REST+API+Design+Rulebook%3A+Designing+Consistent+RESTful+Web+Service+Interfaces.+%22+O%27Reilly+Media%2C+Inc.%22.^^^William M McKeeman. 1998. Diferential testing for software. Digital Technical Journal 10, 1 ( 1998 ), 100-107.***http://scholar.google.com/scholar?hl=en&q=William+M+McKeeman.+1998.+Diferential+testing+for+software.+Digital+Technical+Journal+10%2C+1+%28+1998+%29%2C+100-107.^^^Microsoft. 2019. Azure ARM API Review Checklist. https://github.com/Azure/ azure-rest-api-specs/pull/6632***http://scholar.google.com/scholar?hl=en&q=Microsoft.+2019.+Azure+ARM+API+Review+Checklist.+https%3A%2F%2Fgithub.com%2FAzure%2F+azure-rest-api-specs%2Fpull%2F6632^^^Microsoft. 2019. Azure REST API Specifications. https://github.com/Azure/azurerest-api-specs***http://scholar.google.com/scholar?hl=en&q=Microsoft.+2019.+Azure+REST+API+Specifications.+https%3A%2F%2Fgithub.com%2FAzure%2Fazurerest-api-specs^^^Microsoft. 2019. Microsoft Azure Cloud Computing Platform & Services. https: //azure.microsoft.com/en-us/***http://scholar.google.com/scholar?hl=en&q=Microsoft.+2019.+Microsoft+Azure+Cloud+Computing+Platform+%26+Services.+https%3A+%2F%2Fazure.microsoft.com%2Fen-us%2F^^^Eugene W. Myers. 1986. An O(ND) diference algorithm and its variations. Algorithmica 1, 1 ( 01 Nov 1986 ), 251-266. https://doi.org/10.1007/BF01840446 ***http://scholar.google.com/scholar?hl=en&q=Eugene+W.+Myers.+1986.+An+O%28ND%29+diference+algorithm+and+its+variations.+Algorithmica+1%2C+1+%28+01+Nov+1986+%29%2C+251-266.+https%3A%2F%2Fdoi.org%2F10.1007%2FBF01840446+10.1007%2FBF01840446^^^G. J. Myers. 1979. The Art of Software Testing. Wiley.***http://scholar.google.com/scholar?hl=en&q=G.+J.+Myers.+1979.+The+Art+of+Software+Testing.+Wiley.^^^S. Newman. 2015. Building Microservices. O\'Reilly.***http://scholar.google.com/scholar?hl=en&q=S.+Newman.+2015.+Building+Microservices.+O%27Reilly.^^^Akira K. Onoma, Wei-Tek Tsai, Mustafa Poonawala, and Hiroshi Suganuma. 1998. Regression Testing in an Industrial Environment. Commun. ACM 41, 5 (May 1998 ), 81-86. https://doi.org/10.1145/274946.274960 ***http://scholar.google.com/scholar?hl=en&q=Akira+K.+Onoma%2C+Wei-Tek+Tsai%2C+Mustafa+Poonawala%2C+and+Hiroshi+Suganuma.+1998.+Regression+Testing+in+an+Industrial+Environment.+Commun.+ACM+41%2C+5+%28May+1998+%29%2C+81-86.+https%3A%2F%2Fdoi.org%2F10.1145%2F274946.274960+10.1145%2F274946.274960^^^Tom Preston-Werner. 2019. Semantic Versioning 2.0.0. https://semver.org/***http://scholar.google.com/scholar?hl=en&q=Tom+Preston-Werner.+2019.+Semantic+Versioning+2.0.0.+https%3A%2F%2Fsemver.org%2F^^^QualysWAS [n.d.]. Qualys Web Application Scanning (WAS). https://www. qualys.com/apps/web-app-scanning/.***http://scholar.google.com/scholar?hl=en&q=QualysWAS+%5Bn.d.%5D.+Qualys+Web+Application+Scanning+%28WAS%29.+https%3A%2F%2Fwww.+qualys.com%2Fapps%2Fweb-app-scanning%2F.^^^Sergio Segura, José A. Parejo, Javier Troya, and Antonio Ruiz-Cortés. 2018. Metamorphic Testing of RESTful Web APIs. ACM Transactions on Software Engineering 44, 11 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Sergio+Segura%2C+Jos%C3%A9+A.+Parejo%2C+Javier+Troya%2C+and+Antonio+Ruiz-Cort%C3%A9s.+2018.+Metamorphic+Testing+of+RESTful+Web+APIs.+ACM+Transactions+on+Software+Engineering+44%2C+11+%28+2018+%29.^^^Sulley [n.d.]. Sulley. https://github.com/OpenRCE/sulley.***http://scholar.google.com/scholar?hl=en&q=Sulley+%5Bn.d.%5D.+Sulley.+https%3A%2F%2Fgithub.com%2FOpenRCE%2Fsulley.^^^Swagger [n.d.]. Swagger. https://swagger.io/.***http://scholar.google.com/scholar?hl=en&q=Swagger+%5Bn.d.%5D.+Swagger.+https%3A%2F%2Fswagger.io%2F.^^^TnT-Fuzzer [n.d.]. TnT-Fuzzer. https://github.com/Teebytes/TnT-Fuzzer.***http://scholar.google.com/scholar?hl=en&q=TnT-Fuzzer+%5Bn.d.%5D.+TnT-Fuzzer.+https%3A%2F%2Fgithub.com%2FTeebytes%2FTnT-Fuzzer.^^^Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and Understanding Bugs in C Compilers. In Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation (San Jose, California, USA) ( PLDI \'11). ACM, New York, NY, USA, 283-294. https: //doi.org/10.1145/1993498.1993532 ***http://scholar.google.com/scholar?hl=en&q=Xuejun+Yang%2C+Yang+Chen%2C+Eric+Eide%2C+and+John+Regehr.+2011.+Finding+and+Understanding+Bugs+in+C+Compilers.+In+Proceedings+of+the+32Nd+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28San+Jose%2C+California%2C+USA%29+%28+PLDI+%2711%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+283-294.+https%3A+%2F%2Fdoi.org%2F10.1145%2F1993498.1993532+10.1145%2F1993498.1993532^^^');
INSERT INTO `paper_ref` VALUES (26, 13, 'Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli. 2017. A survey of attacks on ethereum smart contracts (sok). In International Conference on Principles of Security and Trust. Springer, 164-186.***http://scholar.google.com/scholar?hl=en&q=Nicola+Atzei%2C+Massimo+Bartoletti%2C+and+Tiziana+Cimoli.+2017.+A+survey+of+attacks+on+ethereum+smart+contracts+%28sok%29.+In+International+Conference+on+Principles+of+Security+and+Trust.+Springer%2C+164-186.^^^Lexi Brent, Anton Jurisevic, Michael Kong, Eric Liu, Francois Gauthier, Vincent Gramoli, Ralph Holz, and Bernhard Scholz. 2018. Vandal: A scalable security analysis framework for smart contracts. arXiv preprint arXiv: 1809. 03981 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Lexi+Brent%2C+Anton+Jurisevic%2C+Michael+Kong%2C+Eric+Liu%2C+Francois+Gauthier%2C+Vincent+Gramoli%2C+Ralph+Holz%2C+and+Bernhard+Scholz.+2018.+Vandal%3A+A+scalable+security+analysis+framework+for+smart+contracts.+arXiv+preprint+arXiv%3A+1809.+03981+%28+2018+%29.^^^Xu Chen, Jon Andersen, Z Morley Mao, Michael Bailey, and Jose Nazario. 2008. Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware. In 2008 IEEE International Conference on Dependable Systems and Networks With FTCS and DCC (DSN). IEEE, 177-186.***http://scholar.google.com/scholar?hl=en&q=Xu+Chen%2C+Jon+Andersen%2C+Z+Morley+Mao%2C+Michael+Bailey%2C+and+Jose+Nazario.+2008.+Towards+an+understanding+of+anti-virtualization+and+anti-debugging+behavior+in+modern+malware.+In+2008+IEEE+International+Conference+on+Dependable+Systems+and+Networks+With+FTCS+and+DCC+%28DSN%29.+IEEE%2C+177-186.^^^Michael N Gagnon, Stephen Taylor, and Anup K Ghosh. 2007. Software protection through anti-debugging. IEEE Security & Privacy 5, 3 ( 2007 ), 82-84.***http://scholar.google.com/scholar?hl=en&q=Michael+N+Gagnon%2C+Stephen+Taylor%2C+and+Anup+K+Ghosh.+2007.+Software+protection+through+anti-debugging.+IEEE+Security+%26+Privacy+5%2C+3+%28+2007+%29%2C+82-84.^^^Jianbo Gao, Han Liu, Yue Li, Chao Liu, Zhiqiang Yang, Qingshan Li, Zhi Guan, and Zhong Chen. 2019. Towards automated testing of blockchain-based decentralized applications. In Proceedings of the 27th International Conference on Program Comprehension. IEEE Press, 294-299.***http://scholar.google.com/scholar?hl=en&q=Jianbo+Gao%2C+Han+Liu%2C+Yue+Li%2C+Chao+Liu%2C+Zhiqiang+Yang%2C+Qingshan+Li%2C+Zhi+Guan%2C+and+Zhong+Chen.+2019.+Towards+automated+testing+of+blockchain-based+decentralized+applications.+In+Proceedings+of+the+27th+International+Conference+on+Program+Comprehension.+IEEE+Press%2C+294-299.^^^Neville Grech, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis. 2019. Gigahorse: thorough, declarative decompilation of smart contracts. In Proceedings of the 41st International Conference on Software Engineering. IEEE Press, 1176-1186.***http://scholar.google.com/scholar?hl=en&q=Neville+Grech%2C+Lexi+Brent%2C+Bernhard+Scholz%2C+and+Yannis+Smaragdakis.+2019.+Gigahorse%3A+thorough%2C+declarative+decompilation+of+smart+contracts.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering.+IEEE+Press%2C+1176-1186.^^^Neville Grech, Michael Kong, Anton Jurisevic, Lexi Brent, Bernhard Scholz, and Yannis Smaragdakis. 2018. Madmax: Surviving out-of-gas conditions in ethereum smart contracts. Proceedings of the ACM on Programming Languages 2, OOPSLA ( 2018 ), 116.***http://scholar.google.com/scholar?hl=en&q=Neville+Grech%2C+Michael+Kong%2C+Anton+Jurisevic%2C+Lexi+Brent%2C+Bernhard+Scholz%2C+and+Yannis+Smaragdakis.+2018.+Madmax%3A+Surviving+out-of-gas+conditions+in+ethereum+smart+contracts.+Proceedings+of+the+ACM+on+Programming+Languages+2%2C+OOPSLA+%28+2018+%29%2C+116.^^^Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016. Harvesting Runtime Values in Android Applications That Feature Anti-Analysis Techniques.. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Siegfried+Rasthofer%2C+Steven+Arzt%2C+Marc+Miltenberger%2C+and+Eric+Bodden.+2016.+Harvesting+Runtime+Values+in+Android+Applications+That+Feature+Anti-Analysis+Techniques..+In+NDSS.^^^Matt Suiche. 2017. Porosity: A decompiler for blockchain-based smart contracts bytecode. DEF con 25 ( 2017 ), 11.***http://scholar.google.com/scholar?hl=en&q=Matt+Suiche.+2017.+Porosity%3A+A+decompiler+for+blockchain-based+smart+contracts+bytecode.+DEF+con+25+%28+2017+%29%2C+11.^^^Petar Tsankov, Andrei Dan, Dana Drachsler-Cohen, Arthur Gervais, Florian Buenzli, and Martin Vechev. 2018. Securify: Practical security analysis of smart contracts. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 67-82.***http://scholar.google.com/scholar?hl=en&q=Petar+Tsankov%2C+Andrei+Dan%2C+Dana+Drachsler-Cohen%2C+Arthur+Gervais%2C+Florian+Buenzli%2C+and+Martin+Vechev.+2018.+Securify%3A+Practical+security+analysis+of+smart+contracts.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security.+ACM%2C+67-82.^^^Gavin Wood et al. 2014. Ethereum: A secure decentralised generalised transaction ledger. Ethereum project yellow paper 151, 2014 ( 2014 ), 1-32.***http://scholar.google.com/scholar?hl=en&q=Gavin+Wood+et+al.+2014.+Ethereum%3A+A+secure+decentralised+generalised+transaction+ledger.+Ethereum+project+yellow+paper+151%2C+2014+%28+2014+%29%2C+1-32.^^^Lei Xue, Xiapu Luo, Le Yu, Shuai Wang, and Dinghao Wu. 2017. Adaptive unpacking of Android apps. In 2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE). IEEE, 358-369.***http://scholar.google.com/scholar?hl=en&q=Lei+Xue%2C+Xiapu+Luo%2C+Le+Yu%2C+Shuai+Wang%2C+and+Dinghao+Wu.+2017.+Adaptive+unpacking+of+Android+apps.+In+2017+IEEE%2FACM+39th+International+Conference+on+Software+Engineering+%28ICSE%29.+IEEE%2C+358-369.^^^Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, Andrew Miller, and Michael Bailey. 2018. Erays: reverse engineering ethereum\'s opaque smart contracts. In 27th {USENIX} Security Symposium ({USENIX} Security 18). 1371-1385.***http://scholar.google.com/scholar?hl=en&q=Yi+Zhou%2C+Deepak+Kumar%2C+Surya+Bakshi%2C+Joshua+Mason%2C+Andrew+Miller%2C+and+Michael+Bailey.+2018.+Erays%3A+reverse+engineering+ethereum%27s+opaque+smart+contracts.+In+27th+%7BUSENIX%7D+Security+Symposium+%28%7BUSENIX%7D+Security+18%29.+1371-1385.^^^');
INSERT INTO `paper_ref` VALUES (27, 47, 'Sara Abbaspour Asadollah, Rafia Inam, and Hans Hansson. 2015. A survey on testing for cyber physical system. In IFIP International Conference on Testing Software and Systems. Springer.***http://scholar.google.com/scholar?hl=en&q=Sara+Abbaspour+Asadollah%2C+Rafia+Inam%2C+and+Hans+Hansson.+2015.+A+survey+on+testing+for+cyber+physical+system.+In+IFIP+International+Conference+on+Testing+Software+and+Systems.+Springer.^^^Sara Abbaspour Asadollah, Daniel Sundmark, Sigrid Eldh, and Hans Hansson. 2017. Concurrency bugs in open source software: a case study. Journal of Internet Services and Applications 8, 1 ( 2017 ), 4.***http://scholar.google.com/scholar?hl=en&q=Sara+Abbaspour+Asadollah%2C+Daniel+Sundmark%2C+Sigrid+Eldh%2C+and+Hans+Hansson.+2017.+Concurrency+bugs+in+open+source+software%3A+a+case+study.+Journal+of+Internet+Services+and+Applications+8%2C+1+%28+2017+%29%2C+4.^^^Azeem Ahmad, Ola Leifler, and Kristian Sandahl. 2019. Empirical Analysis of Factors and their Efect on Test Flakiness-Practitioners\' Perceptions. Preprint arXiv: 1906. 00673 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Azeem+Ahmad%2C+Ola+Leifler%2C+and+Kristian+Sandahl.+2019.+Empirical+Analysis+of+Factors+and+their+Efect+on+Test+Flakiness-Practitioners%27+Perceptions.+Preprint+arXiv%3A+1906.+00673+%28+2019+%29.^^^Emil Alégroth and Javier Gonzalez-Huerta. 2017. Towards a Mapping of Software Technical Debt onto Testware. In Euromicro Conference on Software Engineering and Advanced Applications. IEEE.***http://scholar.google.com/scholar?hl=en&q=Emil+Al%C3%A9groth+and+Javier+Gonzalez-Huerta.+2017.+Towards+a+Mapping+of+Software+Technical+Debt+onto+Testware.+In+Euromicro+Conference+on+Software+Engineering+and+Advanced+Applications.+IEEE.^^^Alberto Avritzer and Elaine J Weyuker. 1995. The automatic generation of load test suites and the assessment of the resulting software. IEEE Transactions on Software Engineering 21, 9 ( 1995 ).***http://scholar.google.com/scholar?hl=en&q=Alberto+Avritzer+and+Elaine+J+Weyuker.+1995.+The+automatic+generation+of+load+test+suites+and+the+assessment+of+the+resulting+software.+IEEE+Transactions+on+Software+Engineering+21%2C+9+%28+1995+%29.^^^Roozbeh Bakhshi, Surya Kunche, and Michael Pecht. 2014. Intermittent failures in hardware and software. Journal of Electronic Packaging 136, 1 ( 2014 ), 011014.***http://scholar.google.com/scholar?hl=en&q=Roozbeh+Bakhshi%2C+Surya+Kunche%2C+and+Michael+Pecht.+2014.+Intermittent+failures+in+hardware+and+software.+Journal+of+Electronic+Packaging+136%2C+1+%28+2014+%29%2C+011014.^^^M Ball and F Hardie. 1969. Efects and detection of intermittent failures in digital systems. In Proceedings of the November 18-20, 1969, fall joint computer conference (AFIPS\'69). ACM.***http://scholar.google.com/scholar?hl=en&q=M+Ball+and+F+Hardie.+1969.+Efects+and+detection+of+intermittent+failures+in+digital+systems.+In+Proceedings+of+the+November+18-20%2C+1969%2C+fall+joint+computer+conference+%28AFIPS%2769%29.+ACM.^^^Abhijeet Banerjee, Sudipta Chattopadhyay, and Abhik Roychoudhury. 2016. On Testing Embedded Software. Advances in Computers 101 ( 2016 ), 121-153.***http://scholar.google.com/scholar?hl=en&q=Abhijeet+Banerjee%2C+Sudipta+Chattopadhyay%2C+and+Abhik+Roychoudhury.+2016.+On+Testing+Embedded+Software.+Advances+in+Computers+101+%28+2016+%29%2C+121-153.^^^Jonathan Bell, Owolabi Legunsen, Michael Hilton, Lamyaa Eloussi, Tifany Yung, and Darko Marinov. 2018. DeFlaker: automatically detecting flaky tests. In International Conference on Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell%2C+Owolabi+Legunsen%2C+Michael+Hilton%2C+Lamyaa+Eloussi%2C+Tifany+Yung%2C+and+Darko+Marinov.+2018.+DeFlaker%3A+automatically+detecting+flaky+tests.+In+International+Conference+on+Software+Engineering.+ACM.^^^Melvin A Breuer. 1973. Testing for intermittent faults in digital circuits. IEEE Trans. Comput. 100, 3 ( 1973 ), 241-246.***http://scholar.google.com/scholar?hl=en&q=Melvin+A+Breuer.+1973.+Testing+for+intermittent+faults+in+digital+circuits.+IEEE+Trans.+Comput.+100%2C+3+%28+1973+%29%2C+241-246.^^^Davide G Cavezza, Roberto Pietrantuono, Javier Alonso, Stefano Russo, and Kishor S Trivedi. 2014. Reproducibility of environment-dependent software failures: An experience report. In International Symposium on Software Reliability Engineering. IEEE.***http://scholar.google.com/scholar?hl=en&q=Davide+G+Cavezza%2C+Roberto+Pietrantuono%2C+Javier+Alonso%2C+Stefano+Russo%2C+and+Kishor+S+Trivedi.+2014.+Reproducibility+of+environment-dependent+software+failures%3A+An+experience+report.+In+International+Symposium+on+Software+Reliability+Engineering.+IEEE.^^^W Fordham Cooper. 1947. Electrical control of dangerous machinery and processes. Journal of the Institution of Electrical Engineers-Part II: Power Engineering 94, 39 ( 1947 ), 216-232.***http://scholar.google.com/scholar?hl=en&q=W+Fordham+Cooper.+1947.+Electrical+control+of+dangerous+machinery+and+processes.+Journal+of+the+Institution+of+Electrical+Engineers-Part+II%3A+Power+Engineering+94%2C+39+%28+1947+%29%2C+216-232.^^^Catello di Martino, Zbigniew Kalbarczyk, Ravishankar K Iyer, Fabio Baccanico, Joseph Fullop, and William Kramer. 2014. Lessons learned from the analysis of system failures at petascale: The case of blue waters. In International Conference on Dependable Systems and Networks. IEEE/IFIP.***http://scholar.google.com/scholar?hl=en&q=Catello+di+Martino%2C+Zbigniew+Kalbarczyk%2C+Ravishankar+K+Iyer%2C+Fabio+Baccanico%2C+Joseph+Fullop%2C+and+William+Kramer.+2014.+Lessons+learned+from+the+analysis+of+system+failures+at+petascale%3A+The+case+of+blue+waters.+In+International+Conference+on+Dependable+Systems+and+Networks.+IEEE%2FIFIP.^^^Moritz Eck, Fabio Palomba, Marco Castelluccio, and Alberto Bacchelli. 2019. Understanding Flaky Tests: The Developer\'s Perspective. In Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Moritz+Eck%2C+Fabio+Palomba%2C+Marco+Castelluccio%2C+and+Alberto+Bacchelli.+2019.+Understanding+Flaky+Tests%3A+The+Developer%27s+Perspective.+In+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+ACM.^^^Sebastian Elbaum, Gregg Rothermel, and John Penix. 2014. Techniques for improving regression testing in continuous integration development environments. In International Symposium on Foundations of Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Gregg+Rothermel%2C+and+John+Penix.+2014.+Techniques+for+improving+regression+testing+in+continuous+integration+development+environments.+In+International+Symposium+on+Foundations+of+Software+Engineering.+ACM.^^^Sigrid Eldh, Sasikumar Punnekkat, Hans Hansson, and Peter Jönsson. 2007. Component testing is not enough-a study of software faults in telecom middleware. In Testing of Software and Communicating Systems. Springer, 74-89.***http://scholar.google.com/scholar?hl=en&q=Sigrid+Eldh%2C+Sasikumar+Punnekkat%2C+Hans+Hansson%2C+and+Peter+J%C3%B6nsson.+2007.+Component+testing+is+not+enough-a+study+of+software+faults+in+telecom+middleware.+In+Testing+of+Software+and+Communicating+Systems.+Springer%2C+74-89.^^^Martin Fowler. 2011. Eradicating Non-Determinism in Tests (Blog Post). https: //www.martinfowler.com/articles/nonDeterminism.html. Online, Accessed 2019-06-26.***http://scholar.google.com/scholar?hl=en&q=Martin+Fowler.+2011.+Eradicating+Non-Determinism+in+Tests+%28Blog+Post%29.+https%3A+%2F%2Fwww.martinfowler.com%2Farticles%2FnonDeterminism.html.+Online%2C+Accessed+2019-06-26.^^^Martin Fowler. 2018. Refactoring: improving the design of existing code. AddisonWesley Professional.***http://scholar.google.com/scholar?hl=en&q=Martin+Fowler.+2018.+Refactoring%3A+improving+the+design+of+existing+code.+AddisonWesley+Professional.^^^Zebao Gao. 2017. Quantifying Flakiness and Minimizing its Efects on Software Testing. Ph.D. Dissertation. University of Maryland.***http://scholar.google.com/scholar?hl=en&q=Zebao+Gao.+2017.+Quantifying+Flakiness+and+Minimizing+its+Efects+on+Software+Testing.+Ph.D.+Dissertation.+University+of+Maryland.^^^Vahid Garousi and Barış Küçük. 2018. Smells in software test code: A survey of knowledge in industry and academia. Journal of systems and software 138 ( 2018 ), 52-81.***http://scholar.google.com/scholar?hl=en&q=Vahid+Garousi+and+Bar%C4%B1%C5%9F+K%C3%BC%C3%A7%C3%BCk.+2018.+Smells+in+software+test+code%3A+A+survey+of+knowledge+in+industry+and+academia.+Journal+of+systems+and+software+138+%28+2018+%29%2C+52-81.^^^Michael Grottke and Kishor S Trivedi. 2005. A classification of software faults. Journal of Reliability Engineering Association of Japan 27, 7 ( 2005 ), 425-438.***http://scholar.google.com/scholar?hl=en&q=Michael+Grottke+and+Kishor+S+Trivedi.+2005.+A+classification+of+software+faults.+Journal+of+Reliability+Engineering+Association+of+Japan+27%2C+7+%28+2005+%29%2C+425-438.^^^Alex Gyori, August Shi, Farah Hariri, and Darko Marinov. 2015. Reliable testing: detecting state-polluting tests to prevent test dependency. In International Symposium on Software Testing and Analysis. ACM.***http://scholar.google.com/scholar?hl=en&q=Alex+Gyori%2C+August+Shi%2C+Farah+Hariri%2C+and+Darko+Marinov.+2015.+Reliable+testing%3A+detecting+state-polluting+tests+to+prevent+test+dependency.+In+International+Symposium+on+Software+Testing+and+Analysis.+ACM.^^^Kim Herzig and Nachiappan Nagappan. 2015. Empirically detecting false test alarms using association rules. In International Conference on Software Engineering, Vol. 2. IEEE.***http://scholar.google.com/scholar?hl=en&q=Kim+Herzig+and+Nachiappan+Nagappan.+2015.+Empirically+detecting+false+test+alarms+using+association+rules.+In+International+Conference+on+Software+Engineering%2C+Vol.+2.+IEEE.^^^He Jiang, Xiaochen Li, Zijiang Yang, and Jifeng Xuan. 2017. What causes my test alarm? Automatic cause analysis for test alarms in system and integration testing. In International Conference on Software Engineering. IEEE.***http://scholar.google.com/scholar?hl=en&q=He+Jiang%2C+Xiaochen+Li%2C+Zijiang+Yang%2C+and+Jifeng+Xuan.+2017.+What+causes+my+test+alarm%3F+Automatic+cause+analysis+for+test+alarms+in+system+and+integration+testing.+In+International+Conference+on+Software+Engineering.+IEEE.^^^Adriaan Labuschagne, Laura Inozemtseva, and Reid Holmes. 2017. Measuring the cost of regression testing in practice: a study of Java projects using continuous integration. In Joint Meeting on Foundations of Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Adriaan+Labuschagne%2C+Laura+Inozemtseva%2C+and+Reid+Holmes.+2017.+Measuring+the+cost+of+regression+testing+in+practice%3A+a+study+of+Java+projects+using+continuous+integration.+In+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM.^^^Wing Lam, Patrice Godefroid, Suman Nath, Anirudh Santhiar, and Suresh Thummalapenta. 2019. Root Causing Flaky Tests in a Large-Scale Industrial Setting. In International Symposium on Software Testing and Analysis. ACM.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Patrice+Godefroid%2C+Suman+Nath%2C+Anirudh+Santhiar%2C+and+Suresh+Thummalapenta.+2019.+Root+Causing+Flaky+Tests+in+a+Large-Scale+Industrial+Setting.+In+International+Symposium+on+Software+Testing+and+Analysis.+ACM.^^^Nancy G Leveson. 2004. Role of software in spacecraft accidents. Journal of spacecraft and Rockets 41, 4 ( 2004 ), 564-575.***http://scholar.google.com/scholar?hl=en&q=Nancy+G+Leveson.+2004.+Role+of+software+in+spacecraft+accidents.+Journal+of+spacecraft+and+Rockets+41%2C+4+%28+2004+%29%2C+564-575.^^^Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. An empirical analysis of flaky tests. In International Symposium on Foundations of Software Engineering. ACM.***http://scholar.google.com/scholar?hl=en&q=Qingzhou+Luo%2C+Farah+Hariri%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2014.+An+empirical+analysis+of+flaky+tests.+In+International+Symposium+on+Foundations+of+Software+Engineering.+ACM.^^^Yashwant K Malaiya and Stephen YH Su. 1979. A survey of methods for intermittent fault analysis. In International Workshop on Managing Requirements Knowledge. IEEE.***http://scholar.google.com/scholar?hl=en&q=Yashwant+K+Malaiya+and+Stephen+YH+Su.+1979.+A+survey+of+methods+for+intermittent+fault+analysis.+In+International+Workshop+on+Managing+Requirements+Knowledge.+IEEE.^^^Torvald Mårtensson, Daniel Ståhl, and Jan Bosch. 2016. Continuous integration applied to software-intensive embedded systems-problems and experiences. In International Conference on Product-Focused Software Process Improvement. Springer.***http://scholar.google.com/scholar?hl=en&q=Torvald+M%C3%A5rtensson%2C+Daniel+St%C3%A5hl%2C+and+Jan+Bosch.+2016.+Continuous+integration+applied+to+software-intensive+embedded+systems-problems+and+experiences.+In+International+Conference+on+Product-Focused+Software+Process+Improvement.+Springer.^^^Madanlal Musuvathi, Shaz Qadeer, Thomas Ball, Gerard Basler, Piramanayagam Arumuga Nainar, and Iulian Neamtiu. 2008. Finding and Reproducing Heisenbugs in Concurrent Programs. In Symposium on Operating Systems Design and Implementation. USENIX.***http://scholar.google.com/scholar?hl=en&q=Madanlal+Musuvathi%2C+Shaz+Qadeer%2C+Thomas+Ball%2C+Gerard+Basler%2C+Piramanayagam+Arumuga+Nainar%2C+and+Iulian+Neamtiu.+2008.+Finding+and+Reproducing+Heisenbugs+in+Concurrent+Programs.+In+Symposium+on+Operating+Systems+Design+and+Implementation.+USENIX.^^^Thomas J Ostrand and Elaine J Weyuker. 1984. Collecting and categorizing software error data in an industrial environment. Journal of Systems and Software 4, 4 ( 1984 ), 289-300.***http://scholar.google.com/scholar?hl=en&q=Thomas+J+Ostrand+and+Elaine+J+Weyuker.+1984.+Collecting+and+categorizing+software+error+data+in+an+industrial+environment.+Journal+of+Systems+and+Software+4%2C+4+%28+1984+%29%2C+289-300.^^^Nicolas Privault. 2013. Understanding Markov chains: examples and applications. Springer Science & Business Media.***http://scholar.google.com/scholar?hl=en&q=Nicolas+Privault.+2013.+Understanding+Markov+chains%3A+examples+and+applications.+Springer+Science+%26+Business+Media.^^^Per Runeson, Martin Höst, Austen Rainer, and Bjorn Regnell. 2012. Case study research in software engineering: Guidelines and examples. John Wiley & Sons.***http://scholar.google.com/scholar?hl=en&q=Per+Runeson%2C+Martin+H%C3%B6st%2C+Austen+Rainer%2C+and+Bjorn+Regnell.+2012.+Case+study+research+in+software+engineering%3A+Guidelines+and+examples.+John+Wiley+%26+Sons.^^^Mojtaba Shahin, Muhammad Ali Babar, and Liming Zhu. 2017. Continuous Integration, Delivery and Deployment: A Systematic Review on Approaches, Tools, Challenges and Practices. IEEE Access 5 ( 2017 ), 3909-3943.***http://scholar.google.com/scholar?hl=en&q=Mojtaba+Shahin%2C+Muhammad+Ali+Babar%2C+and+Liming+Zhu.+2017.+Continuous+Integration%2C+Delivery+and+Deployment%3A+A+Systematic+Review+on+Approaches%2C+Tools%2C+Challenges+and+Practices.+IEEE+Access+5+%28+2017+%29%2C+3909-3943.^^^Per Erik Strandberg, Wasif Afzal, Thomas Ostrand, Elaine Weyuker, and Daniel Sundmark. 2017. Automated System Level Regression Test Prioritization in a Nutshell. IEEE Software 34, 1 ( 2017 ), 1-10.***http://scholar.google.com/scholar?hl=en&q=Per+Erik+Strandberg%2C+Wasif+Afzal%2C+Thomas+Ostrand%2C+Elaine+Weyuker%2C+and+Daniel+Sundmark.+2017.+Automated+System+Level+Regression+Test+Prioritization+in+a+Nutshell.+IEEE+Software+34%2C+1+%28+2017+%29%2C+1-10.^^^Per Erik Strandberg, Wasif Afzal, and Daniel Sundmark. 2018. Decision Making and Visualizations Based on Test Results. In International Symposium on Empirical Software Engineering and Measurement. ACM/IEEE.***http://scholar.google.com/scholar?hl=en&q=Per+Erik+Strandberg%2C+Wasif+Afzal%2C+and+Daniel+Sundmark.+2018.+Decision+Making+and+Visualizations+Based+on+Test+Results.+In+International+Symposium+on+Empirical+Software+Engineering+and+Measurement.+ACM%2FIEEE.^^^Per Erik Strandberg, Eduard Paul Enoiu, Wasif Afzal, Daniel Sundmark, and Robert Feldt. 2019. Information Flow in Software Testing-An Interview Study With Embedded Software Engineering Practitioners. IEEE Access 7 ( 2019 ), 46434-46453.***http://scholar.google.com/scholar?hl=en&q=Per+Erik+Strandberg%2C+Eduard+Paul+Enoiu%2C+Wasif+Afzal%2C+Daniel+Sundmark%2C+and+Robert+Feldt.+2019.+Information+Flow+in+Software+Testing-An+Interview+Study+With+Embedded+Software+Engineering+Practitioners.+IEEE+Access+7+%28+2019+%29%2C+46434-46453.^^^Per Erik Strandberg, Thomas J Ostrand, Elaine J Weyuker, Daniel Sundmark, and Wasif Afzal. 2018. Automated test mapping and coverage for network topologies. In International Symposium on Software Testing and Analysis. ACM.***http://scholar.google.com/scholar?hl=en&q=Per+Erik+Strandberg%2C+Thomas+J+Ostrand%2C+Elaine+J+Weyuker%2C+Daniel+Sundmark%2C+and+Wasif+Afzal.+2018.+Automated+test+mapping+and+coverage+for+network+topologies.+In+International+Symposium+on+Software+Testing+and+Analysis.+ACM.^^^Per Erik Strandberg, Daniel Sundmark, Wasif Afzal, Thomas J Ostrand, and Elaine J Weyuker. 2016. Experience Report: Automated System Level Regression Test Prioritization Using Multiple Factors. In International Symposium on Software Reliability Engineering. IEEE.***http://scholar.google.com/scholar?hl=en&q=Per+Erik+Strandberg%2C+Daniel+Sundmark%2C+Wasif+Afzal%2C+Thomas+J+Ostrand%2C+and+Elaine+J+Weyuker.+2016.+Experience+Report%3A+Automated+System+Level+Regression+Test+Prioritization+Using+Multiple+Factors.+In+International+Symposium+on+Software+Reliability+Engineering.+IEEE.^^^Nikolaos Sycofyllos. 2016. An Empirical Exploration in the Study of SoftwareRelated Fatal Failures. Bachelor thesis, Mälardalen University.***http://scholar.google.com/scholar?hl=en&q=Nikolaos+Sycofyllos.+2016.+An+Empirical+Exploration+in+the+Study+of+SoftwareRelated+Fatal+Failures.+Bachelor+thesis%2C+M%C3%A4lardalen+University.^^^Swapna Thorve, Chandani Sreshtha, and Na Meng. 2018. An Empirical Study of Flaky Tests in Android Apps. In International Conference on Software Maintenance and Evolution. IEEE.***http://scholar.google.com/scholar?hl=en&q=Swapna+Thorve%2C+Chandani+Sreshtha%2C+and+Na+Meng.+2018.+An+Empirical+Study+of+Flaky+Tests+in+Android+Apps.+In+International+Conference+on+Software+Maintenance+and+Evolution.+IEEE.^^^Arash Vahabzadeh, Amin Milani Fard, and Ali Mesbah. 2015. An empirical study of bugs in test code. In International Conference on Software Maintenance and Evolution. IEEE.***http://scholar.google.com/scholar?hl=en&q=Arash+Vahabzadeh%2C+Amin+Milani+Fard%2C+and+Ali+Mesbah.+2015.+An+empirical+study+of+bugs+in+test+code.+In+International+Conference+on+Software+Maintenance+and+Evolution.+IEEE.^^^Arie van Deursen, Leon Moonen, Alex van Den Bergh, and Gerard Kok. 2001. Refactoring test code. In International conference on extreme programming and lfexible processes in software engineering.***http://scholar.google.com/scholar?hl=en&q=Arie+van+Deursen%2C+Leon+Moonen%2C+Alex+van+Den+Bergh%2C+and+Gerard+Kok.+2001.+Refactoring+test+code.+In+International+conference+on+extreme+programming+and+lfexible+processes+in+software+engineering.^^^Kristian Wiklund, Sigrid Eldh, Daniel Sundmark, and Kristina Lundqvist. 2017. Impediments for software test automation: A systematic literature review. Software Testing, Verification and Reliability ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Kristian+Wiklund%2C+Sigrid+Eldh%2C+Daniel+Sundmark%2C+and+Kristina+Lundqvist.+2017.+Impediments+for+software+test+automation%3A+A+systematic+literature+review.+Software+Testing%2C+Verification+and+Reliability+%28+2017+%29.^^^Wayne H Wolf. 1994. Hardware-software co-design of embedded systems. Proc. IEEE 82, 7 ( 1994 ), 967-989.***http://scholar.google.com/scholar?hl=en&q=Wayne+H+Wolf.+1994.+Hardware-software+co-design+of+embedded+systems.+Proc.+IEEE+82%2C+7+%28+1994+%29%2C+967-989.^^^Sai Zhang, Darioush Jalali, Jochen Wuttke, Kıvanç Muşlu, Wing Lam, Michael D Ernst, and David Notkin. 2014. Empirically revisiting the test independence assumption. In International Symposium on Software Testing and Analysis. ACM.***http://scholar.google.com/scholar?hl=en&q=Sai+Zhang%2C+Darioush+Jalali%2C+Jochen+Wuttke%2C+K%C4%B1van%C3%A7+Mu%C5%9Flu%2C+Wing+Lam%2C+Michael+D+Ernst%2C+and+David+Notkin.+2014.+Empirically+revisiting+the+test+independence+assumption.+In+International+Symposium+on+Software+Testing+and+Analysis.+ACM.^^^');
INSERT INTO `paper_ref` VALUES (28, 78, 'Matthias Althof and Sebastian Lutz. 2018. Automatic Generation of SafetyCritical Test Scenarios for Collision Avoidance of Road Vehicles. In 2018 IEEE Intelligent Vehicles Symposium (IV). IEEE, 1326-1333.***http://scholar.google.com/scholar?hl=en&q=Matthias+Althof+and+Sebastian+Lutz.+2018.+Automatic+Generation+of+SafetyCritical+Test+Scenarios+for+Collision+Avoidance+of+Road+Vehicles.+In+2018+IEEE+Intelligent+Vehicles+Symposium+%28IV%29.+IEEE%2C+1326-1333.^^^Joseph Stiles Beggs. 1983. Kinematics. CRC Press.***http://scholar.google.com/scholar?hl=en&q=Joseph+Stiles+Beggs.+1983.+Kinematics.+CRC+Press.^^^Raja Ben Abdessalem, Shiva Nejati, Lionel C Briand, and Thomas Stifter. 2016. Testing advanced driver assistance systems using multi-objective search and neural networks. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering. 63-74.***http://scholar.google.com/scholar?hl=en&q=Raja+Ben+Abdessalem%2C+Shiva+Nejati%2C+Lionel+C+Briand%2C+and+Thomas+Stifter.+2016.+Testing+advanced+driver+assistance+systems+using+multi-objective+search+and+neural+networks.+In+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+63-74.^^^Robert Binder. 2000. Testing object-oriented systems: models, patterns, and tools. Addison-Wesley Professional. 745-746 pages.***http://scholar.google.com/scholar?hl=en&q=Robert+Binder.+2000.+Testing+object-oriented+systems%3A+models%2C+patterns%2C+and+tools.+Addison-Wesley+Professional.+745-746+pages.^^^Brian Garrett-Glaser. 2019. Avionics-Drone Delivery Crash in Switzerland Raises Safety Concerns As UPS Forms Subsidiary. https://www.aviationtoday.com/ 2019 / 08/08/drone-delivery-crash-in-switzerland-raises-safety-concerns/. [Online; accessed 5-November-2019].***http://scholar.google.com/scholar?hl=en&q=Brian+Garrett-Glaser.+2019.+Avionics-Drone+Delivery+Crash+in+Switzerland+Raises+Safety+Concerns+As+UPS+Forms+Subsidiary.+https%3A%2F%2Fwww.aviationtoday.com%2F+2019+%2F+08%2F08%2Fdrone-delivery-crash-in-switzerland-raises-safety-concerns%2F.+%5BOnline%3B+accessed+5-November-2019%5D.^^^Mo Chen, Sylvia Herbert, and Claire J Tomlin. 2016. Fast reachable set approximations via state decoupling disturbances. In 2016 IEEE 55th Conference on Decision and Control (CDC). IEEE, 191-196.***http://scholar.google.com/scholar?hl=en&q=Mo+Chen%2C+Sylvia+Herbert%2C+and+Claire+J+Tomlin.+2016.+Fast+reachable+set+approximations+via+state+decoupling+disturbances.+In+2016+IEEE+55th+Conference+on+Decision+and+Control+%28CDC%29.+IEEE%2C+191-196.^^^Gregory S Chirikjian. 1996. Synthesis of Discretely Actuated Manipulator Workspaces via Harmonic Analysis. In Recent Advances in Robot Kinematics. Springer, 169-178.***http://scholar.google.com/scholar?hl=en&q=Gregory+S+Chirikjian.+1996.+Synthesis+of+Discretely+Actuated+Manipulator+Workspaces+via+Harmonic+Analysis.+In+Recent+Advances+in+Robot+Kinematics.+Springer%2C+169-178.^^^Anders Lyhne Christensen, Rehan O\'Grady, Mauro Birattari, and Marco Dorigo. 2008. Fault detection in autonomous robots based on fault injection and learning. Autonomous Robots 24, 1 ( 2008 ), 49-67.***http://scholar.google.com/scholar?hl=en&q=Anders+Lyhne+Christensen%2C+Rehan+O%27Grady%2C+Mauro+Birattari%2C+and+Marco+Dorigo.+2008.+Fault+detection+in+autonomous+robots+based+on+fault+injection+and+learning.+Autonomous+Robots+24%2C+1+%28+2008+%29%2C+49-67.^^^Alexey Dosovitskiy, German Ros, Felipe Codevilla, Antonio Lopez, and Vladlen Koltun. 2017. CARLA: An open urban driving simulator. arXiv preprint arXiv:1711.03938 ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Alexey+Dosovitskiy%2C+German+Ros%2C+Felipe+Codevilla%2C+Antonio+Lopez%2C+and+Vladlen+Koltun.+2017.+CARLA%3A+An+open+urban+driving+simulator.+arXiv+preprint+arXiv%3A1711.03938+%28+2017+%29.^^^Tommaso Dreossi, Alexandre Donzé, and Sanjit A. Seshia. 2017. Compositional Falsification of Cyber-Physical Systems with Machine Learning Components. arXiv: 1703.00978 [cs.SY]***http://scholar.google.com/scholar?hl=en&q=Tommaso+Dreossi%2C+Alexandre+Donz%C3%A9%2C+and+Sanjit+A.+Seshia.+2017.+Compositional+Falsification+of+Cyber-Physical+Systems+with+Machine+Learning+Components.+arXiv%3A+1703.00978+%5Bcs.SY%5D^^^Tommaso Dreossi, Shromona Ghosh, Alberto Sangiovanni-Vincentelli, and Sanjit A. Seshia. 2017. Systematic Testing of Convolutional Neural Networks for Autonomous Driving. arXiv: 1708.03309 [cs.CV]***http://scholar.google.com/scholar?hl=en&q=Tommaso+Dreossi%2C+Shromona+Ghosh%2C+Alberto+Sangiovanni-Vincentelli%2C+and+Sanjit+A.+Seshia.+2017.+Systematic+Testing+of+Convolutional+Neural+Networks+for+Autonomous+Driving.+arXiv%3A+1708.03309+%5Bcs.CV%5D^^^Homer D Eckhardt. 1998. Kinematic design of machines and mechanisms. McGraw-Hill New York.***http://scholar.google.com/scholar?hl=en&q=Homer+D+Eckhardt.+1998.+Kinematic+design+of+machines+and+mechanisms.+McGraw-Hill+New+York.^^^Unity Game Engine. 2008. Unity game engine-oficial site. Online][Cited: October 9, 2008.] http://unity3d. com ( 2008 ), 1534-4320.***http://scholar.google.com/scholar?hl=en&q=Unity+Game+Engine.+2008.+Unity+game+engine-oficial+site.+Online%5D%5BCited%3A+October+9%2C+2008.%5D+http%3A%2F%2Funity3d.+com+%28+2008+%29%2C+1534-4320.^^^Michelle Chaka Eric Thorn, Shawn Kimmel. 2018. A Framework for Automated Driving System Testable Cases and Scenarios. https://www.nhtsa.gov/sites/nhtsa. dot.gov/files/documents/13882-automateddrivingsystems_092618_v1a_tag.pdf.***http://scholar.google.com/scholar?hl=en&q=Michelle+Chaka+Eric+Thorn%2C+Shawn+Kimmel.+2018.+A+Framework+for+Automated+Driving+System+Testable+Cases+and+Scenarios.+https%3A%2F%2Fwww.nhtsa.gov%2Fsites%2Fnhtsa.+dot.gov%2Ffiles%2Fdocuments%2F13882-automateddrivingsystems_092618_v1a_tag.pdf.^^^Artur Filipowicz, Jeremiah Liu, and Alain Kornhauser. 2017. Learning to recognize distance to stop signs using the virtual world of Grand Theft Auto 5. Technical Report.***http://scholar.google.com/scholar?hl=en&q=Artur+Filipowicz%2C+Jeremiah+Liu%2C+and+Alain+Kornhauser.+2017.+Learning+to+recognize+distance+to+stop+signs+using+the+virtual+world+of+Grand+Theft+Auto+5.+Technical+Report.^^^Daniel J Fremont, Tommaso Dreossi, Shromona Ghosh, Xiangyu Yue, Alberto L Sangiovanni-Vincentelli, and Sanjit A Seshia. 2019. Scenic: a language for scenario specification and scene generation. In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation. 63-78.***http://scholar.google.com/scholar?hl=en&q=Daniel+J+Fremont%2C+Tommaso+Dreossi%2C+Shromona+Ghosh%2C+Xiangyu+Yue%2C+Alberto+L+Sangiovanni-Vincentelli%2C+and+Sanjit+A+Seshia.+2019.+Scenic%3A+a+language+for+scenario+specification+and+scene+generation.+In+Proceedings+of+the+40th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation.+63-78.^^^Daniel J Fremont, Xiangyu Yue, Tommaso Dreossi, Shromona Ghosh, Alberto L Sangiovanni-Vincentelli, and Sanjit A Seshia. 2018. Scenic: Language-based scene generation. arXiv preprint arXiv: 1809. 09310 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Daniel+J+Fremont%2C+Xiangyu+Yue%2C+Tommaso+Dreossi%2C+Shromona+Ghosh%2C+Alberto+L+Sangiovanni-Vincentelli%2C+and+Sanjit+A+Seshia.+2018.+Scenic%3A+Language-based+scene+generation.+arXiv+preprint+arXiv%3A+1809.+09310+%28+2018+%29.^^^Alessio Gambi, Tri Huynh, and Gordon Fraser. 2019. Generating efective test cases for self-driving cars from police reports. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, 257-267.***http://scholar.google.com/scholar?hl=en&q=Alessio+Gambi%2C+Tri+Huynh%2C+and+Gordon+Fraser.+2019.+Generating+efective+test+cases+for+self-driving+cars+from+police+reports.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+ACM%2C+257-267.^^^Alessio Gambi, Marc Mueller, and Gordon Fraser. 2019. Automatically testing selfdriving cars with search-based procedural content generation. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 318-328.***http://scholar.google.com/scholar?hl=en&q=Alessio+Gambi%2C+Marc+Mueller%2C+and+Gordon+Fraser.+2019.+Automatically+testing+selfdriving+cars+with+search-based+procedural+content+generation.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+318-328.^^^Maxime Gautier. 1986. Identification of robots dynamics. IFAC Proceedings Volumes 19, 14 ( 1986 ), 125-130.***http://scholar.google.com/scholar?hl=en&q=Maxime+Gautier.+1986.+Identification+of+robots+dynamics.+IFAC+Proceedings+Volumes+19%2C+14+%28+1986+%29%2C+125-130.^^^Aurélien Géron. 2017. Hands-on machine learning with Scikit-Learn and TensorFlow: concepts, tools, and techniques to build intelligent systems. \" O\'Reilly Media, Inc.\".***http://scholar.google.com/scholar?hl=en&q=Aur%C3%A9lien+G%C3%A9ron.+2017.+Hands-on+machine+learning+with+Scikit-Learn+and+TensorFlow%3A+concepts%2C+tools%2C+and+techniques+to+build+intelligent+systems.+%22+O%27Reilly+Media%2C+Inc.%22.^^^Antoine Girard and Colas Le Guernic. 2008. Eficient reachability analysis for linear systems using support functions. IFAC Proceedings Volumes 41, 2 ( 2008 ), 8966-8971.***http://scholar.google.com/scholar?hl=en&q=Antoine+Girard+and+Colas+Le+Guernic.+2008.+Eficient+reachability+analysis+for+linear+systems+using+support+functions.+IFAC+Proceedings+Volumes+41%2C+2+%28+2008+%29%2C+8966-8971.^^^Winter Guerra, Ezra Tal, Varun Murali, Gilhyun Ryou, and Sertac Karaman. 2019. FlightGoggles: Photorealistic Sensor Simulation for Perception-driven Robotics using Photogrammetry and Virtual Reality. arXiv preprint arXiv: 1905. 11377 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Winter+Guerra%2C+Ezra+Tal%2C+Varun+Murali%2C+Gilhyun+Ryou%2C+and+Sertac+Karaman.+2019.+FlightGoggles%3A+Photorealistic+Sensor+Simulation+for+Perception-driven+Robotics+using+Photogrammetry+and+Virtual+Reality.+arXiv+preprint+arXiv%3A+1905.+11377+%28+2019+%29.^^^WuLing Huang, Kunfeng Wang, Yisheng Lv, and FengHua Zhu. 2016. Autonomous vehicles testing methods review. In 2016 IEEE 19th International Conference on Intelligent Transportation Systems (ITSC). IEEE, 163-168.***http://scholar.google.com/scholar?hl=en&q=WuLing+Huang%2C+Kunfeng+Wang%2C+Yisheng+Lv%2C+and+FengHua+Zhu.+2016.+Autonomous+vehicles+testing+methods+review.+In+2016+IEEE+19th+International+Conference+on+Intelligent+Transportation+Systems+%28ITSC%29.+IEEE%2C+163-168.^^^Inseok Hwang, Dušan M Stipanović, and Claire J Tomlin. 2005. Polytopic approximations of reachable sets applied to linear dynamic games and a class of nonlinear systems. In Advances in control, communication networks, and transportation systems. Springer, 3-19.***http://scholar.google.com/scholar?hl=en&q=Inseok+Hwang%2C+Du%C5%A1an+M+Stipanovi%C4%87%2C+and+Claire+J+Tomlin.+2005.+Polytopic+approximations+of+reachable+sets+applied+to+linear+dynamic+games+and+a+class+of+nonlinear+systems.+In+Advances+in+control%2C+communication+networks%2C+and+transportation+systems.+Springer%2C+3-19.^^^Jackie Wattles. 2019. CNN Business-Tesla on Autopilot crashed when the driver\'s hands were not detected on the wheel. https://www.cnn.com/ 2019 /05/ 16/cars/tesla-autopilot-crash/index.html. [Online; accessed 5-November-2019].***http://scholar.google.com/scholar?hl=en&q=Jackie+Wattles.+2019.+CNN+Business-Tesla+on+Autopilot+crashed+when+the+driver%27s+hands+were+not+detected+on+the+wheel.+https%3A%2F%2Fwww.cnn.com%2F+2019+%2F05%2F+16%2Fcars%2Ftesla-autopilot-crash%2Findex.html.+%5BOnline%3B+accessed+5-November-2019%5D.^^^Reza N Jazar. 2010. Theory of applied robotics: kinematics, dynamics, and control. Springer Science & Business Media.***http://scholar.google.com/scholar?hl=en&q=Reza+N+Jazar.+2010.+Theory+of+applied+robotics%3A+kinematics%2C+dynamics%2C+and+control.+Springer+Science+%26+Business+Media.^^^Matthew Johnson-Roberson, Charles Barto, Rounak Mehta, Sharath Nittur Sridhar, Karl Rosaen, and Ram Vasudevan. 2016. Driving in the matrix: Can virtual worlds replace human-generated annotations for real world tasks? arXiv preprint arXiv: 1610. 01983 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Matthew+Johnson-Roberson%2C+Charles+Barto%2C+Rounak+Mehta%2C+Sharath+Nittur+Sridhar%2C+Karl+Rosaen%2C+and+Ram+Vasudevan.+2016.+Driving+in+the+matrix%3A+Can+virtual+worlds+replace+human-generated+annotations+for+real+world+tasks%3F+arXiv+preprint+arXiv%3A+1610.+01983+%28+2016+%29.^^^Lydia E Kavraki, Petr Svestka, J-C Latombe, and Mark H Overmars. 1996. Probabilistic roadmaps for path planning in high-dimensional configuration spaces. IEEE transactions on Robotics and Automation 12, 4 ( 1996 ), 566-580.***http://scholar.google.com/scholar?hl=en&q=Lydia+E+Kavraki%2C+Petr+Svestka%2C+J-C+Latombe%2C+and+Mark+H+Overmars.+1996.+Probabilistic+roadmaps+for+path+planning+in+high-dimensional+configuration+spaces.+IEEE+transactions+on+Robotics+and+Automation+12%2C+4+%28+1996+%29%2C+566-580.^^^BaekGyu Kim, Akshay Jarandikar, Jonathan Shum, Shinichi Shiraishi, and Masahiro Yamaura. 2016. The SMT-based automatic road network generation in vehicle simulation environment. In 2016 International Conference on Embedded Software (EMSOFT). IEEE, 1-10.***http://scholar.google.com/scholar?hl=en&q=BaekGyu+Kim%2C+Akshay+Jarandikar%2C+Jonathan+Shum%2C+Shinichi+Shiraishi%2C+and+Masahiro+Yamaura.+2016.+The+SMT-based+automatic+road+network+generation+in+vehicle+simulation+environment.+In+2016+International+Conference+on+Embedded+Software+%28EMSOFT%29.+IEEE%2C+1-10.^^^Taegyu Kim, Chung Hwan Kim, Junghwan Rhee, Fan Fei, Zhan Tu, Gregory Walkup, Xiangyu Zhang, Xinyan Deng, and Dongyan Xu. 2019. RVFUZZER: ifnding input validation bugs in robotic vehicles through control-guided testing. In 28th {USENIX} Security Symposium ({USENIX} Security 19). 425-442.***http://scholar.google.com/scholar?hl=en&q=Taegyu+Kim%2C+Chung+Hwan+Kim%2C+Junghwan+Rhee%2C+Fan+Fei%2C+Zhan+Tu%2C+Gregory+Walkup%2C+Xiangyu+Zhang%2C+Xinyan+Deng%2C+and+Dongyan+Xu.+2019.+RVFUZZER%3A+ifnding+input+validation+bugs+in+robotic+vehicles+through+control-guided+testing.+In+28th+%7BUSENIX%7D+Security+Symposium+%28%7BUSENIX%7D+Security+19%29.+425-442.^^^Philip Koopman and Michael Wagner. 2016. Challenges in autonomous vehicle testing and validation. SAE International Journal of Transportation Safety 4, 1 ( 2016 ), 15-24.***http://scholar.google.com/scholar?hl=en&q=Philip+Koopman+and+Michael+Wagner.+2016.+Challenges+in+autonomous+vehicle+testing+and+validation.+SAE+International+Journal+of+Transportation+Safety+4%2C+1+%28+2016+%29%2C+15-24.^^^Kurt Barnhart. 2015. Partners Kansas State University Salina and Westar Energy build one of the largest enclosed flight facilities for UAS in the nation. https: //www.k-state.edu/media/newsreleases/oct15/pavilion101415.html. [Online; accessed 22-August-2019].***http://scholar.google.com/scholar?hl=en&q=Kurt+Barnhart.+2015.+Partners+Kansas+State+University+Salina+and+Westar+Energy+build+one+of+the+largest+enclosed+flight+facilities+for+UAS+in+the+nation.+https%3A+%2F%2Fwww.k-state.edu%2Fmedia%2Fnewsreleases%2Foct15%2Fpavilion101415.html.+%5BOnline%3B+accessed+22-August-2019%5D.^^^Alex A Kurzhanskiy and Pravin Varaiya. 2006. Ellipsoidal toolbox (ET). In Proceedings of the 45th IEEE Conference on Decision and Control. IEEE, 1498-1503.***http://scholar.google.com/scholar?hl=en&q=Alex+A+Kurzhanskiy+and+Pravin+Varaiya.+2006.+Ellipsoidal+toolbox+%28ET%29.+In+Proceedings+of+the+45th+IEEE+Conference+on+Decision+and+Control.+IEEE%2C+1498-1503.^^^Xuehua Liao, Zhousen Zhu, Yusong Yan, and Tao Lv. 2012. Trafic accident reconstruction technology research and simulation realization. In 2012 IEEE Symposium on Electrical & Electronics Engineering (EEESYM). IEEE, 152-155.***http://scholar.google.com/scholar?hl=en&q=Xuehua+Liao%2C+Zhousen+Zhu%2C+Yusong+Yan%2C+and+Tao+Lv.+2012.+Trafic+accident+reconstruction+technology+research+and+simulation+realization.+In+2012+IEEE+Symposium+on+Electrical+%26+Electronics+Engineering+%28EEESYM%29.+IEEE%2C+152-155.^^^J. Liebelt and C. Schmid. 2010. Multi-view object class detection with a 3D geometric model. In 2010 IEEE Computer Society Conference on Computer Vision and Pattern Recognition. 1688-1695.***http://scholar.google.com/scholar?hl=en&q=J.+Liebelt+and+C.+Schmid.+2010.+Multi-view+object+class+detection+with+a+3D+geometric+model.+In+2010+IEEE+Computer+Society+Conference+on+Computer+Vision+and+Pattern+Recognition.+1688-1695.^^^Daniele Loiacono, Luigi Cardamone, and Pier Luca Lanzi. 2011. Automatic track generation for high-end racing games using evolutionary computation. IEEE Transactions on computational intelligence and AI in games 3, 3 ( 2011 ), 245-259.***http://scholar.google.com/scholar?hl=en&q=Daniele+Loiacono%2C+Luigi+Cardamone%2C+and+Pier+Luca+Lanzi.+2011.+Automatic+track+generation+for+high-end+racing+games+using+evolutionary+computation.+IEEE+Transactions+on+computational+intelligence+and+AI+in+games+3%2C+3+%28+2011+%29%2C+245-259.^^^Massachusetts Institute of Technology. 2019. Flight Goggles. https://flightgoggles. mit.edu. [Online; accessed 01-January-2020].***http://scholar.google.com/scholar?hl=en&q=Massachusetts+Institute+of+Technology.+2019.+Flight+Goggles.+https%3A%2F%2Fflightgoggles.+mit.edu.+%5BOnline%3B+accessed+01-January-2020%5D.^^^Mathworks. 2020. Matlab and Python. https://www.mathworks.com/products/ matlab/matlab-and-python.html. [Online; accessed 26-January-2020].***http://scholar.google.com/scholar?hl=en&q=Mathworks.+2020.+Matlab+and+Python.+https%3A%2F%2Fwww.mathworks.com%2Fproducts%2F+matlab%2Fmatlab-and-python.html.+%5BOnline%3B+accessed+26-January-2020%5D.^^^Reza Matinnejad, Shiva Nejati, Lionel Briand, Thomas Bruckmann, and Claude Poull. 2013. Automated model-in-the-loop testing of continuous controllers using search. In International Symposium on Search Based Software Engineering. Springer, 141-157.***http://scholar.google.com/scholar?hl=en&q=Reza+Matinnejad%2C+Shiva+Nejati%2C+Lionel+Briand%2C+Thomas+Bruckmann%2C+and+Claude+Poull.+2013.+Automated+model-in-the-loop+testing+of+continuous+controllers+using+search.+In+International+Symposium+on+Search+Based+Software+Engineering.+Springer%2C+141-157.^^^Mitch McCafrey. 2017. Unreal Engine VR Cookbook: Developing Virtual Reality with UE4. Addison-Wesley Professional. Chater 7 : Character Inverse Kinematics.***http://scholar.google.com/scholar?hl=en&q=Mitch+McCafrey.+2017.+Unreal+Engine+VR+Cookbook%3A+Developing+Virtual+Reality+with+UE4.+Addison-Wesley+Professional.+Chater+7+%3A+Character+Inverse+Kinematics.^^^Daniel Mellinger and Vijay Kumar. 2011. Minimum snap trajectory generation and control for quadrotors. In 2011 IEEE International Conference on Robotics and Automation. IEEE, 2520-2525.***http://scholar.google.com/scholar?hl=en&q=Daniel+Mellinger+and+Vijay+Kumar.+2011.+Minimum+snap+trajectory+generation+and+control+for+quadrotors.+In+2011+IEEE+International+Conference+on+Robotics+and+Automation.+IEEE%2C+2520-2525.^^^microdrones. 2019. Microdrones Inspection Service. https://www.microdrones. com/. [Online; accessed 5-November-2019].***http://scholar.google.com/scholar?hl=en&q=microdrones.+2019.+Microdrones+Inspection+Service.+https%3A%2F%2Fwww.microdrones.+com%2F.+%5BOnline%3B+accessed+5-November-2019%5D.^^^Ian M Mitchell, Alexandre M Bayen, and Claire J Tomlin. 2005. A time-dependent Hamilton-Jacobi formulation of reachable sets for continuous dynamic games. IEEE Transactions on automatic control 50, 7 ( 2005 ), 947-957.***http://scholar.google.com/scholar?hl=en&q=Ian+M+Mitchell%2C+Alexandre+M+Bayen%2C+and+Claire+J+Tomlin.+2005.+A+time-dependent+Hamilton-Jacobi+formulation+of+reachable+sets+for+continuous+dynamic+games.+IEEE+Transactions+on+automatic+control+50%2C+7+%28+2005+%29%2C+947-957.^^^Galen E Mullins, Paul G Stankiewicz, and Satyandra K Gupta. 2017. Automated generation of diverse and challenging scenarios for test and evaluation of autonomous vehicles. In 2017 IEEE International Conference on Robotics and Automation (ICRA). IEEE, 1443-1450.***http://scholar.google.com/scholar?hl=en&q=Galen+E+Mullins%2C+Paul+G+Stankiewicz%2C+and+Satyandra+K+Gupta.+2017.+Automated+generation+of+diverse+and+challenging+scenarios+for+test+and+evaluation+of+autonomous+vehicles.+In+2017+IEEE+International+Conference+on+Robotics+and+Automation+%28ICRA%29.+IEEE%2C+1443-1450.^^^Nicole Casal Moore. 2019. M-Air autonomous aerial vehicle outdoor lab opens. https://news.umich.edu/m-air-autonomous-aerial-vehicle-outdoor-labopens/. [Online; accessed 22-August-2019].***http://scholar.google.com/scholar?hl=en&q=Nicole+Casal+Moore.+2019.+M-Air+autonomous+aerial+vehicle+outdoor+lab+opens.+https%3A%2F%2Fnews.umich.edu%2Fm-air-autonomous-aerial-vehicle-outdoor-labopens%2F.+%5BOnline%3B+accessed+22-August-2019%5D.^^^Matthew O\'Kelly, Aman Sinha, Hongseok Namkoong, John Duchi, and Russ Tedrake. 2018. Scalable End-to-End Autonomous Vehicle Testing via Rare-event Simulation. arXiv: 1811. 00145 [cs.LG]***http://scholar.google.com/scholar?hl=en&q=Matthew+O%27Kelly%2C+Aman+Sinha%2C+Hongseok+Namkoong%2C+John+Duchi%2C+and+Russ+Tedrake.+2018.+Scalable+End-to-End+Autonomous+Vehicle+Testing+via+Rare-event+Simulation.+arXiv%3A+1811.+00145+%5Bcs.LG%5D^^^Parrot. 2019. Anafi. https://www.parrot.com/us/drones/anafi. [Online; accessed 11-November-2019].***http://scholar.google.com/scholar?hl=en&q=Parrot.+2019.+Anafi.+https%3A%2F%2Fwww.parrot.com%2Fus%2Fdrones%2Fanafi.+%5BOnline%3B+accessed+11-November-2019%5D.^^^Parrot. 2019. Bebop 2. https://beamng.gmbh/research/. [Online; accessed 26-January-2020].***http://scholar.google.com/scholar?hl=en&q=Parrot.+2019.+Bebop+2.+https%3A%2F%2Fbeamng.gmbh%2Fresearch%2F.+%5BOnline%3B+accessed+26-January-2020%5D.^^^Parrot. 2019. Olympe Documentation. https://developer.parrot.com/docs/ olympe/. [Online; accessed 20-November-2019].***http://scholar.google.com/scholar?hl=en&q=Parrot.+2019.+Olympe+Documentation.+https%3A%2F%2Fdeveloper.parrot.com%2Fdocs%2F+olympe%2F.+%5BOnline%3B+accessed+20-November-2019%5D.^^^Parrot. 2019. Parrot-Sphinx. https://developer.parrot.com/docs/sphinx/ whatissphinx.html. [Online; accessed 22-August-2019].***http://scholar.google.com/scholar?hl=en&q=Parrot.+2019.+Parrot-Sphinx.+https%3A%2F%2Fdeveloper.parrot.com%2Fdocs%2Fsphinx%2F+whatissphinx.html.+%5BOnline%3B+accessed+22-August-2019%5D.^^^F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12 ( 2011 ), 2825-2830.***http://scholar.google.com/scholar?hl=en&q=F.+Pedregosa%2C+G.+Varoquaux%2C+A.+Gramfort%2C+V.+Michel%2C+B.+Thirion%2C+O.+Grisel%2C+M.+Blondel%2C+P.+Prettenhofer%2C+R.+Weiss%2C+V.+Dubourg%2C+J.+Vanderplas%2C+A.+Passos%2C+D.+Cournapeau%2C+M.+Brucher%2C+M.+Perrot%2C+and+E.+Duchesnay.+2011.+Scikit-learn%3A+Machine+Learning+in+Python.+Journal+of+Machine+Learning+Research+12+%28+2011+%29%2C+2825-2830.^^^Francisca Rosique, Pedro Navarro Lorente, Carlos Fernandez, and Antonio Padilla. 2019. A Systematic Review of Perception System and Simulators for Autonomous Vehicles Research. Sensors 19 (02 2019 ), 648. https://doi.org/10.3390/s19030648 ***http://scholar.google.com/scholar?hl=en&q=Francisca+Rosique%2C+Pedro+Navarro+Lorente%2C+Carlos+Fernandez%2C+and+Antonio+Padilla.+2019.+A+Systematic+Review+of+Perception+System+and+Simulators+for+Autonomous+Vehicles+Research.+Sensors+19+%2802+2019+%29%2C+648.+https%3A%2F%2Fdoi.org%2F10.3390%2Fs19030648+10.3390%2Fs19030648^^^Atrisha Sarkar and Krzysztof Czarnecki. 2019. A behavior driven approach for sampling rare event situations for autonomous vehicles. CoRR abs/ 1903.01539 ( 2019 ). arXiv: 1903.01539 http://arxiv.org/abs/ 1903.01539***http://scholar.google.com/scholar?hl=en&q=Atrisha+Sarkar+and+Krzysztof+Czarnecki.+2019.+A+behavior+driven+approach+for+sampling+rare+event+situations+for+autonomous+vehicles.+CoRR+abs%2F+1903.01539+%28+2019+%29.+arXiv%3A+1903.01539+http%3A%2F%2Farxiv.org%2Fabs%2F+1903.01539^^^Thomas Sayre-McCord, Winter Guerra, Amado Antonini, Jasper Arneberg, Austin Brown, Guilherme Cavalheiro, Yajun Fang, Alex Gorodetsky, Dave McCoy, Sebastian Quilter, et al. 2018. Visual-inertial navigation algorithm development using photorealistic camera simulation in the loop. In 2018 IEEE International Conference on Robotics and Automation (ICRA). IEEE, 2566-2573.***http://scholar.google.com/scholar?hl=en&q=Thomas+Sayre-McCord%2C+Winter+Guerra%2C+Amado+Antonini%2C+Jasper+Arneberg%2C+Austin+Brown%2C+Guilherme+Cavalheiro%2C+Yajun+Fang%2C+Alex+Gorodetsky%2C+Dave+McCoy%2C+Sebastian+Quilter%2C+et+al.+2018.+Visual-inertial+navigation+algorithm+development+using+photorealistic+camera+simulation+in+the+loop.+In+2018+IEEE+International+Conference+on+Robotics+and+Automation+%28ICRA%29.+IEEE%2C+2566-2573.^^^Shital Shah, Debadeepta Dey, Chris Lovett, and Ashish Kapoor. 2018. Airsim: High-fidelity visual and physical simulation for autonomous vehicles. In Field and service robotics. Springer, 621-635.***http://scholar.google.com/scholar?hl=en&q=Shital+Shah%2C+Debadeepta+Dey%2C+Chris+Lovett%2C+and+Ashish+Kapoor.+2018.+Airsim%3A+High-fidelity+visual+and+physical+simulation+for+autonomous+vehicles.+In+Field+and+service+robotics.+Springer%2C+621-635.^^^Thierry Sotiropoulos, Jérémie Guiochet, Félix Ingrand, and Hélene Waeselynck. 2016. Virtual worlds for testing robot navigation: a study on the dificulty level. In 2016 12th European Dependable Computing Conference (EDCC). IEEE, 153-160.***http://scholar.google.com/scholar?hl=en&q=Thierry+Sotiropoulos%2C+J%C3%A9r%C3%A9mie+Guiochet%2C+F%C3%A9lix+Ingrand%2C+and+H%C3%A9lene+Waeselynck.+2016.+Virtual+worlds+for+testing+robot+navigation%3A+a+study+on+the+dificulty+level.+In+2016+12th+European+Dependable+Computing+Conference+%28EDCC%29.+IEEE%2C+153-160.^^^Dimitar Stanev and Konstantinos Moustakas. 2019. Modeling musculoskeletal kinematic and dynamic redundancy using null space projection. PloS one 14, 1 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Dimitar+Stanev+and+Konstantinos+Moustakas.+2019.+Modeling+musculoskeletal+kinematic+and+dynamic+redundancy+using+null+space+projection.+PloS+one+14%2C+1+%28+2019+%29.^^^Stanford Artificial Intelligence Laboratory et al. [n.d.]. Robotic Operating System. https://www.ros.org***http://scholar.google.com/scholar?hl=en&q=Stanford+Artificial+Intelligence+Laboratory+et+al.+%5Bn.d.%5D.+Robotic+Operating+System.+https%3A%2F%2Fwww.ros.org^^^Jan Erik Stellet, Marc René Zofka, Jan Schumacher, Thomas Schamm, Frank Niewels, and J Marius Zöllner. 2015. Testing of advanced driver assistance towards automated driving: A survey and taxonomy on existing approaches and open questions. In 2015 IEEE 18th International Conference on Intelligent Transportation Systems. IEEE, 1455-1462.***http://scholar.google.com/scholar?hl=en&q=Jan+Erik+Stellet%2C+Marc+Ren%C3%A9+Zofka%2C+Jan+Schumacher%2C+Thomas+Schamm%2C+Frank+Niewels%2C+and+J+Marius+Z%C3%B6llner.+2015.+Testing+of+advanced+driver+assistance+towards+automated+driving%3A+A+survey+and+taxonomy+on+existing+approaches+and+open+questions.+In+2015+IEEE+18th+International+Conference+on+Intelligent+Transportation+Systems.+IEEE%2C+1455-1462.^^^TASS International. 2019. PreScan-A Simulation and Verification Environment for Intelligent Vehicle Systems. https://tass.plm.automation.siemens.com/prescan. [Online; accessed 22-August-2019].***http://scholar.google.com/scholar?hl=en&q=TASS+International.+2019.+PreScan-A+Simulation+and+Verification+Environment+for+Intelligent+Vehicle+Systems.+https%3A%2F%2Ftass.plm.automation.siemens.com%2Fprescan.+%5BOnline%3B+accessed+22-August-2019%5D.^^^Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi Ray. 2018. Deeptest: Automated testing of deep-neural-network-driven autonomous cars. In Proceedings of the 40th international conference on software engineering. 303-314.***http://scholar.google.com/scholar?hl=en&q=Yuchi+Tian%2C+Kexin+Pei%2C+Suman+Jana%2C+and+Baishakhi+Ray.+2018.+Deeptest%3A+Automated+testing+of+deep-neural-network-driven+autonomous+cars.+In+Proceedings+of+the+40th+international+conference+on+software+engineering.+303-314.^^^C. E. Tuncali, G. Fainekos, H. Ito, and J. Kapinski. 2018. Simulation-based Adversarial Test Generation for Autonomous Vehicles with Machine Learning Components. In 2018 IEEE Intelligent Vehicles Symposium (IV). 1555-1562.***http://scholar.google.com/scholar?hl=en&q=C.+E.+Tuncali%2C+G.+Fainekos%2C+H.+Ito%2C+and+J.+Kapinski.+2018.+Simulation-based+Adversarial+Test+Generation+for+Autonomous+Vehicles+with+Machine+Learning+Components.+In+2018+IEEE+Intelligent+Vehicles+Symposium+%28IV%29.+1555-1562.^^^Cumhur Erkan Tuncali, Theodore P Pavlic, and Georgios Fainekos. 2016. Utilizing S-TaLiRo as an automatic test generation framework for autonomous vehicles. In 2016 IEEE 19th International Conference on Intelligent Transportation Systems (ITSC). IEEE, 1470-1475.***http://scholar.google.com/scholar?hl=en&q=Cumhur+Erkan+Tuncali%2C+Theodore+P+Pavlic%2C+and+Georgios+Fainekos.+2016.+Utilizing+S-TaLiRo+as+an+automatic+test+generation+framework+for+autonomous+vehicles.+In+2016+IEEE+19th+International+Conference+on+Intelligent+Transportation+Systems+%28ITSC%29.+IEEE%2C+1470-1475.^^^University of Michigan. 2020. Mcity. https://mcity.umich.edu. [Online; accessed 26-January-2020].***http://scholar.google.com/scholar?hl=en&q=University+of+Michigan.+2020.+Mcity.+https%3A%2F%2Fmcity.umich.edu.+%5BOnline%3B+accessed+26-January-2020%5D.^^^Kimon P Valavanis and George J Vachtsevanos. 2015. Handbook of unmanned aerial vehicles. Springer.***http://scholar.google.com/scholar?hl=en&q=Kimon+P+Valavanis+and+George+J+Vachtsevanos.+2015.+Handbook+of+unmanned+aerial+vehicles.+Springer.^^^David Vazquez, Antonio M Lopez, Javier Marin, Daniel Ponsa, and David Geronimo. 2013. Virtual and real world adaptation for pedestrian detection. IEEE transactions on pattern analysis and machine intelligence 36, 4 ( 2013 ), 797-809.***http://scholar.google.com/scholar?hl=en&q=David+Vazquez%2C+Antonio+M+Lopez%2C+Javier+Marin%2C+Daniel+Ponsa%2C+and+David+Geronimo.+2013.+Virtual+and+real+world+adaptation+for+pedestrian+detection.+IEEE+transactions+on+pattern+analysis+and+machine+intelligence+36%2C+4+%28+2013+%29%2C+797-809.^^^Abraham P Vinod, Baisravan HomChaudhuri, and Meeko MK Oishi. 2017. Forward stochastic reachability analysis for uncontrolled linear systems using fourier transforms. In Proceedings of the 20th International Conference on Hybrid Systems: Computation and Control. ACM, 35-44.***http://scholar.google.com/scholar?hl=en&q=Abraham+P+Vinod%2C+Baisravan+HomChaudhuri%2C+and+Meeko+MK+Oishi.+2017.+Forward+stochastic+reachability+analysis+for+uncontrolled+linear+systems+using+fourier+transforms.+In+Proceedings+of+the+20th+International+Conference+on+Hybrid+Systems%3A+Computation+and+Control.+ACM%2C+35-44.^^^Virginia Tech. 2018. Virginia Tech Drone Park oficially open. https://vtnews.vt. edu/articles/2018/04/ictas-droneparkopens. html. [Online; accessed 22-August2019].***http://scholar.google.com/scholar?hl=en&q=Virginia+Tech.+2018.+Virginia+Tech+Drone+Park+oficially+open.+https%3A%2F%2Fvtnews.vt.+edu%2Farticles%2F2018%2F04%2Fictas-droneparkopens.+html.+%5BOnline%3B+accessed+22-August2019%5D.^^^Waymo LLC. 2019. Waymo-Self Driving Car. https://waymo.com. [Online; accessed 5-November-2019].***http://scholar.google.com/scholar?hl=en&q=Waymo+LLC.+2019.+Waymo-Self+Driving+Car.+https%3A%2F%2Fwaymo.com.+%5BOnline%3B+accessed+5-November-2019%5D.^^^Waymo Team. 2018. Where the next 10 million miles will take us. https://medium. com/waymo/where-the-next-10-million-miles-will-take-us-de51bebb67d3. [Online; accessed 1-December-2019].***http://scholar.google.com/scholar?hl=en&q=Waymo+Team.+2018.+Where+the+next+10+million+miles+will+take+us.+https%3A%2F%2Fmedium.+com%2Fwaymo%2Fwhere-the-next-10-million-miles-will-take-us-de51bebb67d3.+%5BOnline%3B+accessed+1-December-2019%5D.^^^Edmund Taylor Whittaker. 1988. A treatise on the analytical dynamics of particles and rigid bodies. Cambridge university press.***http://scholar.google.com/scholar?hl=en&q=Edmund+Taylor+Whittaker.+1988.+A+treatise+on+the+analytical+dynamics+of+particles+and+rigid+bodies.+Cambridge+university+press.^^^Thomas Wallace Wright. 1898. Elements of mechanics including kinematics, kinetics and statics, with applications. D. Van Nostrand Company.***http://scholar.google.com/scholar?hl=en&q=Thomas+Wallace+Wright.+1898.+Elements+of+mechanics+including+kinematics%2C+kinetics+and+statics%2C+with+applications.+D.+Van+Nostrand+Company.^^^Yaroslav S. Yatskiv. 2007. Kinematics and Physics of Celestial Bodies. https: //www.springer.com/journal/11963. [ISSN: 0884-5913 ].***http://scholar.google.com/scholar?hl=en&q=Yaroslav+S.+Yatskiv.+2007.+Kinematics+and+Physics+of+Celestial+Bodies.+https%3A+%2F%2Fwww.springer.com%2Fjournal%2F11963.+%5BISSN%3A+0884-5913+%5D.^^^Esen Yel, Tony X Lin, and Nicola Bezzo. 2017. Reachability-based self-triggered scheduling and replanning of uav operations. In 2017 NASA/ESA Conference on Adaptive Hardware and Systems (AHS). IEEE, 221-228.***http://scholar.google.com/scholar?hl=en&q=Esen+Yel%2C+Tony+X+Lin%2C+and+Nicola+Bezzo.+2017.+Reachability-based+self-triggered+scheduling+and+replanning+of+uav+operations.+In+2017+NASA%2FESA+Conference+on+Adaptive+Hardware+and+Systems+%28AHS%29.+IEEE%2C+221-228.^^^Esen Yel, Tony X Lin, and Nicola Bezzo. 2018. Self-triggered adaptive planning and scheduling of uav operations. In 2018 IEEE International Conference on Robotics and Automation (ICRA). IEEE, 7518-7524.***http://scholar.google.com/scholar?hl=en&q=Esen+Yel%2C+Tony+X+Lin%2C+and+Nicola+Bezzo.+2018.+Self-triggered+adaptive+planning+and+scheduling+of+uav+operations.+In+2018+IEEE+International+Conference+on+Robotics+and+Automation+%28ICRA%29.+IEEE%2C+7518-7524.^^^Mengshi Zhang, Yuqun Zhang, Lingming Zhang, Cong Liu, and Sarfraz Khurshid. 2018. DeepRoad: GAN-based metamorphic testing and input validation framework for autonomous driving systems. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. 132-142.***http://scholar.google.com/scholar?hl=en&q=Mengshi+Zhang%2C+Yuqun+Zhang%2C+Lingming+Zhang%2C+Cong+Liu%2C+and+Sarfraz+Khurshid.+2018.+DeepRoad%3A+GAN-based+metamorphic+testing+and+input+validation+framework+for+autonomous+driving+systems.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+132-142.^^^Zhi Quan Zhou and Liqun Sun. 2019. Metamorphic testing of driverless cars. Commun. ACM 62 ( 03 2019 ), 61-67. https://doi.org/10.1145/3241979 ***http://scholar.google.com/scholar?hl=en&q=Zhi+Quan+Zhou+and+Liqun+Sun.+2019.+Metamorphic+testing+of+driverless+cars.+Commun.+ACM+62+%28+03+2019+%29%2C+61-67.+https%3A%2F%2Fdoi.org%2F10.1145%2F3241979+10.1145%2F3241979^^^');
INSERT INTO `paper_ref` VALUES (29, 52, '2004. Apache Hadoop. Retrieved January 10, 2020 from http://hadoop.apache.org/***http://scholar.google.com/scholar?hl=en&q=2004.+Apache+Hadoop.+Retrieved+January+10%2C+2020+from+http%3A%2F%2Fhadoop.apache.org%2F^^^2014. Mining ecommerce graph data with Apache Spark at Alibaba Taobao. Retrieved January 6, 2020 from https://databricks.com/blog/2014/08/14/mininggraph-data-with-spark-at-alibaba-taobao.html***http://scholar.google.com/scholar?hl=en&q=2014.+Mining+ecommerce+graph+data+with+Apache+Spark+at+Alibaba+Taobao.+Retrieved+January+6%2C+2020+from+https%3A%2F%2Fdatabricks.com%2Fblog%2F2014%2F08%2F14%2Fmininggraph-data-with-spark-at-alibaba-taobao.html^^^2014. SPARK-1266 : Persist factors in implicit ALS. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-1266***http://scholar.google.com/scholar?hl=en&q=2014.+SPARK-1266+%3A+Persist+factors+in+implicit+ALS.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-1266^^^2014. SPARK-2661 : Unpersist last RDD in bagel iteration. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-2661***http://scholar.google.com/scholar?hl=en&q=2014.+SPARK-2661+%3A+Unpersist+last+RDD+in+bagel+iteration.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-2661^^^2014. SPARK-3290 : No unpersist callls in SVDPlusPlus. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-3290***http://scholar.google.com/scholar?hl=en&q=2014.+SPARK-3290+%3A+No+unpersist+callls+in+SVDPlusPlus.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-3290^^^2014. SPARK-3918 : Forget Unpersist in RandomForest.scala(train Method). Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-3918***http://scholar.google.com/scholar?hl=en&q=2014.+SPARK-3918+%3A+Forget+Unpersist+in+RandomForest.scala%28train+Method%29.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-3918^^^2015. Distributed t-SNE via Apache Spark. Retrieved January 10, 2020 from https://github.com/saurfang/spark-tsne/***http://scholar.google.com/scholar?hl=en&q=2015.+Distributed+t-SNE+via+Apache+Spark.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fgithub.com%2Fsaurfang%2Fspark-tsne%2F^^^2015. MCL spark. Retrieved January 10, 2020 from https://github.com/joandre/ MCL_spark/***http://scholar.google.com/scholar?hl=en&q=2015.+MCL+spark.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fgithub.com%2Fjoandre%2F+MCL_spark%2F^^^2015. SPARK-10182: GeneralizedLinearModel doesn\'t unpersist cached data. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-10182***http://scholar.google.com/scholar?hl=en&q=2015.+SPARK-10182%3A+GeneralizedLinearModel+doesn%27t+unpersist+cached+data.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-10182^^^2015. SPARK-7100: GradientBoostTrees leaks a persisted RDD. Retrieved January 23, 2020 from https://issues.apache.org/jira/browse/SPARK-7100***http://scholar.google.com/scholar?hl=en&q=2015.+SPARK-7100%3A+GradientBoostTrees+leaks+a+persisted+RDD.+Retrieved+January+23%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-7100^^^2015. SPARK-7116 : Intermediate RDD cached but never unpersisted. Retrieved January 23, 2020 from https://issues.apache.org/jira/browse/SPARK-7116***http://scholar.google.com/scholar?hl=en&q=2015.+SPARK-7116+%3A+Intermediate+RDD+cached+but+never+unpersisted.+Retrieved+January+23%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-7116^^^2015. Spark betweenness. Retrieved January 10, 2020 from https://github.com/ dmarcous/spark-betweenness/***http://scholar.google.com/scholar?hl=en&q=2015.+Spark+betweenness.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fgithub.com%2F+dmarcous%2Fspark-betweenness%2F^^^2016. SPARK-16697 : Redundant RDD computation in LDAOptimizer. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK-16697***http://scholar.google.com/scholar?hl=en&q=2016.+SPARK-16697+%3A+Redundant+RDD+computation+in+LDAOptimizer.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-16697^^^2016. SPARK-16880 : Improve ANN training, add training data persist if needed. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK16880***http://scholar.google.com/scholar?hl=en&q=2016.+SPARK-16880+%3A+Improve+ANN+training%2C+add+training+data+persist+if+needed.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK16880^^^2016. SPARK-18356: KMeans should cache RDD before training. Retrieved January 23, 2020 from https://issues.apache.org/jira/browse/SPARK-18356***http://scholar.google.com/scholar?hl=en&q=2016.+SPARK-18356%3A+KMeans+should+cache+RDD+before+training.+Retrieved+January+23%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-18356^^^2016. SPARK-18608 : Spark ML algorithms that check RDD cache level for internal caching double-cache data. Retrieved January 10, 2020 from https://issues.apache. org/jira/browse/SPARK-18608***http://scholar.google.com/scholar?hl=en&q=2016.+SPARK-18608+%3A+Spark+ML+algorithms+that+check+RDD+cache+level+for+internal+caching+double-cache+data.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.+org%2Fjira%2Fbrowse%2FSPARK-18608^^^2016. SPARK-29878 : Improper cache strategies in GraphX. Retrieved January 19, 2020 from https://issues.apache.org/jira/browse/SPARK-29878***http://scholar.google.com/scholar?hl=en&q=2016.+SPARK-29878+%3A+Improper+cache+strategies+in+GraphX.+Retrieved+January+19%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-29878^^^2017. Tuning Apache Spark for Large-Scale Workloads. Retrieved January 10, 2020 from https://databricks.com/session/tuning-apache-spark-for-large-scaleworkloads***http://scholar.google.com/scholar?hl=en&q=2017.+Tuning+Apache+Spark+for+Large-Scale+Workloads.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fdatabricks.com%2Fsession%2Ftuning-apache-spark-for-large-scaleworkloads^^^2018. Moving eBay\'s Data Warehouse Over to Apache Spark-Spark as Core ETL Platform at eBay. Retrieved January 10, 2020 from https://databricks.com/session/moving-ebays-data-warehouse-over-toapache-spark-spark-as-core-etl-platform-at-ebay***http://scholar.google.com/scholar?hl=en&q=2018.+Moving+eBay%27s+Data+Warehouse+Over+to+Apache+Spark-Spark+as+Core+ETL+Platform+at+eBay.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fdatabricks.com%2Fsession%2Fmoving-ebays-data-warehouse-over-toapache-spark-spark-as-core-etl-platform-at-ebay^^^2018. SPARK-26006 : mllib Prefixspan. Retrieved January 23, 2020 from https: //issues.apache.org/jira/browse/SPARK-26006***http://scholar.google.com/scholar?hl=en&q=2018.+SPARK-26006+%3A+mllib+Prefixspan.+Retrieved+January+23%2C+2020+from+https%3A+%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK-26006^^^2019. Cache missing in MCL.scala. Retrieved January 25, 2020 from https: //github.com/joandre/MCL_spark/issues/20***http://scholar.google.com/scholar?hl=en&q=2019.+Cache+missing+in+MCL.scala.+Retrieved+January+25%2C+2020+from+https%3A+%2F%2Fgithub.com%2Fjoandre%2FMCL_spark%2Fissues%2F20^^^2019. GraphX | Apache Spark. Retrieved January 10, 2020 from http://spark. apache.org/graphx/***http://scholar.google.com/scholar?hl=en&q=2019.+GraphX+%7C+Apache+Spark.+Retrieved+January+10%2C+2020+from+http%3A%2F%2Fspark.+apache.org%2Fgraphx%2F^^^2019. MLlib | Apache Spark. Retrieved January 10, 2020 from http://spark.apache. org/mllib/***http://scholar.google.com/scholar?hl=en&q=2019.+MLlib+%7C+Apache+Spark.+Retrieved+January+10%2C+2020+from+http%3A%2F%2Fspark.apache.+org%2Fmllib%2F^^^2019. SPARK-29844 : Improper unpersist strategy in ml. recommendation.ASL.train. Retrieved January 10, 2020 from https://issues.apache.org/jira/browse/SPARK29844***http://scholar.google.com/scholar?hl=en&q=2019.+SPARK-29844+%3A+Improper+unpersist+strategy+in+ml.+recommendation.ASL.train.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK29844^^^2019. SPARK-29844 pull request: Improper unpersist strategy in ml. recommendation.ASL.train. Retrieved January 10, 2020 from https://github.com/apache/spark/pull/26469***http://scholar.google.com/scholar?hl=en&q=2019.+SPARK-29844+pull+request%3A+Improper+unpersist+strategy+in+ml.+recommendation.ASL.train.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fgithub.com%2Fapache%2Fspark%2Fpull%2F26469^^^2019. SPARK-29856 : Conditional unnecessary persist on RDDs in ML algorithms. Retrieved January 25, 2020 from https://issues.apache.org/jira/browse/SPARK29856***http://scholar.google.com/scholar?hl=en&q=2019.+SPARK-29856+%3A+Conditional+unnecessary+persist+on+RDDs+in+ML+algorithms.+Retrieved+January+25%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSPARK29856^^^2019. SPARK-29872 pull request: Improper cache strategy in examples. Retrieved January 10, 2020 from https://github.com/apache/spark/pull/26498***http://scholar.google.com/scholar?hl=en&q=2019.+SPARK-29872+pull+request%3A+Improper+cache+strategy+in+examples.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fgithub.com%2Fapache%2Fspark%2Fpull%2F26498^^^2019. Spark JIRA. Retrieved January 10, 2020 from https://issues.apache.org/jira/ projects/SPARK***http://scholar.google.com/scholar?hl=en&q=2019.+Spark+JIRA.+Retrieved+January+10%2C+2020+from+https%3A%2F%2Fissues.apache.org%2Fjira%2F+projects%2FSPARK^^^2019. Spark SQL | Apache Spark. Retrieved January 10, 2020 from http://spark. apache.org/sql/***http://scholar.google.com/scholar?hl=en&q=2019.+Spark+SQL+%7C+Apache+Spark.+Retrieved+January+10%2C+2020+from+http%3A%2F%2Fspark.+apache.org%2Fsql%2F^^^Ganesh Ananthanarayanan, Ali Ghodsi, Andrew Warfield, Dhruba Borthakur, Srikanth Kandula, Scott Shenker, and Ion Stoica. 2012. PACMan: Coordinated memory caching for parallel jobs. In Proceedings of USENIX Symposium on Networked Systems Design and Implementation (NSDI). 267-280.***http://scholar.google.com/scholar?hl=en&q=Ganesh+Ananthanarayanan%2C+Ali+Ghodsi%2C+Andrew+Warfield%2C+Dhruba+Borthakur%2C+Srikanth+Kandula%2C+Scott+Shenker%2C+and+Ion+Stoica.+2012.+PACMan%3A+Coordinated+memory+caching+for+parallel+jobs.+In+Proceedings+of+USENIX+Symposium+on+Networked+Systems+Design+and+Implementation+%28NSDI%29.+267-280.^^^Mariem Brahem, Stephane Lopes, Laurent Yeh, and Karine Zeitouni. 2016. AstroSpark: Towards a distributed data server for big data in astronomy. In Proceedings of SIGSPATIAL PhD Symposium. 3 : 1-3 : 4.***http://scholar.google.com/scholar?hl=en&q=Mariem+Brahem%2C+Stephane+Lopes%2C+Laurent+Yeh%2C+and+Karine+Zeitouni.+2016.+AstroSpark%3A+Towards+a+distributed+data+server+for+big+data+in+astronomy.+In+Proceedings+of+SIGSPATIAL+PhD+Symposium.+3+%3A+1-3+%3A+4.^^^Sigmund Cherem, Lonnie Princehouse, and Radu Rugina. 2007. Practical memory leak detection using guarded value-flow analysis. In Proceeding of ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 480-491.***http://scholar.google.com/scholar?hl=en&q=Sigmund+Cherem%2C+Lonnie+Princehouse%2C+and+Radu+Rugina.+2007.+Practical+memory+leak+detection+using+guarded+value-flow+analysis.+In+Proceeding+of+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28PLDI%29.+480-491.^^^Joseph E Gonzalez, Reynold S Xin, Ankur Dave, Daniel Crankshaw, Michael J Franklin, and Ion Stoica. 2014. GraphX: Graph processing in a distributed dataflow framework. In Proceedings of USENIX Symposium on Operating Systems Design and Implementation (OSDI). 599-613.***http://scholar.google.com/scholar?hl=en&q=Joseph+E+Gonzalez%2C+Reynold+S+Xin%2C+Ankur+Dave%2C+Daniel+Crankshaw%2C+Michael+J+Franklin%2C+and+Ion+Stoica.+2014.+GraphX%3A+Graph+processing+in+a+distributed+dataflow+framework.+In+Proceedings+of+USENIX+Symposium+on+Operating+Systems+Design+and+Implementation+%28OSDI%29.+599-613.^^^Chaorong Guo, Jian Zhang, Jun Yan, Zhiqiang Zhang, and Yanli Zhang. 2013. Characterizing and detecting resource leaks in Android applications. In Proceedings of IEEE/ACM International Conference on Automated Software Engineering (ASE). 389-398.***http://scholar.google.com/scholar?hl=en&q=Chaorong+Guo%2C+Jian+Zhang%2C+Jun+Yan%2C+Zhiqiang+Zhang%2C+and+Yanli+Zhang.+2013.+Characterizing+and+detecting+resource+leaks+in+Android+applications.+In+Proceedings+of+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+389-398.^^^Holden Karau, Andy Konwinski, Patrick Wendell, and Matei Zaharia. 2015. Learning Spark: Lightning-fast big data analysis. O\'Reilly Media, Inc.***http://scholar.google.com/scholar?hl=en&q=Holden+Karau%2C+Andy+Konwinski%2C+Patrick+Wendell%2C+and+Matei+Zaharia.+2015.+Learning+Spark%3A+Lightning-fast+big+data+analysis.+O%27Reilly+Media%2C+Inc.^^^Shen Li, Md Tanvir Amin, Raghu Ganti, Mudhakar Srivatsa, Shanhao Hu, Yiran Zhao, and Tarek Abdelzaher. 2017. Stark: Optimizing in-memory computing for dynamic dataset collections. In Proceedings of IEEE International Conference on Distributed Computing Systems (ICDCS). 103-114.***http://scholar.google.com/scholar?hl=en&q=Shen+Li%2C+Md+Tanvir+Amin%2C+Raghu+Ganti%2C+Mudhakar+Srivatsa%2C+Shanhao+Hu%2C+Yiran+Zhao%2C+and+Tarek+Abdelzaher.+2017.+Stark%3A+Optimizing+in-memory+computing+for+dynamic+dataset+collections.+In+Proceedings+of+IEEE+International+Conference+on+Distributed+Computing+Systems+%28ICDCS%29.+103-114.^^^Xiangrui Meng, Joseph Bradley, Burak Yavuz, Evan Sparks, Shivaram Venkataraman, Davies Liu, Jeremy Freeman, DB Tsai, Manish Amde, Sean Owen, Doris Xin, Reynold Xin, Michael J. Franklin, Reza Zadeh, Matei Zaharia, and Ameet Talwalkar. 2016. MLlib: Machine learning in Apache Spark. Journal of Machine Learning Research 17, 34 ( 2016 ), 1-7.***http://scholar.google.com/scholar?hl=en&q=Xiangrui+Meng%2C+Joseph+Bradley%2C+Burak+Yavuz%2C+Evan+Sparks%2C+Shivaram+Venkataraman%2C+Davies+Liu%2C+Jeremy+Freeman%2C+DB+Tsai%2C+Manish+Amde%2C+Sean+Owen%2C+Doris+Xin%2C+Reynold+Xin%2C+Michael+J.+Franklin%2C+Reza+Zadeh%2C+Matei+Zaharia%2C+and+Ameet+Talwalkar.+2016.+MLlib%3A+Machine+learning+in+Apache+Spark.+Journal+of+Machine+Learning+Research+17%2C+34+%28+2016+%29%2C+1-7.^^^Khanh Nguyen, Lu Fang, Christian Navasca, Guoqing Xu, Brian Demsky, and Shan Lu. 2018. Skyway: Connecting managed heaps in distributed big data systems. In Proceedings of International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). 56-69.***http://scholar.google.com/scholar?hl=en&q=Khanh+Nguyen%2C+Lu+Fang%2C+Christian+Navasca%2C+Guoqing+Xu%2C+Brian+Demsky%2C+and+Shan+Lu.+2018.+Skyway%3A+Connecting+managed+heaps+in+distributed+big+data+systems.+In+Proceedings+of+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems+%28ASPLOS%29.+56-69.^^^Khanh Nguyen, Lu Fang, Guoqing Xu, Brian Demsky, Shan Lu, Sanazsadat Alamian, and Onur Mutlu. 2016. Yak: A high-performance big-data-friendly garbage collector. In Proceedings of USENIX Conference on Operating Systems Design and Implementation (OSDI). 349-365.***http://scholar.google.com/scholar?hl=en&q=Khanh+Nguyen%2C+Lu+Fang%2C+Guoqing+Xu%2C+Brian+Demsky%2C+Shan+Lu%2C+Sanazsadat+Alamian%2C+and+Onur+Mutlu.+2016.+Yak%3A+A+high-performance+big-data-friendly+garbage+collector.+In+Proceedings+of+USENIX+Conference+on+Operating+Systems+Design+and+Implementation+%28OSDI%29.+349-365.^^^Yulei Sui, Ding Ye, and Jingling Xue. 2012. Static memory leak detection using full-sparse value-flow analysis. In Proceedings of International Symposium on Software Testing and Analysis (ISSTA). 254-264.***http://scholar.google.com/scholar?hl=en&q=Yulei+Sui%2C+Ding+Ye%2C+and+Jingling+Xue.+2012.+Static+memory+leak+detection+using+full-sparse+value-flow+analysis.+In+Proceedings+of+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%29.+254-264.^^^Emina Torlak and Satish Chandra. 2010. Efective interprocedural resource leak detection. In Proceedings of ACM/IEEE International Conference on Software Engineering (ICSE). 535-544.***http://scholar.google.com/scholar?hl=en&q=Emina+Torlak+and+Satish+Chandra.+2010.+Efective+interprocedural+resource+leak+detection.+In+Proceedings+of+ACM%2FIEEE+International+Conference+on+Software+Engineering+%28ICSE%29.+535-544.^^^Chenxi Wang, Huimin Cui, Ting Cao, John Zigman, Haris Volos, Onur Mutlu, Fang Lv, Xiaobing Feng, and Guoqing Xu. 2019. Panthera: Holistic memory management for big data processing over hybrid memories. In Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 347-362.***http://scholar.google.com/scholar?hl=en&q=Chenxi+Wang%2C+Huimin+Cui%2C+Ting+Cao%2C+John+Zigman%2C+Haris+Volos%2C+Onur+Mutlu%2C+Fang+Lv%2C+Xiaobing+Feng%2C+and+Guoqing+Xu.+2019.+Panthera%3A+Holistic+memory+management+for+big+data+processing+over+hybrid+memories.+In+Proceedings+of+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28PLDI%29.+347-362.^^^Kun Wang, Ke Zhang, and Chengxue Gao. 2015. A new scheme for cache optimization based on cluster computing framework Spark. In Proceddings of International Symposium on Computational Intelligence and Design (ISCID). 114-117.***http://scholar.google.com/scholar?hl=en&q=Kun+Wang%2C+Ke+Zhang%2C+and+Chengxue+Gao.+2015.+A+new+scheme+for+cache+optimization+based+on+cluster+computing+framework+Spark.+In+Proceddings+of+International+Symposium+on+Computational+Intelligence+and+Design+%28ISCID%29.+114-117.^^^Tianyong Wu, Jierui Liu, Zhenbo Xu, Chaorong Guo, Yanli Zhang, Jun Yan, and Jian Zhang. 2016. Light-weight, inter-procedural and callback-aware resource leak detection for Android apps. IEEE Transactions on Software Engineering (TSE) 42, 11 ( 2016 ), 1054-1076.***http://scholar.google.com/scholar?hl=en&q=Tianyong+Wu%2C+Jierui+Liu%2C+Zhenbo+Xu%2C+Chaorong+Guo%2C+Yanli+Zhang%2C+Jun+Yan%2C+and+Jian+Zhang.+2016.+Light-weight%2C+inter-procedural+and+callback-aware+resource+leak+detection+for+Android+apps.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+42%2C+11+%28+2016+%29%2C+1054-1076.^^^Dong Xie, Feifei Li, Bin Yao, Gefei Li, Liang Zhou, and Minyi Guo. 2016. Simba: Eficient in-memory spatial analytics. In Proceedings of International Conference on Management of Data (SIGMOD). 1071-1085.***http://scholar.google.com/scholar?hl=en&q=Dong+Xie%2C+Feifei+Li%2C+Bin+Yao%2C+Gefei+Li%2C+Liang+Zhou%2C+and+Minyi+Guo.+2016.+Simba%3A+Eficient+in-memory+spatial+analytics.+In+Proceedings+of+International+Conference+on+Management+of+Data+%28SIGMOD%29.+1071-1085.^^^Lijie Xu, Tian Guo, Wensheng Dou, Wei Wang, and Jun Wei. 2019. An experimental evaluation of garbage collectors on big data applications. Proceedings of the VLDB Endowment (VLDB) 12, 5 ( 2019 ), 570-583.***http://scholar.google.com/scholar?hl=en&q=Lijie+Xu%2C+Tian+Guo%2C+Wensheng+Dou%2C+Wei+Wang%2C+and+Jun+Wei.+2019.+An+experimental+evaluation+of+garbage+collectors+on+big+data+applications.+Proceedings+of+the+VLDB+Endowment+%28VLDB%29+12%2C+5+%28+2019+%29%2C+570-583.^^^Mohit Xu, Erci andSaxena and Lawrence Chiu. 2016. Neutrino: Revisiting memory caching for iterative data analytics. In Proceedings of USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage). 16-20.***http://scholar.google.com/scholar?hl=en&q=Mohit+Xu%2C+Erci+andSaxena+and+Lawrence+Chiu.+2016.+Neutrino%3A+Revisiting+memory+caching+for+iterative+data+analytics.+In+Proceedings+of+USENIX+Workshop+on+Hot+Topics+in+Storage+and+File+Systems+%28HotStorage%29.+16-20.^^^Zhengyu Yang, Danlin Jia, Stratis Ioannidis, Ningfang Mi, and Bo Sheng. 2018. Intermediate data caching optimization for multi-stage and parallel big data frameworks. In Proceedings of International Conference on Cloud Computing (CLOUD). 277-284.***http://scholar.google.com/scholar?hl=en&q=Zhengyu+Yang%2C+Danlin+Jia%2C+Stratis+Ioannidis%2C+Ningfang+Mi%2C+and+Bo+Sheng.+2018.+Intermediate+data+caching+optimization+for+multi-stage+and+parallel+big+data+frameworks.+In+Proceedings+of+International+Conference+on+Cloud+Computing+%28CLOUD%29.+277-284.^^^Yinghao Yu, Wei Wang, Jun Zhang, and Khaled Ben Letaief. 2017. LRC: Dependency-aware cache management for data analytics clusters. In Proceedings of IEEE Conference on Computer Communications (INFOCOM). 1-9.***http://scholar.google.com/scholar?hl=en&q=Yinghao+Yu%2C+Wei+Wang%2C+Jun+Zhang%2C+and+Khaled+Ben+Letaief.+2017.+LRC%3A+Dependency-aware+cache+management+for+data+analytics+clusters.+In+Proceedings+of+IEEE+Conference+on+Computer+Communications+%28INFOCOM%29.+1-9.^^^Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauley, Michael J Franklin, Scott Shenker, and Ion Stoica. 2012. Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing. In Proceedings of USENIX Conference on Networked Systems Design and Implementation (NSDI). 2 : 1-2 : 14.***http://scholar.google.com/scholar?hl=en&q=Matei+Zaharia%2C+Mosharaf+Chowdhury%2C+Tathagata+Das%2C+Ankur+Dave%2C+Justin+Ma%2C+Murphy+McCauley%2C+Michael+J+Franklin%2C+Scott+Shenker%2C+and+Ion+Stoica.+2012.+Resilient+distributed+datasets%3A+A+fault-tolerant+abstraction+for+in-memory+cluster+computing.+In+Proceedings+of+USENIX+Conference+on+Networked+Systems+Design+and+Implementation+%28NSDI%29.+2+%3A+1-2+%3A+14.^^^Matei Zaharia, Mosharaf Chowdhury, Michael J Franklin, Scott Shenker, and Ion Stoica. 2010. Spark: Cluster computing with working sets. Proceedings of USENIX Workshop on Hot Topics in Cloud Computing (HotCloud), 10 : 1-10 : 7.***http://scholar.google.com/scholar?hl=en&q=Matei+Zaharia%2C+Mosharaf+Chowdhury%2C+Michael+J+Franklin%2C+Scott+Shenker%2C+and+Ion+Stoica.+2010.+Spark%3A+Cluster+computing+with+working+sets.+Proceedings+of+USENIX+Workshop+on+Hot+Topics+in+Cloud+Computing+%28HotCloud%29%2C+10+%3A+1-10+%3A+7.^^^Kaihui Zhang, Yusuke Tanimura, Hidemoto Nakada, and Hirotaka Ogawa. 2017. Understanding and improving disk-based intermediate data caching in Spark. In Proceedings of IEEE International Conference on Big Data (Big Data). 2508-2517.***http://scholar.google.com/scholar?hl=en&q=Kaihui+Zhang%2C+Yusuke+Tanimura%2C+Hidemoto+Nakada%2C+and+Hirotaka+Ogawa.+2017.+Understanding+and+improving+disk-based+intermediate+data+caching+in+Spark.+In+Proceedings+of+IEEE+International+Conference+on+Big+Data+%28Big+Data%29.+2508-2517.^^^');
INSERT INTO `paper_ref` VALUES (30, 33, 'Dennis Appelt, Nadia Alshahwan, and Lionel C. Briand. 2013. Assessing the Impact of Firewalls and Database Proxies on SQL Injection Testing. In FITTEST\'13: Proc. Workshop of the 2013 Future Internet Testing-First International. 32-47.***http://scholar.google.com/scholar?hl=en&q=Dennis+Appelt%2C+Nadia+Alshahwan%2C+and+Lionel+C.+Briand.+2013.+Assessing+the+Impact+of+Firewalls+and+Database+Proxies+on+SQL+Injection+Testing.+In+FITTEST%2713%3A+Proc.+Workshop+of+the+2013+Future+Internet+Testing-First+International.+32-47.^^^Dennis Appelt, Cu Duy Nguyen, Lionel C. Briand, and Nadia Alshahwan. 2014. Automated testing for SQL injection vulnerabilities: an input mutation approach. In ISSTA\'14: Proc. of the 2014 International Symposium on Software Testing and Analysis. 259-269.***http://scholar.google.com/scholar?hl=en&q=Dennis+Appelt%2C+Cu+Duy+Nguyen%2C+Lionel+C.+Briand%2C+and+Nadia+Alshahwan.+2014.+Automated+testing+for+SQL+injection+vulnerabilities%3A+an+input+mutation+approach.+In+ISSTA%2714%3A+Proc.+of+the+2014+International+Symposium+on+Software+Testing+and+Analysis.+259-269.^^^Dennis Appelt, Cu D. Nguyen, Annibale Panichella, and Lionel C. Briand. 2018. A Machine-Learning-Driven Evolutionary Approach for Testing Web Application Firewalls. IEEE Trans. Reliability 67, 3 ( 2018 ), 733-757.***http://scholar.google.com/scholar?hl=en&q=Dennis+Appelt%2C+Cu+D.+Nguyen%2C+Annibale+Panichella%2C+and+Lionel+C.+Briand.+2018.+A+Machine-Learning-Driven+Evolutionary+Approach+for+Testing+Web+Application+Firewalls.+IEEE+Trans.+Reliability+67%2C+3+%28+2018+%29%2C+733-757.^^^Davide Ariu, Igino Corona, Roberto Tronci, and Giorgio Giacinto. 2015. Machine Learning in Security Applications. Trans. MLDM 8, 1 ( 2015 ), 3-39.***http://scholar.google.com/scholar?hl=en&q=Davide+Ariu%2C+Igino+Corona%2C+Roberto+Tronci%2C+and+Giorgio+Giacinto.+2015.+Machine+Learning+in+Security+Applications.+Trans.+MLDM+8%2C+1+%28+2015+%29%2C+3-39.^^^Ilies Benikhlef, Chenghong Wang, and Sangirov Gulomjon. 2016. Mutation based SQL injection test cases generation for the web based application vulnerability testing. In ICENCE\'16: Proc. of the 2nd International Conference on Electronics, Network and Computer Engineering.***http://scholar.google.com/scholar?hl=en&q=Ilies+Benikhlef%2C+Chenghong+Wang%2C+and+Sangirov+Gulomjon.+2016.+Mutation+based+SQL+injection+test+cases+generation+for+the+web+based+application+vulnerability+testing.+In+ICENCE%2716%3A+Proc.+of+the+2nd+International+Conference+on+Electronics%2C+Network+and+Computer+Engineering.^^^Josip Bozic, Bernhard Garn, Dimitris E. Simos, and Franz Wotawa. 2015. Evaluation of the IPO-Family algorithms for test case generation in web security testing. In ICST\'15 Workshops: Proc. Workshop of the 2015 Eighth IEEE International Conference on Software Testing, Verification and Validation. 1-10.***http://scholar.google.com/scholar?hl=en&q=Josip+Bozic%2C+Bernhard+Garn%2C+Dimitris+E.+Simos%2C+and+Franz+Wotawa.+2015.+Evaluation+of+the+IPO-Family+algorithms+for+test+case+generation+in+web+security+testing.+In+ICST%2715+Workshops%3A+Proc.+Workshop+of+the+2015+Eighth+IEEE+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+1-10.^^^Peter F. Brown, Stephen Della Pietra, Vincent J. Della Pietra, Jennifer C. Lai, and Robert L. Mercer. 1992. An Estimate of an Upper Bound for the Entropy of English. Computational Linguistics 18, 1 ( 1992 ), 31-40.***http://scholar.google.com/scholar?hl=en&q=Peter+F.+Brown%2C+Stephen+Della+Pietra%2C+Vincent+J.+Della+Pietra%2C+Jennifer+C.+Lai%2C+and+Robert+L.+Mercer.+1992.+An+Estimate+of+an+Upper+Bound+for+the+Entropy+of+English.+Computational+Linguistics+18%2C+1+%28+1992+%29%2C+31-40.^^^Chenyu, Mao, Fan, and Guo. 2016. Defending SQL Injection Attacks basedon Intention-Oriented Detection. In ICCSE\'16: Proc. of the 11th International Conference on Computer Science & Education. IEEE, 939-944.***http://scholar.google.com/scholar?hl=en&q=Chenyu%2C+Mao%2C+Fan%2C+and+Guo.+2016.+Defending+SQL+Injection+Attacks+basedon+Intention-Oriented+Detection.+In+ICCSE%2716%3A+Proc.+of+the+11th+International+Conference+on+Computer+Science+%26+Education.+IEEE%2C+939-944.^^^Mark Curphey and Rudolph Arawo. 2006. Web application security assessment tools. IEEE Security & Privacy 4, 4 ( 2006 ), 32-41.***http://scholar.google.com/scholar?hl=en&q=Mark+Curphey+and+Rudolph+Arawo.+2006.+Web+application+security+assessment+tools.+IEEE+Security+%26+Privacy+4%2C+4+%28+2006+%29%2C+32-41.^^^Linhao Dong, Shuang Xu, and Bo Xu. [n.d.]. Speech-Transformer : A NoRecurrence Sequence-to-Sequence Model for Speech Recognition. In ICASSP\'18: Proc. of the 2018 IEEE International Conference on Acoustics, Speech and Signal Processing.***http://scholar.google.com/scholar?hl=en&q=Linhao+Dong%2C+Shuang+Xu%2C+and+Bo+Xu.+%5Bn.d.%5D.+Speech-Transformer+%3A+A+NoRecurrence+Sequence-to-Sequence+Model+for+Speech+Recognition.+In+ICASSP%2718%3A+Proc.+of+the+2018+IEEE+International+Conference+on+Acoustics%2C+Speech+and+Signal+Processing.^^^Rohan Doshi, Noah Apthorpe, and Nick Feamster. 2018. Machine Learning DDoS Detection for Consumer Internet of Things Devices. In SP Workshop\'18: Proc. of the 2018 IEEE Security and Privacy. 29-35.***http://scholar.google.com/scholar?hl=en&q=Rohan+Doshi%2C+Noah+Apthorpe%2C+and+Nick+Feamster.+2018.+Machine+Learning+DDoS+Detection+for+Consumer+Internet+of+Things+Devices.+In+SP+Workshop%2718%3A+Proc.+of+the+2018+IEEE+Security+and+Privacy.+29-35.^^^David Guthrie, Ben Allison, Wei Liu, Louise Guthrie, and Yorick Wilks. 2006. A Closer Look at Skip-gram Modelling. In LREC\'06: Proc. of the 5th International Conference on Language Resources and Evaluation. 1222-1225.***http://scholar.google.com/scholar?hl=en&q=David+Guthrie%2C+Ben+Allison%2C+Wei+Liu%2C+Louise+Guthrie%2C+and+Yorick+Wilks.+2006.+A+Closer+Look+at+Skip-gram+Modelling.+In+LREC%2706%3A+Proc.+of+the+5th+International+Conference+on+Language+Resources+and+Evaluation.+1222-1225.^^^Halfond, William GJ, Choudhary, Shauvik Roy, Orso, and Alessandro. 2009. Penetration testing with improved input vector identification. In ICST\'09: Proc. of the 2nd International Conference on Software Testing Verification and Validation. 346-355.***http://scholar.google.com/scholar?hl=en&q=Halfond%2C+William+GJ%2C+Choudhary%2C+Shauvik+Roy%2C+Orso%2C+and+Alessandro.+2009.+Penetration+testing+with+improved+input+vector+identification.+In+ICST%2709%3A+Proc.+of+the+2nd+International+Conference+on+Software+Testing+Verification+and+Validation.+346-355.^^^William G. J. Halfond and Alessandro Orso. 2005. AMNESIA: analysis and monitoring for NEutralizing SQL-injection attacks. In ASE\'05: Proc. of the 20th IEEE/ACM International Conference on Automated Software Engineering. 174-183.***http://scholar.google.com/scholar?hl=en&q=William+G.+J.+Halfond+and+Alessandro+Orso.+2005.+AMNESIA%3A+analysis+and+monitoring+for+NEutralizing+SQL-injection+attacks.+In+ASE%2705%3A+Proc.+of+the+20th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+174-183.^^^William G. J. Halfond, Alessandro Orso, and Panagiotis Manolios. 2006. Using positive tainting and syntax-aware evaluation to counter SQL injection attacks. In SIGSOFT\'06: Proc. of the 14th ACM International Symposium on Foundations of Software Engineering. 175-185.***http://scholar.google.com/scholar?hl=en&q=William+G.+J.+Halfond%2C+Alessandro+Orso%2C+and+Panagiotis+Manolios.+2006.+Using+positive+tainting+and+syntax-aware+evaluation+to+counter+SQL+injection+attacks.+In+SIGSOFT%2706%3A+Proc.+of+the+14th+ACM+International+Symposium+on+Foundations+of+Software+Engineering.+175-185.^^^William G. J. Halfond, Alessandro Orso, and Pete Manolios. 2008. WASP: Protecting Web Applications Using Positive Tainting and Syntax-Aware Evaluation. IEEE Trans. Software Eng. 34, 1 ( 2008 ), 65-81.***http://scholar.google.com/scholar?hl=en&q=William+G.+J.+Halfond%2C+Alessandro+Orso%2C+and+Pete+Manolios.+2008.+WASP%3A+Protecting+Web+Applications+Using+Positive+Tainting+and+Syntax-Aware+Evaluation.+IEEE+Trans.+Software+Eng.+34%2C+1+%28+2008+%29%2C+65-81.^^^Cheng-Zhi Anna Huang, Ashish Vaswani, Jakob Uszkoreit, Ian Simon, Curtis Hawthorne, Noam Shazeer, Andrew M. Dai, Matthew D. Hofman, Monica Dinculescu, and Douglas Eck. 2019. Music Transformer: Generating Music with Long-Term Structure. In ICLR\'19: Proc. of the 7th International Conference on Learning Representations.***http://scholar.google.com/scholar?hl=en&q=Cheng-Zhi+Anna+Huang%2C+Ashish+Vaswani%2C+Jakob+Uszkoreit%2C+Ian+Simon%2C+Curtis+Hawthorne%2C+Noam+Shazeer%2C+Andrew+M.+Dai%2C+Matthew+D.+Hofman%2C+Monica+Dinculescu%2C+and+Douglas+Eck.+2019.+Music+Transformer%3A+Generating+Music+with+Long-Term+Structure.+In+ICLR%2719%3A+Proc.+of+the+7th+International+Conference+on+Learning+Representations.^^^Nal Kalchbrenner, Edward Grefenstette, and Phil Blunsom. 2014. A Convolutional Neural Network for Modelling Sentences. In ACL\'14: Proc. of the 52nd Association for Computational Linguistics. 655-665.***http://scholar.google.com/scholar?hl=en&q=Nal+Kalchbrenner%2C+Edward+Grefenstette%2C+and+Phil+Blunsom.+2014.+A+Convolutional+Neural+Network+for+Modelling+Sentences.+In+ACL%2714%3A+Proc.+of+the+52nd+Association+for+Computational+Linguistics.+655-665.^^^Adam Kiezun, Philip J. Guo, Karthick Jayaraman, and Michael D. Ernst. 2009. Automatic creation of SQL Injection and cross-site scripting attacks. In ICSE\'09: Proc. of the 31st International Conference on Software Engineering. 199-209.***http://scholar.google.com/scholar?hl=en&q=Adam+Kiezun%2C+Philip+J.+Guo%2C+Karthick+Jayaraman%2C+and+Michael+D.+Ernst.+2009.+Automatic+creation+of+SQL+Injection+and+cross-site+scripting+attacks.+In+ICSE%2709%3A+Proc.+of+the+31st+International+Conference+on+Software+Engineering.+199-209.^^^Mi-Yeon Kim and Dong Hoon Lee. 2014. Data-mining based SQL injection attack detection using internal query trees. Expert Syst. Appl. 41, 11 ( 2014 ), 5416-5430.***http://scholar.google.com/scholar?hl=en&q=Mi-Yeon+Kim+and+Dong+Hoon+Lee.+2014.+Data-mining+based+SQL+injection+attack+detection+using+internal+query+trees.+Expert+Syst.+Appl.+41%2C+11+%28+2014+%29%2C+5416-5430.^^^Diederik P. Kingma and Jimmy Ba. 2015. Adam: A Method for Stochastic Optimization. In ICLR\'15: Proc. of the 52nd Association for Computational Linguistics.***http://scholar.google.com/scholar?hl=en&q=Diederik+P.+Kingma+and+Jimmy+Ba.+2015.+Adam%3A+A+Method+for+Stochastic+Optimization.+In+ICLR%2715%3A+Proc.+of+the+52nd+Association+for+Computational+Linguistics.^^^Huichen Li, Xiaojun Xu, Chang Liu, Teng Ren, Kun Wu, Xuezhi Cao, Weinan Zhang, Yong Yu, and Dawn Song. 2018. A Machine Learning Approach to Prevent Malicious Calls over Telephony Networks. In SP\'18: Proc. of the 2018 IEEE Symposium on Security and Privacy. 53-69.***http://scholar.google.com/scholar?hl=en&q=Huichen+Li%2C+Xiaojun+Xu%2C+Chang+Liu%2C+Teng+Ren%2C+Kun+Wu%2C+Xuezhi+Cao%2C+Weinan+Zhang%2C+Yong+Yu%2C+and+Dawn+Song.+2018.+A+Machine+Learning+Approach+to+Prevent+Malicious+Calls+over+Telephony+Networks.+In+SP%2718%3A+Proc.+of+the+2018+IEEE+Symposium+on+Security+and+Privacy.+53-69.^^^Ofer Maor and Amichai Shulman. 2004. SQL injection signatures evasion. Imperva, Inc., Apr ( 2004 ).***http://scholar.google.com/scholar?hl=en&q=Ofer+Maor+and+Amichai+Shulman.+2004.+SQL+injection+signatures+evasion.+Imperva%2C+Inc.%2C+Apr+%28+2004+%29.^^^Stuart McDonald. 2002. SQL Injection: Modes of attack, defense, and why it matters. White paper, GovernmentSecurity. org ( 2002 ).***http://scholar.google.com/scholar?hl=en&q=Stuart+McDonald.+2002.+SQL+Injection%3A+Modes+of+attack%2C+defense%2C+and+why+it+matters.+White+paper%2C+GovernmentSecurity.+org+%28+2002+%29.^^^Volodymyr Mnih, Nicolas Heess, Alex Graves, and Koray Kavukcuoglu. 2014. Recurrent Models of Visual Attention. In NIPS\'14: Proc. of the 2014 Neural Information Processing Systems. 2204-2212.***http://scholar.google.com/scholar?hl=en&q=Volodymyr+Mnih%2C+Nicolas+Heess%2C+Alex+Graves%2C+and+Koray+Kavukcuoglu.+2014.+Recurrent+Models+of+Visual+Attention.+In+NIPS%2714%3A+Proc.+of+the+2014+Neural+Information+Processing+Systems.+2204-2212.^^^Veselin Raychev, Martin T. Vechev, and Eran Yahav. 2014. Code completion with statistical language models. In PLDI\'14: Proc. of the 2014 Programming Language Design and Implementation. 419-428.***http://scholar.google.com/scholar?hl=en&q=Veselin+Raychev%2C+Martin+T.+Vechev%2C+and+Eran+Yahav.+2014.+Code+completion+with+statistical+language+models.+In+PLDI%2714%3A+Proc.+of+the+2014+Programming+Language+Design+and+Implementation.+419-428.^^^Naghmeh Moradpoor Sheykhkanloo. 2017. A Learning-based Neural Network Model for the Detection and Classification of SQL Injection Attacks. IJCWT 7, 2 ( 2017 ), 16-41.***http://scholar.google.com/scholar?hl=en&q=Naghmeh+Moradpoor+Sheykhkanloo.+2017.+A+Learning-based+Neural+Network+Model+for+the+Detection+and+Classification+of+SQL+Injection+Attacks.+IJCWT+7%2C+2+%28+2017+%29%2C+16-41.^^^Sanjib Sinha. 2018. SQL Mapping. In Beginning Ethical Hacking with Kali Linux. Springer, 221-258.***http://scholar.google.com/scholar?hl=en&q=Sanjib+Sinha.+2018.+SQL+Mapping.+In+Beginning+Ethical+Hacking+with+Kali+Linux.+Springer%2C+221-258.^^^Jaroslaw Skaruz and Franciszek Seredynski. 2007. Recurrent neural networks towards detection of SQL attacks. In IPDPS\'07: Proc. of the 21th International Parallel and Distributed Processing Symposium. 1-8.***http://scholar.google.com/scholar?hl=en&q=Jaroslaw+Skaruz+and+Franciszek+Seredynski.+2007.+Recurrent+neural+networks+towards+detection+of+SQL+attacks.+In+IPDPS%2707%3A+Proc.+of+the+21th+International+Parallel+and+Distributed+Processing+Symposium.+1-8.^^^Julian Thomé, Alessandra Gorla, and Andreas Zeller. 2014. Search-based security testing of web applications. In SBST\'14: Proc. of the 7th International Workshop on Search-Based Software Testing. 5-14.***http://scholar.google.com/scholar?hl=en&q=Julian+Thom%C3%A9%2C+Alessandra+Gorla%2C+and+Andreas+Zeller.+2014.+Search-based+security+testing+of+web+applications.+In+SBST%2714%3A+Proc.+of+the+7th+International+Workshop+on+Search-Based+Software+Testing.+5-14.^^^Wei Tian, Jufeng Yang, Jing Xu, and Guannan Si. 2012. Attack Model Based Penetration Test for SQL Injection Vulnerability. In COMPSAC\'12: Proc. Workshops of the 36th Annual IEEE Computer Software and Applications. 589-594.***http://scholar.google.com/scholar?hl=en&q=Wei+Tian%2C+Jufeng+Yang%2C+Jing+Xu%2C+and+Guannan+Si.+2012.+Attack+Model+Based+Penetration+Test+for+SQL+Injection+Vulnerability.+In+COMPSAC%2712%3A+Proc.+Workshops+of+the+36th+Annual+IEEE+Computer+Software+and+Applications.+589-594.^^^Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is All you Need. In NIPS\'17: Proc. of the 2017 Neural Information Processing Systems. 5998-6008.***http://scholar.google.com/scholar?hl=en&q=Ashish+Vaswani%2C+Noam+Shazeer%2C+Niki+Parmar%2C+Jakob+Uszkoreit%2C+Llion+Jones%2C+Aidan+N.+Gomez%2C+Lukasz+Kaiser%2C+and+Illia+Polosukhin.+2017.+Attention+is+All+you+Need.+In+NIPS%2717%3A+Proc.+of+the+2017+Neural+Information+Processing+Systems.+5998-6008.^^^Oriol Vinyals, Lukasz Kaiser, Terry Koo, Slav Petrov, Ilya Sutskever, and Geoffrey E. Hinton. 2015. Grammar as a Foreign Language. In NIPS\'15: Proc. of the 2015 Neural Information Processing Systems. 2773-2781.***http://scholar.google.com/scholar?hl=en&q=Oriol+Vinyals%2C+Lukasz+Kaiser%2C+Terry+Koo%2C+Slav+Petrov%2C+Ilya+Sutskever%2C+and+Geoffrey+E.+Hinton.+2015.+Grammar+as+a+Foreign+Language.+In+NIPS%2715%3A+Proc.+of+the+2015+Neural+Information+Processing+Systems.+2773-2781.^^^');
INSERT INTO `paper_ref` VALUES (31, 73, '2011. Spock Stepwise. https://www.canoo.com/blog/2011/04/12/spock-stepwise.***http://scholar.google.com/scholar?hl=en&q=2011.+Spock+Stepwise.+https%3A%2F%2Fwww.canoo.com%2Fblog%2F2011%2F04%2F12%2Fspock-stepwise.^^^2012. JUnit and Java 7. http://intellijava.blogspot.com/ 2012 /05/junit-and-java7. html.***http://scholar.google.com/scholar?hl=en&q=2012.+JUnit+and+Java+7.+http%3A%2F%2Fintellijava.blogspot.com%2F+2012+%2F05%2Fjunit-and-java7.+html.^^^2013. JUnit test method ordering. http://www.java-allandsundry.com/ 2013 /01.***http://scholar.google.com/scholar?hl=en&q=2013.+JUnit+test+method+ordering.+http%3A%2F%2Fwww.java-allandsundry.com%2F+2013+%2F01.^^^2013. Maintaining the order of JUnit3 tests with JDK 1.7. https://coderanch.com/ t/600985/engineering/Maintaining-order-JUnit-tests-JDK.***http://scholar.google.com/scholar?hl=en&q=2013.+Maintaining+the+order+of+JUnit3+tests+with+JDK+1.7.+https%3A%2F%2Fcoderanch.com%2F+t%2F600985%2Fengineering%2FMaintaining-order-JUnit-tests-JDK.^^^2013. Test execution order in JUnit. https://github.com/junit-team/junit/blob/ master/doc/ReleaseNotes4.11. md#test-execution-order.***http://scholar.google.com/scholar?hl=en&q=2013.+Test+execution+order+in+JUnit.+https%3A%2F%2Fgithub.com%2Fjunit-team%2Fjunit%2Fblob%2F+master%2Fdoc%2FReleaseNotes4.11.+md%23test-execution-order.^^^2016. Running your tests in a specific order. https://www.ontestautomation. com/running-your-tests-in-a-specific-order***http://scholar.google.com/scholar?hl=en&q=2016.+Running+your+tests+in+a+specific+order.+https%3A%2F%2Fwww.ontestautomation.+com%2Frunning-your-tests-in-a-specific-order^^^2019. Run tests in parallel using the Visual Studio Test task. https://docs. microsoft.com/en-us/azure/devops/pipelines/test/parallel-testing-vstest.***http://scholar.google.com/scholar?hl=en&q=2019.+Run+tests+in+parallel+using+the+Visual+Studio+Test+task.+https%3A%2F%2Fdocs.+microsoft.com%2Fen-us%2Fazure%2Fdevops%2Fpipelines%2Ftest%2Fparallel-testing-vstest.^^^2020. Accommodating Test Dependence Project Web. https://sites.google.com/ view/test-dependence-impact***http://scholar.google.com/scholar?hl=en&q=2020.+Accommodating+Test+Dependence+Project+Web.+https%3A%2F%2Fsites.google.com%2F+view%2Ftest-dependence-impact^^^2020. Cucumber Reference-Scenario hooks. https://cucumber.io/docs/cucumber/ api/#hooks.***http://scholar.google.com/scholar?hl=en&q=2020.+Cucumber+Reference-Scenario+hooks.+https%3A%2F%2Fcucumber.io%2Fdocs%2Fcucumber%2F+api%2F%23hooks.^^^2020. DepUnit. https://www.openhub.net/p/depunit.***http://scholar.google.com/scholar?hl=en&q=2020.+DepUnit.+https%3A%2F%2Fwww.openhub.net%2Fp%2Fdepunit.^^^2020. SLOCCount. https://dwheeler.com/sloccount***http://scholar.google.com/scholar?hl=en&q=2020.+SLOCCount.+https%3A%2F%2Fdwheeler.com%2Fsloccount^^^2020. TestNG. http://testng.org.***http://scholar.google.com/scholar?hl=en&q=2020.+TestNG.+http%3A%2F%2Ftestng.org.^^^2020. TestNG Dependencies. https://testng.org/doc/documentation-main. html# dependent-methods.***http://scholar.google.com/scholar?hl=en&q=2020.+TestNG+Dependencies.+https%3A%2F%2Ftestng.org%2Fdoc%2Fdocumentation-main.+html%23+dependent-methods.^^^Stephan Arlt, Tobias Morciniec, Andreas Podelski, and Silke Wagner. 2015. If A fails, can B still succeed? Inferring dependencies between test results in automotive system testing. In ICST. Graz, Austria, 1-10.***http://scholar.google.com/scholar?hl=en&q=Stephan+Arlt%2C+Tobias+Morciniec%2C+Andreas+Podelski%2C+and+Silke+Wagner.+2015.+If+A+fails%2C+can+B+still+succeed%3F+Inferring+dependencies+between+test+results+in+automotive+system+testing.+In+ICST.+Graz%2C+Austria%2C+1-10.^^^Jonathan Bell. 2014. Detecting, isolating, and enforcing dependencies among and within test cases. In FSE. Hong Kong, 799-802.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell.+2014.+Detecting%2C+isolating%2C+and+enforcing+dependencies+among+and+within+test+cases.+In+FSE.+Hong+Kong%2C+799-802.^^^Jonathan Bell and Gail Kaiser. 2014. Unit test virtualization with VMVM. In ICSE. Hyderabad, India, 550-561.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell+and+Gail+Kaiser.+2014.+Unit+test+virtualization+with+VMVM.+In+ICSE.+Hyderabad%2C+India%2C+550-561.^^^Jonathan Bell, Gail Kaiser, Eric Melski, and Mohan Dattatreya. 2015. Eficient dependency detection for safe Java test acceleration. In ESEC/FSE. Bergamo, Italy, 770-781.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell%2C+Gail+Kaiser%2C+Eric+Melski%2C+and+Mohan+Dattatreya.+2015.+Eficient+dependency+detection+for+safe+Java+test+acceleration.+In+ESEC%2FFSE.+Bergamo%2C+Italy%2C+770-781.^^^Benny Bergelson and Iaakov Exman. 2006. Dynamic test composition in hierarchical software testing. In Convention of Electrical and Electronics Engineers in Israel. Eilat, Israel, 37-41.***http://scholar.google.com/scholar?hl=en&q=Benny+Bergelson+and+Iaakov+Exman.+2006.+Dynamic+test+composition+in+hierarchical+software+testing.+In+Convention+of+Electrical+and+Electronics+Engineers+in+Israel.+Eilat%2C+Israel%2C+37-41.^^^Matteo Biagiola, Andrea Stocco, Ali Mesbah, Filippo Ricca, and Paolo Tonella. 2019. Web test dependency detection. In ESEC/FSE. Tallinn, Estonia, 154-164.***http://scholar.google.com/scholar?hl=en&q=Matteo+Biagiola%2C+Andrea+Stocco%2C+Ali+Mesbah%2C+Filippo+Ricca%2C+and+Paolo+Tonella.+2019.+Web+test+dependency+detection.+In+ESEC%2FFSE.+Tallinn%2C+Estonia%2C+154-164.^^^Lionel C. Briand, Yvan Labiche, and S. He. 2009. Automating regression test selection based on UML designs. Information and Software Technology 51, 1 ( January 2009 ), 16-30.***http://scholar.google.com/scholar?hl=en&q=Lionel+C.+Briand%2C+Yvan+Labiche%2C+and+S.+He.+2009.+Automating+regression+test+selection+based+on+UML+designs.+Information+and+Software+Technology+51%2C+1+%28+January+2009+%29%2C+16-30.^^^Koen Claessen and John Hughes. 2000. QuickCheck: A lightweight tool for random testing of Haskell programs. In ICFP. Montreal, Canada, 268-279.***http://scholar.google.com/scholar?hl=en&q=Koen+Claessen+and+John+Hughes.+2000.+QuickCheck%3A+A+lightweight+tool+for+random+testing+of+Haskell+programs.+In+ICFP.+Montreal%2C+Canada%2C+268-279.^^^Christoph Csallner and Yannis Smaragdakis. 2004. JCrasher: An automatic robustness tester for Java. Software: Practice and Experience 34, 11 ( September 2004 ), 1025-1050.***http://scholar.google.com/scholar?hl=en&q=Christoph+Csallner+and+Yannis+Smaragdakis.+2004.+JCrasher%3A+An+automatic+robustness+tester+for+Java.+Software%3A+Practice+and+Experience+34%2C+11+%28+September+2004+%29%2C+1025-1050.^^^Sebastian Elbaum, Hui Nee Chin, Matthew B. Dwyer, and Jonathan Dokulil. 2006. Carving diferential unit test cases from system test cases. In FSE. Portland, OR, USA, 253-264.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Hui+Nee+Chin%2C+Matthew+B.+Dwyer%2C+and+Jonathan+Dokulil.+2006.+Carving+diferential+unit+test+cases+from+system+test+cases.+In+FSE.+Portland%2C+OR%2C+USA%2C+253-264.^^^Sebastian Elbaum, Alexey G. Malishevsky, and Gregg Rothermel. 2000. Prioritizing test cases for regression testing. In ISSTA. Portland, OR, USA, 102-112.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Alexey+G.+Malishevsky%2C+and+Gregg+Rothermel.+2000.+Prioritizing+test+cases+for+regression+testing.+In+ISSTA.+Portland%2C+OR%2C+USA%2C+102-112.^^^Gordon Fraser and Andreas Zeller. 2011. Generating parameterized unit tests. In ISSTA. Toronto, Canada, 364-374.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andreas+Zeller.+2011.+Generating+parameterized+unit+tests.+In+ISSTA.+Toronto%2C+Canada%2C+364-374.^^^Alessio Gambi, Jonathan Bell, and Andreas Zeller. 2018. Practical test dependency detection. In ICST. Vasteras, Sweden, 1-11.***http://scholar.google.com/scholar?hl=en&q=Alessio+Gambi%2C+Jonathan+Bell%2C+and+Andreas+Zeller.+2018.+Practical+test+dependency+detection.+In+ICST.+Vasteras%2C+Sweden%2C+1-11.^^^Zebao Gao, Yalan Liang, Myra B. Cohen, Atif M. Memon, and Zhen Wang. 2015. Making system user interactive tests repeatable: When and what should we control?. In ICSE. Florence, Italy, 55-65.***http://scholar.google.com/scholar?hl=en&q=Zebao+Gao%2C+Yalan+Liang%2C+Myra+B.+Cohen%2C+Atif+M.+Memon%2C+and+Zhen+Wang.+2015.+Making+system+user+interactive+tests+repeatable%3A+When+and+what+should+we+control%3F.+In+ICSE.+Florence%2C+Italy%2C+55-65.^^^Alex Groce, Amin Alipour, Chaoqiang Zhang, Yang Chen, and John Regehr. 2014. Cause reduction for quick testing. In ICST. Cleveland, OH, USA, 243-252.***http://scholar.google.com/scholar?hl=en&q=Alex+Groce%2C+Amin+Alipour%2C+Chaoqiang+Zhang%2C+Yang+Chen%2C+and+John+Regehr.+2014.+Cause+reduction+for+quick+testing.+In+ICST.+Cleveland%2C+OH%2C+USA%2C+243-252.^^^Alex Gyori, August Shi, Farah Hariri, and Darko Marinov. 2015. Reliable testing: Detecting state-polluting tests to prevent test dependency. In ISSTA. Baltimore, MD, USA, 223-233.***http://scholar.google.com/scholar?hl=en&q=Alex+Gyori%2C+August+Shi%2C+Farah+Hariri%2C+and+Darko+Marinov.+2015.+Reliable+testing%3A+Detecting+state-polluting+tests+to+prevent+test+dependency.+In+ISSTA.+Baltimore%2C+MD%2C+USA%2C+223-233.^^^Shifa Zehra Haidry and Tim Miller. 2013. Using dependency structures for prioritization of functional test suites. IEEE Transactions on Software Engineering 39, 2 ( 2013 ), 258-275.***http://scholar.google.com/scholar?hl=en&q=Shifa+Zehra+Haidry+and+Tim+Miller.+2013.+Using+dependency+structures+for+prioritization+of+functional+test+suites.+IEEE+Transactions+on+Software+Engineering+39%2C+2+%28+2013+%29%2C+258-275.^^^Mark Harman and Peter O\'Hearn. 2018. From start-ups to scale-ups: Opportunities and open problems for static and dynamic program analysis. In SCAM. 1-23.***http://scholar.google.com/scholar?hl=en&q=Mark+Harman+and+Peter+O%27Hearn.+2018.+From+start-ups+to+scale-ups%3A+Opportunities+and+open+problems+for+static+and+dynamic+program+analysis.+In+SCAM.+1-23.^^^Mary Jean Harrold, James A. Jones, Tongyu Li, Donglin Liang, Alessandro Orso, Maikel Pennings, Saurabh Sinha, S. Alexander Spoon, and Ashish Gujarathi. 2001. Regression test selection for Java software. In OOPSLA. Tampa Bay, FL, USA, 312-326.***http://scholar.google.com/scholar?hl=en&q=Mary+Jean+Harrold%2C+James+A.+Jones%2C+Tongyu+Li%2C+Donglin+Liang%2C+Alessandro+Orso%2C+Maikel+Pennings%2C+Saurabh+Sinha%2C+S.+Alexander+Spoon%2C+and+Ashish+Gujarathi.+2001.+Regression+test+selection+for+Java+software.+In+OOPSLA.+Tampa+Bay%2C+FL%2C+USA%2C+312-326.^^^Kim Herzig, Michaela Greiler, Jacek Czerwonka, and Brendan Murphy. 2015. The art of testing less without sacrificing quality. In ICSE. Florence, Italy, 483-493.***http://scholar.google.com/scholar?hl=en&q=Kim+Herzig%2C+Michaela+Greiler%2C+Jacek+Czerwonka%2C+and+Brendan+Murphy.+2015.+The+art+of+testing+less+without+sacrificing+quality.+In+ICSE.+Florence%2C+Italy%2C+483-493.^^^William E. Howden. 1975. Methodology for the generation of program test data. IEEE Transactions on Computers C-24, 5 (May 1975 ), 554-560.***http://scholar.google.com/scholar?hl=en&q=William+E.+Howden.+1975.+Methodology+for+the+generation+of+program+test+data.+IEEE+Transactions+on+Computers+C-24%2C+5+%28May+1975+%29%2C+554-560.^^^Hwa-You Hsu and Alessandro Orso. 2009. MINTS: A general framework and tool for supporting test-suite minimization. In ICSE. Vancouver, BC, Canada, 419-429.***http://scholar.google.com/scholar?hl=en&q=Hwa-You+Hsu+and+Alessandro+Orso.+2009.+MINTS%3A+A+general+framework+and+tool+for+supporting+test-suite+minimization.+In+ICSE.+Vancouver%2C+BC%2C+Canada%2C+419-429.^^^Chen Huo and James Clause. 2014. Improving oracle quality by detecting brittle assertions and unused inputs in tests. In FSE. Hong Kong, 621-631.***http://scholar.google.com/scholar?hl=en&q=Chen+Huo+and+James+Clause.+2014.+Improving+oracle+quality+by+detecting+brittle+assertions+and+unused+inputs+in+tests.+In+FSE.+Hong+Kong%2C+621-631.^^^Bo Jiang, Zhenyu Zhang, W. K. Chan, and T. H. Tse. 2009. Adaptive random test case prioritization. In ASE. Auckland, NZ, 233-244.***http://scholar.google.com/scholar?hl=en&q=Bo+Jiang%2C+Zhenyu+Zhang%2C+W.+K.+Chan%2C+and+T.+H.+Tse.+2009.+Adaptive+random+test+case+prioritization.+In+ASE.+Auckland%2C+NZ%2C+233-244.^^^James A. Jones, Mary Jean Harrold, and John Stasko. 2002. Visualization of test information to assist fault localization. In ICSE. Orlando, Florida, 467-477.***http://scholar.google.com/scholar?hl=en&q=James+A.+Jones%2C+Mary+Jean+Harrold%2C+and+John+Stasko.+2002.+Visualization+of+test+information+to+assist+fault+localization.+In+ICSE.+Orlando%2C+Florida%2C+467-477.^^^Gregory M. Kapfhammer and Mary Lou Sofa. 2003. A family of test adequacy criteria for database-driven applications. In ESEC/FSE. Helsinki, Finland, 98-107.***http://scholar.google.com/scholar?hl=en&q=Gregory+M.+Kapfhammer+and+Mary+Lou+Sofa.+2003.+A+family+of+test+adequacy+criteria+for+database-driven+applications.+In+ESEC%2FFSE.+Helsinki%2C+Finland%2C+98-107.^^^Jung-Min Kim and Adam Porter. 2002. A history-based test prioritization technique for regression testing in resource constrained environments. In ICSE. Orlando, Florida, 119-129.***http://scholar.google.com/scholar?hl=en&q=Jung-Min+Kim+and+Adam+Porter.+2002.+A+history-based+test+prioritization+technique+for+regression+testing+in+resource+constrained+environments.+In+ICSE.+Orlando%2C+Florida%2C+119-129.^^^Taesoo Kim, Ramesh Chandra, and Nickolai Zeldovich. 2013. Optimizing unit test execution in large software programs using dependency analysis. In APSys. Singapore, 19 : 1-19 : 6.***http://scholar.google.com/scholar?hl=en&q=Taesoo+Kim%2C+Ramesh+Chandra%2C+and+Nickolai+Zeldovich.+2013.+Optimizing+unit+test+execution+in+large+software+programs+using+dependency+analysis.+In+APSys.+Singapore%2C+19+%3A+1-19+%3A+6.^^^Wing Lam, Patrice Godefroid, Suman Nath, Anirudh Santhiar, and Suresh Thummalapenta. 2019. Root causing flaky tests in a large-scale industrial setting. In ISSTA. Beijing, China, 101-111.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Patrice+Godefroid%2C+Suman+Nath%2C+Anirudh+Santhiar%2C+and+Suresh+Thummalapenta.+2019.+Root+causing+flaky+tests+in+a+large-scale+industrial+setting.+In+ISSTA.+Beijing%2C+China%2C+101-111.^^^Wing Lam, Kıvanç Muşlu, Hitesh Sajnani, and Suresh Thummalapenta. 2020. A Study on the Lifecycle of Flaky Tests. In ICSE. Seoul, South Korea, pages-toappear.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+K%C4%B1van%C3%A7+Mu%C5%9Flu%2C+Hitesh+Sajnani%2C+and+Suresh+Thummalapenta.+2020.+A+Study+on+the+Lifecycle+of+Flaky+Tests.+In+ICSE.+Seoul%2C+South+Korea%2C+pages-toappear.^^^Wing Lam, Reed Oei, August Shi, Darko Marinov, and Tao Xie. 2019. iDFlakies: A framework for detecting and partially classifying flaky tests. In ICST. Xi\'an, China, 312-322.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Reed+Oei%2C+August+Shi%2C+Darko+Marinov%2C+and+Tao+Xie.+2019.+iDFlakies%3A+A+framework+for+detecting+and+partially+classifying+flaky+tests.+In+ICST.+Xi%27an%2C+China%2C+312-322.^^^Jingjing Liang, Sebastian Elbaum, and Gregg Rothermel. 2018. Redefining prioritization: Continuous prioritization for continuous integration. In ICSE. Gothenburg, Sweden, 688-698.***http://scholar.google.com/scholar?hl=en&q=Jingjing+Liang%2C+Sebastian+Elbaum%2C+and+Gregg+Rothermel.+2018.+Redefining+prioritization%3A+Continuous+prioritization+for+continuous+integration.+In+ICSE.+Gothenburg%2C+Sweden%2C+688-698.^^^Jun-Wei Lin, Reyhaneh Jabbarvand, Joshua Garcia, and Sam Malek. 2018. Nemo: Multi-criteria test-suite minimization with integer nonlinear programming. In ICSE. Gothenburg, Sweden, 1039-1049.***http://scholar.google.com/scholar?hl=en&q=Jun-Wei+Lin%2C+Reyhaneh+Jabbarvand%2C+Joshua+Garcia%2C+and+Sam+Malek.+2018.+Nemo%3A+Multi-criteria+test-suite+minimization+with+integer+nonlinear+programming.+In+ICSE.+Gothenburg%2C+Sweden%2C+1039-1049.^^^Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. An empirical analysis of flaky tests. In FSE. Hong Kong, 643-653.***http://scholar.google.com/scholar?hl=en&q=Qingzhou+Luo%2C+Farah+Hariri%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2014.+An+empirical+analysis+of+flaky+tests.+In+FSE.+Hong+Kong%2C+643-653.^^^John Micco. 2016. Flaky tests at Google and how we mitigate them. https: //testing.googleblog.com/ 2016 /05/flaky-tests-at-google-and-how-we.html***http://scholar.google.com/scholar?hl=en&q=John+Micco.+2016.+Flaky+tests+at+Google+and+how+we+mitigate+them.+https%3A+%2F%2Ftesting.googleblog.com%2F+2016+%2F05%2Fflaky-tests-at-google-and-how-we.html^^^John Micco. 2017. The state of continuous integration testing @ Google. https: //ai.google/research/pubs/pub45880***http://scholar.google.com/scholar?hl=en&q=John+Micco.+2017.+The+state+of+continuous+integration+testing+%40+Google.+https%3A+%2F%2Fai.google%2Fresearch%2Fpubs%2Fpub45880^^^Sasa Misailovic, Aleksandar Milicevic, Nemanja Petrovic, Sarfraz Khurshid, and Darko Marinov. 2007. Parallel test generation and execution with Korat. In ESEC/FSE. Dubrovnik, Croatia, 135-144.***http://scholar.google.com/scholar?hl=en&q=Sasa+Misailovic%2C+Aleksandar+Milicevic%2C+Nemanja+Petrovic%2C+Sarfraz+Khurshid%2C+and+Darko+Marinov.+2007.+Parallel+test+generation+and+execution+with+Korat.+In+ESEC%2FFSE.+Dubrovnik%2C+Croatia%2C+135-144.^^^Agastya Nanda, Senthil Mani, Saurabh Sinha, Mary Jean Harrold, and Alessandro Orso. 2011. Regression testing in the presence of non-code changes. In ICST. Berlin, Germany, 21-30.***http://scholar.google.com/scholar?hl=en&q=Agastya+Nanda%2C+Senthil+Mani%2C+Saurabh+Sinha%2C+Mary+Jean+Harrold%2C+and+Alessandro+Orso.+2011.+Regression+testing+in+the+presence+of+non-code+changes.+In+ICST.+Berlin%2C+Germany%2C+21-30.^^^Alessandro Orso, Nanjuan Shi, and Mary Jean Harrold. 2004. Scaling regression testing to large software systems. In FSE. Newport Beach, CA, USA, 241-251.***http://scholar.google.com/scholar?hl=en&q=Alessandro+Orso%2C+Nanjuan+Shi%2C+and+Mary+Jean+Harrold.+2004.+Scaling+regression+testing+to+large+software+systems.+In+FSE.+Newport+Beach%2C+CA%2C+USA%2C+241-251.^^^Carlos Pacheco, Shuvendu K. Lahiri, Michael D. Ernst, and Thomas Ball. 2007. Feedback-directed random test generation. In ICSE. Minneapolis, MN, USA, 75-84.***http://scholar.google.com/scholar?hl=en&q=Carlos+Pacheco%2C+Shuvendu+K.+Lahiri%2C+Michael+D.+Ernst%2C+and+Thomas+Ball.+2007.+Feedback-directed+random+test+generation.+In+ICSE.+Minneapolis%2C+MN%2C+USA%2C+75-84.^^^Md Tajmilur Rahman and Peter C. Rigby. 2018. The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds. In ESEC/FSE. Lake Buena Vista, FL, USA, 857-862.***http://scholar.google.com/scholar?hl=en&q=Md+Tajmilur+Rahman+and+Peter+C.+Rigby.+2018.+The+impact+of+failing%2C+flaky%2C+and+high+failure+tests+on+the+number+of+crash+reports+associated+with+Firefox+builds.+In+ESEC%2FFSE.+Lake+Buena+Vista%2C+FL%2C+USA%2C+857-862.^^^Gregg Rothermel, Sebastian Elbaum, Alexey G. Malishevsky, Praveen Kallakuri, and Xuemei Qiu. 2004. On test suite composition and cost-efective regression testing. ACM Transactions on Software Engineering and Methodology 13, 3 ( July 2004 ), 277-331.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Sebastian+Elbaum%2C+Alexey+G.+Malishevsky%2C+Praveen+Kallakuri%2C+and+Xuemei+Qiu.+2004.+On+test+suite+composition+and+cost-efective+regression+testing.+ACM+Transactions+on+Software+Engineering+and+Methodology+13%2C+3+%28+July+2004+%29%2C+277-331.^^^Gregg Rothermel, Roland H. Untch, Chengyun Chu, and Mary Jean Harrold. 2001. Prioritizing test cases for regression testing. IEEE Transactions on Software Engineering 27, 10 ( October 2001 ), 929-948.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Roland+H.+Untch%2C+Chengyun+Chu%2C+and+Mary+Jean+Harrold.+2001.+Prioritizing+test+cases+for+regression+testing.+IEEE+Transactions+on+Software+Engineering+27%2C+10+%28+October+2001+%29%2C+929-948.^^^Matthew J. Rummel, Gregory M. Kapfhammer, and Andrew Thall. 2005. Towards the prioritization of regression test suites with data flow information. In SAC. Santa Fe, NM, USA, 1499-1504.***http://scholar.google.com/scholar?hl=en&q=Matthew+J.+Rummel%2C+Gregory+M.+Kapfhammer%2C+and+Andrew+Thall.+2005.+Towards+the+prioritization+of+regression+test+suites+with+data+flow+information.+In+SAC.+Santa+Fe%2C+NM%2C+USA%2C+1499-1504.^^^David Saf, Shay Artzi, Jef H. Perkins, and Michael D. Ernst. 2005. Automatic test factoring for Java. In ASE. Long Beach, CA, USA, 114-123.***http://scholar.google.com/scholar?hl=en&q=David+Saf%2C+Shay+Artzi%2C+Jef+H.+Perkins%2C+and+Michael+D.+Ernst.+2005.+Automatic+test+factoring+for+Java.+In+ASE.+Long+Beach%2C+CA%2C+USA%2C+114-123.^^^David Schuler, Valentin Dallmeier, and Andreas Zeller. 2009. Eficient mutation testing by checking invariant violations. In ISSTA. Chicago, IL, USA, 69-80.***http://scholar.google.com/scholar?hl=en&q=David+Schuler%2C+Valentin+Dallmeier%2C+and+Andreas+Zeller.+2009.+Eficient+mutation+testing+by+checking+invariant+violations.+In+ISSTA.+Chicago%2C+IL%2C+USA%2C+69-80.^^^August Shi, Alex Gyori, Owolabi Legunsen, and Darko Marinov. 2016. Detecting assumptions on deterministic implementations of non-deterministic specifications. In ICST. Chicago, IL, USA, 80-90.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Alex+Gyori%2C+Owolabi+Legunsen%2C+and+Darko+Marinov.+2016.+Detecting+assumptions+on+deterministic+implementations+of+non-deterministic+specifications.+In+ICST.+Chicago%2C+IL%2C+USA%2C+80-90.^^^August Shi, Wing Lam, Reed Oei, Tao Xie, and Darko Marinov. 2019. iFixFlakies: A framework for automatically fixing order-dependent flaky tests. In ESEC/FSE. Tallinn, Estonia, 545-555.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Wing+Lam%2C+Reed+Oei%2C+Tao+Xie%2C+and+Darko+Marinov.+2019.+iFixFlakies%3A+A+framework+for+automatically+fixing+order-dependent+flaky+tests.+In+ESEC%2FFSE.+Tallinn%2C+Estonia%2C+545-555.^^^Amitabh Srivastava and Jay Thiagarajan. 2002. Efectively prioritizing tests in development environment. In ISSTA. Rome, Italy, 97-106.***http://scholar.google.com/scholar?hl=en&q=Amitabh+Srivastava+and+Jay+Thiagarajan.+2002.+Efectively+prioritizing+tests+in+development+environment.+In+ISSTA.+Rome%2C+Italy%2C+97-106.^^^Friedrich Steimann, Marcus Frenkel, and Rui Abreu. 2013. Threats to the validity and value of empirical assessments of the accuracy of coverage-based fault locators. In ISSTA. Lugano, Switzerland, 314-324.***http://scholar.google.com/scholar?hl=en&q=Friedrich+Steimann%2C+Marcus+Frenkel%2C+and+Rui+Abreu.+2013.+Threats+to+the+validity+and+value+of+empirical+assessments+of+the+accuracy+of+coverage-based+fault+locators.+In+ISSTA.+Lugano%2C+Switzerland%2C+314-324.^^^Swapna Thorve, Chandani Sreshtha, and Na Meng. 2018. An empirical study of lfaky tests in Android apps. In ICSME, NIER Track. Madrid, Spain, 534-538.***http://scholar.google.com/scholar?hl=en&q=Swapna+Thorve%2C+Chandani+Sreshtha%2C+and+Na+Meng.+2018.+An+empirical+study+of+lfaky+tests+in+Android+apps.+In+ICSME%2C+NIER+Track.+Madrid%2C+Spain%2C+534-538.^^^Matias Waterloo, Suzette Person, and Sebastian Elbaum. 2015. Test analysis: Searching for faults in tests. In ASE. Lincoln, NE, USA, 149-154.***http://scholar.google.com/scholar?hl=en&q=Matias+Waterloo%2C+Suzette+Person%2C+and+Sebastian+Elbaum.+2015.+Test+analysis%3A+Searching+for+faults+in+tests.+In+ASE.+Lincoln%2C+NE%2C+USA%2C+149-154.^^^Ming Wu, Fan Long, Xi Wang, Zhilei Xu, Haoxiang Lin, Xuezheng Liu, Zhenyu Guo, Huayang Guo, Lidong Zhou, and Zheng Zhang. 2010. Language-based replay via data flow cut. In FSE. Santa Fe, NM, USA, 197-206.***http://scholar.google.com/scholar?hl=en&q=Ming+Wu%2C+Fan+Long%2C+Xi+Wang%2C+Zhilei+Xu%2C+Haoxiang+Lin%2C+Xuezheng+Liu%2C+Zhenyu+Guo%2C+Huayang+Guo%2C+Lidong+Zhou%2C+and+Zheng+Zhang.+2010.+Language-based+replay+via+data+flow+cut.+In+FSE.+Santa+Fe%2C+NM%2C+USA%2C+197-206.^^^Shin Yoo and Mark Harman. 2012. Regression testing minimization, selection and prioritization: A survey. Journal of Software Testing, Verification and Reliability 22, 2 (March 2012 ), 67-120.***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo+and+Mark+Harman.+2012.+Regression+testing+minimization%2C+selection+and+prioritization%3A+A+survey.+Journal+of+Software+Testing%2C+Verification+and+Reliability+22%2C+2+%28March+2012+%29%2C+67-120.^^^Andreas Zeller and Ralf Hildebrandt. 2002. Simplifying and isolating failureinducing input. IEEE Transactions on Software Engineering 28, 3 ( February 2002 ), 183-200.***http://scholar.google.com/scholar?hl=en&q=Andreas+Zeller+and+Ralf+Hildebrandt.+2002.+Simplifying+and+isolating+failureinducing+input.+IEEE+Transactions+on+Software+Engineering+28%2C+3+%28+February+2002+%29%2C+183-200.^^^Lingming Zhang, Darko Marinov, and Sarfraz Khurshid. 2013. Faster mutation testing inspired by test prioritization and reduction. In ISSTA. Lugano, Switzerland, 235-245.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang%2C+Darko+Marinov%2C+and+Sarfraz+Khurshid.+2013.+Faster+mutation+testing+inspired+by+test+prioritization+and+reduction.+In+ISSTA.+Lugano%2C+Switzerland%2C+235-245.^^^Lingming Zhang, Darko Marinov, Lu Zhang, and Sarfraz Khurshid. 2012. Regression mutation testing. In ISSTA. Minneapolis, MN, USA, 331-341.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang%2C+Darko+Marinov%2C+Lu+Zhang%2C+and+Sarfraz+Khurshid.+2012.+Regression+mutation+testing.+In+ISSTA.+Minneapolis%2C+MN%2C+USA%2C+331-341.^^^Lingming Zhang, Lu Zhang, and Sarfraz Khurshid. 2013. Injecting mechanical faults to localize developer faults for evolving software. In OOPSLA. Indianapolis, IN, USA, 765-784.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang%2C+Lu+Zhang%2C+and+Sarfraz+Khurshid.+2013.+Injecting+mechanical+faults+to+localize+developer+faults+for+evolving+software.+In+OOPSLA.+Indianapolis%2C+IN%2C+USA%2C+765-784.^^^Sai Zhang, Darioush Jalali, Jochen Wuttke, Kıvanç Muşlu, Wing Lam, Michael D. Ernst, and David Notkin. 2014. Empirically revisiting the test independence assumption. In ISSTA. San Jose, CA, USA, 385-396.***http://scholar.google.com/scholar?hl=en&q=Sai+Zhang%2C+Darioush+Jalali%2C+Jochen+Wuttke%2C+K%C4%B1van%C3%A7+Mu%C5%9Flu%2C+Wing+Lam%2C+Michael+D.+Ernst%2C+and+David+Notkin.+2014.+Empirically+revisiting+the+test+independence+assumption.+In+ISSTA.+San+Jose%2C+CA%2C+USA%2C+385-396.^^^Sai Zhang, David Saf, Yingyi Bu, and Michael D. Ernst. 2011. Combined static and dynamic automated test generation. In ISSTA. Toronto, Canada, 353-363.***http://scholar.google.com/scholar?hl=en&q=Sai+Zhang%2C+David+Saf%2C+Yingyi+Bu%2C+and+Michael+D.+Ernst.+2011.+Combined+static+and+dynamic+automated+test+generation.+In+ISSTA.+Toronto%2C+Canada%2C+353-363.^^^');
INSERT INTO `paper_ref` VALUES (32, 36, '2019. Hypothesis. https://github.com/HypothesisWorks/hypothesis. ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=2019.+Hypothesis.+https%3A%2F%2Fgithub.com%2FHypothesisWorks%2Fhypothesis.+%28+2019+%29.^^^2019. LightGBM. https://github.com/Microsoft/LightGBM. ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=2019.+LightGBM.+https%3A%2F%2Fgithub.com%2FMicrosoft%2FLightGBM.+%28+2019+%29.^^^Aniya Aggarwal, Pranay Lohia, Seema Nagar, Kuntal Dey, and Diptikalyan Saha. 2019. Black box fairness testing of machine learning models. In Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE. 625-635. https://doi.org/10.1145/3338906.3338937 ***http://scholar.google.com/scholar?hl=en&q=Aniya+Aggarwal%2C+Pranay+Lohia%2C+Seema+Nagar%2C+Kuntal+Dey%2C+and+Diptikalyan+Saha.+2019.+Black+box+fairness+testing+of+machine+learning+models.+In+Proceedings+of+the+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FSIGSOFT+FSE.+625-635.+https%3A%2F%2Fdoi.org%2F10.1145%2F3338906.3338937+10.1145%2F3338906.3338937^^^Bernhard K. Aichernig, Wojciech Mostowski, Mohammad Reza Mousavi, Martin Tappler, and Masoumeh Taromirad. 2018. Model Learning and Model-Based Testing, See , 74-100. https://doi.org/10.1007/978-3-319-96562-8_3 ***http://scholar.google.com/scholar?hl=en&q=Bernhard+K.+Aichernig%2C+Wojciech+Mostowski%2C+Mohammad+Reza+Mousavi%2C+Martin+Tappler%2C+and+Masoumeh+Taromirad.+2018.+Model+Learning+and+Model-Based+Testing%2C+See+%2C+74-100.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-96562-8_3+10.1007%2F978-3-319-96562-8_3^^^Dana Angluin. 1987. Learning Regular Sets from Queries and Counterexamples. Inf. Comput. 75, 2 ( 1987 ), 87-106. https://doi.org/10.1016/ 0890-5401 ( 87 ) 90052-6 ***http://scholar.google.com/scholar?hl=en&q=Dana+Angluin.+1987.+Learning+Regular+Sets+from+Queries+and+Counterexamples.+Inf.+Comput.+75%2C+2+%28+1987+%29%2C+87-106.+https%3A%2F%2Fdoi.org%2F10.1016%2F+0890-5401+%28+87+%29+90052-6+10.1016%2F0890-5401%2887%2990052-6^^^Norman P Archer and Shouhong Wang. 1993. Application of the back propagation neural network algorithm with monotonicity constraints for two-group classification problems. Decision Sciences 24, 1 ( 1993 ), 60-75.***http://scholar.google.com/scholar?hl=en&q=Norman+P+Archer+and+Shouhong+Wang.+1993.+Application+of+the+back+propagation+neural+network+algorithm+with+monotonicity+constraints+for+two-group+classification+problems.+Decision+Sciences+24%2C+1+%28+1993+%29%2C+60-75.^^^Amel Bennaceur, Reiner Hähnle, and Karl Meinke (Eds.). 2018. Machine Learning for Dynamic Software Analysis. Lecture Notes in Computer Science, Vol. 11026. Springer. https://doi.org/10.1007/978-3-319-96562-8 ***http://scholar.google.com/scholar?hl=en&q=Amel+Bennaceur%2C+Reiner+H%C3%A4hnle%2C+and+Karl+Meinke+%28Eds.%29.+2018.+Machine+Learning+for+Dynamic+Software+Analysis.+Lecture+Notes+in+Computer+Science%2C+Vol.+11026.+Springer.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-96562-8+10.1007%2F978-3-319-96562-8^^^Lionel C. Briand, Yvan Labiche, Zaheer Bawar, and Nadia Traldi Spido. 2009. Using machine learning to refine Category-Partition test specifications and test suites. Information & Software Technology 51, 11 ( 2009 ), 1551-1564. https://doi. org/10.1016/j.infsof. 2009. 06.006 ***http://scholar.google.com/scholar?hl=en&q=Lionel+C.+Briand%2C+Yvan+Labiche%2C+Zaheer+Bawar%2C+and+Nadia+Traldi+Spido.+2009.+Using+machine+learning+to+refine+Category-Partition+test+specifications+and+test+suites.+Information+%26+Software+Technology+51%2C+11+%28+2009+%29%2C+1551-1564.+https%3A%2F%2Fdoi.+org%2F10.1016%2Fj.infsof.+2009.+06.006+10.1016%2Fj.infsof.2009.06.006^^^Nicholas Carlini and David A. Wagner. 2017. Towards Evaluating the Robustness of Neural Networks. In 2017 IEEE Symposium on Security and Privacy, SP. 39-57. https://doi.org/10.1109/SP. 2017.49 ***http://scholar.google.com/scholar?hl=en&q=Nicholas+Carlini+and+David+A.+Wagner.+2017.+Towards+Evaluating+the+Robustness+of+Neural+Networks.+In+2017+IEEE+Symposium+on+Security+and+Privacy%2C+SP.+39-57.+https%3A%2F%2Fdoi.org%2F10.1109%2FSP.+2017.49+10.1109%2FSP.2017.49^^^Tsong Yueh Chen, Hing Leung, and I. K. Mak. 2004. Adaptive Random Testing. In ASIAN (Lecture Notes in Computer Science), Michael J. Maher (Ed.), Vol. 3321. Springer, 320-329. https://doi.org/10.1007/978-3-540-30502-6_23 ***http://scholar.google.com/scholar?hl=en&q=Tsong+Yueh+Chen%2C+Hing+Leung%2C+and+I.+K.+Mak.+2004.+Adaptive+Random+Testing.+In+ASIAN+%28Lecture+Notes+in+Computer+Science%29%2C+Michael+J.+Maher+%28Ed.%29%2C+Vol.+3321.+Springer%2C+320-329.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-540-30502-6_23+10.1007%2F978-3-540-30502-6_23^^^Koen Claessen and John Hughes. 2000. QuickCheck: a lightweight tool for random testing of Haskell programs. In (ICFP \'00), Martin Odersky and Philip Wadler (Eds.). ACM, 268-279. https://doi.org/10.1145/351240.351266 ***http://scholar.google.com/scholar?hl=en&q=Koen+Claessen+and+John+Hughes.+2000.+QuickCheck%3A+a+lightweight+tool+for+random+testing+of+Haskell+programs.+In+%28ICFP+%2700%29%2C+Martin+Odersky+and+Philip+Wadler+%28Eds.%29.+ACM%2C+268-279.+https%3A%2F%2Fdoi.org%2F10.1145%2F351240.351266+10.1145%2F351240.351266^^^Leonardo Mendonça de Moura and Nikolaj Bjørner. 2008. Z3: An Eficient SMT Solver. In Tools and Algorithms for the Construction and Analysis of Systems, 14th International Conference, TACAS 2008. 337-340. https://doi.org/10.1007/978-3-540-78800-3_24 ***http://scholar.google.com/scholar?hl=en&q=Leonardo+Mendon%C3%A7a+de+Moura+and+Nikolaj+Bj%C3%B8rner.+2008.+Z3%3A+An+Eficient+SMT+Solver.+In+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems%2C+14th+International+Conference%2C+TACAS+2008.+337-340.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-540-78800-3_24+10.1007%2F978-3-540-78800-3_24^^^Charles Dugas, Yoshua Bengio, François Bélisle, Claude Nadeau, and René Garcia. 2009. Incorporating Functional Knowledge in Neural Networks. J. Mach. Learn. Res. 10 ( 2009 ), 1239-1262. https://dl.acm.org/citation.cfm?id= 1577111***http://scholar.google.com/scholar?hl=en&q=Charles+Dugas%2C+Yoshua+Bengio%2C+Fran%C3%A7ois+B%C3%A9lisle%2C+Claude+Nadeau%2C+and+Ren%C3%A9+Garcia.+2009.+Incorporating+Functional+Knowledge+in+Neural+Networks.+J.+Mach.+Learn.+Res.+10+%28+2009+%29%2C+1239-1262.+https%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+1577111^^^Sainyam Galhotra, Yuriy Brun, and Alexandra Meliou. 2017. Fairness testing: testing software for discrimination. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, 498-510.***http://scholar.google.com/scholar?hl=en&q=Sainyam+Galhotra%2C+Yuriy+Brun%2C+and+Alexandra+Meliou.+2017.+Fairness+testing%3A+testing+software+for+discrimination.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM%2C+498-510.^^^Timon Gehr, Matthew Mirman, Dana Drachsler-Cohen, Petar Tsankov, Swarat Chaudhuri, and Martin T. Vechev. 2018. AI2: Safety and Robustness Certification of Neural Networks with Abstract Interpretation. In IEEE Symposium on Security and Privacy, SP. 3-18. https://doi.org/10.1109/SP. 2018.00058 ***http://scholar.google.com/scholar?hl=en&q=Timon+Gehr%2C+Matthew+Mirman%2C+Dana+Drachsler-Cohen%2C+Petar+Tsankov%2C+Swarat+Chaudhuri%2C+and+Martin+T.+Vechev.+2018.+AI2%3A+Safety+and+Robustness+Certification+of+Neural+Networks+with+Abstract+Interpretation.+In+IEEE+Symposium+on+Security+and+Privacy%2C+SP.+3-18.+https%3A%2F%2Fdoi.org%2F10.1109%2FSP.+2018.00058+10.1109%2FSP.2018.00058^^^Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: directed automated random testing. In Proceedings of the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation. 213-223. https: //doi.org/10.1145/1065010.1065036 ***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Nils+Klarlund%2C+and+Koushik+Sen.+2005.+DART%3A+directed+automated+random+testing.+In+Proceedings+of+the+ACM+SIGPLAN+2005+Conference+on+Programming+Language+Design+and+Implementation.+213-223.+https%3A+%2F%2Fdoi.org%2F10.1145%2F1065010.1065036+10.1145%2F1065010.1065036^^^Riccardo Guidotti, Anna Monreale, Salvatore Ruggieri, Franco Turini, Fosca Giannotti, and Dino Pedreschi. 2019. A Survey of Methods for Explaining Black Box Models. ACM Comput. Surv. 51, 5 ( 2019 ), 93 : 1-93 : 42. https://doi.org/10.1145/ 3236009 ***http://scholar.google.com/scholar?hl=en&q=Riccardo+Guidotti%2C+Anna+Monreale%2C+Salvatore+Ruggieri%2C+Franco+Turini%2C+Fosca+Giannotti%2C+and+Dino+Pedreschi.+2019.+A+Survey+of+Methods+for+Explaining+Black+Box+Models.+ACM+Comput.+Surv.+51%2C+5+%28+2019+%29%2C+93+%3A+1-93+%3A+42.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3236009+10.1145%2F3236009^^^Xiaowei Huang, Marta Kwiatkowska, Sen Wang, and Min Wu. 2017. Safety Verification of Deep Neural Networks. In Computer Aided Verification-29th International Conference, CAV. 3-29. https://doi.org/10.1007/978-3-319-63387-9_1 ***http://scholar.google.com/scholar?hl=en&q=Xiaowei+Huang%2C+Marta+Kwiatkowska%2C+Sen+Wang%2C+and+Min+Wu.+2017.+Safety+Verification+of+Deep+Neural+Networks.+In+Computer+Aided+Verification-29th+International+Conference%2C+CAV.+3-29.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-63387-9_1+10.1007%2F978-3-319-63387-9_1^^^Ulf Johansson and Lars Niklasson. [n. d.]. Evolving decision trees using oracle guides. In Proceedings of the IEEE Symposium on Computational Intelligence and Data Mining, CIDM 2009. 238-244. https://doi.org/10.1109/CIDM. 2009.4938655 ***http://scholar.google.com/scholar?hl=en&q=Ulf+Johansson+and+Lars+Niklasson.+%5Bn.+d.%5D.+Evolving+decision+trees+using+oracle+guides.+In+Proceedings+of+the+IEEE+Symposium+on+Computational+Intelligence+and+Data+Mining%2C+CIDM+2009.+238-244.+https%3A%2F%2Fdoi.org%2F10.1109%2FCIDM.+2009.4938655+10.1109%2FCIDM.2009.4938655^^^James C. King. 1976. Symbolic Execution and Program Testing. Commun. ACM 19, 7 ( 1976 ), 385-394. https://doi.org/10.1145/360248.360252 ***http://scholar.google.com/scholar?hl=en&q=James+C.+King.+1976.+Symbolic+Execution+and+Program+Testing.+Commun.+ACM+19%2C+7+%28+1976+%29%2C+385-394.+https%3A%2F%2Fdoi.org%2F10.1145%2F360248.360252+10.1145%2F360248.360252^^^Wojciech Kotlowski and Roman Slowinski. 2009. Rule learning with monotonicity constraints. In Proceedings of the 26th Annual International Conference on Machine Learning, ICML 2009. 537-544. https://doi.org/10.1145/1553374.1553444 ***http://scholar.google.com/scholar?hl=en&q=Wojciech+Kotlowski+and+Roman+Slowinski.+2009.+Rule+learning+with+monotonicity+constraints.+In+Proceedings+of+the+26th+Annual+International+Conference+on+Machine+Learning%2C+ICML+2009.+537-544.+https%3A%2F%2Fdoi.org%2F10.1145%2F1553374.1553444+10.1145%2F1553374.1553444^^^Fabien Lauer and Gérard Bloch. 2008. Incorporating prior knowledge in support vector regression. Machine Learning 70, 1 ( 2008 ), 89-118. https://doi.org/10.1007/ s10994-007-5035-5 ***http://scholar.google.com/scholar?hl=en&q=Fabien+Lauer+and+G%C3%A9rard+Bloch.+2008.+Incorporating+prior+knowledge+in+support+vector+regression.+Machine+Learning+70%2C+1+%28+2008+%29%2C+89-118.+https%3A%2F%2Fdoi.org%2F10.1007%2F+s10994-007-5035-5+10.1007%2Fs10994-007-5035-5^^^Karl Meinke. 2018. Learning-Based Testing: Recent Progress and Future Prospects, See , 53-73. https://doi.org/10.1007/978-3-319-96562-8_2 ***http://scholar.google.com/scholar?hl=en&q=Karl+Meinke.+2018.+Learning-Based+Testing%3A+Recent+Progress+and+Future+Prospects%2C+See+%2C+53-73.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-96562-8_2+10.1007%2F978-3-319-96562-8_2^^^Petros Papadopoulos and Neil Walkinshaw. 2015. Black-Box Test Generation from Inferred Models. In RAISE, Rachel Harrison, Ayse Basar Bener, and Burak Turhan (Eds.). IEEE Computer Society, 19-24. https://doi.org/10.1109/RAISE. 2015.11 ***http://scholar.google.com/scholar?hl=en&q=Petros+Papadopoulos+and+Neil+Walkinshaw.+2015.+Black-Box+Test+Generation+from+Inferred+Models.+In+RAISE%2C+Rachel+Harrison%2C+Ayse+Basar+Bener%2C+and+Burak+Turhan+%28Eds.%29.+IEEE+Computer+Society%2C+19-24.+https%3A%2F%2Fdoi.org%2F10.1109%2FRAISE.+2015.11+10.1109%2FRAISE.2015.11^^^Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. 2017. DeepXplore: Automated Whitebox Testing of Deep Learning Systems. In Proceedings of the 26th Symposium on Operating Systems Principles ,. 1-18. https://doi.org/10.1145/ 3132747.3132785 ***http://scholar.google.com/scholar?hl=en&q=Kexin+Pei%2C+Yinzhi+Cao%2C+Junfeng+Yang%2C+and+Suman+Jana.+2017.+DeepXplore%3A+Automated+Whitebox+Testing+of+Deep+Learning+Systems.+In+Proceedings+of+the+26th+Symposium+on+Operating+Systems+Principles+%2C.+1-18.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3132747.3132785+10.1145%2F3132747.3132785^^^R. Potharst and A. J. Feelders. 2002. Classification Trees for Problems with Monotonicity Constraints. SIGKDD Explor. Newsl. 4, 1 ( June 2002 ), 1-10. https: //doi.org/10.1145/568574.568577 ***http://scholar.google.com/scholar?hl=en&q=R.+Potharst+and+A.+J.+Feelders.+2002.+Classification+Trees+for+Problems+with+Monotonicity+Constraints.+SIGKDD+Explor.+Newsl.+4%2C+1+%28+June+2002+%29%2C+1-10.+https%3A+%2F%2Fdoi.org%2F10.1145%2F568574.568577+10.1145%2F568574.568577^^^Marco Túlio Ribeiro, Sameer Singh, and Carlos Guestrin. 2016. “ Why Should I Trust You?\": Explaining the Predictions of Any Classifier. In Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. 1135-1144. https://doi.org/10.1145/2939672.2939778 ***http://scholar.google.com/scholar?hl=en&q=Marco+T%C3%BAlio+Ribeiro%2C+Sameer+Singh%2C+and+Carlos+Guestrin.+2016.+%E2%80%9C+Why+Should+I+Trust+You%3F%22%3A+Explaining+the+Predictions+of+Any+Classifier.+In+Proceedings+of+the+22nd+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining.+1135-1144.+https%3A%2F%2Fdoi.org%2F10.1145%2F2939672.2939778+10.1145%2F2939672.2939778^^^Jaakko Riihimäki and Aki Vehtari. 2010. Gaussian processes with monotonicity information. In Proceedings of the Thirteenth International Conference on Artificial Intelligence and Statistics, AISTATS. 645-652. http://proceedings.mlr.press/v9/ riihimaki10a.html***http://scholar.google.com/scholar?hl=en&q=Jaakko+Riihim%C3%A4ki+and+Aki+Vehtari.+2010.+Gaussian+processes+with+monotonicity+information.+In+Proceedings+of+the+Thirteenth+International+Conference+on+Artificial+Intelligence+and+Statistics%2C+AISTATS.+645-652.+http%3A%2F%2Fproceedings.mlr.press%2Fv9%2F+riihimaki10a.html^^^Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: a concolic unit testing engine for C. In Proceedings of the 10th European Software Engineering Conference held jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering. 263-272. https://doi.org/10.1145/1081706.1081750 ***http://scholar.google.com/scholar?hl=en&q=Koushik+Sen%2C+Darko+Marinov%2C+and+Gul+Agha.+2005.+CUTE%3A+a+concolic+unit+testing+engine+for+C.+In+Proceedings+of+the+10th+European+Software+Engineering+Conference+held+jointly+with+13th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+263-272.+https%3A%2F%2Fdoi.org%2F10.1145%2F1081706.1081750+10.1145%2F1081706.1081750^^^Arnab Sharma and Heike Wehrheim. 2019. Testing Machine Learning Algorithms for Balanced Data Usage. In 12th IEEE Conference on Software Testing, Validation and Verification, ICST. 125-135. https://doi.org/10.1109/ICST. 2019.00022 ***http://scholar.google.com/scholar?hl=en&q=Arnab+Sharma+and+Heike+Wehrheim.+2019.+Testing+Machine+Learning+Algorithms+for+Balanced+Data+Usage.+In+12th+IEEE+Conference+on+Software+Testing%2C+Validation+and+Verification%2C+ICST.+125-135.+https%3A%2F%2Fdoi.org%2F10.1109%2FICST.+2019.00022+10.1109%2FICST.2019.00022^^^Eero Siivola, Juho Piironen, and Aki Vehtari. 2016. Automatic monotonicity detection for Gaussian Processes. arXiv preprint arXiv:1610.05440 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Eero+Siivola%2C+Juho+Piironen%2C+and+Aki+Vehtari.+2016.+Automatic+monotonicity+detection+for+Gaussian+Processes.+arXiv+preprint+arXiv%3A1610.05440+%28+2016+%29.^^^Joseph Sill. 1997. Monotonic Networks. In Advances in Neural Information Processing Systems. 661-667. http://papers.nips.cc/paper/1358-monotonic-networks***http://scholar.google.com/scholar?hl=en&q=Joseph+Sill.+1997.+Monotonic+Networks.+In+Advances+in+Neural+Information+Processing+Systems.+661-667.+http%3A%2F%2Fpapers.nips.cc%2Fpaper%2F1358-monotonic-networks^^^Youcheng Sun, Min Wu, Wenjie Ruan, Xiaowei Huang, Marta Kwiatkowska, and Daniel Kroening. 2018. Concolic testing for deep neural networks. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE. 109-119. https://doi.org/10.1145/3238147.3238172 ***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Min+Wu%2C+Wenjie+Ruan%2C+Xiaowei+Huang%2C+Marta+Kwiatkowska%2C+and+Daniel+Kroening.+2018.+Concolic+testing+for+deep+neural+networks.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering%2C+ASE.+109-119.+https%3A%2F%2Fdoi.org%2F10.1145%2F3238147.3238172+10.1145%2F3238147.3238172^^^Ali Fallah Tehrani, Weiwei Cheng, Krzysztof Dembczynski, and Eyke Hüllermeier. 2011. Learning Monotone Nonlinear Models Using the Choquet Integral. In Machine Learning and Knowledge Discovery in Databases-European Conference, ECML. 414-429. https://doi.org/10.1007/978-3-642-23808-6_27 ***http://scholar.google.com/scholar?hl=en&q=Ali+Fallah+Tehrani%2C+Weiwei+Cheng%2C+Krzysztof+Dembczynski%2C+and+Eyke+H%C3%BCllermeier.+2011.+Learning+Monotone+Nonlinear+Models+Using+the+Choquet+Integral.+In+Machine+Learning+and+Knowledge+Discovery+in+Databases-European+Conference%2C+ECML.+414-429.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-642-23808-6_27+10.1007%2F978-3-642-23808-6_27^^^Neil Walkinshaw. 2018. Testing Functional Black-Box Programs Without a Specification, See , 101-120. https://doi.org/10.1007/978-3-319-96562-8_4 ***http://scholar.google.com/scholar?hl=en&q=Neil+Walkinshaw.+2018.+Testing+Functional+Black-Box+Programs+Without+a+Specification%2C+See+%2C+101-120.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-96562-8_4+10.1007%2F978-3-319-96562-8_4^^^Seungil You, David Ding, Kevin Robert Canini, Jan Pfeifer, and Maya R. Gupta. 2017. Deep Lattice Networks and Partial Monotonic Functions. In Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems. 2985-2993. http://papers.nips.cc/paper/6891-deeplattice-networks-and-partial-monotonic-functions***http://scholar.google.com/scholar?hl=en&q=Seungil+You%2C+David+Ding%2C+Kevin+Robert+Canini%2C+Jan+Pfeifer%2C+and+Maya+R.+Gupta.+2017.+Deep+Lattice+Networks+and+Partial+Monotonic+Functions.+In+Advances+in+Neural+Information+Processing+Systems+30%3A+Annual+Conference+on+Neural+Information+Processing+Systems.+2985-2993.+http%3A%2F%2Fpapers.nips.cc%2Fpaper%2F6891-deeplattice-networks-and-partial-monotonic-functions^^^');
INSERT INTO `paper_ref` VALUES (33, 50, '[n.d.]. Docker API for Python.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Docker+API+for+Python.^^^[n.d.]. Numpy: scientific computing with Python.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Numpy%3A+scientific+computing+with+Python.^^^Onur Acıiçmez. 2007. Yet another microarchitectural attack:: exploiting I-cache. In Proceedings of the 2007 ACM workshop on Computer security architecture. ACM, 11-18.***http://scholar.google.com/scholar?hl=en&q=Onur+Ac%C4%B1i%C3%A7mez.+2007.+Yet+another+microarchitectural+attack%3A%3A+exploiting+I-cache.+In+Proceedings+of+the+2007+ACM+workshop+on+Computer+security+architecture.+ACM%2C+11-18.^^^Timos Antonopoulos, Paul Gazzillo, Michael Hicks, Eric Koskinen, Tachio Terauchi, and Shiyi Wei. 2017. Decomposition instead of self-composition for proving the absence of timing channels. In Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2017, Barcelona, Spain, June 18-23, 2017. 362-375. https://doi.org/10.1145/3062341.3062378 ***http://scholar.google.com/scholar?hl=en&q=Timos+Antonopoulos%2C+Paul+Gazzillo%2C+Michael+Hicks%2C+Eric+Koskinen%2C+Tachio+Terauchi%2C+and+Shiyi+Wei.+2017.+Decomposition+instead+of+self-composition+for+proving+the+absence+of+timing+channels.+In+Proceedings+of+the+38th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+2017%2C+Barcelona%2C+Spain%2C+June+18-23%2C+2017.+362-375.+https%3A%2F%2Fdoi.org%2F10.1145%2F3062341.3062378+10.1145%2F3062341.3062378^^^Lucas Bang, Nicolás Rosner, and Tevfik Bultan. 2018. Online Synthesis of Adaptive Side-Channel Attacks Based On Noisy Observations. In 2018 IEEE European Symposium on Security and Privacy, EuroS&P 2018, London, United Kingdom, April 24-26, 2018. 307-322. https://doi.org/10.1109/EuroSP. 2018.00029 ***http://scholar.google.com/scholar?hl=en&q=Lucas+Bang%2C+Nicol%C3%A1s+Rosner%2C+and+Tevfik+Bultan.+2018.+Online+Synthesis+of+Adaptive+Side-Channel+Attacks+Based+On+Noisy+Observations.+In+2018+IEEE+European+Symposium+on+Security+and+Privacy%2C+EuroS%26P+2018%2C+London%2C+United+Kingdom%2C+April+24-26%2C+2018.+307-322.+https%3A%2F%2Fdoi.org%2F10.1109%2FEuroSP.+2018.00029+10.1109%2FEuroSP.2018.00029^^^Philippe Biondi. [n.d.]. Scapy: Packet crafting for Python.***http://scholar.google.com/scholar?hl=en&q=Philippe+Biondi.+%5Bn.d.%5D.+Scapy%3A+Packet+crafting+for+Python.^^^Adrian W Bowman. 1984. An alternative method of cross-validation for the smoothing of density estimates. Biometrika 71, 2 ( 1984 ), 353-360.***http://scholar.google.com/scholar?hl=en&q=Adrian+W+Bowman.+1984.+An+alternative+method+of+cross-validation+for+the+smoothing+of+density+estimates.+Biometrika+71%2C+2+%28+1984+%29%2C+353-360.^^^Tegan Brennan, Seemanta Saha, Tevfik Bultan, and Corina S. Pasareanu. 2018. Symbolic path cost analysis for side-channel detection. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, Amsterdam, The Netherlands, July 16-21, 2018. 27-37. https://doi.org/10. 1145/3213846.3213867 ***http://scholar.google.com/scholar?hl=en&q=Tegan+Brennan%2C+Seemanta+Saha%2C+Tevfik+Bultan%2C+and+Corina+S.+Pasareanu.+2018.+Symbolic+path+cost+analysis+for+side-channel+detection.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2018%2C+Amsterdam%2C+The+Netherlands%2C+July+16-21%2C+2018.+27-37.+https%3A%2F%2Fdoi.org%2F10.+1145%2F3213846.3213867+10.1145%2F3213846.3213867^^^Prabir Burman. 1989. A comparative study of ordinary cross-validation, v-fold cross-validation and the repeated learning-testing methods. Biometrika 76, 3 ( 1989 ), 503-514.***http://scholar.google.com/scholar?hl=en&q=Prabir+Burman.+1989.+A+comparative+study+of+ordinary+cross-validation%2C+v-fold+cross-validation+and+the+repeated+learning-testing+methods.+Biometrika+76%2C+3+%28+1989+%29%2C+503-514.^^^Peter Chapman and David Evans. 2011. Automated Black-box Detection of Sidechannel Vulnerabilities in Web Applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security (Chicago, Illinois, USA) ( CCS \'11). ACM, New York, NY, USA, 263-274. https://doi.org/10.1145/2046707. 2046737 ***http://scholar.google.com/scholar?hl=en&q=Peter+Chapman+and+David+Evans.+2011.+Automated+Black-box+Detection+of+Sidechannel+Vulnerabilities+in+Web+Applications.+In+Proceedings+of+the+18th+ACM+Conference+on+Computer+and+Communications+Security+%28Chicago%2C+Illinois%2C+USA%29+%28+CCS+%2711%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+263-274.+https%3A%2F%2Fdoi.org%2F10.1145%2F2046707.+2046737+10.1145%2F2046707.2046737^^^Jia Chen, Yu Feng, and Isil Dillig. 2017. Precise Detection of Side-Channel Vulnerabilities using Quantitative Cartesian Hoare Logic. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30-November 03, 2017. 875-890. https://doi.org/ 10.1145/3133956.3134058 ***http://scholar.google.com/scholar?hl=en&q=Jia+Chen%2C+Yu+Feng%2C+and+Isil+Dillig.+2017.+Precise+Detection+of+Side-Channel+Vulnerabilities+using+Quantitative+Cartesian+Hoare+Logic.+In+Proceedings+of+the+2017+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security%2C+CCS+2017%2C+Dallas%2C+TX%2C+USA%2C+October+30-November+03%2C+2017.+875-890.+https%3A%2F%2Fdoi.org%2F+10.1145%2F3133956.3134058+10.1145%2F3133956.3134058^^^Jia Chen, Oswaldo Olivo, Isil Dillig, and Calvin Lin. 2017. Static Detection of Asymptotic Resource Side-channel Vulnerabilities in Web Applications. In Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering (Urbana-Champaign, IL, USA) ( ASE 2017). IEEE Press, Piscataway, NJ, USA, 229-239. http://dl.acm.org/citation.cfm?id= 3155562. 3155595***http://scholar.google.com/scholar?hl=en&q=Jia+Chen%2C+Oswaldo+Olivo%2C+Isil+Dillig%2C+and+Calvin+Lin.+2017.+Static+Detection+of+Asymptotic+Resource+Side-channel+Vulnerabilities+in+Web+Applications.+In+Proceedings+of+the+32Nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28Urbana-Champaign%2C+IL%2C+USA%29+%28+ASE+2017%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+229-239.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3155562.+3155595^^^Shuo Chen, Kehuan Zhang, Rui Wang, and XiaoFeng Wang. 2010. Side-Channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. 2010 IEEE Symposium on Security and Privacy (SP) 00 ( 2010 ), 191-206. https://doi.org/doi. ieeecomputersociety. org/10.1109/SP. 2010.20 ***http://scholar.google.com/scholar?hl=en&q=Shuo+Chen%2C+Kehuan+Zhang%2C+Rui+Wang%2C+and+XiaoFeng+Wang.+2010.+Side-Channel+Leaks+in+Web+Applications%3A+A+Reality+Today%2C+a+Challenge+Tomorrow.+2010+IEEE+Symposium+on+Security+and+Privacy+%28SP%29+00+%28+2010+%29%2C+191-206.+https%3A%2F%2Fdoi.org%2Fdoi.+ieeecomputersociety.+org%2F10.1109%2FSP.+2010.20+10.1109%2FSP.2010.20^^^Giovanni Cherubin, Konstantinos Chatzikokolakis, and Catuscia Palamidessi. 2019. F-BLEAU: Fast Black-box Leakage Estimation. CoRR abs/ 1902.01350 ( 2019 ). arXiv: 1902.01350 http://arxiv.org/abs/ 1902.01350***http://scholar.google.com/scholar?hl=en&q=Giovanni+Cherubin%2C+Konstantinos+Chatzikokolakis%2C+and+Catuscia+Palamidessi.+2019.+F-BLEAU%3A+Fast+Black-box+Leakage+Estimation.+CoRR+abs%2F+1902.01350+%28+2019+%29.+arXiv%3A+1902.01350+http%3A%2F%2Farxiv.org%2Fabs%2F+1902.01350^^^Tom Chothia, Yusuke Kawamoto, and Chris Novakovic. 2013. A Tool for Estimating Information Leakage. In Computer Aided Verification-25th International Conference, CAV 2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings (Lecture Notes in Computer Science, Vol. 8044 ), Natasha Sharygina and Helmut Veith (Eds.). Springer, 690-695. https://doi.org/10.1007/978-3-642-39799-8_47 ***http://scholar.google.com/scholar?hl=en&q=Tom+Chothia%2C+Yusuke+Kawamoto%2C+and+Chris+Novakovic.+2013.+A+Tool+for+Estimating+Information+Leakage.+In+Computer+Aided+Verification-25th+International+Conference%2C+CAV+2013%2C+Saint+Petersburg%2C+Russia%2C+July+13-19%2C+2013.+Proceedings+%28Lecture+Notes+in+Computer+Science%2C+Vol.+8044+%29%2C+Natasha+Sharygina+and+Helmut+Veith+%28Eds.%29.+Springer%2C+690-695.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-642-39799-8_47+10.1007%2F978-3-642-39799-8_47^^^DARPA. 2015. The Space-Time Analysis for Cybersecurity (STAC) program. http://www.darpa.mil/program/space-time-analysis-for-cybersecurity***http://scholar.google.com/scholar?hl=en&q=DARPA.+2015.+The+Space-Time+Analysis+for+Cybersecurity+%28STAC%29+program.+http%3A%2F%2Fwww.darpa.mil%2Fprogram%2Fspace-time-analysis-for-cybersecurity^^^DARPA. 2017. Public release items for the DARPA Space-Time Analysis for Cybersecurity (STAC) program. https://github.com/Apogee-Research/STAC***http://scholar.google.com/scholar?hl=en&q=DARPA.+2017.+Public+release+items+for+the+DARPA+Space-Time+Analysis+for+Cybersecurity+%28STAC%29+program.+https%3A%2F%2Fgithub.com%2FApogee-Research%2FSTAC^^^Inc. Docker. [n.d.]. Docker. https://www.docker.com/***http://scholar.google.com/scholar?hl=en&q=Inc.+Docker.+%5Bn.d.%5D.+Docker.+https%3A%2F%2Fwww.docker.com%2F^^^Ronald A Fisher. 1936. The use of multiple measurements in taxonomic problems. Annals of eugenics 7, 2 ( 1936 ), 179-188.***http://scholar.google.com/scholar?hl=en&q=Ronald+A+Fisher.+1936.+The+use+of+multiple+measurements+in+taxonomic+problems.+Annals+of+eugenics+7%2C+2+%28+1936+%29%2C+179-188.^^^Karine Gandolfi, Christophe Mourtel, and Francis Olivier. 2001. Electromagnetic Analysis: Concrete Results. In Cryptographic Hardware and Embedded Systems-CHES 2001, Third International Workshop, Paris, France, May 14-16, 2001, Proceedings. 251-261. https://doi.org/10.1007/3-540-44709-1_21 ***http://scholar.google.com/scholar?hl=en&q=Karine+Gandolfi%2C+Christophe+Mourtel%2C+and+Francis+Olivier.+2001.+Electromagnetic+Analysis%3A+Concrete+Results.+In+Cryptographic+Hardware+and+Embedded+Systems-CHES+2001%2C+Third+International+Workshop%2C+Paris%2C+France%2C+May+14-16%2C+2001%2C+Proceedings.+251-261.+https%3A%2F%2Fdoi.org%2F10.1007%2F3-540-44709-1_21+10.1007%2F3-540-44709-1_21^^^Peter Hall, JS Marron, and Byeong U Park. 1992. Smoothed cross-validation. Probability theory and related fields 92, 1 ( 1992 ), 1-20.***http://scholar.google.com/scholar?hl=en&q=Peter+Hall%2C+JS+Marron%2C+and+Byeong+U+Park.+1992.+Smoothed+cross-validation.+Probability+theory+and+related+fields+92%2C+1+%28+1992+%29%2C+1-20.^^^Xujing Huang and Pasquale Malacaria. 2013. SideAuto: quantitative information lfow for side-channel leakage in web applications. In Proceedings of the 12th annual ACM Workshop on Privacy in the Electronic Society, WPES 2013, Berlin, Germany, November 4, 2013. 285-290. https://doi.org/10.1145/2517840.2517869 ***http://scholar.google.com/scholar?hl=en&q=Xujing+Huang+and+Pasquale+Malacaria.+2013.+SideAuto%3A+quantitative+information+lfow+for+side-channel+leakage+in+web+applications.+In+Proceedings+of+the+12th+annual+ACM+Workshop+on+Privacy+in+the+Electronic+Society%2C+WPES+2013%2C+Berlin%2C+Germany%2C+November+4%2C+2013.+285-290.+https%3A%2F%2Fdoi.org%2F10.1145%2F2517840.2517869+10.1145%2F2517840.2517869^^^J. D. Hunter. 2007. Matplotlib: A 2D graphics environment. Computing In Science & Engineering 9, 3 ( 2007 ), 90-95. https://doi.org/10.1109/ MCSE. 2007.55 ***http://scholar.google.com/scholar?hl=en&q=J.+D.+Hunter.+2007.+Matplotlib%3A+A+2D+graphics+environment.+Computing+In+Science+%26+Engineering+9%2C+3+%28+2007+%29%2C+90-95.+https%3A%2F%2Fdoi.org%2F10.1109%2F+MCSE.+2007.55+10.1109%2FMCSE.2007.55^^^Jaeyeon Jung, Anmol Sheth, Ben Greenstein, David Wetherall, Gabriel Maganis, and Tadayoshi Kohno. 2008. Privacy Oracle: A System for Finding Application Leaks with Black Box Diferential Testing. In Proceedings of the 15th ACM Conference on Computer and Communications Security (Alexandria, Virginia, USA) ( CCS \'08). ACM, New York, NY, USA, 279-288. https://doi.org/10.1145/1455770.1455806 ***http://scholar.google.com/scholar?hl=en&q=Jaeyeon+Jung%2C+Anmol+Sheth%2C+Ben+Greenstein%2C+David+Wetherall%2C+Gabriel+Maganis%2C+and+Tadayoshi+Kohno.+2008.+Privacy+Oracle%3A+A+System+for+Finding+Application+Leaks+with+Black+Box+Diferential+Testing.+In+Proceedings+of+the+15th+ACM+Conference+on+Computer+and+Communications+Security+%28Alexandria%2C+Virginia%2C+USA%29+%28+CCS+%2708%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+279-288.+https%3A%2F%2Fdoi.org%2F10.1145%2F1455770.1455806+10.1145%2F1455770.1455806^^^John Kelsey, Bruce Schneier, David Wagner, and Chris Hall. 1998. Side channel cryptanalysis of product ciphers. In European Symposium on Research in Computer Security. Springer, 97-110.***http://scholar.google.com/scholar?hl=en&q=John+Kelsey%2C+Bruce+Schneier%2C+David+Wagner%2C+and+Chris+Hall.+1998.+Side+channel+cryptanalysis+of+product+ciphers.+In+European+Symposium+on+Research+in+Computer+Security.+Springer%2C+97-110.^^^Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2018. Spectre Attacks: Exploiting Speculative Execution. CoRR abs/ 1801.01203 ( 2018 ). arXiv: 1801.01203 http://arxiv.org/abs/ 1801.01203***http://scholar.google.com/scholar?hl=en&q=Paul+Kocher%2C+Daniel+Genkin%2C+Daniel+Gruss%2C+Werner+Haas%2C+Mike+Hamburg%2C+Moritz+Lipp%2C+Stefan+Mangard%2C+Thomas+Prescher%2C+Michael+Schwarz%2C+and+Yuval+Yarom.+2018.+Spectre+Attacks%3A+Exploiting+Speculative+Execution.+CoRR+abs%2F+1801.01203+%28+2018+%29.+arXiv%3A+1801.01203+http%3A%2F%2Farxiv.org%2Fabs%2F+1801.01203^^^Paul C Kocher. 1996. Timing attacks on implementations of Difie-Hellman, RSA, DSS, and other systems. In Annual International Cryptology Conference. Springer, 104-113.***http://scholar.google.com/scholar?hl=en&q=Paul+C+Kocher.+1996.+Timing+attacks+on+implementations+of+Difie-Hellman%2C+RSA%2C+DSS%2C+and+other+systems.+In+Annual+International+Cryptology+Conference.+Springer%2C+104-113.^^^Paul C. Kocher, Joshua Jafe, and Benjamin Jun. 1999. Diferential Power Analysis. In Advances in Cryptology-CRYPTO \'99, 19th Annual International Cryptology Conference, Santa Barbara, California, USA, August 15-19, 1999, Proceedings. 388-397. https://doi.org/10.1007/3-540-48405-1_25 ***http://scholar.google.com/scholar?hl=en&q=Paul+C.+Kocher%2C+Joshua+Jafe%2C+and+Benjamin+Jun.+1999.+Diferential+Power+Analysis.+In+Advances+in+Cryptology-CRYPTO+%2799%2C+19th+Annual+International+Cryptology+Conference%2C+Santa+Barbara%2C+California%2C+USA%2C+August+15-19%2C+1999%2C+Proceedings.+388-397.+https%3A%2F%2Fdoi.org%2F10.1007%2F3-540-48405-1_25+10.1007%2F3-540-48405-1_25^^^lcamtuf. [n.d.]. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/***http://scholar.google.com/scholar?hl=en&q=lcamtuf.+%5Bn.d.%5D.+American+Fuzzy+Lop.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl%2F^^^Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User Space. In 27th USENIX Security Symposium, USENIX Security 2018, Baltimore, MD, USA, August 15-17, 2018. 973-990. https://www.usenix.org/conference/ usenixsecurity18/presentation/lipp***http://scholar.google.com/scholar?hl=en&q=Moritz+Lipp%2C+Michael+Schwarz%2C+Daniel+Gruss%2C+Thomas+Prescher%2C+Werner+Haas%2C+Anders+Fogh%2C+Jann+Horn%2C+Stefan+Mangard%2C+Paul+Kocher%2C+Daniel+Genkin%2C+Yuval+Yarom%2C+and+Mike+Hamburg.+2018.+Meltdown%3A+Reading+Kernel+Memory+from+User+Space.+In+27th+USENIX+Security+Symposium%2C+USENIX+Security+2018%2C+Baltimore%2C+MD%2C+USA%2C+August+15-17%2C+2018.+973-990.+https%3A%2F%2Fwww.usenix.org%2Fconference%2F+usenixsecurity18%2Fpresentation%2Flipp^^^Thomas S Messerges, Ezzy A Dabbish, and Robert H Sloan. 1999. Investigations of Power Analysis Attacks on Smartcards. Smartcard 99 ( 1999 ), 151-161.***http://scholar.google.com/scholar?hl=en&q=Thomas+S+Messerges%2C+Ezzy+A+Dabbish%2C+and+Robert+H+Sloan.+1999.+Investigations+of+Power+Analysis+Attacks+on+Smartcards.+Smartcard+99+%28+1999+%29%2C+151-161.^^^Shirin Nilizadeh, Yannic Noller, and Corina S. Pasareanu. 2018. DifFuzz: Differential Fuzzing for Side-Channel Analysis. CoRR abs/ 1811.07005 ( 2018 ). arXiv: 1811.07005 http://arxiv.org/abs/ 1811.07005***http://scholar.google.com/scholar?hl=en&q=Shirin+Nilizadeh%2C+Yannic+Noller%2C+and+Corina+S.+Pasareanu.+2018.+DifFuzz%3A+Differential+Fuzzing+for+Side-Channel+Analysis.+CoRR+abs%2F+1811.07005+%28+2018+%29.+arXiv%3A+1811.07005+http%3A%2F%2Farxiv.org%2Fabs%2F+1811.07005^^^Yannic Noller, Rody Kersten, and Corina S. Păsăreanu. 2018. Badger: Complexity Analysis with Fuzzing and Symbolic Execution. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis (Amsterdam, Netherlands) ( ISSTA 2018). ACM, New York, NY, USA, 322-332. https://doi.org/ 10.1145/3213846.3213868 ***http://scholar.google.com/scholar?hl=en&q=Yannic+Noller%2C+Rody+Kersten%2C+and+Corina+S.+P%C4%83s%C4%83reanu.+2018.+Badger%3A+Complexity+Analysis+with+Fuzzing+and+Symbolic+Execution.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28Amsterdam%2C+Netherlands%29+%28+ISSTA+2018%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+322-332.+https%3A%2F%2Fdoi.org%2F+10.1145%2F3213846.3213868+10.1145%2F3213846.3213868^^^Emanuel Parzen. 1962. On Estimation of a Probability Density Function and Mode. Ann. Math. Statist. 33, 3 ( 09 1962 ), 1065-1076. https://doi.org/10.1214/ aoms/1177704472 ***http://scholar.google.com/scholar?hl=en&q=Emanuel+Parzen.+1962.+On+Estimation+of+a+Probability+Density+Function+and+Mode.+Ann.+Math.+Statist.+33%2C+3+%28+09+1962+%29%2C+1065-1076.+https%3A%2F%2Fdoi.org%2F10.1214%2F+aoms%2F1177704472+10.1214%2Faoms%2F1177704472^^^PeachTech. [n.d.]. PeachFuzzer. http://www.peach.tech/***http://scholar.google.com/scholar?hl=en&q=PeachTech.+%5Bn.d.%5D.+PeachFuzzer.+http%3A%2F%2Fwww.peach.tech%2F^^^F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12 ( 2011 ), 2825-2830.***http://scholar.google.com/scholar?hl=en&q=F.+Pedregosa%2C+G.+Varoquaux%2C+A.+Gramfort%2C+V.+Michel%2C+B.+Thirion%2C+O.+Grisel%2C+M.+Blondel%2C+P.+Prettenhofer%2C+R.+Weiss%2C+V.+Dubourg%2C+J.+Vanderplas%2C+A.+Passos%2C+D.+Cournapeau%2C+M.+Brucher%2C+M.+Perrot%2C+and+E.+Duchesnay.+2011.+Scikit-learn%3A+Machine+Learning+in+Python.+Journal+of+Machine+Learning+Research+12+%28+2011+%29%2C+2825-2830.^^^Quoc-Sang Phan, Lucas Bang, Corina S. Pasareanu, Pasquale Malacaria, and Tevfik Bultan. 2017. Synthesis of Adaptive Side-Channel Attacks. In 30th IEEE Computer Security Foundations Symposium, CSF 2017, Santa Barbara, CA, USA, August 21-25, 2017. 328-342. https://doi.org/10.1109/CSF. 2017.8 ***http://scholar.google.com/scholar?hl=en&q=Quoc-Sang+Phan%2C+Lucas+Bang%2C+Corina+S.+Pasareanu%2C+Pasquale+Malacaria%2C+and+Tevfik+Bultan.+2017.+Synthesis+of+Adaptive+Side-Channel+Attacks.+In+30th+IEEE+Computer+Security+Foundations+Symposium%2C+CSF+2017%2C+Santa+Barbara%2C+CA%2C+USA%2C+August+21-25%2C+2017.+328-342.+https%3A%2F%2Fdoi.org%2F10.1109%2FCSF.+2017.8+10.1109%2FCSF.2017.8^^^Quoc-Sang Phan, Pasquale Malacaria, Corina S. Pasareanu, and Marcelo d\'Amorim. 2014. Quantifying information leaks using reliability analysis. In 2014 International Symposium on Model Checking of Software, SPIN 2014, Proceedings, San Jose, CA, USA, July 21-23, 2014. 105-108. https://doi.org/10.1145/ 2632362.2632367 ***http://scholar.google.com/scholar?hl=en&q=Quoc-Sang+Phan%2C+Pasquale+Malacaria%2C+Corina+S.+Pasareanu%2C+and+Marcelo+d%27Amorim.+2014.+Quantifying+information+leaks+using+reliability+analysis.+In+2014+International+Symposium+on+Model+Checking+of+Software%2C+SPIN+2014%2C+Proceedings%2C+San+Jose%2C+CA%2C+USA%2C+July+21-23%2C+2014.+105-108.+https%3A%2F%2Fdoi.org%2F10.1145%2F+2632362.2632367+10.1145%2F2632362.2632367^^^Quoc-Sang Phan, Pasquale Malacaria, Oksana Tkachuk, and Corina S. Păsăreanu. 2012. Symbolic Quantitative Information Flow. SIGSOFT Softw. Eng. Notes 37, 6 (Nov. 2012 ), 1-5. https://doi.org/10.1145/2382756.2382791 ***http://scholar.google.com/scholar?hl=en&q=Quoc-Sang+Phan%2C+Pasquale+Malacaria%2C+Oksana+Tkachuk%2C+and+Corina+S.+P%C4%83s%C4%83reanu.+2012.+Symbolic+Quantitative+Information+Flow.+SIGSOFT+Softw.+Eng.+Notes+37%2C+6+%28Nov.+2012+%29%2C+1-5.+https%3A%2F%2Fdoi.org%2F10.1145%2F2382756.2382791+10.1145%2F2382756.2382791^^^Nicolás Rosner, Ismet Burak Kadron, Lucas Bang, and Tevfik Bultan. 2019. Profit: Detecting and Quantifying Side Channels in Networked Applications. In 26th Network and Distributed System Security Symposium, NDSS 2019, San Diego, California, USA, February 24-27, 2019.***http://scholar.google.com/scholar?hl=en&q=Nicol%C3%A1s+Rosner%2C+Ismet+Burak+Kadron%2C+Lucas+Bang%2C+and+Tevfik+Bultan.+2019.+Profit%3A+Detecting+and+Quantifying+Side+Channels+in+Networked+Applications.+In+26th+Network+and+Distributed+System+Security+Symposium%2C+NDSS+2019%2C+San+Diego%2C+California%2C+USA%2C+February+24-27%2C+2019.^^^Mats Rudemo. 1982. Empirical choice of histograms and kernel density estimators. Scandinavian Journal of Statistics ( 1982 ), 65-78.***http://scholar.google.com/scholar?hl=en&q=Mats+Rudemo.+1982.+Empirical+choice+of+histograms+and+kernel+density+estimators.+Scandinavian+Journal+of+Statistics+%28+1982+%29%2C+65-78.^^^K Serebryany. 2015. libFuzzer, a library for coverage-guided fuzz testing. LLVM project ( 2015 ).***http://scholar.google.com/scholar?hl=en&q=K+Serebryany.+2015.+libFuzzer%2C+a+library+for+coverage-guided+fuzz+testing.+LLVM+project+%28+2015+%29.^^^Claude E Shannon. 1948. A mathematical theory of communication. Bell system technical journal 27, 3 ( 1948 ), 379-423.***http://scholar.google.com/scholar?hl=en&q=Claude+E+Shannon.+1948.+A+mathematical+theory+of+communication.+Bell+system+technical+journal+27%2C+3+%28+1948+%29%2C+379-423.^^^Bernard W. Silverman. 1986. Density Estimation for Statistics and Data Analysis. Springer. https://doi.org/10.1007/978-1-4899-3324-9 ***http://scholar.google.com/scholar?hl=en&q=Bernard+W.+Silverman.+1986.+Density+Estimation+for+Statistics+and+Data+Analysis.+Springer.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-1-4899-3324-9+10.1007%2F978-1-4899-3324-9^^^Dawn Xiaodong Song, David A. Wagner, and Xuqing Tian. 2001. Timing Analysis of Keystrokes and Timing Attacks on SSH. In 10th USENIX Security Symposium, August 13-17, 2001, Washington, D.C., USA. http://www.usenix.org/publications/ library/proceedings/sec01/song.html***http://scholar.google.com/scholar?hl=en&q=Dawn+Xiaodong+Song%2C+David+A.+Wagner%2C+and+Xuqing+Tian.+2001.+Timing+Analysis+of+Keystrokes+and+Timing+Attacks+on+SSH.+In+10th+USENIX+Security+Symposium%2C+August+13-17%2C+2001%2C+Washington%2C+D.C.%2C+USA.+http%3A%2F%2Fwww.usenix.org%2Fpublications%2F+library%2Fproceedings%2Fsec01%2Fsong.html^^^Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In NDSS, Vol. 16. 1-16.***http://scholar.google.com/scholar?hl=en&q=Nick+Stephens%2C+John+Grosen%2C+Christopher+Salls%2C+Andrew+Dutcher%2C+Ruoyu+Wang%2C+Jacopo+Corbetta%2C+Yan+Shoshitaishvili%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+Driller%3A+Augmenting+Fuzzing+Through+Selective+Symbolic+Execution..+In+NDSS%2C+Vol.+16.+1-16.^^^V. F. Taylor, R. Spolaor, M. Conti, and I. Martinovic. 2018. Robust Smartphone App Identification via Encrypted Network Trafic Analysis. IEEE Transactions on Information Forensics and Security 13, 1 (Jan 2018 ), 63-78. https://doi.org/10. 1109/TIFS. 2017.2737970 ***http://scholar.google.com/scholar?hl=en&q=V.+F.+Taylor%2C+R.+Spolaor%2C+M.+Conti%2C+and+I.+Martinovic.+2018.+Robust+Smartphone+App+Identification+via+Encrypted+Network+Trafic+Analysis.+IEEE+Transactions+on+Information+Forensics+and+Security+13%2C+1+%28Jan+2018+%29%2C+63-78.+https%3A%2F%2Fdoi.org%2F10.+1109%2FTIFS.+2017.2737970+10.1109%2FTIFS.2017.2737970^^^Yuval Yarom and Katrina Falkner. 2014. FLUSH+ RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack.. In USENIX Security Symposium, Vol. 1. 22-25.***http://scholar.google.com/scholar?hl=en&q=Yuval+Yarom+and+Katrina+Falkner.+2014.+FLUSH%2B+RELOAD%3A+A+High+Resolution%2C+Low+Noise%2C+L3+Cache+Side-Channel+Attack..+In+USENIX+Security+Symposium%2C+Vol.+1.+22-25.^^^Andreas Zeller, Rahul Gopinath, Marcel Böhme, Gordon Fraser, and Christian Holler. 2019. Generating Software Tests. In Generating Software Tests. Saarland University. https://www.fuzzingbook. org/ Retrieved 2019-01-14 00 :29: 35-08 : 00.***http://scholar.google.com/scholar?hl=en&q=Andreas+Zeller%2C+Rahul+Gopinath%2C+Marcel+B%C3%B6hme%2C+Gordon+Fraser%2C+and+Christian+Holler.+2019.+Generating+Software+Tests.+In+Generating+Software+Tests.+Saarland+University.+https%3A%2F%2Fwww.fuzzingbook.+org%2F+Retrieved+2019-01-14+00+%3A29%3A+35-08+%3A+00.^^^Walter Zucchini, A Berzel, and O Nenadic. 2003. Applied smoothing techniques. Part I: Kernel Density Estimation 15 ( 2003 ).***http://scholar.google.com/scholar?hl=en&q=Walter+Zucchini%2C+A+Berzel%2C+and+O+Nenadic.+2003.+Applied+smoothing+techniques.+Part+I%3A+Kernel+Density+Estimation+15+%28+2003+%29.^^^');
INSERT INTO `paper_ref` VALUES (34, 65, '2012. D. Jackson, Software Abstractions, 2nd ed. MIT Press, 2012. MIT Press.***http://scholar.google.com/scholar?hl=en&q=2012.+D.+Jackson%2C+Software+Abstractions%2C+2nd+ed.+MIT+Press%2C+2012.+MIT+Press.^^^Abbas Acar, Hossein Fereidooni, Tigist Abera, Amit Kumar Sikder, Markus Miettinen, Hidayet Aksu, Mauro Conti, Ahmad-Reza Sadeghi, and A Selcuk Uluagac. 2018. Peek-a-Boo: I see your smart home activities, even encrypted! arXiv preprint arXiv: 1808. 02741 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Abbas+Acar%2C+Hossein+Fereidooni%2C+Tigist+Abera%2C+Amit+Kumar+Sikder%2C+Markus+Miettinen%2C+Hidayet+Aksu%2C+Mauro+Conti%2C+Ahmad-Reza+Sadeghi%2C+and+A+Selcuk+Uluagac.+2018.+Peek-a-Boo%3A+I+see+your+smart+home+activities%2C+even+encrypted%21+arXiv+preprint+arXiv%3A+1808.+02741+%28+2018+%29.^^^Ioannis Agadakos, Chien-Ying Chen, Matteo Campanelli, Prashant Anantharaman, Monowar Hasan, Bogdan Copos, Tancrède Lepoint, Michael Locasto, Gabriela F. Ciocarlie, and Ulf Lindqvist. 2017. Jumping the Air Gap: Modeling Cyber-Physical Attack Paths in the Internet-of-Things. In Proceedings of the 2017 Workshop on Cyber-Physical Systems Security and PrivaCy (CPS \'17). ACM, New York, NY, USA, 37-48.***http://scholar.google.com/scholar?hl=en&q=Ioannis+Agadakos%2C+Chien-Ying+Chen%2C+Matteo+Campanelli%2C+Prashant+Anantharaman%2C+Monowar+Hasan%2C+Bogdan+Copos%2C+Tancr%C3%A8de+Lepoint%2C+Michael+Locasto%2C+Gabriela+F.+Ciocarlie%2C+and+Ulf+Lindqvist.+2017.+Jumping+the+Air+Gap%3A+Modeling+Cyber-Physical+Attack+Paths+in+the+Internet-of-Things.+In+Proceedings+of+the+2017+Workshop+on+Cyber-Physical+Systems+Security+and+PrivaCy+%28CPS+%2717%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+37-48.^^^Bako Ali and Ali Awad. 2018. Cyber and physical security vulnerability assessment for IoT-based smart homes. Sensors 18, 3 ( 2018 ), 817.***http://scholar.google.com/scholar?hl=en&q=Bako+Ali+and+Ali+Awad.+2018.+Cyber+and+physical+security+vulnerability+assessment+for+IoT-based+smart+homes.+Sensors+18%2C+3+%28+2018+%29%2C+817.^^^Apple Homekit 2018. Apple HomeKit. https://www.apple.com/ios/home/.***http://scholar.google.com/scholar?hl=en&q=Apple+Homekit+2018.+Apple+HomeKit.+https%3A%2F%2Fwww.apple.com%2Fios%2Fhome%2F.^^^Noah Apthorpe, Dillon Reisman, and Nick Feamster. 2017. Closing the blinds: Four strategies for protecting smart home privacy from network observers. arXiv preprint arXiv:1705.06809 ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Noah+Apthorpe%2C+Dillon+Reisman%2C+and+Nick+Feamster.+2017.+Closing+the+blinds%3A+Four+strategies+for+protecting+smart+home+privacy+from+network+observers.+arXiv+preprint+arXiv%3A1705.06809+%28+2017+%29.^^^Hamid Bagheri, Eunsuk Kang, Sam Malek, and Daniel Jackson. 2018. A formal approach for detection of security flaws in the android permission system. Formal Asp. Comput. 30, 5 ( 2018 ), 525-544. https://doi.org/10.1007/s00165-017-0445-z ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri%2C+Eunsuk+Kang%2C+Sam+Malek%2C+and+Daniel+Jackson.+2018.+A+formal+approach+for+detection+of+security+flaws+in+the+android+permission+system.+Formal+Asp.+Comput.+30%2C+5+%28+2018+%29%2C+525-544.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs00165-017-0445-z+10.1007%2Fs00165-017-0445-z^^^Hamid Bagheri, Alireza Sadeghi, Reyhaneh Jabbarvand Behrouz, and Sam Malek. 2016. Practical, Formal Synthesis and Automatic Enforcement of Security Policies for Android. In 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2016, Toulouse, France, June 28-July 1, 2016. IEEE Computer Society, 514-525. https://doi.org/10.1109/DSN. 2016.53 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri%2C+Alireza+Sadeghi%2C+Reyhaneh+Jabbarvand+Behrouz%2C+and+Sam+Malek.+2016.+Practical%2C+Formal+Synthesis+and+Automatic+Enforcement+of+Security+Policies+for+Android.+In+46th+Annual+IEEE%2FIFIP+International+Conference+on+Dependable+Systems+and+Networks%2C+DSN+2016%2C+Toulouse%2C+France%2C+June+28-July+1%2C+2016.+IEEE+Computer+Society%2C+514-525.+https%3A%2F%2Fdoi.org%2F10.1109%2FDSN.+2016.53+10.1109%2FDSN.2016.53^^^Hamid Bagheri, Alireza Sadeghi, Joshua Garcia, and Sam Malek. 2015. COVERT: Compositional Analysis of Android Inter-App Permission Leakage. IEEE Trans. Software Eng. 41, 9 ( 2015 ), 866-886. https://doi.org/10.1109/TSE. 2015.2419611 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri%2C+Alireza+Sadeghi%2C+Joshua+Garcia%2C+and+Sam+Malek.+2015.+COVERT%3A+Compositional+Analysis+of+Android+Inter-App+Permission+Leakage.+IEEE+Trans.+Software+Eng.+41%2C+9+%28+2015+%29%2C+866-886.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2015.2419611+10.1109%2FTSE.2015.2419611^^^Hamid Bagheri and Kevin J. Sullivan. 2013. Bottom-up model-driven development. In 35th International Conference on Software Engineering, ICSE \' 13, San Francisco, CA, USA, May 18-26, 2013, David Notkin, Betty H. C. Cheng, and Klaus Pohl (Eds.). IEEE Computer Society, 1221-1224. https://doi.org/10.1109/ICSE. 2013.6606683 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri+and+Kevin+J.+Sullivan.+2013.+Bottom-up+model-driven+development.+In+35th+International+Conference+on+Software+Engineering%2C+ICSE+%27+13%2C+San+Francisco%2C+CA%2C+USA%2C+May+18-26%2C+2013%2C+David+Notkin%2C+Betty+H.+C.+Cheng%2C+and+Klaus+Pohl+%28Eds.%29.+IEEE+Computer+Society%2C+1221-1224.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2013.6606683+10.1109%2FICSE.2013.6606683^^^Hamid Bagheri and Kevin J. Sullivan. 2016. Model-driven synthesis of formally precise, stylized software architectures. Formal Asp. Comput. 28, 3 ( 2016 ), 441-467. https://doi.org/10.1007/s00165-016-0360-8 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri+and+Kevin+J.+Sullivan.+2016.+Model-driven+synthesis+of+formally+precise%2C+stylized+software+architectures.+Formal+Asp.+Comput.+28%2C+3+%28+2016+%29%2C+441-467.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs00165-016-0360-8+10.1007%2Fs00165-016-0360-8^^^Hamid Bagheri, Chong Tang, and Kevin J. Sullivan. 2014. TradeMaker: automated dynamic analysis of synthesized tradespaces. In 36th International Conference on Software Engineering, ICSE \'14, Hyderabad, India-May 31-June 07, 2014, Pankaj Jalote, Lionel C. Briand, and André van der Hoek (Eds.). ACM, 106-116. https://doi.org/10.1145/2568225.2568291 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri%2C+Chong+Tang%2C+and+Kevin+J.+Sullivan.+2014.+TradeMaker%3A+automated+dynamic+analysis+of+synthesized+tradespaces.+In+36th+International+Conference+on+Software+Engineering%2C+ICSE+%2714%2C+Hyderabad%2C+India-May+31-June+07%2C+2014%2C+Pankaj+Jalote%2C+Lionel+C.+Briand%2C+and+Andr%C3%A9+van+der+Hoek+%28Eds.%29.+ACM%2C+106-116.+https%3A%2F%2Fdoi.org%2F10.1145%2F2568225.2568291+10.1145%2F2568225.2568291^^^Hamid Bagheri, Chong Tang, and Kevin J. Sullivan. 2017. Automated Synthesis and Dynamic Analysis of Tradeof Spaces for Object-Relational Mapping. IEEE Trans. Software Eng. 43, 2 ( 2017 ), 145-163. https://doi.org/10.1109/ TSE. 2016.2587646 ***http://scholar.google.com/scholar?hl=en&q=Hamid+Bagheri%2C+Chong+Tang%2C+and+Kevin+J.+Sullivan.+2017.+Automated+Synthesis+and+Dynamic+Analysis+of+Tradeof+Spaces+for+Object-Relational+Mapping.+IEEE+Trans.+Software+Eng.+43%2C+2+%28+2017+%29%2C+145-163.+https%3A%2F%2Fdoi.org%2F10.1109%2F+TSE.+2016.2587646+10.1109%2FTSE.2016.2587646^^^Iulia Bastys, Musard Balliu, and Andrei Sabelfeld. 2018. If This Then What?: Controlling Flows in IoT Apps. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS \'18). ACM, New York, NY, USA, 1102-1119.***http://scholar.google.com/scholar?hl=en&q=Iulia+Bastys%2C+Musard+Balliu%2C+and+Andrei+Sabelfeld.+2018.+If+This+Then+What%3F%3A+Controlling+Flows+in+IoT+Apps.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+%2718%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1102-1119.^^^Jorge Blasco, Thomas M. Chen, Igor Muttik, and Markus Roggenbach. 2018. Detection of app collusion potential using logic programming. J. Network and Computer Applications 105 ( 2018 ), 88-104. https://doi.org/10.1016/j.jnca. 2017. 12.008 ***http://scholar.google.com/scholar?hl=en&q=Jorge+Blasco%2C+Thomas+M.+Chen%2C+Igor+Muttik%2C+and+Markus+Roggenbach.+2018.+Detection+of+app+collusion+potential+using+logic+programming.+J.+Network+and+Computer+Applications+105+%28+2018+%29%2C+88-104.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.jnca.+2017.+12.008+10.1016%2Fj.jnca.2017.12.008^^^Christoph Busold, Stephan Heuser, Jon Rios, Ahmad-Reza Sadeghi, and N Asokan. 2015. Smart and secure cross-device apps for the internet of advanced things. In International Conference on Financial Cryptography and Data Security. Springer, 272-290.***http://scholar.google.com/scholar?hl=en&q=Christoph+Busold%2C+Stephan+Heuser%2C+Jon+Rios%2C+Ahmad-Reza+Sadeghi%2C+and+N+Asokan.+2015.+Smart+and+secure+cross-device+apps+for+the+internet+of+advanced+things.+In+International+Conference+on+Financial+Cryptography+and+Data+Security.+Springer%2C+272-290.^^^Z. Berkay Celik, Leonardo Babun, Amit K. Sikder, Hidayet Aksu, Gang Tan, Patrick McDaniel, and A. Selcuk Uluagac. 2018. Sensitive Information Tracking in Commodity IoT. In Proceedings of the 27th USENIX Conference on Security Symposium (SEC\'18). USENIX Association, Berkeley, CA, USA, 1687-1704.***http://scholar.google.com/scholar?hl=en&q=Z.+Berkay+Celik%2C+Leonardo+Babun%2C+Amit+K.+Sikder%2C+Hidayet+Aksu%2C+Gang+Tan%2C+Patrick+McDaniel%2C+and+A.+Selcuk+Uluagac.+2018.+Sensitive+Information+Tracking+in+Commodity+IoT.+In+Proceedings+of+the+27th+USENIX+Conference+on+Security+Symposium+%28SEC%2718%29.+USENIX+Association%2C+Berkeley%2C+CA%2C+USA%2C+1687-1704.^^^Z Berkay Celik, Earlence Fernandes, Eric Pauley, Gang Tan, and Patrick McDaniel. 2018. Program Analysis of Commodity IoT Applications for Security and Privacy: Challenges and Opportunities. arXiv preprint arXiv: 1809. 06962 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Z+Berkay+Celik%2C+Earlence+Fernandes%2C+Eric+Pauley%2C+Gang+Tan%2C+and+Patrick+McDaniel.+2018.+Program+Analysis+of+Commodity+IoT+Applications+for+Security+and+Privacy%3A+Challenges+and+Opportunities.+arXiv+preprint+arXiv%3A+1809.+06962+%28+2018+%29.^^^Z. Berkay Celik, Earlence Fernandes, Eric Pauley, Gang Tan, and Patrick D. McDaniel. 2018. Program Analysis of Commodity IoT Applications for Security and Privacy: Challenges and Opportunities. CoRR abs/ 1809.06962 ( 2018 ). arXiv: 1809.06962 http://arxiv.org/abs/ 1809.06962***http://scholar.google.com/scholar?hl=en&q=Z.+Berkay+Celik%2C+Earlence+Fernandes%2C+Eric+Pauley%2C+Gang+Tan%2C+and+Patrick+D.+McDaniel.+2018.+Program+Analysis+of+Commodity+IoT+Applications+for+Security+and+Privacy%3A+Challenges+and+Opportunities.+CoRR+abs%2F+1809.06962+%28+2018+%29.+arXiv%3A+1809.06962+http%3A%2F%2Farxiv.org%2Fabs%2F+1809.06962^^^Z. Berkay Celik, Patrick McDaniel, and Gang Tan. 2018. Soteria: Automated IoT Safety and Security Analysis. In 2018 USENIX Annual Technical Conference (USENIX ATC 18). USENIX Association, Boston, MA, 147-158.***http://scholar.google.com/scholar?hl=en&q=Z.+Berkay+Celik%2C+Patrick+McDaniel%2C+and+Gang+Tan.+2018.+Soteria%3A+Automated+IoT+Safety+and+Security+Analysis.+In+2018+USENIX+Annual+Technical+Conference+%28USENIX+ATC+18%29.+USENIX+Association%2C+Boston%2C+MA%2C+147-158.^^^Z. Berkay Celik, Patrick McDaniel, and Gang Tan. 2018. Soteria: Automated IoT Safety and Security Analysis. arXiv:cs.CR/ 1805.08876***http://scholar.google.com/scholar?hl=en&q=Z.+Berkay+Celik%2C+Patrick+McDaniel%2C+and+Gang+Tan.+2018.+Soteria%3A+Automated+IoT+Safety+and+Security+Analysis.+arXiv%3Acs.CR%2F+1805.08876^^^Z. Berkay Celik, Gang Tan, and Patrick McDaniel. 2019. IoTGuard: Dynamic Enforcement of Security and Safety Policy in Commodity IoT. In Network and Distributed System Security Symposium (NDSS). San Diego, CA.***http://scholar.google.com/scholar?hl=en&q=Z.+Berkay+Celik%2C+Gang+Tan%2C+and+Patrick+McDaniel.+2019.+IoTGuard%3A+Dynamic+Enforcement+of+Security+and+Safety+Policy+in+Commodity+IoT.+In+Network+and+Distributed+System+Security+Symposium+%28NDSS%29.+San+Diego%2C+CA.^^^Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through Appbased Fuzzing.. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Jiongyi+Chen%2C+Wenrui+Diao%2C+Qingchuan+Zhao%2C+Chaoshun+Zuo%2C+Zhiqiang+Lin%2C+XiaoFeng+Wang%2C+Wing+Cheong+Lau%2C+Menghan+Sun%2C+Ronghai+Yang%2C+and+Kehuan+Zhang.+2018.+IoTFuzzer%3A+Discovering+Memory+Corruptions+in+IoT+Through+Appbased+Fuzzing..+In+NDSS.^^^Haotian Chi, Qiang Zeng, Xiaojiang Du, and Jiaping Yu. 2018. Cross-App Interference Threats in Smart Homes: Categorization, Detection and Handling. CoRR abs/ 1808.02125 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Haotian+Chi%2C+Qiang+Zeng%2C+Xiaojiang+Du%2C+and+Jiaping+Yu.+2018.+Cross-App+Interference+Threats+in+Smart+Homes%3A+Categorization%2C+Detection+and+Handling.+CoRR+abs%2F+1808.02125+%28+2018+%29.^^^Chad Davidson, Tahsin Rezwana, and Mohammad A. Hoque. 2019. Smart Home Security Application Enabled by IoT:. In Smart Grid and Internet of Things, Al-Sakib Khan Pathan, Zubair Md. Fadlullah, and Mohamed Guerroumi (Eds.). Springer International Publishing, Cham, 46-56.***http://scholar.google.com/scholar?hl=en&q=Chad+Davidson%2C+Tahsin+Rezwana%2C+and+Mohammad+A.+Hoque.+2019.+Smart+Home+Security+Application+Enabled+by+IoT%3A.+In+Smart+Grid+and+Internet+of+Things%2C+Al-Sakib+Khan+Pathan%2C+Zubair+Md.+Fadlullah%2C+and+Mohamed+Guerroumi+%28Eds.%29.+Springer+International+Publishing%2C+Cham%2C+46-56.^^^Wenbo Ding and Hongxin Hu. 2018. On the Safety of IoT Device Physical Interaction Control. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS \'18). ACM, New York, NY, USA, 832-846.***http://scholar.google.com/scholar?hl=en&q=Wenbo+Ding+and+Hongxin+Hu.+2018.+On+the+Safety+of+IoT+Device+Physical+Interaction+Control.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+%2718%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+832-846.^^^Earlence Fernandes, Amir Rahmati, Jaeyeon Jung, and Atul Prakash. 2018. Decentralized action integrity for trigger-action iot platforms. In 22nd Network and Distributed Security Symposium (NDSS 2018 ).***http://scholar.google.com/scholar?hl=en&q=Earlence+Fernandes%2C+Amir+Rahmati%2C+Jaeyeon+Jung%2C+and+Atul+Prakash.+2018.+Decentralized+action+integrity+for+trigger-action+iot+platforms.+In+22nd+Network+and+Distributed+Security+Symposium+%28NDSS+2018+%29.^^^Garageio. 2019. IFTTT applet: If I arrive at my house then open my garage door. https://ifttt.com/applets/213296p.***http://scholar.google.com/scholar?hl=en&q=Garageio.+2019.+IFTTT+applet%3A+If+I+arrive+at+my+house+then+open+my+garage+door.+https%3A%2F%2Fifttt.com%2Fapplets%2F213296p.^^^Google home 2018. Google Home. https://store.google.com/us/product/ googlehome?hl=en-US.***http://scholar.google.com/scholar?hl=en&q=Google+home+2018.+Google+Home.+https%3A%2F%2Fstore.google.com%2Fus%2Fproduct%2F+googlehome%3Fhl%3Den-US.^^^Arnoud Goudbeek, Kim-Kwang Raymond Choo, and Nhien-An Le-Khac. 2018. A Forensic Investigation Framework for Smart Home Environment. In 17th IEEE International Conference On Trust, Security And Privacy In Computing And Communications / 12th IEEE International Conference On Big Data Science And Engineering, TrustCom/BigDataSE 2018, New York, NY, USA, August 1-3, 2018. IEEE, 1446-1451. https://doi.org/10.1109/TrustCom/BigDataSE. 2018.00201 ***http://scholar.google.com/scholar?hl=en&q=Arnoud+Goudbeek%2C+Kim-Kwang+Raymond+Choo%2C+and+Nhien-An+Le-Khac.+2018.+A+Forensic+Investigation+Framework+for+Smart+Home+Environment.+In+17th+IEEE+International+Conference+On+Trust%2C+Security+And+Privacy+In+Computing+And+Communications+%2F+12th+IEEE+International+Conference+On+Big+Data+Science+And+Engineering%2C+TrustCom%2FBigDataSE+2018%2C+New+York%2C+NY%2C+USA%2C+August+1-3%2C+2018.+IEEE%2C+1446-1451.+https%3A%2F%2Fdoi.org%2F10.1109%2FTrustCom%2FBigDataSE.+2018.00201+10.1109%2FTrustCom%2FBigDataSE.2018.00201^^^HEALTHSAAS 2020. HEALTHSAAS: THE INTERNET OF THINGS (IOT) PLATFORMFOR HEALTHCARE. https://www.healthsaas.net/..***http://scholar.google.com/scholar?hl=en&q=HEALTHSAAS+2020.+HEALTHSAAS%3A+THE+INTERNET+OF+THINGS+%28IOT%29+PLATFORMFOR+HEALTHCARE.+https%3A%2F%2Fwww.healthsaas.net%2F..^^^Households 2019. Households have 10 connected devices now, will rise to 50 by 2020, IT News, ET CIO. https://cio.economictimes.indiatimes.com/news/ internet-of-things/households-have-10-connected-devices-now-will-rise-to50-by-2020/53765773.***http://scholar.google.com/scholar?hl=en&q=Households+2019.+Households+have+10+connected+devices+now%2C+will+rise+to+50+by+2020%2C+IT+News%2C+ET+CIO.+https%3A%2F%2Fcio.economictimes.indiatimes.com%2Fnews%2F+internet-of-things%2Fhouseholds-have-10-connected-devices-now-will-rise-to50-by-2020%2F53765773.^^^Kai-Hsiang Hsu, Yu-Hsi Chiang, and Hsu-Chun Hsiao. 2019. SafeChain: Securing Trigger-Action Programming From Attack Chains. IEEE Trans. Information Forensics and Security 14, 10 ( 2019 ), 2607-2622. https://doi.org/10.1109/ TIFS. 2019.2899758 ***http://scholar.google.com/scholar?hl=en&q=Kai-Hsiang+Hsu%2C+Yu-Hsi+Chiang%2C+and+Hsu-Chun+Hsiao.+2019.+SafeChain%3A+Securing+Trigger-Action+Programming+From+Attack+Chains.+IEEE+Trans.+Information+Forensics+and+Security+14%2C+10+%28+2019+%29%2C+2607-2622.+https%3A%2F%2Fdoi.org%2F10.1109%2F+TIFS.+2019.2899758+10.1109%2FTIFS.2019.2899758^^^IFTTT Documentation 2019. IFTTT Platform Documentation. https:// platform.ifttt.com/docs.***http://scholar.google.com/scholar?hl=en&q=IFTTT+Documentation+2019.+IFTTT+Platform+Documentation.+https%3A%2F%2F+platform.ifttt.com%2Fdocs.^^^IotCom project website 2019. IotCom project website. https://sites.google.com/ view/iotcom/home.***http://scholar.google.com/scholar?hl=en&q=IotCom+project+website+2019.+IotCom+project+website.+https%3A%2F%2Fsites.google.com%2F+view%2Fiotcom%2Fhome.^^^iotmal 2019. IoTMAL benchmark app repository. https://github.com/IoTBench/ IoTBench-test-suite/tree/master/smartThings/smartThings-Soteria.***http://scholar.google.com/scholar?hl=en&q=iotmal+2019.+IoTMAL+benchmark+app+repository.+https%3A%2F%2Fgithub.com%2FIoTBench%2F+IoTBench-test-suite%2Ftree%2Fmaster%2FsmartThings%2FsmartThings-Soteria.^^^Daniel Jackson. 2002. Alloy: A Lightweight Object Modelling Notation. ACM Trans. Softw. Eng. Methodol. 11, 2 (April 2002 ), 256-290.***http://scholar.google.com/scholar?hl=en&q=Daniel+Jackson.+2002.+Alloy%3A+A+Lightweight+Object+Modelling+Notation.+ACM+Trans.+Softw.+Eng.+Methodol.+11%2C+2+%28April+2002+%29%2C+256-290.^^^Yunhan Jack Jia, Qi Alfred Chen, Shiqi Wang, Amir Rahmati, Earlence Fernandes, Z. Morley Mao, and Atul Prakash. 2017. ContexIoT: Towards Providing Contextual Integrity to Appified IoT Platforms. In Proceedings of the 21st Network and Distributed System Security Symposium (NDSS\'17). San Diego, CA.***http://scholar.google.com/scholar?hl=en&q=Yunhan+Jack+Jia%2C+Qi+Alfred+Chen%2C+Shiqi+Wang%2C+Amir+Rahmati%2C+Earlence+Fernandes%2C+Z.+Morley+Mao%2C+and+Atul+Prakash.+2017.+ContexIoT%3A+Towards+Providing+Contextual+Integrity+to+Appified+IoT+Platforms.+In+Proceedings+of+the+21st+Network+and+Distributed+System+Security+Symposium+%28NDSS%2717%29.+San+Diego%2C+CA.^^^Sylvain Kubler, Kary Främling, and Andrea Buda. 2015. A standardized approach to deal with firewall and mobility policies in the IoT. Pervasive and Mobile Computing 20 ( 2015 ), 100-114. https://doi.org/10.1016/j.pmcj. 2014. 09.005 ***http://scholar.google.com/scholar?hl=en&q=Sylvain+Kubler%2C+Kary+Fr%C3%A4mling%2C+and+Andrea+Buda.+2015.+A+standardized+approach+to+deal+with+firewall+and+mobility+policies+in+the+IoT.+Pervasive+and+Mobile+Computing+20+%28+2015+%29%2C+100-114.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.pmcj.+2014.+09.005+10.1016%2Fj.pmcj.2014.09.005^^^Brent Lagesse, Kevin Wu, Jaynie Shorb, and Zealous Zhu. 2018. Detecting Spies in IoT Systems using Cyber-Physical Correlation. In 2018 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops). IEEE, 185-190.***http://scholar.google.com/scholar?hl=en&q=Brent+Lagesse%2C+Kevin+Wu%2C+Jaynie+Shorb%2C+and+Zealous+Zhu.+2018.+Detecting+Spies+in+IoT+Systems+using+Cyber-Physical+Correlation.+In+2018+IEEE+International+Conference+on+Pervasive+Computing+and+Communications+Workshops+%28PerCom+Workshops%29.+IEEE%2C+185-190.^^^Li Li, Tegawendé F. Bissyandé, Mike Papadakis, Siegfried Rasthofer, Alexandre Bartel, Damien Octeau, Jacques Klein, and Yves Le Traon. 2017. Static analysis of android apps: A systematic literature review. Inf. Softw. Technol. 88 ( 2017 ), 67-95. https://doi.org/10.1016/j.infsof. 2017. 04.001 ***http://scholar.google.com/scholar?hl=en&q=Li+Li%2C+Tegawend%C3%A9+F.+Bissyand%C3%A9%2C+Mike+Papadakis%2C+Siegfried+Rasthofer%2C+Alexandre+Bartel%2C+Damien+Octeau%2C+Jacques+Klein%2C+and+Yves+Le+Traon.+2017.+Static+analysis+of+android+apps%3A+A+systematic+literature+review.+Inf.+Softw.+Technol.+88+%28+2017+%29%2C+67-95.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.infsof.+2017.+04.001+10.1016%2Fj.infsof.2017.04.001^^^Chieh-Jan Mike Liang, Lei Bu, Zhao Li, Junbei Zhang, Shi Han, Börje F Karlsson, Dongmei Zhang, and Feng Zhao. 2016. Systematically debugging IoT control system correctness for building automation. In Proceedings of the 3rd ACM International Conference on Systems for Energy-Eficient Built Environments. ACM, 133-142.***http://scholar.google.com/scholar?hl=en&q=Chieh-Jan+Mike+Liang%2C+Lei+Bu%2C+Zhao+Li%2C+Junbei+Zhang%2C+Shi+Han%2C+B%C3%B6rje+F+Karlsson%2C+Dongmei+Zhang%2C+and+Feng+Zhao.+2016.+Systematically+debugging+IoT+control+system+correctness+for+building+automation.+In+Proceedings+of+the+3rd+ACM+International+Conference+on+Systems+for+Energy-Eficient+Built+Environments.+ACM%2C+133-142.^^^Niloofar Mansoor, Jonathan A. Saddler, Bruno Silva, Hamid Bagheri, Myra B. Cohen, and Shane Farritor. 2018. Modeling and testing a family of surgical robots: an experience report. In Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista, FL, USA, November 04-09, 2018, Gary T. Leavens, Alessandro Garcia, and Corina S. Pasareanu (Eds.). ACM, 785-790. https://doi.org/10.1145/3236024.3275534 ***http://scholar.google.com/scholar?hl=en&q=Niloofar+Mansoor%2C+Jonathan+A.+Saddler%2C+Bruno+Silva%2C+Hamid+Bagheri%2C+Myra+B.+Cohen%2C+and+Shane+Farritor.+2018.+Modeling+and+testing+a+family+of+surgical+robots%3A+an+experience+report.+In+Proceedings+of+the+2018+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FSIGSOFT+FSE+2018%2C+Lake+Buena+Vista%2C+FL%2C+USA%2C+November+04-09%2C+2018%2C+Gary+T.+Leavens%2C+Alessandro+Garcia%2C+and+Corina+S.+Pasareanu+%28Eds.%29.+ACM%2C+785-790.+https%3A%2F%2Fdoi.org%2F10.1145%2F3236024.3275534+10.1145%2F3236024.3275534^^^microsoftFlow 2020. microsoftFlow. https://flow.microsoft.com.***http://scholar.google.com/scholar?hl=en&q=microsoftFlow+2020.+microsoftFlow.+https%3A%2F%2Fflow.microsoft.com.^^^Eugene M. Myers. 1981. A Precise Inter-procedural Data Flow Algorithm. In Proceedings of the 8th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL \'81). ACM, New York, NY, USA, 219-230.***http://scholar.google.com/scholar?hl=en&q=Eugene+M.+Myers.+1981.+A+Precise+Inter-procedural+Data+Flow+Algorithm.+In+Proceedings+of+the+8th+ACM+SIGPLAN-SIGACT+Symposium+on+Principles+of+Programming+Languages+%28POPL+%2781%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+219-230.^^^Julie L. Newcomb, Satish Chandra, Jean-Baptiste Jeannin, Cole Schlesinger, and Manu Sridharan. 2017. IOTA: A Calculus for Internet of Things Automation. In Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software. 119-133.***http://scholar.google.com/scholar?hl=en&q=Julie+L.+Newcomb%2C+Satish+Chandra%2C+Jean-Baptiste+Jeannin%2C+Cole+Schlesinger%2C+and+Manu+Sridharan.+2017.+IOTA%3A+A+Calculus+for+Internet+of+Things+Automation.+In+Proceedings+of+the+2017+ACM+SIGPLAN+International+Symposium+on+New+Ideas%2C+New+Paradigms%2C+and+Reflections+on+Programming+and+Software.+119-133.^^^Dang Tu Nguyen, Chengyu Song, Zhiyun Qian, Srikanth V. Krishnamurthy, Edward J. M. Colbert, and Patrick McDaniel. 2018. IotSan: Fortifying the Safety of IoT Systems. In Proceedings of the 14th International Conference on Emerging Networking EXperiments and Technologies (CoNEXT \'18). ACM, New York, NY, USA, 191-203.***http://scholar.google.com/scholar?hl=en&q=Dang+Tu+Nguyen%2C+Chengyu+Song%2C+Zhiyun+Qian%2C+Srikanth+V.+Krishnamurthy%2C+Edward+J.+M.+Colbert%2C+and+Patrick+McDaniel.+2018.+IotSan%3A+Fortifying+the+Safety+of+IoT+Systems.+In+Proceedings+of+the+14th+International+Conference+on+Emerging+Networking+EXperiments+and+Technologies+%28CoNEXT+%2718%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+191-203.^^^Amir Rahmati, Earlence Fernandes, Kevin Eykholt, and Atul Prakash. 2018. Tyche: A risk-based permission model for smart homes. In 2018 IEEE Cybersecurity Development (SecDev). IEEE, 29-36.***http://scholar.google.com/scholar?hl=en&q=Amir+Rahmati%2C+Earlence+Fernandes%2C+Kevin+Eykholt%2C+and+Atul+Prakash.+2018.+Tyche%3A+A+risk-based+permission+model+for+smart+homes.+In+2018+IEEE+Cybersecurity+Development+%28SecDev%29.+IEEE%2C+29-36.^^^SmartThings 2018. SmartThings Classic Documentation. https:// docs.smartthings.com/en/latest/ref-docs/reference.html.***http://scholar.google.com/scholar?hl=en&q=SmartThings+2018.+SmartThings+Classic+Documentation.+https%3A%2F%2F+docs.smartthings.com%2Fen%2Flatest%2Fref-docs%2Freference.html.^^^SmartThings capabilities reference 2018. SmartThings Classic capabilities reference. https://docs.smartthings.com/en/latest/capabilities-reference.html.***http://scholar.google.com/scholar?hl=en&q=SmartThings+capabilities+reference+2018.+SmartThings+Classic+capabilities+reference.+https%3A%2F%2Fdocs.smartthings.com%2Fen%2Flatest%2Fcapabilities-reference.html.^^^smartthings github 2018. SmartThings Community repository. https:// github.com/SmartThingsCommunity/SmartThingsPublic.***http://scholar.google.com/scholar?hl=en&q=smartthings+github+2018.+SmartThings+Community+repository.+https%3A%2F%2F+github.com%2FSmartThingsCommunity%2FSmartThingsPublic.^^^Milijana Surbatovich, Jassim Aljuraidan, Lujo Bauer, Anupam Das, and Limin Jia. 2017. Some Recipes Can Do More Than Spoil Your Appetite: Analyzing the Security and Privacy Risks of IFTTT Recipes. In Proceedings of the 26th International Conference on World Wide Web (WWW \'17). International World Wide Web Conferences Steering Committee, Republic and Canton of Geneva, Switzerland, 1501-1510.***http://scholar.google.com/scholar?hl=en&q=Milijana+Surbatovich%2C+Jassim+Aljuraidan%2C+Lujo+Bauer%2C+Anupam+Das%2C+and+Limin+Jia.+2017.+Some+Recipes+Can+Do+More+Than+Spoil+Your+Appetite%3A+Analyzing+the+Security+and+Privacy+Risks+of+IFTTT+Recipes.+In+Proceedings+of+the+26th+International+Conference+on+World+Wide+Web+%28WWW+%2717%29.+International+World+Wide+Web+Conferences+Steering+Committee%2C+Republic+and+Canton+of+Geneva%2C+Switzerland%2C+1501-1510.^^^A. Tekeoglu and A. Ş. Tosun. 2016. A Testbed for Security and Privacy Analysis of IoT Devices. In 2016 IEEE 13th International Conference on Mobile Ad Hoc and Sensor Systems (MASS). 343-348.***http://scholar.google.com/scholar?hl=en&q=A.+Tekeoglu+and+A.+%C5%9E.+Tosun.+2016.+A+Testbed+for+Security+and+Privacy+Analysis+of+IoT+Devices.+In+2016+IEEE+13th+International+Conference+on+Mobile+Ad+Hoc+and+Sensor+Systems+%28MASS%29.+343-348.^^^Himanshu Thapliyal, Nathan Ratajczak, Ole Wendroth, and Carson Labrado. 2018. Amazon Echo Enabled IoT Home Security System for Smart Home Environment. In IEEE International Symposium on Smart Electronic Systems, iSES 2018 (Formerly iNiS), Hyderabad, India, December 17-19, 2018. IEEE, 31-36. https://doi.org/ 10.1109/iSES. 2018.00017 ***http://scholar.google.com/scholar?hl=en&q=Himanshu+Thapliyal%2C+Nathan+Ratajczak%2C+Ole+Wendroth%2C+and+Carson+Labrado.+2018.+Amazon+Echo+Enabled+IoT+Home+Security+System+for+Smart+Home+Environment.+In+IEEE+International+Symposium+on+Smart+Electronic+Systems%2C+iSES+2018+%28Formerly+iNiS%29%2C+Hyderabad%2C+India%2C+December+17-19%2C+2018.+IEEE%2C+31-36.+https%3A%2F%2Fdoi.org%2F+10.1109%2FiSES.+2018.00017+10.1109%2FiSES.2018.00017^^^Yuan Tian, Nan Zhang, Yueh-Hsun Lin, XiaoFeng Wang, Blase Ur, XianZheng Guo, and Patrick Tague. 2017. Smartauth: User-centered Authorization for the Internet of Things. In Proceedings of the 26th USENIX Conference on Security Symposium (SEC\'17). USENIX Association, Berkeley, CA, USA, 361-378.***http://scholar.google.com/scholar?hl=en&q=Yuan+Tian%2C+Nan+Zhang%2C+Yueh-Hsun+Lin%2C+XiaoFeng+Wang%2C+Blase+Ur%2C+XianZheng+Guo%2C+and+Patrick+Tague.+2017.+Smartauth%3A+User-centered+Authorization+for+the+Internet+of+Things.+In+Proceedings+of+the+26th+USENIX+Conference+on+Security+Symposium+%28SEC%2717%29.+USENIX+Association%2C+Berkeley%2C+CA%2C+USA%2C+361-378.^^^Blase Ur, Melwyn Pak Yong Ho, Stephen Brawner, Jiyun Lee, Sarah Mennicken, Noah Picard, Diane Schulze, and Michael L Littman. 2016. Trigger-action programming in the wild: An analysis of 200,000 ifttt recipes. In Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems. ACM, 3227-3231.***http://scholar.google.com/scholar?hl=en&q=Blase+Ur%2C+Melwyn+Pak+Yong+Ho%2C+Stephen+Brawner%2C+Jiyun+Lee%2C+Sarah+Mennicken%2C+Noah+Picard%2C+Diane+Schulze%2C+and+Michael+L+Littman.+2016.+Trigger-action+programming+in+the+wild%3A+An+analysis+of+200%2C000+ifttt+recipes.+In+Proceedings+of+the+2016+CHI+Conference+on+Human+Factors+in+Computing+Systems.+ACM%2C+3227-3231.^^^Qi Wang, Pubali Datta, Wei Yang, Si Liu, Adam Bates, and Carl A. Gunter. 2019. Charting the Attack Surface of Trigger-Action IoT Platforms. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019, Lorenzo Cavallaro, Johannes Kinder, XiaoFeng Wang, and Jonathan Katz (Eds.). ACM, 1439-1453. https://doi.org/ 10.1145/3319535.3345662 ***http://scholar.google.com/scholar?hl=en&q=Qi+Wang%2C+Pubali+Datta%2C+Wei+Yang%2C+Si+Liu%2C+Adam+Bates%2C+and+Carl+A.+Gunter.+2019.+Charting+the+Attack+Surface+of+Trigger-Action+IoT+Platforms.+In+Proceedings+of+the+2019+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security%2C+CCS+2019%2C+London%2C+UK%2C+November+11-15%2C+2019%2C+Lorenzo+Cavallaro%2C+Johannes+Kinder%2C+XiaoFeng+Wang%2C+and+Jonathan+Katz+%28Eds.%29.+ACM%2C+1439-1453.+https%3A%2F%2Fdoi.org%2F+10.1145%2F3319535.3345662+10.1145%2F3319535.3345662^^^Qi Wang, Wajih Ul Hassan, Adam M. Bates, and Carl A. Gunter. 2018. Fear and Logging in the Internet of Things. In 25th Annual Network and Distributed System Security Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018. http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/ 2018/02/ndss201801A-2Wangpaper.pdf***http://scholar.google.com/scholar?hl=en&q=Qi+Wang%2C+Wajih+Ul+Hassan%2C+Adam+M.+Bates%2C+and+Carl+A.+Gunter.+2018.+Fear+and+Logging+in+the+Internet+of+Things.+In+25th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS+2018%2C+San+Diego%2C+California%2C+USA%2C+February+18-21%2C+2018.+http%3A%2F%2Fwp.internetsociety.org%2Fndss%2Fwp-content%2Fuploads%2Fsites%2F25%2F+2018%2F02%2Fndss201801A-2Wangpaper.pdf^^^Judson Wilson, Riad S Wahby, Henry Corrigan-Gibbs, Dan Boneh, Philip Levis, and Keith Winstein. 2017. Trust but verify: Auditing the secure internet of things. In Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services. ACM, 464-474.***http://scholar.google.com/scholar?hl=en&q=Judson+Wilson%2C+Riad+S+Wahby%2C+Henry+Corrigan-Gibbs%2C+Dan+Boneh%2C+Philip+Levis%2C+and+Keith+Winstein.+2017.+Trust+but+verify%3A+Auditing+the+secure+internet+of+things.+In+Proceedings+of+the+15th+Annual+International+Conference+on+Mobile+Systems%2C+Applications%2C+and+Services.+ACM%2C+464-474.^^^Fu Xiao, Le-Tian Sha, Zai-Ping Yuan, and Ru-Chuan Wang. 2017. VulHunter: A Discovery for unknown Bugs based on Analysis for known patches in Industry Internet of Things. IEEE Transactions on Emerging Topics in Computing PP (09 2017 ), 1-1. https://doi.org/10.1109/TETC. 2017.2754103 ***http://scholar.google.com/scholar?hl=en&q=Fu+Xiao%2C+Le-Tian+Sha%2C+Zai-Ping+Yuan%2C+and+Ru-Chuan+Wang.+2017.+VulHunter%3A+A+Discovery+for+unknown+Bugs+based+on+Analysis+for+known+patches+in+Industry+Internet+of+Things.+IEEE+Transactions+on+Emerging+Topics+in+Computing+PP+%2809+2017+%29%2C+1-1.+https%3A%2F%2Fdoi.org%2F10.1109%2FTETC.+2017.2754103+10.1109%2FTETC.2017.2754103^^^Muneer Bani Yassein, Wail Mardini, and Ashwaq Khalil. 2016. Smart homes automation using Z-wave protocol. 2016 International Conference on Engineering & MIS (ICEMIS) ( 2016 ), 1-6.***http://scholar.google.com/scholar?hl=en&q=Muneer+Bani+Yassein%2C+Wail+Mardini%2C+and+Ashwaq+Khalil.+2016.+Smart+homes+automation+using+Z-wave+protocol.+2016+International+Conference+on+Engineering+%26+MIS+%28ICEMIS%29+%28+2016+%29%2C+1-6.^^^Tianlong Yu, Vyas Sekar, Srinivasan Seshan, Yuvraj Agarwal, and Chenren Xu. 2015. Handling a Trillion (Unfixable) Flaws on a Billion Devices: Rethinking Network Security for the Internet-of-Things. In Proceedings of the 14th ACM Workshop on Hot Topics in Networks (HotNets-XIV). Article 5, 7 pages.***http://scholar.google.com/scholar?hl=en&q=Tianlong+Yu%2C+Vyas+Sekar%2C+Srinivasan+Seshan%2C+Yuvraj+Agarwal%2C+and+Chenren+Xu.+2015.+Handling+a+Trillion+%28Unfixable%29+Flaws+on+a+Billion+Devices%3A+Rethinking+Network+Security+for+the+Internet-of-Things.+In+Proceedings+of+the+14th+ACM+Workshop+on+Hot+Topics+in+Networks+%28HotNets-XIV%29.+Article+5%2C+7+pages.^^^zapier 2020. zapier. https://zapier.com/.***http://scholar.google.com/scholar?hl=en&q=zapier+2020.+zapier.+https%3A%2F%2Fzapier.com%2F.^^^Bruno Bogaz Zarpelão, Rodrigo Sanches Miani, Cláudio Toshio Kawakani, and Sean Carlisto de Alvarenga. 2017. A survey of intrusion detection in Internet of Things. J. Netw. Comput. Appl. 84 ( 2017 ), 25-37. https://doi.org/10.1016/ j.jnca. 2017. 02.009 ***http://scholar.google.com/scholar?hl=en&q=Bruno+Bogaz+Zarpel%C3%A3o%2C+Rodrigo+Sanches+Miani%2C+Cl%C3%A1udio+Toshio+Kawakani%2C+and+Sean+Carlisto+de+Alvarenga.+2017.+A+survey+of+intrusion+detection+in+Internet+of+Things.+J.+Netw.+Comput.+Appl.+84+%28+2017+%29%2C+25-37.+https%3A%2F%2Fdoi.org%2F10.1016%2F+j.jnca.+2017.+02.009+10.1016%2Fj.jnca.2017.02.009^^^Wei Zhang, Yan Meng, Yugeng Liu, Xiaokuan Zhang, Yinqian Zhang, and Haojin Zhu. 2018. HoMonit: Monitoring Smart Home Apps from Encrypted Trafic. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS \'18). 1074-1088.***http://scholar.google.com/scholar?hl=en&q=Wei+Zhang%2C+Yan+Meng%2C+Yugeng+Liu%2C+Xiaokuan+Zhang%2C+Yinqian+Zhang%2C+and+Haojin+Zhu.+2018.+HoMonit%3A+Monitoring+Smart+Home+Apps+from+Encrypted+Trafic.+In+Proceedings+of+the+2018+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+%2718%29.+1074-1088.^^^');
INSERT INTO `paper_ref` VALUES (35, 19, 'Antlr. 2020. ANTLR Clojure Grammar. https://github.com/antlr/grammarsv4/tree/master/clojure. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Antlr.+2020.+ANTLR+Clojure+Grammar.+https%3A%2F%2Fgithub.com%2Fantlr%2Fgrammarsv4%2Ftree%2Fmaster%2Fclojure.+Online%3B+accessed+27+January+2020.^^^Antlr. 2020. ANTLR Javascript Grammar. https://github.com/antlr/grammarsv4/tree/master/javascript/javascript. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Antlr.+2020.+ANTLR+Javascript+Grammar.+https%3A%2F%2Fgithub.com%2Fantlr%2Fgrammarsv4%2Ftree%2Fmaster%2Fjavascript%2Fjavascript.+Online%3B+accessed+27+January+2020.^^^Antlr. 2020. ANTLR Lua Grammar. https://github.com/antlr/grammars-v4/tree/ master/lua. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Antlr.+2020.+ANTLR+Lua+Grammar.+https%3A%2F%2Fgithub.com%2Fantlr%2Fgrammars-v4%2Ftree%2F+master%2Flua.+Online%3B+accessed+27+January+2020.^^^Marcel Böhme and Abhik Roychoudhury. 2014. CoREBench: Studying Complexity of Regression Errors. In Proceedings of the 23rd ACM/SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2014 ). 105-115.***http://scholar.google.com/scholar?hl=en&q=Marcel+B%C3%B6hme+and+Abhik+Roychoudhury.+2014.+CoREBench%3A+Studying+Complexity+of+Regression+Errors.+In+Proceedings+of+the+23rd+ACM%2FSIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA+2014+%29.+105-115.^^^Nicolas Bruno. 2010. Minimizing Database Repros Using Language Grammars. In Proceedings of the 13th International Conference on Extending Database Technology (Lausanne, Switzerland) (EDBT \'10). Association for Computing Machinery, New York, NY, USA, 382-0393. https://doi.org/10.1145/1739041.1739088 ***http://scholar.google.com/scholar?hl=en&q=Nicolas+Bruno.+2010.+Minimizing+Database+Repros+Using+Language+Grammars.+In+Proceedings+of+the+13th+International+Conference+on+Extending+Database+Technology+%28Lausanne%2C+Switzerland%29+%28EDBT+%2710%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+382-0393.+https%3A%2F%2Fdoi.org%2F10.1145%2F1739041.1739088+10.1145%2F1739041.1739088^^^Clojure. 2020. Clojure Bugs. https://clojure.atlassian.net/secure/Dashboard.jspa. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Clojure.+2020.+Clojure+Bugs.+https%3A%2F%2Fclojure.atlassian.net%2Fsecure%2FDashboard.jspa.+Online%3B+accessed+27+January+2020.^^^Google. 2020. Closure 2842 Bugs. https://github.com/google/closure-compiler/ issues/2842. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Closure+2842+Bugs.+https%3A%2F%2Fgithub.com%2Fgoogle%2Fclosure-compiler%2F+issues%2F2842.+Online%3B+accessed+27+January+2020.^^^Google. 2020. Closure Bugs. https://github.com/google/closure-compiler/issues. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Closure+Bugs.+https%3A%2F%2Fgithub.com%2Fgoogle%2Fclosure-compiler%2Fissues.+Online%3B+accessed+27+January+2020.^^^Rahul Gopinath, Björn Mathis, and Andreas Zeller. 2020. Mining Input Grammars from Dynamic Control Flow. In Proceedings of the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) 2020.***http://scholar.google.com/scholar?hl=en&q=Rahul+Gopinath%2C+Bj%C3%B6rn+Mathis%2C+and+Andreas+Zeller.+2020.+Mining+Input+Grammars+from+Dynamic+Control+Flow.+In+Proceedings+of+the+ACM+Joint+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%29+2020.^^^Satia Herfert, Jibesh Patra, and Michael Pradel. 2017. Automatically Reducing Tree-structured Test Inputs. In IEEE/ACM Automated Software Engineering (Urbana-Champaign, IL, USA) ( ASE 2017). IEEE Press, Piscataway, NJ, USA, 861-871. http://dl.acm.org/citation.cfm?id= 3155562. 3155669***http://scholar.google.com/scholar?hl=en&q=Satia+Herfert%2C+Jibesh+Patra%2C+and+Michael+Pradel.+2017.+Automatically+Reducing+Tree-structured+Test+Inputs.+In+IEEE%2FACM+Automated+Software+Engineering+%28Urbana-Champaign%2C+IL%2C+USA%29+%28+ASE+2017%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+861-871.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3155562.+3155669^^^Lua. 2020. Lua Bugs. https://www.lua.org/bugs.html. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Lua.+2020.+Lua+Bugs.+https%3A%2F%2Fwww.lua.org%2Fbugs.html.+Online%3B+accessed+27+January+2020.^^^Ghassan Misherghi and Zhendong Su. 2006. HDD: Hierarchical Delta Debugging. In International Conference on Software Engineering. 142-151.***http://scholar.google.com/scholar?hl=en&q=Ghassan+Misherghi+and+Zhendong+Su.+2006.+HDD%3A+Hierarchical+Delta+Debugging.+In+International+Conference+on+Software+Engineering.+142-151.^^^Mozilla. 2020. Rhino 385. https://github.com/mozilla/rhino/issues/385. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Mozilla.+2020.+Rhino+385.+https%3A%2F%2Fgithub.com%2Fmozilla%2Frhino%2Fissues%2F385.+Online%3B+accessed+27+January+2020.^^^Mozilla. 2020. Rhino Bugs. https://github.com/mozilla/rhino/issues/385. Online; accessed 27 January 2020.***http://scholar.google.com/scholar?hl=en&q=Mozilla.+2020.+Rhino+Bugs.+https%3A%2F%2Fgithub.com%2Fmozilla%2Frhino%2Fissues%2F385.+Online%3B+accessed+27+January+2020.^^^Lee Pike. 2014. SmartCheck: automatic and eficient counterexample reduction and generalization. In Proceedings of the 2014 ACM SIGPLAN symposium on Haskell, Gothenburg, Sweden, September 4-5, 2014, Wouter Swierstra (Ed.). ACM, 53-64. https://doi.org/10.1145/2633357.2633365 ***http://scholar.google.com/scholar?hl=en&q=Lee+Pike.+2014.+SmartCheck%3A+automatic+and+eficient+counterexample+reduction+and+generalization.+In+Proceedings+of+the+2014+ACM+SIGPLAN+symposium+on+Haskell%2C+Gothenburg%2C+Sweden%2C+September+4-5%2C+2014%2C+Wouter+Swierstra+%28Ed.%29.+ACM%2C+53-64.+https%3A%2F%2Fdoi.org%2F10.1145%2F2633357.2633365+10.1145%2F2633357.2633365^^^John Regehr, Yang Chen, Pascal Cuoq, Eric Eide, Chucky Ellison, and Xuejun Yang. 2012. Test-case reduction for C compiler bugs. In Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation. 335-346.***http://scholar.google.com/scholar?hl=en&q=John+Regehr%2C+Yang+Chen%2C+Pascal+Cuoq%2C+Eric+Eide%2C+Chucky+Ellison%2C+and+Xuejun+Yang.+2012.+Test-case+reduction+for+C+compiler+bugs.+In+Proceedings+of+the+33rd+ACM+SIGPLAN+conference+on+Programming+Language+Design+and+Implementation.+335-346.^^^Chad D Sterling and Ronald A Olsson. 2007. Automated bug isolation via program chipping. Software: Practice and Experience 37, 10 ( 2007 ), 1061-1086.***http://scholar.google.com/scholar?hl=en&q=Chad+D+Sterling+and+Ronald+A+Olsson.+2007.+Automated+bug+isolation+via+program+chipping.+Software%3A+Practice+and+Experience+37%2C+10+%28+2007+%29%2C+1061-1086.^^^Chengnian Sun, Yuanbo Li, Qirun Zhang, Tianxiao Gu, and Zhendong Su. 2018. Perses: Syntax-guided Program Reduction. In International Conference on Software Engineering (Gothenburg, Sweden) ( ICSE \'18). ACM, New York, NY, USA, 361-371. https://doi.org/10.1145/3180155.3180236 ***http://scholar.google.com/scholar?hl=en&q=Chengnian+Sun%2C+Yuanbo+Li%2C+Qirun+Zhang%2C+Tianxiao+Gu%2C+and+Zhendong+Su.+2018.+Perses%3A+Syntax-guided+Program+Reduction.+In+International+Conference+on+Software+Engineering+%28Gothenburg%2C+Sweden%29+%28+ICSE+%2718%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+361-371.+https%3A%2F%2Fdoi.org%2F10.1145%2F3180155.3180236+10.1145%2F3180155.3180236^^^A. Zeller and R. Hildebrandt. 2002. Simplifying and isolating failure-inducing input. IEEE Transactions on Software Engineering 28, 2 (Feb 2002 ), 183-200. https://doi.org/10.1109/32.988498 ***http://scholar.google.com/scholar?hl=en&q=A.+Zeller+and+R.+Hildebrandt.+2002.+Simplifying+and+isolating+failure-inducing+input.+IEEE+Transactions+on+Software+Engineering+28%2C+2+%28Feb+2002+%29%2C+183-200.+https%3A%2F%2Fdoi.org%2F10.1109%2F32.988498+10.1109%2F32.988498^^^');
INSERT INTO `paper_ref` VALUES (36, 33, 'Rui Abreu, Peter Zoeteweij, and Arjan JC Van Gemund. 2007. On the accuracy of spectrum-based fault localization. In Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION (TAICPART-MUTATION 2007 ). IEEE, 89-98.***http://scholar.google.com/scholar?hl=en&q=Rui+Abreu%2C+Peter+Zoeteweij%2C+and+Arjan+JC+Van+Gemund.+2007.+On+the+accuracy+of+spectrum-based+fault+localization.+In+Testing%3A+Academic+and+Industrial+Conference+Practice+and+Research+Techniques-MUTATION+%28TAICPART-MUTATION+2007+%29.+IEEE%2C+89-98.^^^Ranjita Bhagwan, Rahul Kumar, Chandra Shekhar Maddila, and Adithya Abraham Philip. 2018. Orca: Diferential Bug Localization in Large-Scale Services. In 13th USENIX Symposium on Operating Systems Design and Implementation, OSDI 2018, Carlsbad, CA, USA, October 8-10, 2018. 493-509. https://www.usenix.org/ conference/osdi18/presentation/bhagwan***http://scholar.google.com/scholar?hl=en&q=Ranjita+Bhagwan%2C+Rahul+Kumar%2C+Chandra+Shekhar+Maddila%2C+and+Adithya+Abraham+Philip.+2018.+Orca%3A+Diferential+Bug+Localization+in+Large-Scale+Services.+In+13th+USENIX+Symposium+on+Operating+Systems+Design+and+Implementation%2C+OSDI+2018%2C+Carlsbad%2C+CA%2C+USA%2C+October+8-10%2C+2018.+493-509.+https%3A%2F%2Fwww.usenix.org%2F+conference%2Fosdi18%2Fpresentation%2Fbhagwan^^^Marco Castelluccio, Carlo Sansone, Luisa Verdoliva, and Giovanni Poggi. 2017. Automatically analyzing groups of crashes for finding correlations. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, Paderborn, Germany, September 4-8, 2017. 717-726. https://doi.org/10.1145/ 3106237.3106306 ***http://scholar.google.com/scholar?hl=en&q=Marco+Castelluccio%2C+Carlo+Sansone%2C+Luisa+Verdoliva%2C+and+Giovanni+Poggi.+2017.+Automatically+analyzing+groups+of+crashes+for+finding+correlations.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2017%2C+Paderborn%2C+Germany%2C+September+4-8%2C+2017.+717-726.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3106237.3106306+10.1145%2F3106237.3106306^^^Yingnong Dang, Rongxin Wu, Hongyu Zhang, Dongmei Zhang, and Peter Nobel. 2012. ReBucket: A method for clustering duplicate crash reports based on call stack similarity. In 34th International Conference on Software Engineering, ICSE 2012, June 2-9, 2012, Zurich, Switzerland. 1084-1093. https://doi.org/10.1109/ICSE. 2012.6227111 ***http://scholar.google.com/scholar?hl=en&q=Yingnong+Dang%2C+Rongxin+Wu%2C+Hongyu+Zhang%2C+Dongmei+Zhang%2C+and+Peter+Nobel.+2012.+ReBucket%3A+A+method+for+clustering+duplicate+crash+reports+based+on+call+stack+similarity.+In+34th+International+Conference+on+Software+Engineering%2C+ICSE+2012%2C+June+2-9%2C+2012%2C+Zurich%2C+Switzerland.+1084-1093.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2012.6227111+10.1109%2FICSE.2012.6227111^^^Tejinder Dhaliwal, Foutse Khomh, and Ying Zou. 2011. Classifying field crash reports for fixing bugs: A case study of Mozilla Firefox. In IEEE 27th International Conference on Software Maintenance, ICSM 2011, Williamsburg, VA, USA, September 25-30, 2011. 333-342. https://doi.org/10.1109/ICSM. 2011.6080800 ***http://scholar.google.com/scholar?hl=en&q=Tejinder+Dhaliwal%2C+Foutse+Khomh%2C+and+Ying+Zou.+2011.+Classifying+field+crash+reports+for+fixing+bugs%3A+A+case+study+of+Mozilla+Firefox.+In+IEEE+27th+International+Conference+on+Software+Maintenance%2C+ICSM+2011%2C+Williamsburg%2C+VA%2C+USA%2C+September+25-30%2C+2011.+333-342.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSM.+2011.6080800+10.1109%2FICSM.2011.6080800^^^James A. Jones, Mary Jean Harrold, and John T. Stasko. 2002. Visualization of test information to assist fault localization. In Proceedings of the 24th International Conference on Software Engineering, ICSE 2002, 19-25 May 2002, Orlando, Florida, USA. 467-477. https://doi.org/10.1145/581339.581397 ***http://scholar.google.com/scholar?hl=en&q=James+A.+Jones%2C+Mary+Jean+Harrold%2C+and+John+T.+Stasko.+2002.+Visualization+of+test+information+to+assist+fault+localization.+In+Proceedings+of+the+24th+International+Conference+on+Software+Engineering%2C+ICSE+2002%2C+19-25+May+2002%2C+Orlando%2C+Florida%2C+USA.+467-477.+https%3A%2F%2Fdoi.org%2F10.1145%2F581339.581397+10.1145%2F581339.581397^^^Leif Jonsson, Markus Borg, David Broman, Kristian Sandahl, Sigrid Eldh, and Per Runeson. 2016. Automated bug assignment: Ensemble-based machine learning in large scale industrial contexts. Empirical Software Engineering 21, 4 ( 2016 ), 1533-1578. https://doi.org/10.1007/s10664-015-9401-9 ***http://scholar.google.com/scholar?hl=en&q=Leif+Jonsson%2C+Markus+Borg%2C+David+Broman%2C+Kristian+Sandahl%2C+Sigrid+Eldh%2C+and+Per+Runeson.+2016.+Automated+bug+assignment%3A+Ensemble-based+machine+learning+in+large+scale+industrial+contexts.+Empirical+Software+Engineering+21%2C+4+%28+2016+%29%2C+1533-1578.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10664-015-9401-9+10.1007%2Fs10664-015-9401-9^^^Foutse Khomh, Brian Chan, Ying Zou, and Ahmed E. Hassan. 2011. An Entropy Evaluation Approach for Triaging Field Crashes: A Case Study of Mozilla Firefox. In 18th Working Conference on Reverse Engineering, WCRE 2011, Limerick, Ireland, October 17-20, 2011. 261-270. https://doi.org/10.1109/WCRE. 2011.39 ***http://scholar.google.com/scholar?hl=en&q=Foutse+Khomh%2C+Brian+Chan%2C+Ying+Zou%2C+and+Ahmed+E.+Hassan.+2011.+An+Entropy+Evaluation+Approach+for+Triaging+Field+Crashes%3A+A+Case+Study+of+Mozilla+Firefox.+In+18th+Working+Conference+on+Reverse+Engineering%2C+WCRE+2011%2C+Limerick%2C+Ireland%2C+October+17-20%2C+2011.+261-270.+https%3A%2F%2Fdoi.org%2F10.1109%2FWCRE.+2011.39+10.1109%2FWCRE.2011.39^^^Dongsun Kim, Yida Tao, Sunghun Kim, and Andreas Zeller. 2013. Where Should We Fix This Bug? A Two-Phase Recommendation Model. IEEE Trans. Software Eng. 39, 11 ( 2013 ), 1597-1610. https://doi.org/10.1109/TSE. 2013.24 ***http://scholar.google.com/scholar?hl=en&q=Dongsun+Kim%2C+Yida+Tao%2C+Sunghun+Kim%2C+and+Andreas+Zeller.+2013.+Where+Should+We+Fix+This+Bug%3F+A+Two-Phase+Recommendation+Model.+IEEE+Trans.+Software+Eng.+39%2C+11+%28+2013+%29%2C+1597-1610.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2013.24+10.1109%2FTSE.2013.24^^^Dongsun Kim, Xinming Wang, Sunghun Kim, Andreas Zeller, Shing-Chi Cheung, and Sooyong Park. 2011. Which Crashes Should I Fix First?: Predicting Top Crashes at an Early Stage to Prioritize Debugging Eforts. IEEE Trans. Software Eng. 37, 3 ( 2011 ), 430-447. https://doi.org/10.1109/TSE. 2011.20 ***http://scholar.google.com/scholar?hl=en&q=Dongsun+Kim%2C+Xinming+Wang%2C+Sunghun+Kim%2C+Andreas+Zeller%2C+Shing-Chi+Cheung%2C+and+Sooyong+Park.+2011.+Which+Crashes+Should+I+Fix+First%3F%3A+Predicting+Top+Crashes+at+an+Early+Stage+to+Prioritize+Debugging+Eforts.+IEEE+Trans.+Software+Eng.+37%2C+3+%28+2011+%29%2C+430-447.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2011.20+10.1109%2FTSE.2011.20^^^Kinshuman Kinshumann, Kirk Glerum, Steve Greenberg, Gabriel Aul, Vince R. Orgovan, Greg Nichols, David Grant, Gretchen Loihle, and Galen C. Hunt. 2011. Debugging in the (very) large: ten years of implementation and experience. Commun. ACM 54, 7 ( 2011 ), 111-116. https://doi.org/10.1145/1965724.1965749 ***http://scholar.google.com/scholar?hl=en&q=Kinshuman+Kinshumann%2C+Kirk+Glerum%2C+Steve+Greenberg%2C+Gabriel+Aul%2C+Vince+R.+Orgovan%2C+Greg+Nichols%2C+David+Grant%2C+Gretchen+Loihle%2C+and+Galen+C.+Hunt.+2011.+Debugging+in+the+%28very%29+large%3A+ten+years+of+implementation+and+experience.+Commun.+ACM+54%2C+7+%28+2011+%29%2C+111-116.+https%3A%2F%2Fdoi.org%2F10.1145%2F1965724.1965749+10.1145%2F1965724.1965749^^^Anil Koyuncu, Tegawendé F. Bissyandé, Dongsun Kim, Kui Liu, Jacques Klein, Martin Monperrus, and Yves Le Traon. 2019. D& C: A Divide-and-Conquer Approach to IR-based Bug Localization. IEEE Transactions on Software Engineering ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Anil+Koyuncu%2C+Tegawend%C3%A9+F.+Bissyand%C3%A9%2C+Dongsun+Kim%2C+Kui+Liu%2C+Jacques+Klein%2C+Martin+Monperrus%2C+and+Yves+Le+Traon.+2019.+D%26+C%3A+A+Divide-and-Conquer+Approach+to+IR-based+Bug+Localization.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.^^^An Ngoc Lam, Anh Tuan Nguyen, Hoan Anh Nguyen, and Tien N. Nguyen. 2015. Combining Deep Learning with Information Retrieval to Localize Buggy Files for Bug Reports (N). In 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, Lincoln, NE, USA, November 9-13, 2015. 476-481. https://doi.org/10.1109/ASE. 2015.73 ***http://scholar.google.com/scholar?hl=en&q=An+Ngoc+Lam%2C+Anh+Tuan+Nguyen%2C+Hoan+Anh+Nguyen%2C+and+Tien+N.+Nguyen.+2015.+Combining+Deep+Learning+with+Information+Retrieval+to+Localize+Buggy+Files+for+Bug+Reports+%28N%29.+In+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2015%2C+Lincoln%2C+NE%2C+USA%2C+November+9-13%2C+2015.+476-481.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2015.73+10.1109%2FASE.2015.73^^^Claire Le Goues, Michael Pradel, and Abhik Roychoudhury. 2019. Automated program repair. Commun. ACM 62, 12 ( 2019 ), 56-65. https://doi.org/10.1145/ 3318162 ***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Michael+Pradel%2C+and+Abhik+Roychoudhury.+2019.+Automated+program+repair.+Commun.+ACM+62%2C+12+%28+2019+%29%2C+56-65.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3318162+10.1145%2F3318162^^^Xiangyu Li, Shaowei Zhu, Marcelo d\'Amorim, and Alessandro Orso. 2018. Enlightened debugging. In Proceedings of the 40th International Conference on Software Engineering, ICSE 2018, Gothenburg, Sweden, May 27-June 03, 2018. 82-92. https://doi.org/10.1145/3180155.3180242 ***http://scholar.google.com/scholar?hl=en&q=Xiangyu+Li%2C+Shaowei+Zhu%2C+Marcelo+d%27Amorim%2C+and+Alessandro+Orso.+2018.+Enlightened+debugging.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%2C+ICSE+2018%2C+Gothenburg%2C+Sweden%2C+May+27-June+03%2C+2018.+82-92.+https%3A%2F%2Fdoi.org%2F10.1145%2F3180155.3180242+10.1145%2F3180155.3180242^^^Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jefrey Dean. 2013. Distributed Representations of Words and Phrases and their Compositionality. In Advances in Neural Information Processing Systems 26: 27th Annual Conference on Neural Information Processing Systems 2013. Proceedings of a meeting held December 5-8, 2013, Lake Tahoe, Nevada, United States. 3111-3119.***http://scholar.google.com/scholar?hl=en&q=Tomas+Mikolov%2C+Ilya+Sutskever%2C+Kai+Chen%2C+Gregory+S.+Corrado%2C+and+Jefrey+Dean.+2013.+Distributed+Representations+of+Words+and+Phrases+and+their+Compositionality.+In+Advances+in+Neural+Information+Processing+Systems+26%3A+27th+Annual+Conference+on+Neural+Information+Processing+Systems+2013.+Proceedings+of+a+meeting+held+December+5-8%2C+2013%2C+Lake+Tahoe%2C+Nevada%2C+United+States.+3111-3119.^^^Laura Moreno, John Joseph Treadway, Andrian Marcus, and Wuwei Shen. 2014. On the Use of Stack Traces to Improve Text Retrieval-Based Bug Localization. In 30th IEEE International Conference on Software Maintenance and Evolution, Victoria, BC, Canada, September 29-October 3, 2014. 151-160. https://doi.org/10. 1109/ICSME. 2014.37 ***http://scholar.google.com/scholar?hl=en&q=Laura+Moreno%2C+John+Joseph+Treadway%2C+Andrian+Marcus%2C+and+Wuwei+Shen.+2014.+On+the+Use+of+Stack+Traces+to+Improve+Text+Retrieval-Based+Bug+Localization.+In+30th+IEEE+International+Conference+on+Software+Maintenance+and+Evolution%2C+Victoria%2C+BC%2C+Canada%2C+September+29-October+3%2C+2014.+151-160.+https%3A%2F%2Fdoi.org%2F10.+1109%2FICSME.+2014.37+10.1109%2FICSME.2014.37^^^Anh Tuan Nguyen, Tung Thanh Nguyen, Jafar M. Al-Kofahi, Hung Viet Nguyen, and Tien N. Nguyen. 2011. A topic-based approach for narrowing the search space of buggy files from a bug report. In 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011 ), Lawrence, KS, USA, November 6-10, 2011. 263-272. https://doi.org/10.1109/ASE. 2011.6100062 ***http://scholar.google.com/scholar?hl=en&q=Anh+Tuan+Nguyen%2C+Tung+Thanh+Nguyen%2C+Jafar+M.+Al-Kofahi%2C+Hung+Viet+Nguyen%2C+and+Tien+N.+Nguyen.+2011.+A+topic-based+approach+for+narrowing+the+search+space+of+buggy+files+from+a+bug+report.+In+26th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+2011+%29%2C+Lawrence%2C+KS%2C+USA%2C+November+6-10%2C+2011.+263-272.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2011.6100062+10.1109%2FASE.2011.6100062^^^Mohammad Masudur Rahman and Chanchal K. Roy. 2018. Improving IRbased bug localization with context-aware query reformulation. In Proceedings of the 2018 ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2018, Lake Buena Vista, FL, USA, November 04-09, 2018. 621-632. https: //doi.org/10.1145/3236024.3236065 ***http://scholar.google.com/scholar?hl=en&q=Mohammad+Masudur+Rahman+and+Chanchal+K.+Roy.+2018.+Improving+IRbased+bug+localization+with+context-aware+query+reformulation.+In+Proceedings+of+the+2018+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FSIGSOFT+FSE+2018%2C+Lake+Buena+Vista%2C+FL%2C+USA%2C+November+04-09%2C+2018.+621-632.+https%3A+%2F%2Fdoi.org%2F10.1145%2F3236024.3236065+10.1145%2F3236024.3236065^^^Saksham Sachdev, Hongyu Li, Sifei Luan, Seohyun Kim, Koushik Sen, and Satish Chandra. 2018. Retrieval on source code: a neural code search. In Proceedings of the 2nd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages. ACM, 31-41.***http://scholar.google.com/scholar?hl=en&q=Saksham+Sachdev%2C+Hongyu+Li%2C+Sifei+Luan%2C+Seohyun+Kim%2C+Koushik+Sen%2C+and+Satish+Chandra.+2018.+Retrieval+on+source+code%3A+a+neural+code+search.+In+Proceedings+of+the+2nd+ACM+SIGPLAN+International+Workshop+on+Machine+Learning+and+Programming+Languages.+ACM%2C+31-41.^^^Ripon K. Saha, Matthew Lease, Sarfraz Khurshid, and Dewayne E. Perry. 2013. Improving bug localization using structured information retrieval. In 2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013, Silicon Valley, CA, USA, November 11-15, 2013. 345-355. https://doi.org/10.1109/ ASE. 2013.6693093 ***http://scholar.google.com/scholar?hl=en&q=Ripon+K.+Saha%2C+Matthew+Lease%2C+Sarfraz+Khurshid%2C+and+Dewayne+E.+Perry.+2013.+Improving+bug+localization+using+structured+information+retrieval.+In+2013+28th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2013%2C+Silicon+Valley%2C+CA%2C+USA%2C+November+11-15%2C+2013.+345-355.+https%3A%2F%2Fdoi.org%2F10.1109%2F+ASE.+2013.6693093+10.1109%2FASE.2013.6693093^^^Mozhan Soltani, Annibale Panichella, and Arie van Deursen. 2017. A guided genetic algorithm for automated crash reproduction. In Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017. 209-220. https://doi.org/10.1109/ICSE. 2017.27 ***http://scholar.google.com/scholar?hl=en&q=Mozhan+Soltani%2C+Annibale+Panichella%2C+and+Arie+van+Deursen.+2017.+A+guided+genetic+algorithm+for+automated+crash+reproduction.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering%2C+ICSE+2017%2C+Buenos+Aires%2C+Argentina%2C+May+20-28%2C+2017.+209-220.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2017.27+10.1109%2FICSE.2017.27^^^Rijnard van Tonder, John Kotheimer, and Claire Le Goues. 2018. Semantic crash bucketing. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, ASE 2018, Montpellier, France, September 3-7, 2018. 612-622. https://doi.org/10.1145/3238147.3238200 ***http://scholar.google.com/scholar?hl=en&q=Rijnard+van+Tonder%2C+John+Kotheimer%2C+and+Claire+Le+Goues.+2018.+Semantic+crash+bucketing.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering%2C+ASE+2018%2C+Montpellier%2C+France%2C+September+3-7%2C+2018.+612-622.+https%3A%2F%2Fdoi.org%2F10.1145%2F3238147.3238200+10.1145%2F3238147.3238200^^^Qianqian Wang, Chris Parnin, and Alessandro Orso. 2015. Evaluating the usefulness of IR-based fault localization techniques. In Proceedings of the 2015 International Symposium on Software Testing and Analysis, ISSTA 2015, Baltimore, MD, USA, July 12-17, 2015. 1-11. https://doi.org/10.1145/2771783.2771797 ***http://scholar.google.com/scholar?hl=en&q=Qianqian+Wang%2C+Chris+Parnin%2C+and+Alessandro+Orso.+2015.+Evaluating+the+usefulness+of+IR-based+fault+localization+techniques.+In+Proceedings+of+the+2015+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2015%2C+Baltimore%2C+MD%2C+USA%2C+July+12-17%2C+2015.+1-11.+https%3A%2F%2Fdoi.org%2F10.1145%2F2771783.2771797+10.1145%2F2771783.2771797^^^Shaohua Wang, Foutse Khomh, and Ying Zou. 2013. Improving bug localization using correlations in crash reports. In Proceedings of the 10th Working Conference on Mining Software Repositories, MSR \'13, San Francisco, CA, USA, May 18-19, 2013. 247-256. https://doi.org/10.1109/MSR. 2013.6624036 ***http://scholar.google.com/scholar?hl=en&q=Shaohua+Wang%2C+Foutse+Khomh%2C+and+Ying+Zou.+2013.+Improving+bug+localization+using+correlations+in+crash+reports.+In+Proceedings+of+the+10th+Working+Conference+on+Mining+Software+Repositories%2C+MSR+%2713%2C+San+Francisco%2C+CA%2C+USA%2C+May+18-19%2C+2013.+247-256.+https%3A%2F%2Fdoi.org%2F10.1109%2FMSR.+2013.6624036+10.1109%2FMSR.2013.6624036^^^Ming Wen, Rongxin Wu, and Shing-Chi Cheung. 2016. Locus: locating bugs from software changes. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, ASE 2016, Singapore, September 3-7, 2016. 262-273. https://doi.org/10.1145/2970276.2970359 ***http://scholar.google.com/scholar?hl=en&q=Ming+Wen%2C+Rongxin+Wu%2C+and+Shing-Chi+Cheung.+2016.+Locus%3A+locating+bugs+from+software+changes.+In+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2016%2C+Singapore%2C+September+3-7%2C+2016.+262-273.+https%3A%2F%2Fdoi.org%2F10.1145%2F2970276.2970359+10.1145%2F2970276.2970359^^^Chu-Pan Wong, Yingfei Xiong, Hongyu Zhang, Dan Hao, Lu Zhang, and Hong Mei. 2014. Boosting bug-report-oriented fault localization with segmentation and stack-trace analysis. In 2014 IEEE International Conference on Software Maintenance and Evolution. IEEE, 181-190.***http://scholar.google.com/scholar?hl=en&q=Chu-Pan+Wong%2C+Yingfei+Xiong%2C+Hongyu+Zhang%2C+Dan+Hao%2C+Lu+Zhang%2C+and+Hong+Mei.+2014.+Boosting+bug-report-oriented+fault+localization+with+segmentation+and+stack-trace+analysis.+In+2014+IEEE+International+Conference+on+Software+Maintenance+and+Evolution.+IEEE%2C+181-190.^^^W. Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. A Survey on Software Fault Localization. IEEE Trans. Software Eng. 42, 8 ( 2016 ), 707-740. https://doi.org/10.1109/TSE. 2016.2521368 ***http://scholar.google.com/scholar?hl=en&q=W.+Eric+Wong%2C+Ruizhi+Gao%2C+Yihao+Li%2C+Rui+Abreu%2C+and+Franz+Wotawa.+2016.+A+Survey+on+Software+Fault+Localization.+IEEE+Trans.+Software+Eng.+42%2C+8+%28+2016+%29%2C+707-740.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2016.2521368+10.1109%2FTSE.2016.2521368^^^Rongxin Wu, Ming Wen, Shing-Chi Cheung, and Hongyu Zhang. 2018. ChangeLocator: locate crash-inducing changes based on crash reports. Empirical Software Engineering 23, 5 ( 2018 ), 2866-2900. https://doi.org/10.1007/s10664-017-9567-4 ***http://scholar.google.com/scholar?hl=en&q=Rongxin+Wu%2C+Ming+Wen%2C+Shing-Chi+Cheung%2C+and+Hongyu+Zhang.+2018.+ChangeLocator%3A+locate+crash-inducing+changes+based+on+crash+reports.+Empirical+Software+Engineering+23%2C+5+%28+2018+%29%2C+2866-2900.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10664-017-9567-4+10.1007%2Fs10664-017-9567-4^^^Rongxin Wu, Hongyu Zhang, Shing-Chi Cheung, and Sunghun Kim. 2014. CrashLocator: locating crashing faults based on crash stacks. In International Symposium on Software Testing and Analysis, ISSTA \'14, San Jose, CA, USA-July 21-26, 2014. 204-214. https://doi.org/10.1145/2610384.2610386 ***http://scholar.google.com/scholar?hl=en&q=Rongxin+Wu%2C+Hongyu+Zhang%2C+Shing-Chi+Cheung%2C+and+Sunghun+Kim.+2014.+CrashLocator%3A+locating+crashing+faults+based+on+crash+stacks.+In+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+%2714%2C+San+Jose%2C+CA%2C+USA-July+21-26%2C+2014.+204-214.+https%3A%2F%2Fdoi.org%2F10.1145%2F2610384.2610386+10.1145%2F2610384.2610386^^^Xin Ye, Razvan Bunescu, and Chang Liu. 2015. Mapping bug reports to relevant ifles: A ranking model, a fine-grained benchmark, and feature evaluation. IEEE Transactions on Software Engineering 42, 4 ( 2015 ), 379-402.***http://scholar.google.com/scholar?hl=en&q=Xin+Ye%2C+Razvan+Bunescu%2C+and+Chang+Liu.+2015.+Mapping+bug+reports+to+relevant+ifles%3A+A+ranking+model%2C+a+fine-grained+benchmark%2C+and+feature+evaluation.+IEEE+Transactions+on+Software+Engineering+42%2C+4+%28+2015+%29%2C+379-402.^^^Xin Ye, Razvan C. Bunescu, and Chang Liu. 2014. Learning to rank relevant files for bug reports using domain knowledge. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), Hong Kong, China, November 16-22, 2014. 689-699. https://doi.org/10.1145/2635868. 2635874 ***http://scholar.google.com/scholar?hl=en&q=Xin+Ye%2C+Razvan+C.+Bunescu%2C+and+Chang+Liu.+2014.+Learning+to+rank+relevant+files+for+bug+reports+using+domain+knowledge.+In+Proceedings+of+the+22nd+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering%2C+%28FSE-22%29%2C+Hong+Kong%2C+China%2C+November+16-22%2C+2014.+689-699.+https%3A%2F%2Fdoi.org%2F10.1145%2F2635868.+2635874+10.1145%2F2635868.2635874^^^Jian Zhou, Hongyu Zhang, and David Lo. 2012. Where should the bugs be fixed? More accurate information retrieval-based bug localization based on bug reports. In 34th International Conference on Software Engineering, ICSE 2012, June 2-9, 2012, Zurich, Switzerland. 14-24. https://doi.org/10.1109/ICSE. 2012.6227210 ***http://scholar.google.com/scholar?hl=en&q=Jian+Zhou%2C+Hongyu+Zhang%2C+and+David+Lo.+2012.+Where+should+the+bugs+be+fixed%3F+More+accurate+information+retrieval-based+bug+localization+based+on+bug+reports.+In+34th+International+Conference+on+Software+Engineering%2C+ICSE+2012%2C+June+2-9%2C+2012%2C+Zurich%2C+Switzerland.+14-24.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2012.6227210+10.1109%2FICSE.2012.6227210^^^');
INSERT INTO `paper_ref` VALUES (37, 72, 'AllenNLP Commit 089d744 2019. https://github.com/allenai/allennlp/pull/2778/ commits/089d744.***http://scholar.google.com/scholar?hl=en&q=AllenNLP+Commit+089d744+2019.+https%3A%2F%2Fgithub.com%2Fallenai%2Fallennlp%2Fpull%2F2778%2F+commits%2F089d744.^^^AllenNLP Commit 53bba3d 2018. https://github.com/allenai/allennlp/commit/ 53bba3d.***http://scholar.google.com/scholar?hl=en&q=AllenNLP+Commit+53bba3d+2018.+https%3A%2F%2Fgithub.com%2Fallenai%2Fallennlp%2Fcommit%2F+53bba3d.^^^AllenNLP Issue 727 2018. https://github.com/allenai/allennlp/pull/727.***http://scholar.google.com/scholar?hl=en&q=AllenNLP+Issue+727+2018.+https%3A%2F%2Fgithub.com%2Fallenai%2Fallennlp%2Fpull%2F727.^^^American Fuzzy Loop 2014. http://lcamtuf.coredump.cx/afl.***http://scholar.google.com/scholar?hl=en&q=American+Fuzzy+Loop+2014.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl.^^^Earl T Barr, Mark Harman, Phil McMinn, Muzammil Shahbaz, and Shin Yoo. 2015. The oracle problem in software testing: A survey. IEEE transactions on software engineering ( 2015 ).***http://scholar.google.com/scholar?hl=en&q=Earl+T+Barr%2C+Mark+Harman%2C+Phil+McMinn%2C+Muzammil+Shahbaz%2C+and+Shin+Yoo.+2015.+The+oracle+problem+in+software+testing%3A+A+survey.+IEEE+transactions+on+software+engineering+%28+2015+%29.^^^M. Bates. 1995. Models of natural language understanding. Proceedings of the National Academy of Sciences of the United States of America ( 1995 ).***http://scholar.google.com/scholar?hl=en&q=M.+Bates.+1995.+Models+of+natural+language+understanding.+Proceedings+of+the+National+Academy+of+Sciences+of+the+United+States+of+America+%28+1995+%29.^^^Matthew James Beal. 2003. Variational algorithms for approximate Bayesian inference.***http://scholar.google.com/scholar?hl=en&q=Matthew+James+Beal.+2003.+Variational+algorithms+for+approximate+Bayesian+inference.^^^Jonathan Bell, Owolabi Legunsen, Michael Hilton, Lamyaa Eloussi, Tifany Yung, and Darko Marinov. 2018. DeFlaker: Automatically detecting flaky tests. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell%2C+Owolabi+Legunsen%2C+Michael+Hilton%2C+Lamyaa+Eloussi%2C+Tifany+Yung%2C+and+Darko+Marinov.+2018.+DeFlaker%3A+Automatically+detecting+flaky+tests.+In+ICSE.^^^Eli Bingham, Jonathan P Chen, Martin Jankowiak, Fritz Obermeyer, Neeraj Pradhan, Theofanis Karaletsos, Rohit Singh, Paul Szerlip, Paul Horsfall, and Noah D Goodman. 2019. Pyro: Deep universal probabilistic programming. The Journal of Machine Learning Research ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Eli+Bingham%2C+Jonathan+P+Chen%2C+Martin+Jankowiak%2C+Fritz+Obermeyer%2C+Neeraj+Pradhan%2C+Theofanis+Karaletsos%2C+Rohit+Singh%2C+Paul+Szerlip%2C+Paul+Horsfall%2C+and+Noah+D+Goodman.+2019.+Pyro%3A+Deep+universal+probabilistic+programming.+The+Journal+of+Machine+Learning+Research+%28+2019+%29.^^^Bob Carpenter, Andrew Gelman, Matt Hofman, Daniel Lee, Ben Goodrich, Michael Betancourt, Michael A Brubaker, Jiqiang Guo, Peter Li, Allen Riddell, et al. 2016. Stan: A probabilistic programming language. JSTATSOFT ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Bob+Carpenter%2C+Andrew+Gelman%2C+Matt+Hofman%2C+Daniel+Lee%2C+Ben+Goodrich%2C+Michael+Betancourt%2C+Michael+A+Brubaker%2C+Jiqiang+Guo%2C+Peter+Li%2C+Allen+Riddell%2C+et+al.+2016.+Stan%3A+A+probabilistic+programming+language.+JSTATSOFT+%28+2016+%29.^^^Guillaume Claret, Sriram K. Rajamani, Aditya V. Nori, Andrew D. Gordon, and Johannes Borgström. 2013. Bayesian Inference Using Data Flow Analysis. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=Guillaume+Claret%2C+Sriram+K.+Rajamani%2C+Aditya+V.+Nori%2C+Andrew+D.+Gordon%2C+and+Johannes+Borgstr%C3%B6m.+2013.+Bayesian+Inference+Using+Data+Flow+Analysis.+In+ESEC%2FFSE.^^^Cleverhans Commit 58505ce 2017. https://github.com/tensorflow/cleverhans/ pull/149/commits/58505ce.***http://scholar.google.com/scholar?hl=en&q=Cleverhans+Commit+58505ce+2017.+https%3A%2F%2Fgithub.com%2Ftensorflow%2Fcleverhans%2F+pull%2F149%2Fcommits%2F58505ce.^^^Cleverhans Issue 167 2017. https://github.com/tensorflow/cleverhans/issues/167.***http://scholar.google.com/scholar?hl=en&q=Cleverhans+Issue+167+2017.+https%3A%2F%2Fgithub.com%2Ftensorflow%2Fcleverhans%2Fissues%2F167.^^^Conda package management system 2017. https://docs.conda.io.***http://scholar.google.com/scholar?hl=en&q=Conda+package+management+system+2017.+https%3A%2F%2Fdocs.conda.io.^^^Maxime Cordy, Renaud Rwemalika, Mike Papadakis, and Mark Harman. 2019. FlakiMe: Laboratory-Controlled Test Flakiness Impact Assessment. A Case Study on Mutation Testing and Program Repair. arXiv: 1912. 03197 [cs.SE]***http://scholar.google.com/scholar?hl=en&q=Maxime+Cordy%2C+Renaud+Rwemalika%2C+Mike+Papadakis%2C+and+Mark+Harman.+2019.+FlakiMe%3A+Laboratory-Controlled+Test+Flakiness+Impact+Assessment.+A+Case+Study+on+Mutation+Testing+and+Program+Repair.+arXiv%3A+1912.+03197+%5Bcs.SE%5D^^^Marco Cusumano-Towner, Benjamin Bichsel, Timon Gehr, Vikash K. Mansinghka, and Martin Vechev. 2018. Incremental Inference for Probabilistic Programs. In PLDI.***http://scholar.google.com/scholar?hl=en&q=Marco+Cusumano-Towner%2C+Benjamin+Bichsel%2C+Timon+Gehr%2C+Vikash+K.+Mansinghka%2C+and+Martin+Vechev.+2018.+Incremental+Inference+for+Probabilistic+Programs.+In+PLDI.^^^Joshua V Dillon, Ian Langmore, Dustin Tran, Eugene Brevdo, Srinivas Vasudevan, Dave Moore, Brian Patton, Alex Alemi, Matt Hofman, and Rif A Saurous. 2017. Tensorflow distributions. arXiv preprint arXiv:1711.10604 ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Joshua+V+Dillon%2C+Ian+Langmore%2C+Dustin+Tran%2C+Eugene+Brevdo%2C+Srinivas+Vasudevan%2C+Dave+Moore%2C+Brian+Patton%2C+Alex+Alemi%2C+Matt+Hofman%2C+and+Rif+A+Saurous.+2017.+Tensorflow+distributions.+arXiv+preprint+arXiv%3A1711.10604+%28+2017+%29.^^^Saikat Dutta, Owolabi Legunsen, Zixin Huang, and Sasa Misailovic. 2018. Testing probabilistic programming systems. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=Saikat+Dutta%2C+Owolabi+Legunsen%2C+Zixin+Huang%2C+and+Sasa+Misailovic.+2018.+Testing+probabilistic+programming+systems.+In+ESEC%2FFSE.^^^Saikat Dutta, Wenxian Zhang, Zixin Huang, and Sasa Misailovic. 2019. Storm: program reduction for testing and debugging probabilistic programming systems. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=Saikat+Dutta%2C+Wenxian+Zhang%2C+Zixin+Huang%2C+and+Sasa+Misailovic.+2019.+Storm%3A+program+reduction+for+testing+and+debugging+probabilistic+programming+systems.+In+ESEC%2FFSE.^^^Anurag Dwarakanath, Manish Ahuja, Samarth Sikand, Raghotham M Rao, RP Jagadeesh Chandra Bose, Neville Dubash, and Sanjay Podder. 2018. Identifying implementation bugs in machine learning based image classifiers using metamorphic testing. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Anurag+Dwarakanath%2C+Manish+Ahuja%2C+Samarth+Sikand%2C+Raghotham+M+Rao%2C+RP+Jagadeesh+Chandra+Bose%2C+Neville+Dubash%2C+and+Sanjay+Podder.+2018.+Identifying+implementation+bugs+in+machine+learning+based+image+classifiers+using+metamorphic+testing.+In+ISSTA.^^^Eric Jang. Why Randomness is Important for Deep Learning 2016. https: //blog.evjang.com/ 2016 /07/randomness-deep-learning. html.***http://scholar.google.com/scholar?hl=en&q=Eric+Jang.+Why+Randomness+is+Important+for+Deep+Learning+2016.+https%3A+%2F%2Fblog.evjang.com%2F+2016+%2F07%2Frandomness-deep-learning.+html.^^^Flaky test plugin 2019. https://github.com/box/flaky.***http://scholar.google.com/scholar?hl=en&q=Flaky+test+plugin+2019.+https%3A%2F%2Fgithub.com%2Fbox%2Fflaky.^^^Vincent Francois-Lavet, Peter Henderson, Riashat Islam, Marc G. Bellemare, and Joelle Pineau. 2018. An Introduction to Deep Reinforcement Learning. arXiv: 1811. 12560 [cs.LG]***http://scholar.google.com/scholar?hl=en&q=Vincent+Francois-Lavet%2C+Peter+Henderson%2C+Riashat+Islam%2C+Marc+G.+Bellemare%2C+and+Joelle+Pineau.+2018.+An+Introduction+to+Deep+Reinforcement+Learning.+arXiv%3A+1811.+12560+%5Bcs.LG%5D^^^Alessio Gambi, Jonathan Bell, and Andreas Zeller. 2018. Practical Test Dependency Detection. In ICST.***http://scholar.google.com/scholar?hl=en&q=Alessio+Gambi%2C+Jonathan+Bell%2C+and+Andreas+Zeller.+2018.+Practical+Test+Dependency+Detection.+In+ICST.^^^Timon Gehr, Sasa Misailovic, and Martin Vechev. 2016. PSI: Exact Symbolic Inference for Probabilistic Programs. In CAV.***http://scholar.google.com/scholar?hl=en&q=Timon+Gehr%2C+Sasa+Misailovic%2C+and+Martin+Vechev.+2016.+PSI%3A+Exact+Symbolic+Inference+for+Probabilistic+Programs.+In+CAV.^^^Andrew Gelman, Hal S Stern, John B Carlin, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. Bayesian data analysis.***http://scholar.google.com/scholar?hl=en&q=Andrew+Gelman%2C+Hal+S+Stern%2C+John+B+Carlin%2C+David+B+Dunson%2C+Aki+Vehtari%2C+and+Donald+B+Rubin.+2013.+Bayesian+data+analysis.^^^John Geweke et al. 1991. Evaluating the accuracy of sampling-based approaches to the calculation of posterior moments. Federal Reserve Bank of Minneapolis, Research Department Minneapolis, MN.***http://scholar.google.com/scholar?hl=en&q=John+Geweke+et+al.+1991.+Evaluating+the+accuracy+of+sampling-based+approaches+to+the+calculation+of+posterior+moments.+Federal+Reserve+Bank+of+Minneapolis%2C+Research+Department+Minneapolis%2C+MN.^^^Wally R Gilks, Andrew Thomas, and David J Spiegelhalter. 1994. A language and program for complex Bayesian modelling. The Statistician ( 1994 ).***http://scholar.google.com/scholar?hl=en&q=Wally+R+Gilks%2C+Andrew+Thomas%2C+and+David+J+Spiegelhalter.+1994.+A+language+and+program+for+complex+Bayesian+modelling.+The+Statistician+%28+1994+%29.^^^Noah Goodman, Vikash Mansinghka, Daniel M Roy, Keith Bonawitz, and Joshua B Tenenbaum. 2012. Church: a language for generative models. arXiv preprint arXiv:1206.3255 ( 2012 ).***http://scholar.google.com/scholar?hl=en&q=Noah+Goodman%2C+Vikash+Mansinghka%2C+Daniel+M+Roy%2C+Keith+Bonawitz%2C+and+Joshua+B+Tenenbaum.+2012.+Church%3A+a+language+for+generative+models.+arXiv+preprint+arXiv%3A1206.3255+%28+2012+%29.^^^Noah D Goodman and Andreas Stuhlmüller. 2014. The design and implementation of probabilistic programming languages. http://dippl.org.***http://scholar.google.com/scholar?hl=en&q=Noah+D+Goodman+and+Andreas+Stuhlm%C3%BCller.+2014.+The+design+and+implementation+of+probabilistic+programming+languages.+http%3A%2F%2Fdippl.org.^^^GPytorch Pull Request 373 2018. https://github.com/cornellius-gp/gpytorch/ pull/373.***http://scholar.google.com/scholar?hl=en&q=GPytorch+Pull+Request+373+2018.+https%3A%2F%2Fgithub.com%2Fcornellius-gp%2Fgpytorch%2F+pull%2F373.^^^Mark Harman and Peter O\'Hearn. 2018. From Start-ups to Scale-ups: Opportunities and Open Problems for Static and Dynamic Program Analysis. In SCAM.***http://scholar.google.com/scholar?hl=en&q=Mark+Harman+and+Peter+O%27Hearn.+2018.+From+Start-ups+to+Scale-ups%3A+Opportunities+and+Open+Problems+for+Static+and+Dynamic+Program+Analysis.+In+SCAM.^^^Jason Brownlee. Embrace Randomness in Machine Learning 2019. https:// machinelearningmastery.com /randomness-in-machine-learning/.***http://scholar.google.com/scholar?hl=en&q=Jason+Brownlee.+Embrace+Randomness+in+Machine+Learning+2019.+https%3A%2F%2F+machinelearningmastery.com+%2Frandomness-in-machine-learning%2F.^^^Keyur Joshi, Vimuth Fernando, and Sasa Misailovic. 2019. Statistical algorithmic profiling for randomized approximate programs. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Keyur+Joshi%2C+Vimuth+Fernando%2C+and+Sasa+Misailovic.+2019.+Statistical+algorithmic+profiling+for+randomized+approximate+programs.+In+ICSE.^^^Ravin Kumar, Colin Carroll, Ari Hartikainen, and Osvaldo A. Martin. 2019. ArviZ a unified library for exploratory analysis of Bayesian models in Python. The Journal of Open Source Software ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Ravin+Kumar%2C+Colin+Carroll%2C+Ari+Hartikainen%2C+and+Osvaldo+A.+Martin.+2019.+ArviZ+a+unified+library+for+exploratory+analysis+of+Bayesian+models+in+Python.+The+Journal+of+Open+Source+Software+%28+2019+%29.^^^Wing Lam, Patrice Godefroid, Suman Nath, Anirudh Santhiar, and Suresh Thummalapenta. 2019. Root Causing Flaky Tests in a Large-Scale Industrial Setting. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Patrice+Godefroid%2C+Suman+Nath%2C+Anirudh+Santhiar%2C+and+Suresh+Thummalapenta.+2019.+Root+Causing+Flaky+Tests+in+a+Large-Scale+Industrial+Setting.+In+ISSTA.^^^Wing Lam, Kıvanç Muşlu, Hitesh Sajnani, and Suresh Thummalapenta. 2020. A Study on the Lifecycle of Flaky Tests. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+K%C4%B1van%C3%A7+Mu%C5%9Flu%2C+Hitesh+Sajnani%2C+and+Suresh+Thummalapenta.+2020.+A+Study+on+the+Lifecycle+of+Flaky+Tests.+In+ICSE.^^^Wing Lam, Reed Oei, August Shi, Darko Marinov, and Tao Xie. 2019. iDFlakies: A Framework for Detecting and Partially Classifying Flaky Tests. In ICST.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Reed+Oei%2C+August+Shi%2C+Darko+Marinov%2C+and+Tao+Xie.+2019.+iDFlakies%3A+A+Framework+for+Detecting+and+Partially+Classifying+Flaky+Tests.+In+ICST.^^^Caroline Lemieux, Rohan Padhye, Koushik Sen, and Dawn Song. 2018. PerfFuzz: Automatically Generating Pathological Inputs. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Caroline+Lemieux%2C+Rohan+Padhye%2C+Koushik+Sen%2C+and+Dawn+Song.+2018.+PerfFuzz%3A+Automatically+Generating+Pathological+Inputs.+In+ISSTA.^^^Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. An empirical analysis of flaky tests. In FSE.***http://scholar.google.com/scholar?hl=en&q=Qingzhou+Luo%2C+Farah+Hariri%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2014.+An+empirical+analysis+of+flaky+tests.+In+FSE.^^^Vikash Mansinghka, Daniel Selsam, and Yura Perov. 2014. Venture: a higherorder probabilistic programming platform with programmable inference. arXiv preprint 1404.0099 ( 2014 ).***http://scholar.google.com/scholar?hl=en&q=Vikash+Mansinghka%2C+Daniel+Selsam%2C+and+Yura+Perov.+2014.+Venture%3A+a+higherorder+probabilistic+programming+platform+with+programmable+inference.+arXiv+preprint+1404.0099+%28+2014+%29.^^^T. Minka, J.M. Winn, J.P. Guiver, S. Webster, Y. Zaykov, B. Yangel, A. Spengler, and J. Bronskill. 2013. Infer.NET 2.5. Microsoft Research Cambridge. http://research.microsoft.com/infernet.***http://scholar.google.com/scholar?hl=en&q=T.+Minka%2C+J.M.+Winn%2C+J.P.+Guiver%2C+S.+Webster%2C+Y.+Zaykov%2C+B.+Yangel%2C+A.+Spengler%2C+and+J.+Bronskill.+2013.+Infer.NET+2.5.+Microsoft+Research+Cambridge.+http%3A%2F%2Fresearch.microsoft.com%2Finfernet.^^^Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wierstra, and Martin Riedmiller. 2013. Playing atari with deep reinforcement learning. arXiv preprint arXiv:1312.5602 ( 2013 ).***http://scholar.google.com/scholar?hl=en&q=Volodymyr+Mnih%2C+Koray+Kavukcuoglu%2C+David+Silver%2C+Alex+Graves%2C+Ioannis+Antonoglou%2C+Daan+Wierstra%2C+and+Martin+Riedmiller.+2013.+Playing+atari+with+deep+reinforcement+learning.+arXiv+preprint+arXiv%3A1312.5602+%28+2013+%29.^^^Radford M Neal et al. 2011. MCMC using Hamiltonian dynamics. Handbook of markov chain monte carlo ( 2011 ).***http://scholar.google.com/scholar?hl=en&q=Radford+M+Neal+et+al.+2011.+MCMC+using+Hamiltonian+dynamics.+Handbook+of+markov+chain+monte+carlo+%28+2011+%29.^^^Mahdi Nejadgholi and Jinqiu Yang. 2019. A Study of Oracle Approximations in Testing Deep Learning Libraries. In ASE.***http://scholar.google.com/scholar?hl=en&q=Mahdi+Nejadgholi+and+Jinqiu+Yang.+2019.+A+Study+of+Oracle+Approximations+in+Testing+Deep+Learning+Libraries.+In+ASE.^^^Aditya V Nori, Chung-Kil Hur, Sriram K Rajamani, and Selva Samuel. 2014. R2: An eficient MCMC sampler for probabilistic programs. In AAAI.***http://scholar.google.com/scholar?hl=en&q=Aditya+V+Nori%2C+Chung-Kil+Hur%2C+Sriram+K+Rajamani%2C+and+Selva+Samuel.+2014.+R2%3A+An+eficient+MCMC+sampler+for+probabilistic+programs.+In+AAAI.^^^Akira K Onoma, Wei-Tek Tsai, Mustafa Poonawala, and Hiroshi Suganuma. 1998. Regression testing in an industrial environment. Commun. ACM ( 1998 ).***http://scholar.google.com/scholar?hl=en&q=Akira+K+Onoma%2C+Wei-Tek+Tsai%2C+Mustafa+Poonawala%2C+and+Hiroshi+Suganuma.+1998.+Regression+testing+in+an+industrial+environment.+Commun.+ACM+%28+1998+%29.^^^Rohan Padhye, Caroline Lemieux, and Koushik Sen. 2019. JQF: Coverage-Guided Property-Based Testing in Java. In ISSTA DEMO.***http://scholar.google.com/scholar?hl=en&q=Rohan+Padhye%2C+Caroline+Lemieux%2C+and+Koushik+Sen.+2019.+JQF%3A+Coverage-Guided+Property-Based+Testing+in+Java.+In+ISSTA+DEMO.^^^Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and Yves Le Traon. 2019. Semantic Fuzzing with Zest. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Rohan+Padhye%2C+Caroline+Lemieux%2C+Koushik+Sen%2C+Mike+Papadakis%2C+and+Yves+Le+Traon.+2019.+Semantic+Fuzzing+with+Zest.+In+ISSTA.^^^Rohan Padhye, Caroline Lemieux, Koushik Sen, Laurent Simon, and Hayawardh Vijayakumar. 2019. FuzzFactory: Domain-Specific Fuzzing with Waypoints. Proc. ACM Program. Lang. OOPSLA ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Rohan+Padhye%2C+Caroline+Lemieux%2C+Koushik+Sen%2C+Laurent+Simon%2C+and+Hayawardh+Vijayakumar.+2019.+FuzzFactory%3A+Domain-Specific+Fuzzing+with+Waypoints.+Proc.+ACM+Program.+Lang.+OOPSLA+%28+2019+%29.^^^Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. 2019. PyTorch: An imperative style, high-performance deep learning library. In NeurIPS.***http://scholar.google.com/scholar?hl=en&q=Adam+Paszke%2C+Sam+Gross%2C+Francisco+Massa%2C+Adam+Lerer%2C+James+Bradbury%2C+Gregory+Chanan%2C+Trevor+Killeen%2C+Zeming+Lin%2C+Natalia+Gimelshein%2C+Luca+Antiga%2C+et+al.+2019.+PyTorch%3A+An+imperative+style%2C+high-performance+deep+learning+library.+In+NeurIPS.^^^Avi Pfefer. 2001. IBAL: a probabilistic rational programming language. In IJCAI.***http://scholar.google.com/scholar?hl=en&q=Avi+Pfefer.+2001.+IBAL%3A+a+probabilistic+rational+programming+language.+In+IJCAI.^^^Hung Viet Pham, Thibaud Lutellier, Weizhen Qi, and Lin Tan. 2019. CRADLE: cross-backend validation to detect and localize bugs in deep learning libraries. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Hung+Viet+Pham%2C+Thibaud+Lutellier%2C+Weizhen+Qi%2C+and+Lin+Tan.+2019.+CRADLE%3A+cross-backend+validation+to+detect+and+localize+bugs+in+deep+learning+libraries.+In+ICSE.^^^PyroWebPage 2018. Pyro. http://pyro.ai.***http://scholar.google.com/scholar?hl=en&q=PyroWebPage+2018.+Pyro.+http%3A%2F%2Fpyro.ai.^^^PySyft Issue 1399 2018. https://github.com/OpenMined/PySyft/pull/1399.***http://scholar.google.com/scholar?hl=en&q=PySyft+Issue+1399+2018.+https%3A%2F%2Fgithub.com%2FOpenMined%2FPySyft%2Fpull%2F1399.^^^Adrian E Raftery and Steven M Lewis. 1995. The number of iterations, convergence diagnostics and generic Metropolis algorithms. Practical Markov Chain Monte Carlo ( 1995 ).***http://scholar.google.com/scholar?hl=en&q=Adrian+E+Raftery+and+Steven+M+Lewis.+1995.+The+number+of+iterations%2C+convergence+diagnostics+and+generic+Metropolis+algorithms.+Practical+Markov+Chain+Monte+Carlo+%28+1995+%29.^^^Raster Vision Issue 285 2018. https://github.com/azavea/raster-vision/issues/285.***http://scholar.google.com/scholar?hl=en&q=Raster+Vision+Issue+285+2018.+https%3A%2F%2Fgithub.com%2Fazavea%2Fraster-vision%2Fissues%2F285.^^^John A Rice. 2006. Mathematical statistics and data analysis.***http://scholar.google.com/scholar?hl=en&q=John+A+Rice.+2006.+Mathematical+statistics+and+data+analysis.^^^John Salvatier, Thomas V Wiecki, and Christopher Fonnesbeck. 2016. Probabilistic programming in Python using PyMC3. PeerJ Computer Science ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=John+Salvatier%2C+Thomas+V+Wiecki%2C+and+Christopher+Fonnesbeck.+2016.+Probabilistic+programming+in+Python+using+PyMC3.+PeerJ+Computer+Science+%28+2016+%29.^^^Simone Scardapane and Dianhui Wang. 2017. Randomness in neural networks: an overview. Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Simone+Scardapane+and+Dianhui+Wang.+2017.+Randomness+in+neural+networks%3A+an+overview.+Wiley+Interdisciplinary+Reviews%3A+Data+Mining+and+Knowledge+Discovery+%28+2017+%29.^^^Jurgen Schmidhuber. 2015. Deep learning in neural networks: An overview. Neural Networks ( 2015 ).***http://scholar.google.com/scholar?hl=en&q=Jurgen+Schmidhuber.+2015.+Deep+learning+in+neural+networks%3A+An+overview.+Neural+Networks+%28+2015+%29.^^^August Shi, Alex Gyori, Owolabi Legunsen, and Darko Marinov. 2016. Detecting Assumptions on Deterministic Implementations of Non-deterministic Specifications. In ICST.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Alex+Gyori%2C+Owolabi+Legunsen%2C+and+Darko+Marinov.+2016.+Detecting+Assumptions+on+Deterministic+Implementations+of+Non-deterministic+Specifications.+In+ICST.^^^August Shi, Wing Lam, Reed Oei, Tao Xie, and Darko Marinov. 2019. iFixFlakies: A framework for automatically fixing order-dependent flaky tests. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Wing+Lam%2C+Reed+Oei%2C+Tao+Xie%2C+and+Darko+Marinov.+2019.+iFixFlakies%3A+A+framework+for+automatically+fixing+order-dependent+flaky+tests.+In+ESEC%2FFSE.^^^TensorFlowWebPage 2018. TensorFlow. https://www.tensorflow.org.***http://scholar.google.com/scholar?hl=en&q=TensorFlowWebPage+2018.+TensorFlow.+https%3A%2F%2Fwww.tensorflow.org.^^^Swapna Thorve, Chandani Sreshtha, and Na Meng. 2018. An Empirical Study of Flaky Tests in Android Apps. In ICSME.***http://scholar.google.com/scholar?hl=en&q=Swapna+Thorve%2C+Chandani+Sreshtha%2C+and+Na+Meng.+2018.+An+Empirical+Study+of+Flaky+Tests+in+Android+Apps.+In+ICSME.^^^Dustin Tran, Matthew D. Hofman, Rif A. Saurous, Eugene Brevdo, Kevin Murphy, and David M. Blei. 2017. Deep probabilistic programming. In ICLR.***http://scholar.google.com/scholar?hl=en&q=Dustin+Tran%2C+Matthew+D.+Hofman%2C+Rif+A.+Saurous%2C+Eugene+Brevdo%2C+Kevin+Murphy%2C+and+David+M.+Blei.+2017.+Deep+probabilistic+programming.+In+ICLR.^^^Dustin Tran, Alp Kucukelbir, Adji B. Dieng, Maja Rudolph, Dawen Liang, and David M. Blei. 2016. Edward: A library for probabilistic modeling, inference, and criticism. arXiv ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Dustin+Tran%2C+Alp+Kucukelbir%2C+Adji+B.+Dieng%2C+Maja+Rudolph%2C+Dawen+Liang%2C+and+David+M.+Blei.+2016.+Edward%3A+A+library+for+probabilistic+modeling%2C+inference%2C+and+criticism.+arXiv+%28+2016+%29.^^^Abraham Wald. 1945. Sequential tests of statistical hypotheses. The annals of mathematical statistics ( 1945 ).***http://scholar.google.com/scholar?hl=en&q=Abraham+Wald.+1945.+Sequential+tests+of+statistical+hypotheses.+The+annals+of+mathematical+statistics+%28+1945+%29.^^^Frank Wood, Jan Willem van de Meent, and Vikash Mansinghka. 2014. A new approach to probabilistic programming inference. In AISTATS.***http://scholar.google.com/scholar?hl=en&q=Frank+Wood%2C+Jan+Willem+van+de+Meent%2C+and+Vikash+Mansinghka.+2014.+A+new+approach+to+probabilistic+programming+inference.+In+AISTATS.^^^Shin Yoo and Mark Harman. 2012. Regression testing minimization, selection and prioritization: a survey. Software Testing, Verification, and Reliability ( 2012 ).***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo+and+Mark+Harman.+2012.+Regression+testing+minimization%2C+selection+and+prioritization%3A+a+survey.+Software+Testing%2C+Verification%2C+and+Reliability+%28+2012+%29.^^^Jie M. Zhang, Mark Harman, Lei Ma, and Yang Liu. 2019. Machine Learning Testing: Survey, Landscapes and Horizons. arXiv: 1906. 10742 [cs.LG]***http://scholar.google.com/scholar?hl=en&q=Jie+M.+Zhang%2C+Mark+Harman%2C+Lei+Ma%2C+and+Yang+Liu.+2019.+Machine+Learning+Testing%3A+Survey%2C+Landscapes+and+Horizons.+arXiv%3A+1906.+10742+%5Bcs.LG%5D^^^Zhi-Hua Zhou. 2017. A Brief Introduction to Weakly Supervised Learning. National Science Review ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Zhi-Hua+Zhou.+2017.+A+Brief+Introduction+to+Weakly+Supervised+Learning.+National+Science+Review+%28+2017+%29.^^^');
INSERT INTO `paper_ref` VALUES (38, 43, 'AFL. 2016. American fuzzy lop. http://lcamtuf.coredump.cx/afl/. Online.***http://scholar.google.com/scholar?hl=en&q=AFL.+2016.+American+fuzzy+lop.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl%2F.+Online.^^^Leo Breiman, Jerome Friedman, Charles J Stone, and Richard A Olshen. 1984. Classification and regression trees. CRC press.***http://scholar.google.com/scholar?hl=en&q=Leo+Breiman%2C+Jerome+Friedman%2C+Charles+J+Stone%2C+and+Richard+A+Olshen.+1984.+Classification+and+regression+trees.+CRC+press.^^^Shigeru Chiba. 1998. Javassist-a reflection-based programming wizard for Java. In Proceedings of OOPSLA\'98 Workshop on Reflective Programming in C++ and Java, Vol. 174.***http://scholar.google.com/scholar?hl=en&q=Shigeru+Chiba.+1998.+Javassist-a+reflection-based+programming+wizard+for+Java.+In+Proceedings+of+OOPSLA%2798+Workshop+on+Reflective+Programming+in+C%2B%2B+and+Java%2C+Vol.+174.^^^Simon F Goldsmith, Alex S Aiken, and Daniel S Wilkerson. 2007. Measuring empirical computational complexity. In FSE. ACM, 395-404.***http://scholar.google.com/scholar?hl=en&q=Simon+F+Goldsmith%2C+Alex+S+Aiken%2C+and+Daniel+S+Wilkerson.+2007.+Measuring+empirical+computational+complexity.+In+FSE.+ACM%2C+395-404.^^^J. Hartmanis and R. E. Stearns. 1965. On the Computational Complexity of Algorithms. Trans. Amer. Math. Soc. 117 ( 1965 ), 285-306. http://www.jstor.org/ stable/1994208***http://scholar.google.com/scholar?hl=en&q=J.+Hartmanis+and+R.+E.+Stearns.+1965.+On+the+Computational+Complexity+of+Algorithms.+Trans.+Amer.+Math.+Soc.+117+%28+1965+%29%2C+285-306.+http%3A%2F%2Fwww.jstor.org%2F+stable%2F1994208^^^Julien Jacques and Cristian Preda. 2014. Functional data clustering: a survey. Advances in Data Analysis and Classification 8, 3 ( 2014 ), 231-255.***http://scholar.google.com/scholar?hl=en&q=Julien+Jacques+and+Cristian+Preda.+2014.+Functional+data+clustering%3A+a+survey.+Advances+in+Data+Analysis+and+Classification+8%2C+3+%28+2014+%29%2C+231-255.^^^Rody Kersten, Kasper Luckow, and Corina S Păsăreanu. 2017. POSTER: AFL-based Fuzzing for Java with Kelinci. In CCS. ACM, 2511-2513.***http://scholar.google.com/scholar?hl=en&q=Rody+Kersten%2C+Kasper+Luckow%2C+and+Corina+S+P%C4%83s%C4%83reanu.+2017.+POSTER%3A+AFL-based+Fuzzing+for+Java+with+Kelinci.+In+CCS.+ACM%2C+2511-2513.^^^Caroline Lemieux, Rohan Padhye, Koushik Sen, and Dawn Song. 2018. Perfuzz: Automatically generating pathological inputs. In ISSTA. ACM, 254-265.***http://scholar.google.com/scholar?hl=en&q=Caroline+Lemieux%2C+Rohan+Padhye%2C+Koushik+Sen%2C+and+Dawn+Song.+2018.+Perfuzz%3A+Automatically+generating+pathological+inputs.+In+ISSTA.+ACM%2C+254-265.^^^libFuzzer. 2016. A library for coverage-guided fuzz testing (part of LLVM 3.9). http://llvm.org/docs/LibFuzzer.html. Online.***http://scholar.google.com/scholar?hl=en&q=libFuzzer.+2016.+A+library+for+coverage-guided+fuzz+testing+%28part+of+LLVM+3.9%29.+http%3A%2F%2Fllvm.org%2Fdocs%2FLibFuzzer.html.+Online.^^^Stuart Lloyd. 1982. Least squares quantization in PCM. IEEE transactions on information theory 28, 2 ( 1982 ), 129-137.***http://scholar.google.com/scholar?hl=en&q=Stuart+Lloyd.+1982.+Least+squares+quantization+in+PCM.+IEEE+transactions+on+information+theory+28%2C+2+%28+1982+%29%2C+129-137.^^^Shirin Nilizadeh, Yannic Noller, and Corina S. Pasareanu. 2019. DifFuzz: Diferential Fuzzing for Side-Channel Analysis. ICSE ( 2019 ). http://arxiv.org/abs/ 1811. 07005***http://scholar.google.com/scholar?hl=en&q=Shirin+Nilizadeh%2C+Yannic+Noller%2C+and+Corina+S.+Pasareanu.+2019.+DifFuzz%3A+Diferential+Fuzzing+for+Side-Channel+Analysis.+ICSE+%28+2019+%29.+http%3A%2F%2Farxiv.org%2Fabs%2F+1811.+07005^^^Travis Oliphant. 2006-. NumPy: A guide to NumPy. http://www.numpy.org/.***http://scholar.google.com/scholar?hl=en&q=Travis+Oliphant.+2006-.+NumPy%3A+A+guide+to+NumPy.+http%3A%2F%2Fwww.numpy.org%2F.^^^Oswaldo Olivo, Isil Dillig, and Calvin Lin. 2015. Static detection of asymptotic performance bugs in collection traversals. In PLDI, Vol. 50. ACM, 369-378.***http://scholar.google.com/scholar?hl=en&q=Oswaldo+Olivo%2C+Isil+Dillig%2C+and+Calvin+Lin.+2015.+Static+detection+of+asymptotic+performance+bugs+in+collection+traversals.+In+PLDI%2C+Vol.+50.+ACM%2C+369-378.^^^Zooko O\'Whielacronx. 2018. A program/module to trace Python program or function execution. https://github.com/python/cpython/blob/2.7/Lib/trace.py. Online.***http://scholar.google.com/scholar?hl=en&q=Zooko+O%27Whielacronx.+2018.+A+program%2Fmodule+to+trace+Python+program+or+function+execution.+https%3A%2F%2Fgithub.com%2Fpython%2Fcpython%2Fblob%2F2.7%2FLib%2Ftrace.py.+Online.^^^F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12 ( 2011 ), 2825-2830.***http://scholar.google.com/scholar?hl=en&q=F.+Pedregosa%2C+G.+Varoquaux%2C+A.+Gramfort%2C+V.+Michel%2C+B.+Thirion%2C+O.+Grisel%2C+M.+Blondel%2C+P.+Prettenhofer%2C+R.+Weiss%2C+V.+Dubourg%2C+J.+Vanderplas%2C+A.+Passos%2C+D.+Cournapeau%2C+M.+Brucher%2C+M.+Perrot%2C+and+E.+Duchesnay.+2011.+Scikit-learn%3A+Machine+Learning+in+Python.+Journal+of+Machine+Learning+Research+12+%28+2011+%29%2C+2825-2830.^^^Theofilos Petsios, Jason Zhao, Angelos D Keromytis, and Suman Jana. 2017. Slowfuzz: Automated domain-independent detection of algorithmic complexity vulnerabilities. In CCS. ACM, 2155-2168.***http://scholar.google.com/scholar?hl=en&q=Theofilos+Petsios%2C+Jason+Zhao%2C+Angelos+D+Keromytis%2C+and+Suman+Jana.+2017.+Slowfuzz%3A+Automated+domain-independent+detection+of+algorithmic+complexity+vulnerabilities.+In+CCS.+ACM%2C+2155-2168.^^^James O Ramsay. 2006. Functional data analysis. Wiley Online Library.***http://scholar.google.com/scholar?hl=en&q=James+O+Ramsay.+2006.+Functional+data+analysis.+Wiley+Online+Library.^^^Scikit-learn. 2017. Trees with MAE criterion are slow to train. https://github.com/scikit-learn/scikit-learn/issues/9626. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2017.+Trees+with+MAE+criterion+are+slow+to+train.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F9626.+Online.^^^Scikit-learn. 2018. Sqeuclidean metric is much slower than euclidean. https://github.com/scikit-learn/scikit-learn/issues/12600. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2018.+Sqeuclidean+metric+is+much+slower+than+euclidean.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F12600.+Online.^^^Scikit-learn. 2019. Decision Tree Classifier. https://scikitlearn.org/stable/modules/tree.html. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Decision+Tree+Classifier.+https%3A%2F%2Fscikitlearn.org%2Fstable%2Fmodules%2Ftree.html.+Online.^^^Scikit-learn. 2019. Gaussian Process Classifier in scikit-learn: description. https://scikit-learn.org/stable/modules/gaussian_process. html#gaussianprocess-classification-gpc. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Gaussian+Process+Classifier+in+scikit-learn%3A+description.+https%3A%2F%2Fscikit-learn.org%2Fstable%2Fmodules%2Fgaussian_process.+html%23gaussianprocess-classification-gpc.+Online.^^^Scikit-learn. 2019. Gaussian Process Classiifer in scikit-learn: implementations. https://scikitlearn.org/stable/modules/generated/sklearn.gaussian_process. GaussianProcess Classifier.html. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Gaussian+Process+Classiifer+in+scikit-learn%3A+implementations.+https%3A%2F%2Fscikitlearn.org%2Fstable%2Fmodules%2Fgenerated%2Fsklearn.gaussian_process.+GaussianProcess+Classifier.html.+Online.^^^Scikit-learn. 2019. Linear and quadratic discriminant analysis. https://scikitlearn.org/stable/modules/lda_qda.html. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Linear+and+quadratic+discriminant+analysis.+https%3A%2F%2Fscikitlearn.org%2Fstable%2Fmodules%2Flda_qda.html.+Online.^^^Scikit-learn. 2019. Logistic Regression in scikit-learn. https://scikitlearn.org/stable/modules/linear_model.html#logistic-regression. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Logistic+Regression+in+scikit-learn.+https%3A%2F%2Fscikitlearn.org%2Fstable%2Fmodules%2Flinear_model.html%23logistic-regression.+Online.^^^Scikit-learn. 2019. Make Multilabel Classification. sklearn.datasets.make_multilabel_classification.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Make+Multilabel+Classification.+sklearn.datasets.make_multilabel_classification.^^^Scikit-learn. 2019. Mini-batch KMeans. sklearn.cluster.MiniBatchKMeans.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Mini-batch+KMeans.+sklearn.cluster.MiniBatchKMeans.^^^Scikit-learn. 2019. Performance of Logistic Regression with saga. https://github.com/scikit-learn/scikit-learn/issues/13316. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Performance+of+Logistic+Regression+with+saga.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F13316.+Online.^^^Scikit-learn. 2019. Random Forest Regressor. sklearn.ensemble.RandomForestRegressor.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2019.+Random+Forest+Regressor.+sklearn.ensemble.RandomForestRegressor.^^^Scikit-learn. 2020. Performance bug in logistic regression with newton-cg. https://github.com/scikit-learn/scikit-learn/issues/16186. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+logistic+regression+with+newton-cg.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F16186.+Online.^^^Scikit-learn. 2020. Performance bug in Make Classification Data Set Util. https://github.com/scikit-learn/scikit-learn/issues/16001. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+Make+Classification+Data+Set+Util.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F16001.+Online.^^^Scikit-learn. 2020. Performance bug in Make Classification Data Set Util fixed. https://github.com/scikit-learn/scikit-learn/pull/16006/files. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+Make+Classification+Data+Set+Util+fixed.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fpull%2F16006%2Ffiles.+Online.^^^Scikit-learn. 2020. Performance bug in regression with newton-cg fixed. https://github.com/scikit-learn/scikit-learn/pull/16266/files. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+regression+with+newton-cg+fixed.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fpull%2F16266%2Ffiles.+Online.^^^Scikit-learn. 2020. Performance bug in Util Batch Generator module. https://github.com/scikit-learn/scikit-learn/issues/16158. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+Util+Batch+Generator+module.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fissues%2F16158.+Online.^^^Scikit-learn. 2020. Performance bug in Util Batch Generator module fixed. https://github.com/scikit-learn/scikit-learn/pull/16181/files. Online.***http://scholar.google.com/scholar?hl=en&q=Scikit-learn.+2020.+Performance+bug+in+Util+Batch+Generator+module+fixed.+https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn%2Fpull%2F16181%2Ffiles.+Online.^^^Robert Sedgewick and Kevin Wayne. 2011. Algorithms (4th ed.). Addison-Wesley Professional.***http://scholar.google.com/scholar?hl=en&q=Robert+Sedgewick+and+Kevin+Wayne.+2011.+Algorithms+%284th+ed.%29.+Addison-Wesley+Professional.^^^Linhai Song and Shan Lu. 2014. Statistical debugging for real-world performance problems. OOPSLA 49, 10 ( 2014 ), 561-578.***http://scholar.google.com/scholar?hl=en&q=Linhai+Song+and+Shan+Lu.+2014.+Statistical+debugging+for+real-world+performance+problems.+OOPSLA+49%2C+10+%28+2014+%29%2C+561-578.^^^Tensorflow. 2019. Transpose can be very slow on CPU. https://github.com/tensorflow/tensorflow/issues/27383. Online.***http://scholar.google.com/scholar?hl=en&q=Tensorflow.+2019.+Transpose+can+be+very+slow+on+CPU.+https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow%2Fissues%2F27383.+Online.^^^Saeid Tizpaz-Niari, Pavol Černý, Bor-Yuh Evan Chang, and Ashutosh Trivedi. 2018. Diferential Performance Debugging with Discriminant Regression Trees. In AAAI. 2468-2475.***http://scholar.google.com/scholar?hl=en&q=Saeid+Tizpaz-Niari%2C+Pavol+%C4%8Cern%C3%BD%2C+Bor-Yuh+Evan+Chang%2C+and+Ashutosh+Trivedi.+2018.+Diferential+Performance+Debugging+with+Discriminant+Regression+Trees.+In+AAAI.+2468-2475.^^^Saeid Tizpaz-Niari, Pavol Černy`, Bor-Yuh Evan Chang, Sriram Sankaranarayanan, and Ashutosh Trivedi. 2017. Discriminating Traces with Time. In TACAS. Springer, 21-37.***http://scholar.google.com/scholar?hl=en&q=Saeid+Tizpaz-Niari%2C+Pavol+%C4%8Cerny%60%2C+Bor-Yuh+Evan+Chang%2C+Sriram+Sankaranarayanan%2C+and+Ashutosh+Trivedi.+2017.+Discriminating+Traces+with+Time.+In+TACAS.+Springer%2C+21-37.^^^Saeid Tizpaz-Niari, Pavol Cerny, and Ashutosh Trivedi. 2020. Data-Driven Debugging for Functional Side Channels. https://arxiv.org/abs/ 1808.10502. In NDSS.***http://scholar.google.com/scholar?hl=en&q=Saeid+Tizpaz-Niari%2C+Pavol+Cerny%2C+and+Ashutosh+Trivedi.+2020.+Data-Driven+Debugging+for+Functional+Side+Channels.+https%3A%2F%2Farxiv.org%2Fabs%2F+1808.10502.+In+NDSS.^^^Binghui Wang and Neil Zhenqiang Gong. 2018. Stealing hyperparameters in machine learning. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 36-52.***http://scholar.google.com/scholar?hl=en&q=Binghui+Wang+and+Neil+Zhenqiang+Gong.+2018.+Stealing+hyperparameters+in+machine+learning.+In+2018+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+IEEE%2C+36-52.^^^W Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. A survey on software fault localization. IEEE Transactions on Software Engineering 42, 8 ( 2016 ), 707-740.***http://scholar.google.com/scholar?hl=en&q=W+Eric+Wong%2C+Ruizhi+Gao%2C+Yihao+Li%2C+Rui+Abreu%2C+and+Franz+Wotawa.+2016.+A+survey+on+software+fault+localization.+IEEE+Transactions+on+Software+Engineering+42%2C+8+%28+2016+%29%2C+707-740.^^^Andreas Zeller, Rahul Gopinath, Marcel Böhme, Gordon Fraser, and Christian Holler. 2019. The Fuzzing Book. In The Fuzzing Book. Saarland University. https://www.fuzzingbook. org/ Retrieved 2019-09-09 16 :42: 54 + 02 : 00.***http://scholar.google.com/scholar?hl=en&q=Andreas+Zeller%2C+Rahul+Gopinath%2C+Marcel+B%C3%B6hme%2C+Gordon+Fraser%2C+and+Christian+Holler.+2019.+The+Fuzzing+Book.+In+The+Fuzzing+Book.+Saarland+University.+https%3A%2F%2Fwww.fuzzingbook.+org%2F+Retrieved+2019-09-09+16+%3A42%3A+54+%2B+02+%3A+00.^^^');
INSERT INTO `paper_ref` VALUES (39, 67, '[n.d.]. GitHub. https://github.com/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+GitHub.+https%3A%2F%2Fgithub.com%2F.^^^[n.d.]. Maven. http://maven.apache.org/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Maven.+http%3A%2F%2Fmaven.apache.org%2F.^^^[n.d.]. Travis-CI. https://travis-ci.org/.***http://scholar.google.com/scholar?hl=en&q=%5Bn.d.%5D.+Travis-CI.+https%3A%2F%2Ftravis-ci.org%2F.^^^2020. Empirically Revisiting and Enhancing IR-based Test-Case Prioritization. https://sites.google.com/view/ir-based-tcp.***http://scholar.google.com/scholar?hl=en&q=2020.+Empirically+Revisiting+and+Enhancing+IR-based+Test-Case+Prioritization.+https%3A%2F%2Fsites.google.com%2Fview%2Fir-based-tcp.^^^2020. Maven Surefire Plugin-surefire:test. https://maven.apache.org/surefire/ maven-surefire-plugin/test-mojo.html.***http://scholar.google.com/scholar?hl=en&q=2020.+Maven+Surefire+Plugin-surefire%3Atest.+https%3A%2F%2Fmaven.apache.org%2Fsurefire%2F+maven-surefire-plugin%2Ftest-mojo.html.^^^2020. RTPTorrent: An Open-source Dataset for Evaluating Regression Test Prioritization. https://zenodo.org/record/3712290.***http://scholar.google.com/scholar?hl=en&q=2020.+RTPTorrent%3A+An+Open-source+Dataset+for+Evaluating+Regression+Test+Prioritization.+https%3A%2F%2Fzenodo.org%2Frecord%2F3712290.^^^Maral Azizi and Hyunsook Do. 2018. ReTEST: A cost efective test case selection technique for modern software development. In ISSRE.***http://scholar.google.com/scholar?hl=en&q=Maral+Azizi+and+Hyunsook+Do.+2018.+ReTEST%3A+A+cost+efective+test+case+selection+technique+for+modern+software+development.+In+ISSRE.^^^Jonathan Bell, Owolabi Legunsen, Michael Hilton, Lamyaa Eloussi, Tifany Yung, and Darko Marinov. 2018. DeFlaker: Automatically detecting flaky tests. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell%2C+Owolabi+Legunsen%2C+Michael+Hilton%2C+Lamyaa+Eloussi%2C+Tifany+Yung%2C+and+Darko+Marinov.+2018.+DeFlaker%3A+Automatically+detecting+flaky+tests.+In+ICSE.^^^Moritz Beller, Georgios Gousios, and Andy Zaidman. 2017. TravisTorrent: Synthesizing Travis CI and GitHub for full-stack research on continuous integration. In MSR.***http://scholar.google.com/scholar?hl=en&q=Moritz+Beller%2C+Georgios+Gousios%2C+and+Andy+Zaidman.+2017.+TravisTorrent%3A+Synthesizing+Travis+CI+and+GitHub+for+full-stack+research+on+continuous+integration.+In+MSR.^^^Junjie Chen, Yiling Lou, Lingming Zhang, Jianyi Zhou, Xiaoleng Wang, Dan Hao, and Lu Zhang. 2018. Optimizing test prioritization via test distribution analysis. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=Junjie+Chen%2C+Yiling+Lou%2C+Lingming+Zhang%2C+Jianyi+Zhou%2C+Xiaoleng+Wang%2C+Dan+Hao%2C+and+Lu+Zhang.+2018.+Optimizing+test+prioritization+via+test+distribution+analysis.+In+ESEC%2FFSE.^^^Scott Deerwester, Susan T. Dumais, George W. Furnas, Thomas K. Landauer, and Richard Harshman. 1990. Indexing by latent semantic analysis. JASIS 41, 6 ( 1990 ).***http://scholar.google.com/scholar?hl=en&q=Scott+Deerwester%2C+Susan+T.+Dumais%2C+George+W.+Furnas%2C+Thomas+K.+Landauer%2C+and+Richard+Harshman.+1990.+Indexing+by+latent+semantic+analysis.+JASIS+41%2C+6+%28+1990+%29.^^^Sebastian Elbaum, Alexey Malishevsky, and Gregg Rothermel. 2001. Incorporating varying test costs and fault severities into test case prioritization. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Alexey+Malishevsky%2C+and+Gregg+Rothermel.+2001.+Incorporating+varying+test+costs+and+fault+severities+into+test+case+prioritization.+In+ICSE.^^^Sebastian Elbaum, Alexey G. Malishevsky, and Gregg Rothermel. 2002. Test case prioritization: A family of empirical studies. TSE 28, 2 ( 2002 ).***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Alexey+G.+Malishevsky%2C+and+Gregg+Rothermel.+2002.+Test+case+prioritization%3A+A+family+of+empirical+studies.+TSE+28%2C+2+%28+2002+%29.^^^Sebastian Elbaum, Gregg Rothermel, and John Penix. 2014. Techniques for improving regression testing in continuous integration development environments. In FSE.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Gregg+Rothermel%2C+and+John+Penix.+2014.+Techniques+for+improving+regression+testing+in+continuous+integration+development+environments.+In+FSE.^^^Michael G. Epitropakis, Shin Yoo, Mark Harman, and Edmund K Burke. 2015. Empirical evaluation of pareto eficient multi-objective regression test case prioritisation. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Michael+G.+Epitropakis%2C+Shin+Yoo%2C+Mark+Harman%2C+and+Edmund+K+Burke.+2015.+Empirical+evaluation+of+pareto+eficient+multi-objective+regression+test+case+prioritisation.+In+ISSTA.^^^Milos Gligoric, Lamyaa Eloussi, and Darko Marinov. 2015. Ekstazi: Lightweight test selection. In ICSE Demo.***http://scholar.google.com/scholar?hl=en&q=Milos+Gligoric%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2015.+Ekstazi%3A+Lightweight+test+selection.+In+ICSE+Demo.^^^Milos Gligoric, Lamyaa Eloussi, and Darko Marinov. 2015. Practical regression test selection with dynamic file dependencies. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Milos+Gligoric%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2015.+Practical+regression+test+selection+with+dynamic+file+dependencies.+In+ISSTA.^^^Alex Gyori, August Shi, Farah Hariri, and Darko Marinov. 2015. Reliable testing: Detecting state-polluting tests to prevent test dependency. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Alex+Gyori%2C+August+Shi%2C+Farah+Hariri%2C+and+Darko+Marinov.+2015.+Reliable+testing%3A+Detecting+state-polluting+tests+to+prevent+test+dependency.+In+ISSTA.^^^Christopher Henard, Mike Papadakis, Mark Harman, Yue Jia, and Yves Le Traon. 2016. Comparing white-box and black-box test prioritization. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Christopher+Henard%2C+Mike+Papadakis%2C+Mark+Harman%2C+Yue+Jia%2C+and+Yves+Le+Traon.+2016.+Comparing+white-box+and+black-box+test+prioritization.+In+ICSE.^^^Michael Hilton, Jonathan Bell, and Darko Marinov. 2018. A large-scale study of test coverage evolution. In ASE.***http://scholar.google.com/scholar?hl=en&q=Michael+Hilton%2C+Jonathan+Bell%2C+and+Darko+Marinov.+2018.+A+large-scale+study+of+test+coverage+evolution.+In+ASE.^^^Bo Jiang, Zhenyu Zhang, Wing Kwong Chan, and T. H. Tse. 2009. Adaptive random test case prioritization. In ASE.***http://scholar.google.com/scholar?hl=en&q=Bo+Jiang%2C+Zhenyu+Zhang%2C+Wing+Kwong+Chan%2C+and+T.+H.+Tse.+2009.+Adaptive+random+test+case+prioritization.+In+ASE.^^^René Just, Darioush Jalali, and Michael D. Ernst. 2014. Defects4J: A database of existing faults to enable controlled testing studies for Java programs. In ISSTA Demo.***http://scholar.google.com/scholar?hl=en&q=Ren%C3%A9+Just%2C+Darioush+Jalali%2C+and+Michael+D.+Ernst.+2014.+Defects4J%3A+A+database+of+existing+faults+to+enable+controlled+testing+studies+for+Java+programs.+In+ISSTA+Demo.^^^René Just, Darioush Jalali, Laura Inozemtseva, Michael D. Ernst, Reid Holmes, and Gordon Fraser. 2014. Are mutants a valid substitute for real faults in software testing?. In FSE.***http://scholar.google.com/scholar?hl=en&q=Ren%C3%A9+Just%2C+Darioush+Jalali%2C+Laura+Inozemtseva%2C+Michael+D.+Ernst%2C+Reid+Holmes%2C+and+Gordon+Fraser.+2014.+Are+mutants+a+valid+substitute+for+real+faults+in+software+testing%3F.+In+FSE.^^^Jung-Hyun Kwon, In-Young Ko, Gregg Rothermel, and Matt Staats. 2014. Test case prioritization based on information retrieval concepts. In APSEC, Vol. 1.***http://scholar.google.com/scholar?hl=en&q=Jung-Hyun+Kwon%2C+In-Young+Ko%2C+Gregg+Rothermel%2C+and+Matt+Staats.+2014.+Test+case+prioritization+based+on+information+retrieval+concepts.+In+APSEC%2C+Vol.+1.^^^Adriaan Labuschagne, Laura Inozemtseva, and Reid Holmes. 2017. Measuring the cost of regression testing in practice: A study of Java projects using continuous integration. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=Adriaan+Labuschagne%2C+Laura+Inozemtseva%2C+and+Reid+Holmes.+2017.+Measuring+the+cost+of+regression+testing+in+practice%3A+A+study+of+Java+projects+using+continuous+integration.+In+ESEC%2FFSE.^^^Wing Lam, Patrice Godefroid, Suman Nath, Anirudh Santhiar, and Suresh Thummalapenta. 2019. Root causing flaky tests in a large-scale industrial setting. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Patrice+Godefroid%2C+Suman+Nath%2C+Anirudh+Santhiar%2C+and+Suresh+Thummalapenta.+2019.+Root+causing+flaky+tests+in+a+large-scale+industrial+setting.+In+ISSTA.^^^Wing Lam, Reed Oei, August Shi, Darko Marinov, and Tao Xie. 2019. iDFlakies: A framework for detecting and partially classifying flaky tests. In ICST.***http://scholar.google.com/scholar?hl=en&q=Wing+Lam%2C+Reed+Oei%2C+August+Shi%2C+Darko+Marinov%2C+and+Tao+Xie.+2019.+iDFlakies%3A+A+framework+for+detecting+and+partially+classifying+flaky+tests.+In+ICST.^^^Owolabi Legunsen, Farah Hariri, August Shi, Yafeng Lu, Lingming Zhang, and Darko Marinov. 2016. An extensive study of static regression test selection in modern software evolution. In FSE.***http://scholar.google.com/scholar?hl=en&q=Owolabi+Legunsen%2C+Farah+Hariri%2C+August+Shi%2C+Yafeng+Lu%2C+Lingming+Zhang%2C+and+Darko+Marinov.+2016.+An+extensive+study+of+static+regression+test+selection+in+modern+software+evolution.+In+FSE.^^^Claire Leong, Abhayendra Singh, Mike Papadakis, Yves Le Traon, and John Micco. 2019. Assessing transition-based test selection algorithms at Google. In ICSE-SEIP.***http://scholar.google.com/scholar?hl=en&q=Claire+Leong%2C+Abhayendra+Singh%2C+Mike+Papadakis%2C+Yves+Le+Traon%2C+and+John+Micco.+2019.+Assessing+transition-based+test+selection+algorithms+at+Google.+In+ICSE-SEIP.^^^Zheng Li, Mark Harman, and Robert M. Hierons. 2007. Search algorithms for regression test case prioritization. TSE 33, 4 ( 2007 ).***http://scholar.google.com/scholar?hl=en&q=Zheng+Li%2C+Mark+Harman%2C+and+Robert+M.+Hierons.+2007.+Search+algorithms+for+regression+test+case+prioritization.+TSE+33%2C+4+%28+2007+%29.^^^Yafeng Lu, Yiling Lou, Shiyang Cheng, Lingming Zhang, Dan Hao, Yangfan Zhou, and Lu Zhang. 2016. How does regression test prioritization perform in real-world software evolution?. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Yafeng+Lu%2C+Yiling+Lou%2C+Shiyang+Cheng%2C+Lingming+Zhang%2C+Dan+Hao%2C+Yangfan+Zhou%2C+and+Lu+Zhang.+2016.+How+does+regression+test+prioritization+perform+in+real-world+software+evolution%3F.+In+ICSE.^^^Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. An empirical analysis of flaky tests. In FSE.***http://scholar.google.com/scholar?hl=en&q=Qingzhou+Luo%2C+Farah+Hariri%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2014.+An+empirical+analysis+of+flaky+tests.+In+FSE.^^^Qi Luo, Kevin Moran, and Denys Poshyvanyk. 2016. A large-scale empirical comparison of static and dynamic test case prioritization techniques. In FSE.***http://scholar.google.com/scholar?hl=en&q=Qi+Luo%2C+Kevin+Moran%2C+and+Denys+Poshyvanyk.+2016.+A+large-scale+empirical+comparison+of+static+and+dynamic+test+case+prioritization+techniques.+In+FSE.^^^Qi Luo, Kevin Moran, Denys Poshyvanyk, and Massimiliano Di Penta. 2018. Assessing test case prioritization on real faults and mutants. In ICSME.***http://scholar.google.com/scholar?hl=en&q=Qi+Luo%2C+Kevin+Moran%2C+Denys+Poshyvanyk%2C+and+Massimiliano+Di+Penta.+2018.+Assessing+test+case+prioritization+on+real+faults+and+mutants.+In+ICSME.^^^Mateusz Machalica, Alex Samylkin, Meredith Porth, and Satish Chandra. 2018. Predictive test selection. In ICSE-SEIP.***http://scholar.google.com/scholar?hl=en&q=Mateusz+Machalica%2C+Alex+Samylkin%2C+Meredith+Porth%2C+and+Satish+Chandra.+2018.+Predictive+test+selection.+In+ICSE-SEIP.^^^Alexey G. Malishevsky, Joseph R Ruthruf, Gregg Rothermel, and Sebastian Elbaum. 2006. Cost-cognizant test case prioritization. Technical Report. Technical Report TR-UNL-CSE-2006-0004, University of Nebraska-Lincoln.***http://scholar.google.com/scholar?hl=en&q=Alexey+G.+Malishevsky%2C+Joseph+R+Ruthruf%2C+Gregg+Rothermel%2C+and+Sebastian+Elbaum.+2006.+Cost-cognizant+test+case+prioritization.+Technical+Report.+Technical+Report+TR-UNL-CSE-2006-0004%2C+University+of+Nebraska-Lincoln.^^^Christopher Manning, Prabhakar Raghavan, and Hinrich Schütze. 2010. Introduction to information retrieval. Nat. Lang. Eng. 16, 1 ( 2010 ).***http://scholar.google.com/scholar?hl=en&q=Christopher+Manning%2C+Prabhakar+Raghavan%2C+and+Hinrich+Sch%C3%BCtze.+2010.+Introduction+to+information+retrieval.+Nat.+Lang.+Eng.+16%2C+1+%28+2010+%29.^^^Toni Mattis and Robert Hirschfeld. 2020. Lightweight Lexical Test Prioritization for Immediate Feedback. Programming Journal 4 ( 2020 ).***http://scholar.google.com/scholar?hl=en&q=Toni+Mattis+and+Robert+Hirschfeld.+2020.+Lightweight+Lexical+Test+Prioritization+for+Immediate+Feedback.+Programming+Journal+4+%28+2020+%29.^^^Toni Mattis, Patrick Rein, Falco Dürsch, and Robert Hirschfeld. 2020. RTPTorrent: An open-source dataset for evaluating regression test prioritization. In MSR.***http://scholar.google.com/scholar?hl=en&q=Toni+Mattis%2C+Patrick+Rein%2C+Falco+D%C3%BCrsch%2C+and+Robert+Hirschfeld.+2020.+RTPTorrent%3A+An+open-source+dataset+for+evaluating+regression+test+prioritization.+In+MSR.^^^Atif Memon, Zebao Gao, Bao Nguyen, Sanjeev Dhanda, Eric Nickell, Rob Siemborski, and John Micco. 2017. Taming Google-scale continuous testing. In ICSESEIP.***http://scholar.google.com/scholar?hl=en&q=Atif+Memon%2C+Zebao+Gao%2C+Bao+Nguyen%2C+Sanjeev+Dhanda%2C+Eric+Nickell%2C+Rob+Siemborski%2C+and+John+Micco.+2017.+Taming+Google-scale+continuous+testing.+In+ICSESEIP.^^^Cu D. Nguyen, Alessandro Marchetto, and Paolo Tonella. 2011. Test case prioritization for audit testing of evolving web services using information retrieval techniques. In ICWS.***http://scholar.google.com/scholar?hl=en&q=Cu+D.+Nguyen%2C+Alessandro+Marchetto%2C+and+Paolo+Tonella.+2011.+Test+case+prioritization+for+audit+testing+of+evolving+web+services+using+information+retrieval+techniques.+In+ICWS.^^^Tanzeem Bin Noor and Hadi Hemmati. 2015. A similarity-based approach for test case prioritization using historical failure data. In ISSRE.***http://scholar.google.com/scholar?hl=en&q=Tanzeem+Bin+Noor+and+Hadi+Hemmati.+2015.+A+similarity-based+approach+for+test+case+prioritization+using+historical+failure+data.+In+ISSRE.^^^Marek Parfianowicz and Grzegorz Lewandowski. 2017-2018. OpenClover. https: //openclover.org.***http://scholar.google.com/scholar?hl=en&q=Marek+Parfianowicz+and+Grzegorz+Lewandowski.+2017-2018.+OpenClover.+https%3A+%2F%2Fopenclover.org.^^^David Paterson, José Campos, Rui Abreu, Gregory M. Kapfhammer, Gordon Fraser, and Phil McMinn. 2019. An empirical study on the use of defect prediction for test case prioritization. In ICST.***http://scholar.google.com/scholar?hl=en&q=David+Paterson%2C+Jos%C3%A9+Campos%2C+Rui+Abreu%2C+Gregory+M.+Kapfhammer%2C+Gordon+Fraser%2C+and+Phil+McMinn.+2019.+An+empirical+study+on+the+use+of+defect+prediction+for+test+case+prioritization.+In+ICST.^^^Fabian Pedregosa, Gaël Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer, Ron Weiss, Vincent Dubourg, Jake VanderPlas, Alexandre Passos, David Cournapeau, Matthieu Brucher, Matthieu Perrot, and Edouard Duchesnay. 2011. Scikit-learn: Machine learning in Python. JMLR 12 ( 2011 ).***http://scholar.google.com/scholar?hl=en&q=Fabian+Pedregosa%2C+Ga%C3%ABl+Varoquaux%2C+Alexandre+Gramfort%2C+Vincent+Michel%2C+Bertrand+Thirion%2C+Olivier+Grisel%2C+Mathieu+Blondel%2C+Peter+Prettenhofer%2C+Ron+Weiss%2C+Vincent+Dubourg%2C+Jake+VanderPlas%2C+Alexandre+Passos%2C+David+Cournapeau%2C+Matthieu+Brucher%2C+Matthieu+Perrot%2C+and+Edouard+Duchesnay.+2011.+Scikit-learn%3A+Machine+learning+in+Python.+JMLR+12+%28+2011+%29.^^^Radim Řehůřek and Petr Sojka. 2010. Software framework for topic modelling with large corpora. In LREC.***http://scholar.google.com/scholar?hl=en&q=Radim+%C5%98eh%C5%AF%C5%99ek+and+Petr+Sojka.+2010.+Software+framework+for+topic+modelling+with+large+corpora.+In+LREC.^^^Stephen Robertson and Hugo Zaragoza. 2009. The probabilistic relevance framework: BM25 and beyond. Found. Trends Inf. Ret 3, 4 ( 2009 ).***http://scholar.google.com/scholar?hl=en&q=Stephen+Robertson+and+Hugo+Zaragoza.+2009.+The+probabilistic+relevance+framework%3A+BM25+and+beyond.+Found.+Trends+Inf.+Ret+3%2C+4+%28+2009+%29.^^^Stephen E. Robertson, Steve Walker, and Micheline Hancock-Beaulieu. 2000. Experimentation as a way of life: Okapi at TREC. Inf. Process. Manage. 36, 1 ( 2000 ).***http://scholar.google.com/scholar?hl=en&q=Stephen+E.+Robertson%2C+Steve+Walker%2C+and+Micheline+Hancock-Beaulieu.+2000.+Experimentation+as+a+way+of+life%3A+Okapi+at+TREC.+Inf.+Process.+Manage.+36%2C+1+%28+2000+%29.^^^Gregg Rothermel and Mary Jean Harrold. 1996. Analyzing regression test selection techniques. TSE 22, 8 ( 1996 ).***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel+and+Mary+Jean+Harrold.+1996.+Analyzing+regression+test+selection+techniques.+TSE+22%2C+8+%28+1996+%29.^^^Gregg Rothermel, Roland H. Untch, Chengyun Chu, and Mary Jean Harrold. 1999. Test case prioritization: An empirical study. In ICSM.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Roland+H.+Untch%2C+Chengyun+Chu%2C+and+Mary+Jean+Harrold.+1999.+Test+case+prioritization%3A+An+empirical+study.+In+ICSM.^^^Gregg Rothermel, Roland H. Untch, Chengyun Chu, and Mary Jean Harrold. 2001. Prioritizing test cases for regression testing. TSE 27, 10 ( 2001 ).***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Roland+H.+Untch%2C+Chengyun+Chu%2C+and+Mary+Jean+Harrold.+2001.+Prioritizing+test+cases+for+regression+testing.+TSE+27%2C+10+%28+2001+%29.^^^Ripon K. Saha, Matthew Lease, Sarfraz Khurshid, and Dewayne E Perry. 2013. Improving bug localization using structured information retrieval. In ASE.***http://scholar.google.com/scholar?hl=en&q=Ripon+K.+Saha%2C+Matthew+Lease%2C+Sarfraz+Khurshid%2C+and+Dewayne+E+Perry.+2013.+Improving+bug+localization+using+structured+information+retrieval.+In+ASE.^^^Ripon K. Saha, Lingming Zhang, Sarfraz Khurshid, and Dewayne E. Perry. 2015. An information retrieval approach for regression test prioritization based on program changes. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Ripon+K.+Saha%2C+Lingming+Zhang%2C+Sarfraz+Khurshid%2C+and+Dewayne+E.+Perry.+2015.+An+information+retrieval+approach+for+regression+test+prioritization+based+on+program+changes.+In+ICSE.^^^Gerard Salton and Christopher Buckley. 1988. Term-weighting approaches in automatic text retrieval. Inf. Process. Manage. 24, 5 ( 1988 ).***http://scholar.google.com/scholar?hl=en&q=Gerard+Salton+and+Christopher+Buckley.+1988.+Term-weighting+approaches+in+automatic+text+retrieval.+Inf.+Process.+Manage.+24%2C+5+%28+1988+%29.^^^August Shi, Alex Gyori, Owolabi Legunsen, and Darko Marinov. 2016. Detecting assumptions on deterministic implementations of non-deterministic specifications. In ICST.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Alex+Gyori%2C+Owolabi+Legunsen%2C+and+Darko+Marinov.+2016.+Detecting+assumptions+on+deterministic+implementations+of+non-deterministic+specifications.+In+ICST.^^^August Shi, Alex Gyori, Suleman Mahmood, Peiyuan Zhao, and Darko Marinov. 2018. Evaluating test-suite reduction in real software evolution. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Alex+Gyori%2C+Suleman+Mahmood%2C+Peiyuan+Zhao%2C+and+Darko+Marinov.+2018.+Evaluating+test-suite+reduction+in+real+software+evolution.+In+ISSTA.^^^August Shi, Milica Hadzi-Tanovic, Lingming Zhang, Darko Marinov, and Owolabi Legunsen. 2019. Reflection-aware static regression test selection. PACMPL 3, OOPSLA ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Milica+Hadzi-Tanovic%2C+Lingming+Zhang%2C+Darko+Marinov%2C+and+Owolabi+Legunsen.+2019.+Reflection-aware+static+regression+test+selection.+PACMPL+3%2C+OOPSLA+%28+2019+%29.^^^August Shi, Wing Lam, Reed Oei, Tao Xie, and Darko Marinov. 2019. iFixFlakies: A framework for automatically fixing order-dependent flaky tests. In ESEC/FSE.***http://scholar.google.com/scholar?hl=en&q=August+Shi%2C+Wing+Lam%2C+Reed+Oei%2C+Tao+Xie%2C+and+Darko+Marinov.+2019.+iFixFlakies%3A+A+framework+for+automatically+fixing+order-dependent+flaky+tests.+In+ESEC%2FFSE.^^^Helge Spieker, Arnaud Gotlieb, Dusica Marijan, and Morten Mossige. 2017. Reinforcement learning for automatic test case prioritization and selection in continuous integration. In ISSTA.***http://scholar.google.com/scholar?hl=en&q=Helge+Spieker%2C+Arnaud+Gotlieb%2C+Dusica+Marijan%2C+and+Morten+Mossige.+2017.+Reinforcement+learning+for+automatic+test+case+prioritization+and+selection+in+continuous+integration.+In+ISSTA.^^^Chris Thunes. 2018. c2nes/javalang. https://github.com/c2nes/javalang.***http://scholar.google.com/scholar?hl=en&q=Chris+Thunes.+2018.+c2nes%2Fjavalang.+https%3A%2F%2Fgithub.com%2Fc2nes%2Fjavalang.^^^John W. Tukey. 1949. Comparing individual means in the analysis of variance. Biometrics 5, 2 ( 1949 ).***http://scholar.google.com/scholar?hl=en&q=John+W.+Tukey.+1949.+Comparing+individual+means+in+the+analysis+of+variance.+Biometrics+5%2C+2+%28+1949+%29.^^^Xing Wei and W. Bruce Croft. 2006. LDA-based document models for ad-hoc retrieval. In SIGIR.***http://scholar.google.com/scholar?hl=en&q=Xing+Wei+and+W.+Bruce+Croft.+2006.+LDA-based+document+models+for+ad-hoc+retrieval.+In+SIGIR.^^^Frank Wilcoxon. 1945. Individual comparisons by ranking methods.***http://scholar.google.com/scholar?hl=en&q=Frank+Wilcoxon.+1945.+Individual+comparisons+by+ranking+methods.^^^Shin Yoo and Mark Harman. 2012. Regression testing minimization, selection and prioritization: A survey. STVR 22, 2 ( 2012 ).***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo+and+Mark+Harman.+2012.+Regression+testing+minimization%2C+selection+and+prioritization%3A+A+survey.+STVR+22%2C+2+%28+2012+%29.^^^Lingming Zhang. 2018. Hybrid regression test selection. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang.+2018.+Hybrid+regression+test+selection.+In+ICSE.^^^Lingming Zhang, Dan Hao, Lu Zhang, Gregg Rothermel, and Hong Mei. 2013. Bridging the gap between the total and additional test-case prioritization strategies. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang%2C+Dan+Hao%2C+Lu+Zhang%2C+Gregg+Rothermel%2C+and+Hong+Mei.+2013.+Bridging+the+gap+between+the+total+and+additional+test-case+prioritization+strategies.+In+ICSE.^^^Jian Zhou, Hongyu Zhang, and David Lo. 2012. Where should the bugs be fixed? More accurate information retrieval-based bug localization based on bug reports. In ICSE.***http://scholar.google.com/scholar?hl=en&q=Jian+Zhou%2C+Hongyu+Zhang%2C+and+David+Lo.+2012.+Where+should+the+bugs+be+fixed%3F+More+accurate+information+retrieval-based+bug+localization+based+on+bug+reports.+In+ICSE.^^^');
INSERT INTO `paper_ref` VALUES (40, 37, '2016. Circumventing Fuzzing Roadblocks with Compiler Transformations. https://lafintel.wordpress.com/ 2016 /08/15/circumventing-fuzzingroadblocks-with-compiler-transformations/. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=2016.+Circumventing+Fuzzing+Roadblocks+with+Compiler+Transformations.+https%3A%2F%2Flafintel.wordpress.com%2F+2016+%2F08%2F15%2Fcircumventing-fuzzingroadblocks-with-compiler-transformations%2F.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^2019. Google OSS-Fuzz: continuous fuzzing of open source software. https: //github.com/google/oss-fuzz. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=2019.+Google+OSS-Fuzz%3A+continuous+fuzzing+of+open+source+software.+https%3A+%2F%2Fgithub.com%2Fgoogle%2Foss-fuzz.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Dave Aitel. 2002. The Advantages of Block-Based Protocol Analysis for Security Testing. https://www.immunitysec.com/downloads/advantages_of_block_based_analysis.html. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Dave+Aitel.+2002.+The+Advantages+of+Block-Based+Protocol+Analysis+for+Security+Testing.+https%3A%2F%2Fwww.immunitysec.com%2Fdownloads%2Fadvantages_of_block_based_analysis.html.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig, Ahmad-Reza Sadeghi, and Daniel Teuchert. 2019. NAUTILUS: Fishing for Deep Bugs with Grammars. In 26th Annual Network and Distributed System Security Symposium, NDSS. https://www.ndss-symposium.org/ndss-paper/nautilusifshing-for-deep-bugs-with-grammars/***http://scholar.google.com/scholar?hl=en&q=Cornelius+Aschermann%2C+Tommaso+Frassetto%2C+Thorsten+Holz%2C+Patrick+Jauernig%2C+Ahmad-Reza+Sadeghi%2C+and+Daniel+Teuchert.+2019.+NAUTILUS%3A+Fishing+for+Deep+Bugs+with+Grammars.+In+26th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS.+https%3A%2F%2Fwww.ndss-symposium.org%2Fndss-paper%2Fnautilusifshing-for-deep-bugs-with-grammars%2F^^^Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. 2019. REDQUEEN: Fuzzing with Input-to-State Correspondence. In 26th Annual Network and Distributed System Security Symposium, NDSS. https://www.ndss-symposium.org/ndss-paper/redqueen-fuzzing-withinput-to-state-correspondence/***http://scholar.google.com/scholar?hl=en&q=Cornelius+Aschermann%2C+Sergej+Schumilo%2C+Tim+Blazytko%2C+Robert+Gawlik%2C+and+Thorsten+Holz.+2019.+REDQUEEN%3A+Fuzzing+with+Input-to-State+Correspondence.+In+26th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS.+https%3A%2F%2Fwww.ndss-symposium.org%2Fndss-paper%2Fredqueen-fuzzing-withinput-to-state-correspondence%2F^^^Roberto Baldoni, Emilio Coppa, Daniele Cono D\'Elia, Camil Demetrescu, and Irene Finocchi. 2018. A Survey of Symbolic Execution Techniques. Comput. Surveys 51, 3, Article 50 ( 2018 ), 39 pages. https://doi.org/10.1145/3182657 ***http://scholar.google.com/scholar?hl=en&q=Roberto+Baldoni%2C+Emilio+Coppa%2C+Daniele+Cono+D%27Elia%2C+Camil+Demetrescu%2C+and+Irene+Finocchi.+2018.+A+Survey+of+Symbolic+Execution+Techniques.+Comput.+Surveys+51%2C+3%2C+Article+50+%28+2018+%29%2C+39+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3182657+10.1145%2F3182657^^^Blackngel. 2019. MALLOC DES-MALEFICARUM. http://phrack.org/issues/66/10. html. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Blackngel.+2019.+MALLOC+DES-MALEFICARUM.+http%3A%2F%2Fphrack.org%2Fissues%2F66%2F10.+html.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Tim Blazytko, Cornelius Aschermann, Moritz Schlögel, Ali Abbasi, Sergej Schumilo, Simon Wörner, and Thorsten Holz. 2019. GRIMOIRE: Synthesizing Structure while Fuzzing. In 28th USENIX Security Symposium (USENIX Security 19). 1985-2002. https://www.usenix.org/system/files/sec19-blazytko.pdf***http://scholar.google.com/scholar?hl=en&q=Tim+Blazytko%2C+Cornelius+Aschermann%2C+Moritz+Schl%C3%B6gel%2C+Ali+Abbasi%2C+Sergej+Schumilo%2C+Simon+W%C3%B6rner%2C+and+Thorsten+Holz.+2019.+GRIMOIRE%3A+Synthesizing+Structure+while+Fuzzing.+In+28th+USENIX+Security+Symposium+%28USENIX+Security+19%29.+1985-2002.+https%3A%2F%2Fwww.usenix.org%2Fsystem%2Ffiles%2Fsec19-blazytko.pdf^^^Mathias Bynens. 2019. Smallest possible syntactically valid files of diferent types. https://github.com/mathiasbynens/small. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Mathias+Bynens.+2019.+Smallest+possible+syntactically+valid+files+of+diferent+types.+https%3A%2F%2Fgithub.com%2Fmathiasbynens%2Fsmall.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^P. Chen and H. Chen. 2018. Angora: Eficient Fuzzing by Principled Search. In 2018 IEEE Symposium on Security and Privacy (SP). 711-725. https://doi.org/10. 1109/SP. 2018.00046 ***http://scholar.google.com/scholar?hl=en&q=P.+Chen+and+H.+Chen.+2018.+Angora%3A+Eficient+Fuzzing+by+Principled+Search.+In+2018+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+711-725.+https%3A%2F%2Fdoi.org%2F10.+1109%2FSP.+2018.00046+10.1109%2FSP.2018.00046^^^Jaeseung Choi, Joonun Jang, Choongwoo Han, and Sang Kil Cha. 2019. Greybox Concolic Testing on Binary Code. In Proceedings of the 41st International Conference on Software Engineering (ICSE \'19). 736-747. https://doi.org/10.1109/ ICSE. 2019.00082 ***http://scholar.google.com/scholar?hl=en&q=Jaeseung+Choi%2C+Joonun+Jang%2C+Choongwoo+Han%2C+and+Sang+Kil+Cha.+2019.+Greybox+Concolic+Testing+on+Binary+Code.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE+%2719%29.+736-747.+https%3A%2F%2Fdoi.org%2F10.1109%2F+ICSE.+2019.00082+10.1109%2FICSE.2019.00082^^^Weidong Cui, Marcus Peinado, Karl Chen, Helen J. Wang, and Luis Irun-Briz. 2008. Tupni: Automatic Reverse Engineering of Input Formats. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS \'08). 391-402. https://doi.org/10.1145/1455770.1455820 ***http://scholar.google.com/scholar?hl=en&q=Weidong+Cui%2C+Marcus+Peinado%2C+Karl+Chen%2C+Helen+J.+Wang%2C+and+Luis+Irun-Briz.+2008.+Tupni%3A+Automatic+Reverse+Engineering+of+Input+Formats.+In+Proceedings+of+the+15th+ACM+Conference+on+Computer+and+Communications+Security+%28CCS+%2708%29.+391-402.+https%3A%2F%2Fdoi.org%2F10.1145%2F1455770.1455820+10.1145%2F1455770.1455820^^^Daniele Cono D\'Elia, Emilio Coppa, Simone Nicchi, Federico Palmaro, and Lorenzo Cavallaro. 2019. SoK: Using Dynamic Binary Instrumentation for Security (And How You May Get Caught Red Handed). In Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security (Asia CCS \'19). 15-27. https://doi.org/10.1145/3321705.3329819 ***http://scholar.google.com/scholar?hl=en&q=Daniele+Cono+D%27Elia%2C+Emilio+Coppa%2C+Simone+Nicchi%2C+Federico+Palmaro%2C+and+Lorenzo+Cavallaro.+2019.+SoK%3A+Using+Dynamic+Binary+Instrumentation+for+Security+%28And+How+You+May+Get+Caught+Red+Handed%29.+In+Proceedings+of+the+2019+ACM+Asia+Conference+on+Computer+and+Communications+Security+%28Asia+CCS+%2719%29.+15-27.+https%3A%2F%2Fdoi.org%2F10.1145%2F3321705.3329819+10.1145%2F3321705.3329819^^^Daniele Cono D\'Elia, Camil Demetrescu, and Irene Finocchi. 2016. Mining Hot Calling Contexts in Small Space. Software: Practice and Experience 46 ( 2016 ), 1131-1152. https://doi.org/10.1002/spe.2348 ***http://scholar.google.com/scholar?hl=en&q=Daniele+Cono+D%27Elia%2C+Camil+Demetrescu%2C+and+Irene+Finocchi.+2016.+Mining+Hot+Calling+Contexts+in+Small+Space.+Software%3A+Practice+and+Experience+46+%28+2016+%29%2C+1131-1152.+https%3A%2F%2Fdoi.org%2F10.1002%2Fspe.2348+10.1002%2Fspe.2348^^^M. Eddington. [n.d.]. Peach fuzzing platform. https://web.archive.org/web/ 20180621074520/http://community.peachfuzzer.com/WhatIsPeach.html. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=M.+Eddington.+%5Bn.d.%5D.+Peach+fuzzing+platform.+https%3A%2F%2Fweb.archive.org%2Fweb%2F+20180621074520%2Fhttp%3A%2F%2Fcommunity.peachfuzzer.com%2FWhatIsPeach.html.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Marc Heuse, Heiko Eißfeldt, and Andrea Fioraldi. 2019. AFL++. https://github. com/vanhauser-thc/AFLplusplus. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Marc+Heuse%2C+Heiko+Ei%C3%9Ffeldt%2C+and+Andrea+Fioraldi.+2019.+AFL%2B%2B.+https%3A%2F%2Fgithub.+com%2Fvanhauser-thc%2FAFLplusplus.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Christian Holler, Kim Herzig, and Andreas Zeller. 2012. Fuzzing with Code Fragments. In Proceedings of the 21st USENIX Conference on Security Symposium (SEC\'12). 38-38. http://dl.acm.org/citation.cfm?id= 2362793. 2362831***http://scholar.google.com/scholar?hl=en&q=Christian+Holler%2C+Kim+Herzig%2C+and+Andreas+Zeller.+2012.+Fuzzing+with+Code+Fragments.+In+Proceedings+of+the+21st+USENIX+Conference+on+Security+Symposium+%28SEC%2712%29.+38-38.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+2362793.+2362831^^^Matthias Höschele and Andreas Zeller. 2016. Mining Input Grammars from Dynamic Taints. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE 2016 ). 720-725. https://doi.org/10.1145/ 2970276.2970321 ***http://scholar.google.com/scholar?hl=en&q=Matthias+H%C3%B6schele+and+Andreas+Zeller.+2016.+Mining+Input+Grammars+from+Dynamic+Taints.+In+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+2016+%29.+720-725.+https%3A%2F%2Fdoi.org%2F10.1145%2F+2970276.2970321+10.1145%2F2970276.2970321^^^Matthias Höschele and Andreas Zeller. 2017. Mining Input Grammars with AUTOGRAM. In Proceedings of the 39th International Conference on Software Engineering Companion (ICSE-C \'17). 31-34. https://doi.org/10.1109/ICSE-C. 2017.14 ***http://scholar.google.com/scholar?hl=en&q=Matthias+H%C3%B6schele+and+Andreas+Zeller.+2017.+Mining+Input+Grammars+with+AUTOGRAM.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering+Companion+%28ICSE-C+%2717%29.+31-34.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE-C.+2017.14+10.1109%2FICSE-C.2017.14^^^Mateusz Jurczyk. 2019. CompareCoverage. https://github.com/googleprojectzero/ CompareCoverage/. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Mateusz+Jurczyk.+2019.+CompareCoverage.+https%3A%2F%2Fgithub.com%2Fgoogleprojectzero%2F+CompareCoverage%2F.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. 2017. Steelix: Program-state Based Binary Fuzzing. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017 ). 627-637. https://doi.org/10.1145/3106237.3106295 ***http://scholar.google.com/scholar?hl=en&q=Yuekang+Li%2C+Bihuan+Chen%2C+Mahinthan+Chandramohan%2C+Shang-Wei+Lin%2C+Yang+Liu%2C+and+Alwen+Tiu.+2017.+Steelix%3A+Program-state+Based+Binary+Fuzzing.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering+%28ESEC%2FFSE+2017+%29.+627-637.+https%3A%2F%2Fdoi.org%2F10.1145%2F3106237.3106295+10.1145%2F3106237.3106295^^^Tavis Ormandy. 2009. Making Software Dumberer. http://taviso.decsystem.org/ making_software_dumber.pdf. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Tavis+Ormandy.+2009.+Making+Software+Dumberer.+http%3A%2F%2Ftaviso.decsystem.org%2F+making_software_dumber.pdf.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^H. Peng, Y. Shoshitaishvili, and M. Payer. 2018. T-Fuzz: Fuzzing by Program Transformation. In 2018 IEEE Symposium on Security and Privacy (SP). 697-710. https://doi.org/10.1109/SP. 2018.00056 ***http://scholar.google.com/scholar?hl=en&q=H.+Peng%2C+Y.+Shoshitaishvili%2C+and+M.+Payer.+2018.+T-Fuzz%3A+Fuzzing+by+Program+Transformation.+In+2018+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+697-710.+https%3A%2F%2Fdoi.org%2F10.1109%2FSP.+2018.00056+10.1109%2FSP.2018.00056^^^V. Pham, M. Boehme, A. E. Santosa, A. R. Caciulescu, and A. Roychoudhury. 2019. Smart Greybox Fuzzing. IEEE Transactions on Software Engineering ( 2019 ). https://doi.org/10.1109/TSE. 2019.2941681 ***http://scholar.google.com/scholar?hl=en&q=V.+Pham%2C+M.+Boehme%2C+A.+E.+Santosa%2C+A.+R.+Caciulescu%2C+and+A.+Roychoudhury.+2019.+Smart+Greybox+Fuzzing.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2019.2941681+10.1109%2FTSE.2019.2941681^^^Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In 24th Annual Network and Distributed System Security Symposium, NDSS. https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/ vuzzer-application-aware-evolutionary-fuzzing/***http://scholar.google.com/scholar?hl=en&q=Sanjay+Rawat%2C+Vivek+Jain%2C+Ashish+Kumar%2C+Lucian+Cojocar%2C+Cristiano+Giuffrida%2C+and+Herbert+Bos.+2017.+VUzzer%3A+Application-aware+Evolutionary+Fuzzing.+In+24th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS.+https%3A%2F%2Fwww.ndss-symposium.org%2Fndss2017%2Fndss-2017-programme%2F+vuzzer-application-aware-evolutionary-fuzzing%2F^^^Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask). In Proceedings of the 2010 IEEE Symposium on Security and Privacy (SP 2010 ). 317-331. https://doi.org/10.1109/SP. 2010.26 ***http://scholar.google.com/scholar?hl=en&q=Edward+J.+Schwartz%2C+Thanassis+Avgerinos%2C+and+David+Brumley.+2010.+All+You+Ever+Wanted+to+Know+About+Dynamic+Taint+Analysis+and+Forward+Symbolic+Execution+%28but+Might+Have+Been+Afraid+to+Ask%29.+In+Proceedings+of+the+2010+IEEE+Symposium+on+Security+and+Privacy+%28SP+2010+%29.+317-331.+https%3A%2F%2Fdoi.org%2F10.1109%2FSP.+2010.26+10.1109%2FSP.2010.26^^^Nick Stephens, John Grosen, Christopher Salls, Audrey Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In 23th Annual Network and Distributed System Security Symposium, NDSS. https://www.ndss-symposium.org/wp-content/uploads/2017/09/drilleraugmenting-fuzzing-through-selective-symbolic-execution.pdf***http://scholar.google.com/scholar?hl=en&q=Nick+Stephens%2C+John+Grosen%2C+Christopher+Salls%2C+Audrey+Dutcher%2C+Ruoyu+Wang%2C+Jacopo+Corbetta%2C+Yan+Shoshitaishvili%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+Driller%3A+Augmenting+Fuzzing+Through+Selective+Symbolic+Execution..+In+23th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS.+https%3A%2F%2Fwww.ndss-symposium.org%2Fwp-content%2Fuploads%2F2017%2F09%2Fdrilleraugmenting-fuzzing-through-selective-symbolic-execution.pdf^^^Robert Swiecki. 2017. honggfuzz. https://github.com/google/honggfuzz. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Robert+Swiecki.+2017.+honggfuzz.+https%3A%2F%2Fgithub.com%2Fgoogle%2Fhonggfuzz.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^Ari Takanen, Jared D. Demott, and Charles Miller. 2018. Fuzzing for Software Security Testing and Quality Assurance (2nd ed.). Artech House, Inc., Norwood, MA, USA.***http://scholar.google.com/scholar?hl=en&q=Ari+Takanen%2C+Jared+D.+Demott%2C+and+Charles+Miller.+2018.+Fuzzing+for+Software+Security+Testing+and+Quality+Assurance+%282nd+ed.%29.+Artech+House%2C+Inc.%2C+Norwood%2C+MA%2C+USA.^^^Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2019. Superion: Grammaraware Greybox Fuzzing. In Proceedings of the 41st International Conference on Software Engineering (ICSE \'19). 724-735. https://doi.org/10.1109/ICSE. 2019.00081 ***http://scholar.google.com/scholar?hl=en&q=Junjie+Wang%2C+Bihuan+Chen%2C+Lei+Wei%2C+and+Yang+Liu.+2019.+Superion%3A+Grammaraware+Greybox+Fuzzing.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE+%2719%29.+724-735.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2019.00081+10.1109%2FICSE.2019.00081^^^T. Wang, T. Wei, G. Gu, and W. Zou. 2010. TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In 2010 IEEE Symposium on Security and Privacy (SP). 497-512. https://doi.org/10.1109/ SP. 2010.37 ***http://scholar.google.com/scholar?hl=en&q=T.+Wang%2C+T.+Wei%2C+G.+Gu%2C+and+W.+Zou.+2010.+TaintScope%3A+A+Checksum-Aware+Directed+Fuzzing+Tool+for+Automatic+Software+Vulnerability+Detection.+In+2010+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+497-512.+https%3A%2F%2Fdoi.org%2F10.1109%2F+SP.+2010.37+10.1109%2FSP.2010.37^^^B. Yadegari and S. Debray. 2014. Bit-Level Taint Analysis. In 2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation (SCAM). 255-264. https://doi.org/10.1109/SCAM. 2014.43 ***http://scholar.google.com/scholar?hl=en&q=B.+Yadegari+and+S.+Debray.+2014.+Bit-Level+Taint+Analysis.+In+2014+IEEE+14th+International+Working+Conference+on+Source+Code+Analysis+and+Manipulation+%28SCAM%29.+255-264.+https%3A%2F%2Fdoi.org%2F10.1109%2FSCAM.+2014.43+10.1109%2FSCAM.2014.43^^^B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray. 2015. A Generic Approach to Automatic Deobfuscation of Executable Code. In 2015 IEEE Symposium on Security and Privacy (SP). 674-691. https://doi.org/10.1109/SP. 2015.47 ***http://scholar.google.com/scholar?hl=en&q=B.+Yadegari%2C+B.+Johannesmeyer%2C+B.+Whitely%2C+and+S.+Debray.+2015.+A+Generic+Approach+to+Automatic+Deobfuscation+of+Executable+Code.+In+2015+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+674-691.+https%3A%2F%2Fdoi.org%2F10.1109%2FSP.+2015.47+10.1109%2FSP.2015.47^^^Wei You, Xuwei Liu, Shiqing Ma, David Perry, Xiangyu Zhang, and Bin Liang. 2019. SLF: Fuzzing without Valid Seed Inputs. In Proceedings of the 41st International Conference on Software Engineering (ICSE \'19). 712-723. https: //doi.org/10.1109/ICSE. 2019.00080 ***http://scholar.google.com/scholar?hl=en&q=Wei+You%2C+Xuwei+Liu%2C+Shiqing+Ma%2C+David+Perry%2C+Xiangyu+Zhang%2C+and+Bin+Liang.+2019.+SLF%3A+Fuzzing+without+Valid+Seed+Inputs.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE+%2719%29.+712-723.+https%3A+%2F%2Fdoi.org%2F10.1109%2FICSE.+2019.00080+10.1109%2FICSE.2019.00080^^^Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings of the 27th USENIX Conference on Security Symposium (SEC\'18). 745-761. http://dl.acm.org/citation.cfm?id= 3277203. 3277260***http://scholar.google.com/scholar?hl=en&q=Insu+Yun%2C+Sangho+Lee%2C+Meng+Xu%2C+Yeongjin+Jang%2C+and+Taesoo+Kim.+2018.+QSYM%3A+A+Practical+Concolic+Execution+Engine+Tailored+for+Hybrid+Fuzzing.+In+Proceedings+of+the+27th+USENIX+Conference+on+Security+Symposium+%28SEC%2718%29.+745-761.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3277203.+3277260^^^Michał Zalewski. 2019. American Fuzzy Lop. https://github.com/Google/AFL. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=Micha%C5%82+Zalewski.+2019.+American+Fuzzy+Lop.+https%3A%2F%2Fgithub.com%2FGoogle%2FAFL.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^A. Zeller, R. Gopinath, M. Böhme, G. Fraser, and C. Holler. 2019. The Fuzzing Book. https://www.fuzzingbook.org/. [Online; accessed 10-Sep-2019].***http://scholar.google.com/scholar?hl=en&q=A.+Zeller%2C+R.+Gopinath%2C+M.+B%C3%B6hme%2C+G.+Fraser%2C+and+C.+Holler.+2019.+The+Fuzzing+Book.+https%3A%2F%2Fwww.fuzzingbook.org%2F.+%5BOnline%3B+accessed+10-Sep-2019%5D.^^^');
INSERT INTO `paper_ref` VALUES (41, 55, 'David Adamo, Md Khorrom Khan, Sreedevi Koppula, and Renée Bryce. 2018. Reinforcement learning for Android GUI testing. In Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation. ACM, 2-8.***http://scholar.google.com/scholar?hl=en&q=David+Adamo%2C+Md+Khorrom+Khan%2C+Sreedevi+Koppula%2C+and+Ren%C3%A9e+Bryce.+2018.+Reinforcement+learning+for+Android+GUI+testing.+In+Proceedings+of+the+9th+ACM+SIGSOFT+International+Workshop+on+Automating+TEST+Case+Design%2C+Selection%2C+and+Evaluation.+ACM%2C+2-8.^^^Domenico Amalfitano, Anna Rita Fasolino, Porfirio Tramontana, Salvatore De Carmine, and Atif M Memon. 2012. Using GUI ripping for automated testing of Android applications. In 2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM, 258-261.***http://scholar.google.com/scholar?hl=en&q=Domenico+Amalfitano%2C+Anna+Rita+Fasolino%2C+Porfirio+Tramontana%2C+Salvatore+De+Carmine%2C+and+Atif+M+Memon.+2012.+Using+GUI+ripping+for+automated+testing+of+Android+applications.+In+2012+Proceedings+of+the+27th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+ACM%2C+258-261.^^^Domenico Amalfitano, Anna Rita Fasolino, Porfirio Tramontana, Bryan Dzung Ta, and Atif M Memon. 2014. MobiGUITAR: Automated model-based testing of mobile apps. IEEE software 32, 5 ( 2014 ), 53-59.***http://scholar.google.com/scholar?hl=en&q=Domenico+Amalfitano%2C+Anna+Rita+Fasolino%2C+Porfirio+Tramontana%2C+Bryan+Dzung+Ta%2C+and+Atif+M+Memon.+2014.+MobiGUITAR%3A+Automated+model-based+testing+of+mobile+apps.+IEEE+software+32%2C+5+%28+2014+%29%2C+53-59.^^^Saswat Anand, Mayur Naik, Mary Jean Harrold, and Hongseok Yang. 2012. Automated concolic testing of smartphone apps. In Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. ACM, 1-11.***http://scholar.google.com/scholar?hl=en&q=Saswat+Anand%2C+Mayur+Naik%2C+Mary+Jean+Harrold%2C+and+Hongseok+Yang.+2012.+Automated+concolic+testing+of+smartphone+apps.+In+Proceedings+of+the+ACM+SIGSOFT+20th+International+Symposium+on+the+Foundations+of+Software+Engineering.+ACM%2C+1-11.^^^Tanzirul Azim and Iulian Neamtiu. 2013. Targeted and depth-first exploration for systematic testing of android apps. In Acm Sigplan Notices, Vol. 48. ACM, 641-660.***http://scholar.google.com/scholar?hl=en&q=Tanzirul+Azim+and+Iulian+Neamtiu.+2013.+Targeted+and+depth-first+exploration+for+systematic+testing+of+android+apps.+In+Acm+Sigplan+Notices%2C+Vol.+48.+ACM%2C+641-660.^^^Young-Min Baek and Doo-Hwan Bae. 2016. Automated model-based Android GUI testing using multi-level GUI comparison criteria. In 2016 Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE). ACM, 238-249.***http://scholar.google.com/scholar?hl=en&q=Young-Min+Baek+and+Doo-Hwan+Bae.+2016.+Automated+model-based+Android+GUI+testing+using+multi-level+GUI+comparison+criteria.+In+2016+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+ACM%2C+238-249.^^^Nataniel P Borges Jr, Maria Gómez, and Andreas Zeller. 2018. Guiding app testing with mined interaction models. In Proceedings of the 5th International Conference on Mobile Software Engineering and Systems. ACM, 133-143.***http://scholar.google.com/scholar?hl=en&q=Nataniel+P+Borges+Jr%2C+Maria+G%C3%B3mez%2C+and+Andreas+Zeller.+2018.+Guiding+app+testing+with+mined+interaction+models.+In+Proceedings+of+the+5th+International+Conference+on+Mobile+Software+Engineering+and+Systems.+ACM%2C+133-143.^^^Jane Bromley, Isabelle Guyon, Yann LeCun, Eduard Säckinger, and Roopak Shah. 1994. Signature verification using a \"siamese\" time delay neural network. In Advances in neural information processing systems. 737-744.***http://scholar.google.com/scholar?hl=en&q=Jane+Bromley%2C+Isabelle+Guyon%2C+Yann+LeCun%2C+Eduard+S%C3%A4ckinger%2C+and+Roopak+Shah.+1994.+Signature+verification+using+a+%22siamese%22+time+delay+neural+network.+In+Advances+in+neural+information+processing+systems.+737-744.^^^Yuri Burda, Harri Edwards, Deepak Pathak, Amos Storkey, Trevor Darrell, and Alexei A Efros. 2019. Large-scale study of curiosity-driven learning. In 7th International Conference on Learning Representations (ICLR).***http://scholar.google.com/scholar?hl=en&q=Yuri+Burda%2C+Harri+Edwards%2C+Deepak+Pathak%2C+Amos+Storkey%2C+Trevor+Darrell%2C+and+Alexei+A+Efros.+2019.+Large-scale+study+of+curiosity-driven+learning.+In+7th+International+Conference+on+Learning+Representations+%28ICLR%29.^^^Shauvik Roy Choudhary, Alessandra Gorla, and Alessandro Orso. 2015. Automated test input generation for android: Are we there yet?(e). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 429-440.***http://scholar.google.com/scholar?hl=en&q=Shauvik+Roy+Choudhary%2C+Alessandra+Gorla%2C+and+Alessandro+Orso.+2015.+Automated+test+input+generation+for+android%3A+Are+we+there+yet%3F%28e%29.+In+2015+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+429-440.^^^Shauvik Roy Choudhary, Alessandra Gorla, and Alessandro Orso. 2015. Automated test input generation for android: Are we there yet?(e). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 429-440.***http://scholar.google.com/scholar?hl=en&q=Shauvik+Roy+Choudhary%2C+Alessandra+Gorla%2C+and+Alessandro+Orso.+2015.+Automated+test+input+generation+for+android%3A+Are+we+there+yet%3F%28e%29.+In+2015+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+429-440.^^^Christian Degott, Nataniel P Borges Jr, and Andreas Zeller. 2019. Learning user interface element interactions. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis. 296-306.***http://scholar.google.com/scholar?hl=en&q=Christian+Degott%2C+Nataniel+P+Borges+Jr%2C+and+Andreas+Zeller.+2019.+Learning+user+interface+element+interactions.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+296-306.^^^Arilo C Dias Neto, Rajesh Subramanyan, Marlon Vieira, and Guilherme H Travassos. 2007. A survey on model-based testing approaches: a systematic review. In Proceedings of the 1st ACM international workshop on Empirical assessment of software engineering languages and technologies: held in conjunction with the 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE ) 2007. ACM, 31-36.***http://scholar.google.com/scholar?hl=en&q=Arilo+C+Dias+Neto%2C+Rajesh+Subramanyan%2C+Marlon+Vieira%2C+and+Guilherme+H+Travassos.+2007.+A+survey+on+model-based+testing+approaches%3A+a+systematic+review.+In+Proceedings+of+the+1st+ACM+international+workshop+on+Empirical+assessment+of+software+engineering+languages+and+technologies%3A+held+in+conjunction+with+the+22nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%29+2007.+ACM%2C+31-36.^^^EclEmma. 2020. JaCoCo Java Code Coverage Library. https://www.eclemma. org/jacoco/index.html***http://scholar.google.com/scholar?hl=en&q=EclEmma.+2020.+JaCoCo+Java+Code+Coverage+Library.+https%3A%2F%2Fwww.eclemma.+org%2Fjacoco%2Findex.html^^^Xiang Gao, Shin Hwei Tan, Zhen Dong, and Abhik Roychoudhury. 2018. Android testing via synthetic symbolic execution. In 2018 Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE). ACM, 419-429.***http://scholar.google.com/scholar?hl=en&q=Xiang+Gao%2C+Shin+Hwei+Tan%2C+Zhen+Dong%2C+and+Abhik+Roychoudhury.+2018.+Android+testing+via+synthetic+symbolic+execution.+In+2018+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+ACM%2C+419-429.^^^GitHub. 2020. GitHub. https://github.com/***http://scholar.google.com/scholar?hl=en&q=GitHub.+2020.+GitHub.+https%3A%2F%2Fgithub.com%2F^^^Google. 2019. Broadcasts overview. https://developer.android.google.cn/guide/ components/broadcasts***http://scholar.google.com/scholar?hl=en&q=Google.+2019.+Broadcasts+overview.+https%3A%2F%2Fdeveloper.android.google.cn%2Fguide%2F+components%2Fbroadcasts^^^Google. 2019. ListView. https://developer.android.google.cn/reference/android/ widget/ListView***http://scholar.google.com/scholar?hl=en&q=Google.+2019.+ListView.+https%3A%2F%2Fdeveloper.android.google.cn%2Freference%2Fandroid%2F+widget%2FListView^^^Google. 2019. Recyclerview. https://developer.android.google.cn/reference/ androidx/recyclerview/widget/RecyclerView***http://scholar.google.com/scholar?hl=en&q=Google.+2019.+Recyclerview.+https%3A%2F%2Fdeveloper.android.google.cn%2Freference%2F+androidx%2Frecyclerview%2Fwidget%2FRecyclerView^^^Google. 2019. UI Automator. https://developer.android.com/training/testing/uiautomator***http://scholar.google.com/scholar?hl=en&q=Google.+2019.+UI+Automator.+https%3A%2F%2Fdeveloper.android.com%2Ftraining%2Ftesting%2Fuiautomator^^^Google. 2019. UI/Application Exerciser Monkey. https://developer.android.com/ studio/test/monkey***http://scholar.google.com/scholar?hl=en&q=Google.+2019.+UI%2FApplication+Exerciser+Monkey.+https%3A%2F%2Fdeveloper.android.com%2F+studio%2Ftest%2Fmonkey^^^NCC group. 2012. Intent Fuzzer. https://www.nccgroup.trust/us/our-research/ intent-fuzzer/***http://scholar.google.com/scholar?hl=en&q=NCC+group.+2012.+Intent+Fuzzer.+https%3A%2F%2Fwww.nccgroup.trust%2Fus%2Four-research%2F+intent-fuzzer%2F^^^Tianxiao Gu, Chun Cao, Tianchi Liu, Chengnian Sun, Jing Deng, Xiaoxing Ma, and Jian Lü. 2017. Aimdroid: Activity-insulated multi-level automated testing for android applications. In 2017 IEEE International Conference on Software Maintenance and Evolution (ICSME). IEEE, 103-114.***http://scholar.google.com/scholar?hl=en&q=Tianxiao+Gu%2C+Chun+Cao%2C+Tianchi+Liu%2C+Chengnian+Sun%2C+Jing+Deng%2C+Xiaoxing+Ma%2C+and+Jian+L%C3%BC.+2017.+Aimdroid%3A+Activity-insulated+multi-level+automated+testing+for+android+applications.+In+2017+IEEE+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29.+IEEE%2C+103-114.^^^Tianxiao Gu, Chengnian Sun, Xiaoxing Ma, Chun Cao, Chang Xu, Yuan Yao, Qirun Zhang, Jian Lu, and Zhendong Su. 2019. Practical GUI testing of Android applications via model abstraction and refinement. In Proceedings of the 41st International Conference on Software Engineering. IEEE Press, 269-280.***http://scholar.google.com/scholar?hl=en&q=Tianxiao+Gu%2C+Chengnian+Sun%2C+Xiaoxing+Ma%2C+Chun+Cao%2C+Chang+Xu%2C+Yuan+Yao%2C+Qirun+Zhang%2C+Jian+Lu%2C+and+Zhendong+Su.+2019.+Practical+GUI+testing+of+Android+applications+via+model+abstraction+and+refinement.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering.+IEEE+Press%2C+269-280.^^^Rein Houthooft, Xi Chen, Yan Duan, John Schulman, Filip De Turck, and Pieter Abbeel. 2016. Vime: Variational information maximizing exploration. In Advances in Neural Information Processing Systems. 1109-1117.***http://scholar.google.com/scholar?hl=en&q=Rein+Houthooft%2C+Xi+Chen%2C+Yan+Duan%2C+John+Schulman%2C+Filip+De+Turck%2C+and+Pieter+Abbeel.+2016.+Vime%3A+Variational+information+maximizing+exploration.+In+Advances+in+Neural+Information+Processing+Systems.+1109-1117.^^^Yavuz Koroglu, Alper Sen, Ozlem Muslu, Yunus Mete, Ceyda Ulker, Tolga Tanriverdi, and Yunus Donmez. 2018. QBE: QLearning-based exploration of android applications. In 2018 IEEE 11th International Conference on Software Testing, Veriifcation and Validation (ICST). IEEE, 105-115.***http://scholar.google.com/scholar?hl=en&q=Yavuz+Koroglu%2C+Alper+Sen%2C+Ozlem+Muslu%2C+Yunus+Mete%2C+Ceyda+Ulker%2C+Tolga+Tanriverdi%2C+and+Yunus+Donmez.+2018.+QBE%3A+QLearning-based+exploration+of+android+applications.+In+2018+IEEE+11th+International+Conference+on+Software+Testing%2C+Veriifcation+and+Validation+%28ICST%29.+IEEE%2C+105-115.^^^Duling Lai and Julia Rubin. 2019. Goal-driven exploration for Android applications. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 115-127.***http://scholar.google.com/scholar?hl=en&q=Duling+Lai+and+Julia+Rubin.+2019.+Goal-driven+exploration+for+Android+applications.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+115-127.^^^Yuanchun Li, Ziyue Yang, Yao Guo, and Xiangqun Chen. 2019. Humanoid: A Deep Learning-Based Approach to Automated Black-box Android App Testing. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 1070-1073.***http://scholar.google.com/scholar?hl=en&q=Yuanchun+Li%2C+Ziyue+Yang%2C+Yao+Guo%2C+and+Xiangqun+Chen.+2019.+Humanoid%3A+A+Deep+Learning-Based+Approach+to+Automated+Black-box+Android+App+Testing.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+1070-1073.^^^F-Droid Limited. 2020. F-Droid-Free and Open Source Android App Repository. https://f-droid.org/***http://scholar.google.com/scholar?hl=en&q=F-Droid+Limited.+2020.+F-Droid-Free+and+Open+Source+Android+App+Repository.+https%3A%2F%2Ff-droid.org%2F^^^Jun-Wei Lin, Reyhaneh Jabbarvand, and Sam Malek. 2019. Test Transfer Across Mobile Apps Through Semantic Mapping. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 42-53.***http://scholar.google.com/scholar?hl=en&q=Jun-Wei+Lin%2C+Reyhaneh+Jabbarvand%2C+and+Sam+Malek.+2019.+Test+Transfer+Across+Mobile+Apps+Through+Semantic+Mapping.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+42-53.^^^Aravind Machiry, Rohan Tahiliani, and Mayur Naik. 2013. Dynodroid: An input generation system for android apps. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 224-234.***http://scholar.google.com/scholar?hl=en&q=Aravind+Machiry%2C+Rohan+Tahiliani%2C+and+Mayur+Naik.+2013.+Dynodroid%3A+An+input+generation+system+for+android+apps.+In+Proceedings+of+the+2013+9th+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM%2C+224-234.^^^Riyadh Mahmood, Nariman Mirzaei, and Sam Malek. 2014. Evodroid: Segmented evolutionary testing of android apps. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering. ACM, 599-609.***http://scholar.google.com/scholar?hl=en&q=Riyadh+Mahmood%2C+Nariman+Mirzaei%2C+and+Sam+Malek.+2014.+Evodroid%3A+Segmented+evolutionary+testing+of+android+apps.+In+Proceedings+of+the+22nd+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering.+ACM%2C+599-609.^^^Ke Mao, Mark Harman, and Yue Jia. 2016. Sapienz: Multi-objective automated testing for Android applications. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 94-105.***http://scholar.google.com/scholar?hl=en&q=Ke+Mao%2C+Mark+Harman%2C+and+Yue+Jia.+2016.+Sapienz%3A+Multi-objective+automated+testing+for+Android+applications.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+94-105.^^^Ke Mao, Mark Harman, and Yue Jia. 2017. Crowd intelligence enhances automated mobile testing. In 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE Press, 16-26.***http://scholar.google.com/scholar?hl=en&q=Ke+Mao%2C+Mark+Harman%2C+and+Yue+Jia.+2017.+Crowd+intelligence+enhances+automated+mobile+testing.+In+2017+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE+Press%2C+16-26.^^^Leonardo Mariani, Mauro Pezze, Oliviero Riganelli, and Mauro Santoro. 2012. Autoblacktest: Automatic black-box testing of interactive applications. In 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation. IEEE, 81-90.***http://scholar.google.com/scholar?hl=en&q=Leonardo+Mariani%2C+Mauro+Pezze%2C+Oliviero+Riganelli%2C+and+Mauro+Santoro.+2012.+Autoblacktest%3A+Automatic+black-box+testing+of+interactive+applications.+In+2012+IEEE+Fifth+International+Conference+on+Software+Testing%2C+Verification+and+Validation.+IEEE%2C+81-90.^^^Jonas Mueller and Aditya Thyagarajan. 2016. Siamese Recurrent Architectures for Learning Sentence Similarity. In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence (Phoenix, Arizona) ( AAAI\'16). AAAI Press, 2786-2792.***http://scholar.google.com/scholar?hl=en&q=Jonas+Mueller+and+Aditya+Thyagarajan.+2016.+Siamese+Recurrent+Architectures+for+Learning+Sentence+Similarity.+In+Proceedings+of+the+Thirtieth+AAAI+Conference+on+Artificial+Intelligence+%28Phoenix%2C+Arizona%29+%28+AAAI%2716%29.+AAAI+Press%2C+2786-2792.^^^Paul Neculoiu, Maarten Versteegh, and Mihai Rotaru. 2016. Learning text similarity with siamese recurrent networks. In Proceedings of the 1st Workshop on Representation Learning for NLP. 148-157.***http://scholar.google.com/scholar?hl=en&q=Paul+Neculoiu%2C+Maarten+Versteegh%2C+and+Mihai+Rotaru.+2016.+Learning+text+similarity+with+siamese+recurrent+networks.+In+Proceedings+of+the+1st+Workshop+on+Representation+Learning+for+NLP.+148-157.^^^Deepak Pathak, Pulkit Agrawal, Alexei A Efros, and Trevor Darrell. 2017. Curiosity-driven exploration by self-supervised prediction. In International Conference on Machine Learning (ICML). 2778-2787.***http://scholar.google.com/scholar?hl=en&q=Deepak+Pathak%2C+Pulkit+Agrawal%2C+Alexei+A+Efros%2C+and+Trevor+Darrell.+2017.+Curiosity-driven+exploration+by+self-supervised+prediction.+In+International+Conference+on+Machine+Learning+%28ICML%29.+2778-2787.^^^pcqpcq. 2020. Open-Source Android Apps. https://github.com/pcqpcq/opensource-android-apps***http://scholar.google.com/scholar?hl=en&q=pcqpcq.+2020.+Open-Source+Android+Apps.+https%3A%2F%2Fgithub.com%2Fpcqpcq%2Fopensource-android-apps^^^Sable. 2019. Soot-A framework for analyzing and transforming Java and Android applications. https://sable.github.io/soot/***http://scholar.google.com/scholar?hl=en&q=Sable.+2019.+Soot-A+framework+for+analyzing+and+transforming+Java+and+Android+applications.+https%3A%2F%2Fsable.github.io%2Fsoot%2F^^^Alireza Sadeghi, Reyhaneh Jabbarvand, and Sam Malek. 2017. Patdroid: permission-aware gui testing of android. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, 220-232.***http://scholar.google.com/scholar?hl=en&q=Alireza+Sadeghi%2C+Reyhaneh+Jabbarvand%2C+and+Sam+Malek.+2017.+Patdroid%3A+permission-aware+gui+testing+of+android.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM%2C+220-232.^^^Raimondas Sasnauskas and John Regehr. 2014. Intent fuzzer: crafting intents of death. In Proceedings of the 2014 Joint International Workshop on Dynamic Analysis (WODA) and Software and System Performance Testing, Debugging, and Analytics (PERTEA). ACM, 1-5.***http://scholar.google.com/scholar?hl=en&q=Raimondas+Sasnauskas+and+John+Regehr.+2014.+Intent+fuzzer%3A+crafting+intents+of+death.+In+Proceedings+of+the+2014+Joint+International+Workshop+on+Dynamic+Analysis+%28WODA%29+and+Software+and+System+Performance+Testing%2C+Debugging%2C+and+Analytics+%28PERTEA%29.+ACM%2C+1-5.^^^Nikolay Savinov, Anton Raichuk, Raphaël Marinier, Damien Vincent, Marc Pollefeys, Timothy Lillicrap, and Sylvain Gelly. 2019. Episodic curiosity through reachability. In 7th International Conference on Learning Representations (ICLR).***http://scholar.google.com/scholar?hl=en&q=Nikolay+Savinov%2C+Anton+Raichuk%2C+Rapha%C3%ABl+Marinier%2C+Damien+Vincent%2C+Marc+Pollefeys%2C+Timothy+Lillicrap%2C+and+Sylvain+Gelly.+2019.+Episodic+curiosity+through+reachability.+In+7th+International+Conference+on+Learning+Representations+%28ICLR%29.^^^M Shafique and Y Labiche. 2010. A systematic review of model based testing tool support, Technical Report SCE-10-04. Carleton University, Canada ( 2010 ).***http://scholar.google.com/scholar?hl=en&q=M+Shafique+and+Y+Labiche.+2010.+A+systematic+review+of+model+based+testing+tool+support%2C+Technical+Report+SCE-10-04.+Carleton+University%2C+Canada+%28+2010+%29.^^^Helge Spieker, Arnaud Gotlieb, Dusica Marijan, and Morten Mossige. 2017. Reinforcement learning for automatic test case prioritization and selection in continuous integration. In Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 12-22.***http://scholar.google.com/scholar?hl=en&q=Helge+Spieker%2C+Arnaud+Gotlieb%2C+Dusica+Marijan%2C+and+Morten+Mossige.+2017.+Reinforcement+learning+for+automatic+test+case+prioritization+and+selection+in+continuous+integration.+In+Proceedings+of+the+26th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+12-22.^^^Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang Pu, Yang Liu, and Zhendong Su. 2017. Guided, stochastic model-based GUI testing of Android apps. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering. ACM, 245-256.***http://scholar.google.com/scholar?hl=en&q=Ting+Su%2C+Guozhu+Meng%2C+Yuting+Chen%2C+Ke+Wu%2C+Weiming+Yang%2C+Yao+Yao%2C+Geguang+Pu%2C+Yang+Liu%2C+and+Zhendong+Su.+2017.+Guided%2C+stochastic+model-based+GUI+testing+of+Android+apps.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering.+ACM%2C+245-256.^^^Tuyet Vuong and Shingo Takada. 2019. Semantic analysis for deep Q-network in android GUI testing. In 31st International Conference on Software Engineering and Knowledge Engineering, SEKE 2019. Knowledge Systems Institute Graduate School, 123-128.***http://scholar.google.com/scholar?hl=en&q=Tuyet+Vuong+and+Shingo+Takada.+2019.+Semantic+analysis+for+deep+Q-network+in+android+GUI+testing.+In+31st+International+Conference+on+Software+Engineering+and+Knowledge+Engineering%2C+SEKE+2019.+Knowledge+Systems+Institute+Graduate+School%2C+123-128.^^^Thi Anh Tuyet Vuong and Shingo Takada. 2018. A reinforcement learning based approach to automated testing of Android applications. In Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation. ACM, 31-37.***http://scholar.google.com/scholar?hl=en&q=Thi+Anh+Tuyet+Vuong+and+Shingo+Takada.+2018.+A+reinforcement+learning+based+approach+to+automated+testing+of+Android+applications.+In+Proceedings+of+the+9th+ACM+SIGSOFT+International+Workshop+on+Automating+TEST+Case+Design%2C+Selection%2C+and+Evaluation.+ACM%2C+31-37.^^^Christopher JCH Watkins and Peter Dayan. 1992. Q-learning. Machine learning 8, 3-4 ( 1992 ), 279-292.***http://scholar.google.com/scholar?hl=en&q=Christopher+JCH+Watkins+and+Peter+Dayan.+1992.+Q-learning.+Machine+learning+8%2C+3-4+%28+1992+%29%2C+279-292.^^^Yoram Wurmser. 2018. Mobile Time Spent 2018. https://www.emarketer.com/ content/mobile-time-spent-2018***http://scholar.google.com/scholar?hl=en&q=Yoram+Wurmser.+2018.+Mobile+Time+Spent+2018.+https%3A%2F%2Fwww.emarketer.com%2F+content%2Fmobile-time-spent-2018^^^Jiwei Yan, Linjie Pan, Yaqi Li, Jun Yan, and Jian Zhang. 2018. LAND: a userfriendly and customizable test generation tool for Android apps. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 360-363.***http://scholar.google.com/scholar?hl=en&q=Jiwei+Yan%2C+Linjie+Pan%2C+Yaqi+Li%2C+Jun+Yan%2C+and+Jian+Zhang.+2018.+LAND%3A+a+userfriendly+and+customizable+test+generation+tool+for+Android+apps.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+360-363.^^^Jiwei Yan, Tianyong Wu, Jun Yan, and Jian Zhang. 2017. Widget-sensitive and back-stack-aware GUI exploration for testing android apps. In 2017 IEEE International Conference on Software Quality, Reliability and Security (QRS). IEEE, 42-53.***http://scholar.google.com/scholar?hl=en&q=Jiwei+Yan%2C+Tianyong+Wu%2C+Jun+Yan%2C+and+Jian+Zhang.+2017.+Widget-sensitive+and+back-stack-aware+GUI+exploration+for+testing+android+apps.+In+2017+IEEE+International+Conference+on+Software+Quality%2C+Reliability+and+Security+%28QRS%29.+IEEE%2C+42-53.^^^Wei Yang, Mukul R Prasad, and Tao Xie. 2013. A grey-box approach for automated GUI-model generation of mobile applications. In International Conference on Fundamental Approaches to Software Engineering. Springer, 250-265.***http://scholar.google.com/scholar?hl=en&q=Wei+Yang%2C+Mukul+R+Prasad%2C+and+Tao+Xie.+2013.+A+grey-box+approach+for+automated+GUI-model+generation+of+mobile+applications.+In+International+Conference+on+Fundamental+Approaches+to+Software+Engineering.+Springer%2C+250-265.^^^Hui Ye, Shaoyin Cheng, Lanbo Zhang, and Fan Jiang. 2013. Droidfuzzer: Fuzzing the android apps with intent-filter tag. In Proceedings of International Conference on Advances in Mobile Computing & Multimedia. ACM, 68.***http://scholar.google.com/scholar?hl=en&q=Hui+Ye%2C+Shaoyin+Cheng%2C+Lanbo+Zhang%2C+and+Fan+Jiang.+2013.+Droidfuzzer%3A+Fuzzing+the+android+apps+with+intent-filter+tag.+In+Proceedings+of+International+Conference+on+Advances+in+Mobile+Computing+%26+Multimedia.+ACM%2C+68.^^^Yan Zheng, Xiaofei Xie, Ting Su, Lei Ma, Jianye Hao, Zhaopeng Meng, Yang Liu, Ruimin Shen, Yinfeng Chen, and Changjie Fan. 2019. Wuji: Automatic online combat game testing using evolutionary deep reinforcement learning. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). 772-784.***http://scholar.google.com/scholar?hl=en&q=Yan+Zheng%2C+Xiaofei+Xie%2C+Ting+Su%2C+Lei+Ma%2C+Jianye+Hao%2C+Zhaopeng+Meng%2C+Yang+Liu%2C+Ruimin+Shen%2C+Yinfeng+Chen%2C+and+Changjie+Fan.+2019.+Wuji%3A+Automatic+online+combat+game+testing+using+evolutionary+deep+reinforcement+learning.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+772-784.^^^');
INSERT INTO `paper_ref` VALUES (42, 38, 'Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jefrey Dean, Matthieu Devin, Sanjay Ghemawat, Geofrey Irving, Michael Isard, Manjunath Kudlur, Josh Levenberg, Rajat Monga, Sherry Moore, Derek G. Murray, Benoit Steiner, Paul Tucker, Vijay Vasudevan, Pete Warden, Martin Wicke, Yuan Yu, and Xiaoqiang Zheng. 2016. TensorFlow: A System for Large-scale Machine Learning. In Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation (OSDI\'16). 265-283.***http://scholar.google.com/scholar?hl=en&q=Mart%C3%ADn+Abadi%2C+Paul+Barham%2C+Jianmin+Chen%2C+Zhifeng+Chen%2C+Andy+Davis%2C+Jefrey+Dean%2C+Matthieu+Devin%2C+Sanjay+Ghemawat%2C+Geofrey+Irving%2C+Michael+Isard%2C+Manjunath+Kudlur%2C+Josh+Levenberg%2C+Rajat+Monga%2C+Sherry+Moore%2C+Derek+G.+Murray%2C+Benoit+Steiner%2C+Paul+Tucker%2C+Vijay+Vasudevan%2C+Pete+Warden%2C+Martin+Wicke%2C+Yuan+Yu%2C+and+Xiaoqiang+Zheng.+2016.+TensorFlow%3A+A+System+for+Large-scale+Machine+Learning.+In+Proceedings+of+the+12th+USENIX+Conference+on+Operating+Systems+Design+and+Implementation+%28OSDI%2716%29.+265-283.^^^Mariusz Bojarski, Davide Del Testa, Daniel Dworakowski, Bernhard Firner, Beat Flepp, Prasoon Goyal, Lawrence D Jackel, Mathew Monfort, Urs Muller, Jiakai Zhang, et al. 2016. End to end learning for self-driving cars. arXiv preprint arXiv:1604.07316 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Mariusz+Bojarski%2C+Davide+Del+Testa%2C+Daniel+Dworakowski%2C+Bernhard+Firner%2C+Beat+Flepp%2C+Prasoon+Goyal%2C+Lawrence+D+Jackel%2C+Mathew+Monfort%2C+Urs+Muller%2C+Jiakai+Zhang%2C+et+al.+2016.+End+to+end+learning+for+self-driving+cars.+arXiv+preprint+arXiv%3A1604.07316+%28+2016+%29.^^^N. Carlini and D. Wagner. 2017. Towards Evaluating the Robustness of Neural Networks. In 2017 IEEE Symposium on Security and Privacy (S&P\'17). 39-57.***http://scholar.google.com/scholar?hl=en&q=N.+Carlini+and+D.+Wagner.+2017.+Towards+Evaluating+the+Robustness+of+Neural+Networks.+In+2017+IEEE+Symposium+on+Security+and+Privacy+%28S%26P%2717%29.+39-57.^^^Sooyoung Cha, Seongjoon Hong, Junhee Lee, and Hakjoo Oh. 2018. Automatically Generating Search Heuristics for Concolic Testing. 2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE) ( 2018 ), 1244-1254.***http://scholar.google.com/scholar?hl=en&q=Sooyoung+Cha%2C+Seongjoon+Hong%2C+Junhee+Lee%2C+and+Hakjoo+Oh.+2018.+Automatically+Generating+Search+Heuristics+for+Concolic+Testing.+2018+IEEE%2FACM+40th+International+Conference+on+Software+Engineering+%28ICSE%29+%28+2018+%29%2C+1244-1254.^^^Sooyoung Cha and Hakjoo Oh. 2019. Concolic Testing with Adaptively Changing Search Heuristics. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE 2019 ). 235âĂŞ245.***http://scholar.google.com/scholar?hl=en&q=Sooyoung+Cha+and+Hakjoo+Oh.+2019.+Concolic+Testing+with+Adaptively+Changing+Search+Heuristics.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE+2019+%29.+235%C3%A2%C4%82%C5%9E245.^^^François Chollet et al. 2015. Keras. https://keras.io.***http://scholar.google.com/scholar?hl=en&q=Fran%C3%A7ois+Chollet+et+al.+2015.+Keras.+https%3A%2F%2Fkeras.io.^^^J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei. 2009. ImageNet: A large-scale hierarchical image database. In 2009 IEEE Conference on Computer Vision and Pattern Recognition. 248-255.***http://scholar.google.com/scholar?hl=en&q=J.+Deng%2C+W.+Dong%2C+R.+Socher%2C+L.+Li%2C+Kai+Li%2C+and+Li+Fei-Fei.+2009.+ImageNet%3A+A+large-scale+hierarchical+image+database.+In+2009+IEEE+Conference+on+Computer+Vision+and+Pattern+Recognition.+248-255.^^^Hasan Ferit Eniser, Simos Gerasimou, and Alper Sen. 2019. DeepFault: Fault Localization for Deep Neural Networks. In Fundamental Approaches to Software Engineering (FASE\'19). 171-191.***http://scholar.google.com/scholar?hl=en&q=Hasan+Ferit+Eniser%2C+Simos+Gerasimou%2C+and+Alper+Sen.+2019.+DeepFault%3A+Fault+Localization+for+Deep+Neural+Networks.+In+Fundamental+Approaches+to+Software+Engineering+%28FASE%2719%29.+171-191.^^^Akira Fukui, Dong Huk Park, Daylen Yang, Anna Rohrbach, Trevor Darrell, and Marcus Rohrbach. 2016. Multimodal Compact Bilinear Pooling for Visual Question Answering and Visual Grounding. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing (EMNLP\'16). 457-468.***http://scholar.google.com/scholar?hl=en&q=Akira+Fukui%2C+Dong+Huk+Park%2C+Daylen+Yang%2C+Anna+Rohrbach%2C+Trevor+Darrell%2C+and+Marcus+Rohrbach.+2016.+Multimodal+Compact+Bilinear+Pooling+for+Visual+Question+Answering+and+Visual+Grounding.+In+Proceedings+of+the+2016+Conference+on+Empirical+Methods+in+Natural+Language+Processing+%28EMNLP%2716%29.+457-468.^^^Leon A Gatys, Alexander S Ecker, and Matthias Bethge. 2016. Image style transfer using convolutional neural networks. In Proceedings of the IEEE conference on computer vision and pattern recognition (CVPR\'16). 2414-2423.***http://scholar.google.com/scholar?hl=en&q=Leon+A+Gatys%2C+Alexander+S+Ecker%2C+and+Matthias+Bethge.+2016.+Image+style+transfer+using+convolutional+neural+networks.+In+Proceedings+of+the+IEEE+conference+on+computer+vision+and+pattern+recognition+%28CVPR%2716%29.+2414-2423.^^^Ian Goodfellow, Jonathon Shlens, and Christian Szegedy. 2015. Explaining and Harnessing Adversarial Examples. In International Conference on Learning Representations (ICLR\'15).***http://scholar.google.com/scholar?hl=en&q=Ian+Goodfellow%2C+Jonathon+Shlens%2C+and+Christian+Szegedy.+2015.+Explaining+and+Harnessing+Adversarial+Examples.+In+International+Conference+on+Learning+Representations+%28ICLR%2715%29.^^^Jianmin Guo, Yu Jiang, Yue Zhao, Quan Chen, and Jiaguang Sun. 2018. DLFuzz: Diferential Fuzzing Testing of Deep Learning Systems. In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE\'18). 739-743.***http://scholar.google.com/scholar?hl=en&q=Jianmin+Guo%2C+Yu+Jiang%2C+Yue+Zhao%2C+Quan+Chen%2C+and+Jiaguang+Sun.+2018.+DLFuzz%3A+Diferential+Fuzzing+Testing+of+Deep+Learning+Systems.+In+Proceedings+of+the+2018+26th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%2718%29.+739-743.^^^K. He, X. Zhang, S. Ren, and J. Sun. 2016. Deep Residual Learning for Image Recognition. In 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR\'16). 770-778.***http://scholar.google.com/scholar?hl=en&q=K.+He%2C+X.+Zhang%2C+S.+Ren%2C+and+J.+Sun.+2016.+Deep+Residual+Learning+for+Image+Recognition.+In+2016+IEEE+Conference+on+Computer+Vision+and+Pattern+Recognition+%28CVPR%2716%29.+770-778.^^^Xun Huang and Serge Belongie. 2017. Arbitrary style transfer in real-time with adaptive instance normalization. In Proceedings of the IEEE International Conference on Computer Vision (ICCV\'17). 1501-1510.***http://scholar.google.com/scholar?hl=en&q=Xun+Huang+and+Serge+Belongie.+2017.+Arbitrary+style+transfer+in+real-time+with+adaptive+instance+normalization.+In+Proceedings+of+the+IEEE+International+Conference+on+Computer+Vision+%28ICCV%2717%29.+1501-1510.^^^Jinhan Kim, Robert Feldt, and Shin Yoo. 2019. Guiding Deep Learning System Testing Using Surprise Adequacy. In Proceedings of the 41st International Conference on Software Engineering (ICSE\'19). 1039-1049.***http://scholar.google.com/scholar?hl=en&q=Jinhan+Kim%2C+Robert+Feldt%2C+and+Shin+Yoo.+2019.+Guiding+Deep+Learning+System+Testing+Using+Surprise+Adequacy.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE%2719%29.+1039-1049.^^^Alexey Kurakin, Ian Goodfellow, and Samy Bengio. 2017. Adversarial examples in the physical world. In The International Conference on Learning Representations (ICLR\'17).***http://scholar.google.com/scholar?hl=en&q=Alexey+Kurakin%2C+Ian+Goodfellow%2C+and+Samy+Bengio.+2017.+Adversarial+examples+in+the+physical+world.+In+The+International+Conference+on+Learning+Representations+%28ICLR%2717%29.^^^Y. Lecun, L. Bottou, Y. Bengio, and P. Hafner. 1998. Gradient-based learning applied to document recognition. Proc. IEEE ( 1998 ), 2278-2324.***http://scholar.google.com/scholar?hl=en&q=Y.+Lecun%2C+L.+Bottou%2C+Y.+Bengio%2C+and+P.+Hafner.+1998.+Gradient-based+learning+applied+to+document+recognition.+Proc.+IEEE+%28+1998+%29%2C+2278-2324.^^^Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao, and Yadong Wang. 2018. DeepGauge: Multi-granularity Testing Criteria for Deep Learning Systems. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE\'18). 120-131.***http://scholar.google.com/scholar?hl=en&q=Lei+Ma%2C+Felix+Juefei-Xu%2C+Fuyuan+Zhang%2C+Jiyuan+Sun%2C+Minhui+Xue%2C+Bo+Li%2C+Chunyang+Chen%2C+Ting+Su%2C+Li+Li%2C+Yang+Liu%2C+Jianjun+Zhao%2C+and+Yadong+Wang.+2018.+DeepGauge%3A+Multi-granularity+Testing+Criteria+for+Deep+Learning+Systems.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28ASE%2718%29.+120-131.^^^Lei Ma, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Felix Juefei Xu, Chao Xie, Li Li, Jianjun Zhao Yang Liu, and Yadong Wang. 2018. DeepMutation: Mutation Testing of Deep Learning Systems. CoRR abs/ 1805.05206 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Lei+Ma%2C+Fuyuan+Zhang%2C+Jiyuan+Sun%2C+Minhui+Xue%2C+Bo+Li%2C+Felix+Juefei+Xu%2C+Chao+Xie%2C+Li+Li%2C+Jianjun+Zhao+Yang+Liu%2C+and+Yadong+Wang.+2018.+DeepMutation%3A+Mutation+Testing+of+Deep+Learning+Systems.+CoRR+abs%2F+1805.05206+%28+2018+%29.^^^Shiqing Ma, Yingqi Liu, Wen-Chuan Lee, Xiangyu Zhang, and Ananth Grama. 2018. MODE: Automated Neural Network Model Debugging via State Diferential Analysis and Input Selection.***http://scholar.google.com/scholar?hl=en&q=Shiqing+Ma%2C+Yingqi+Liu%2C+Wen-Chuan+Lee%2C+Xiangyu+Zhang%2C+and+Ananth+Grama.+2018.+MODE%3A+Automated+Neural+Network+Model+Debugging+via+State+Diferential+Analysis+and+Input+Selection.^^^Vinod Nair and Geofrey E. Hinton. 2010. Rectified Linear Units Improve Restricted Boltzmann Machines. In Proceedings of the 27th International Conference on International Conference on Machine Learning (ICML\'10). 807-814.***http://scholar.google.com/scholar?hl=en&q=Vinod+Nair+and+Geofrey+E.+Hinton.+2010.+Rectified+Linear+Units+Improve+Restricted+Boltzmann+Machines.+In+Proceedings+of+the+27th+International+Conference+on+International+Conference+on+Machine+Learning+%28ICML%2710%29.+807-814.^^^Augustus Odena, Catherine Olsson, David Andersen, and Ian J. Goodfellow. 2019. TensorFuzz: Debugging Neural Networks with Coverage-Guided Fuzzing. In Proceedings of the 36th International Conference on Machine Learning (ICML\'19). 4901-4911.***http://scholar.google.com/scholar?hl=en&q=Augustus+Odena%2C+Catherine+Olsson%2C+David+Andersen%2C+and+Ian+J.+Goodfellow.+2019.+TensorFuzz%3A+Debugging+Neural+Networks+with+Coverage-Guided+Fuzzing.+In+Proceedings+of+the+36th+International+Conference+on+Machine+Learning+%28ICML%2719%29.+4901-4911.^^^N. Papernot, P. McDaniel, S. Jha, M. Fredrikson, Z. B. Celik, and A. Swami. 2016. The Limitations of Deep Learning in Adversarial Settings. In 2016 IEEE European Symposium on Security and Privacy. 372-387.***http://scholar.google.com/scholar?hl=en&q=N.+Papernot%2C+P.+McDaniel%2C+S.+Jha%2C+M.+Fredrikson%2C+Z.+B.+Celik%2C+and+A.+Swami.+2016.+The+Limitations+of+Deep+Learning+in+Adversarial+Settings.+In+2016+IEEE+European+Symposium+on+Security+and+Privacy.+372-387.^^^Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. 2017. DeepXplore: Automated Whitebox Testing of Deep Learning Systems. In Proceedings of the 26th Symposium on Operating Systems Principles (SOSP\'17). 1-18.***http://scholar.google.com/scholar?hl=en&q=Kexin+Pei%2C+Yinzhi+Cao%2C+Junfeng+Yang%2C+and+Suman+Jana.+2017.+DeepXplore%3A+Automated+Whitebox+Testing+of+Deep+Learning+Systems.+In+Proceedings+of+the+26th+Symposium+on+Operating+Systems+Principles+%28SOSP%2717%29.+1-18.^^^Yunchen Pu, Zhe Gan, Ricardo Henao, Xin Yuan, Chunyuan Li, Andrew Stevens, and Lawrence Carin. 2016. Variational Autoencoder for Deep Learning of Images, Labels and Captions. In Proceedings of the 30th International Conference on Neural Information Processing Systems (NIPS\'16). 2360-2368.***http://scholar.google.com/scholar?hl=en&q=Yunchen+Pu%2C+Zhe+Gan%2C+Ricardo+Henao%2C+Xin+Yuan%2C+Chunyuan+Li%2C+Andrew+Stevens%2C+and+Lawrence+Carin.+2016.+Variational+Autoencoder+for+Deep+Learning+of+Images%2C+Labels+and+Captions.+In+Proceedings+of+the+30th+International+Conference+on+Neural+Information+Processing+Systems+%28NIPS%2716%29.+2360-2368.^^^Pranav Rajpurkar, Jeremy Irvin, Kaylie Zhu, Brandon Yang, Hershel Mehta, Tony Duan, Daisy Ding, Aarti Bagul, Curtis Langlotz, Katie Shpanskaya, et al. 2017. Chexnet: Radiologist-level pneumonia detection on chest x-rays with deep learning. arXiv preprint arXiv:1711.05225 ( 2017 ).***http://scholar.google.com/scholar?hl=en&q=Pranav+Rajpurkar%2C+Jeremy+Irvin%2C+Kaylie+Zhu%2C+Brandon+Yang%2C+Hershel+Mehta%2C+Tony+Duan%2C+Daisy+Ding%2C+Aarti+Bagul%2C+Curtis+Langlotz%2C+Katie+Shpanskaya%2C+et+al.+2017.+Chexnet%3A+Radiologist-level+pneumonia+detection+on+chest+x-rays+with+deep+learning.+arXiv+preprint+arXiv%3A1711.05225+%28+2017+%29.^^^J. Sekhon and C. Fleming. 2019. Towards Improved Testing For Deep Learning. In 2019 IEEE/ACM 41st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE\'19). 85-88.***http://scholar.google.com/scholar?hl=en&q=J.+Sekhon+and+C.+Fleming.+2019.+Towards+Improved+Testing+For+Deep+Learning.+In+2019+IEEE%2FACM+41st+International+Conference+on+Software+Engineering%3A+New+Ideas+and+Emerging+Results+%28ICSE%2719%29.+85-88.^^^David Silver, Julian Schrittwieser, Karen Simonyan, Ioannis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas Baker, Matthew Lai, Adrian Bolton, et al. 2017. Mastering the game of go without human knowledge. Nature 550 ( 2017 ), 354.***http://scholar.google.com/scholar?hl=en&q=David+Silver%2C+Julian+Schrittwieser%2C+Karen+Simonyan%2C+Ioannis+Antonoglou%2C+Aja+Huang%2C+Arthur+Guez%2C+Thomas+Hubert%2C+Lucas+Baker%2C+Matthew+Lai%2C+Adrian+Bolton%2C+et+al.+2017.+Mastering+the+game+of+go+without+human+knowledge.+Nature+550+%28+2017+%29%2C+354.^^^Karen Simonyan and Andrew Zisserman. 2015. Very Deep Convolutional Networks for Large-Scale Image Recognition. In 3rd International Conference on Learning Representations (ICLR\'15).***http://scholar.google.com/scholar?hl=en&q=Karen+Simonyan+and+Andrew+Zisserman.+2015.+Very+Deep+Convolutional+Networks+for+Large-Scale+Image+Recognition.+In+3rd+International+Conference+on+Learning+Representations+%28ICLR%2715%29.^^^Youcheng Sun, Xiaowei Huang, and Daniel Kroening. 2018. Testing Deep Neural Networks. CoRR abs/ 1803.04792 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Xiaowei+Huang%2C+and+Daniel+Kroening.+2018.+Testing+Deep+Neural+Networks.+CoRR+abs%2F+1803.04792+%28+2018+%29.^^^Youcheng Sun, Xiaowei Huang, Daniel Kroening, James Sharp, Matthew Hill, and Rob Ashmore. 2019. DeepConcolic: Testing and Debugging Deep Neural Networks. In Proceedings of the 41st International Conference on Software Engineering: Companion Proceedings (ICSE\'19). 111-114.***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Xiaowei+Huang%2C+Daniel+Kroening%2C+James+Sharp%2C+Matthew+Hill%2C+and+Rob+Ashmore.+2019.+DeepConcolic%3A+Testing+and+Debugging+Deep+Neural+Networks.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%3A+Companion+Proceedings+%28ICSE%2719%29.+111-114.^^^Youcheng Sun, Xiaowei Huang, Daniel Kroening, James Sharp, Matthew Hill, and Rob Ashmore. 2019. Structural Test Coverage Criteria for Deep Neural Networks. In Proceedings of the 41st International Conference on Software Engineering: Companion Proceedings (ICSE\'19). 320-321.***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Xiaowei+Huang%2C+Daniel+Kroening%2C+James+Sharp%2C+Matthew+Hill%2C+and+Rob+Ashmore.+2019.+Structural+Test+Coverage+Criteria+for+Deep+Neural+Networks.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%3A+Companion+Proceedings+%28ICSE%2719%29.+320-321.^^^Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi Ray. 2018. DeepTest: Automated Testing of Deep-neural-network-driven Autonomous Cars. In Proceedings of the 40th International Conference on Software Engineering (ICSE\'18). 303-314.***http://scholar.google.com/scholar?hl=en&q=Yuchi+Tian%2C+Kexin+Pei%2C+Suman+Jana%2C+and+Baishakhi+Ray.+2018.+DeepTest%3A+Automated+Testing+of+Deep-neural-network-driven+Autonomous+Cars.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28ICSE%2718%29.+303-314.^^^Xiaofei Xie, Lei Ma, Felix Juefei-Xu, Minhui Xue, Hongxu Chen, Yang Liu, Jianjun Zhao, Bo Li, Jianxiong Yin, and Simon See. 2019. DeepHunter: A Coverageguided Fuzz Testing Framework for Deep Neural Networks. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA\'19). 146-157.***http://scholar.google.com/scholar?hl=en&q=Xiaofei+Xie%2C+Lei+Ma%2C+Felix+Juefei-Xu%2C+Minhui+Xue%2C+Hongxu+Chen%2C+Yang+Liu%2C+Jianjun+Zhao%2C+Bo+Li%2C+Jianxiong+Yin%2C+and+Simon+See.+2019.+DeepHunter%3A+A+Coverageguided+Fuzz+Testing+Framework+for+Deep+Neural+Networks.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2719%29.+146-157.^^^Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron Courville, Ruslan Salakhudinov, Rich Zemel, and Yoshua Bengio. 2015. Show, attend and tell: Neural image caption generation with visual attention. In International conference on machine learning (ICML\'15). 2048-2057.***http://scholar.google.com/scholar?hl=en&q=Kelvin+Xu%2C+Jimmy+Ba%2C+Ryan+Kiros%2C+Kyunghyun+Cho%2C+Aaron+Courville%2C+Ruslan+Salakhudinov%2C+Rich+Zemel%2C+and+Yoshua+Bengio.+2015.+Show%2C+attend+and+tell%3A+Neural+image+caption+generation+with+visual+attention.+In+International+conference+on+machine+learning+%28ICML%2715%29.+2048-2057.^^^Q. You, H. Jin, Z. Wang, C. Fang, and J. Luo. 2016. Image Captioning with Semantic Attention. In 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR\'16). 4651-4659.***http://scholar.google.com/scholar?hl=en&q=Q.+You%2C+H.+Jin%2C+Z.+Wang%2C+C.+Fang%2C+and+J.+Luo.+2016.+Image+Captioning+with+Semantic+Attention.+In+2016+IEEE+Conference+on+Computer+Vision+and+Pattern+Recognition+%28CVPR%2716%29.+4651-4659.^^^MichaÅĆ Zalewski. 2007. American fuzzy lop. http://lcamtuf.coredump.cx/afl/***http://scholar.google.com/scholar?hl=en&q=Micha%C3%85%C4%86+Zalewski.+2007.+American+fuzzy+lop.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl%2F^^^Matthew D. Zeiler and Rob Fergus. 2014. Visualizing and Understanding Convolutional Networks. In European conference on computer vision (ECCV\'14). 818-833.***http://scholar.google.com/scholar?hl=en&q=Matthew+D.+Zeiler+and+Rob+Fergus.+2014.+Visualizing+and+Understanding+Convolutional+Networks.+In+European+conference+on+computer+vision+%28ECCV%2714%29.+818-833.^^^');
INSERT INTO `paper_ref` VALUES (43, 33, 'Christofer Quist Adamsen, Gianluca Mezzetti, and Anders Møller. 2015. Systematic Execution of Android Test Suites in Adverse Conditions. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA).***http://scholar.google.com/scholar?hl=en&q=Christofer+Quist+Adamsen%2C+Gianluca+Mezzetti%2C+and+Anders+M%C3%B8ller.+2015.+Systematic+Execution+of+Android+Test+Suites+in+Adverse+Conditions.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%29.^^^Domenico Amalfitano, Vincenzo Riccio, Ana C. R. Paiva, and Anna Rita Fasolino. 2018. Why does the orientation change mess up my Android application? From GUI failures to code faults. Software Testing, Verification and Reliability 28, 1 ( 2018 ), e1654.***http://scholar.google.com/scholar?hl=en&q=Domenico+Amalfitano%2C+Vincenzo+Riccio%2C+Ana+C.+R.+Paiva%2C+and+Anna+Rita+Fasolino.+2018.+Why+does+the+orientation+change+mess+up+my+Android+application%3F+From+GUI+failures+to+code+faults.+Software+Testing%2C+Verification+and+Reliability+28%2C+1+%28+2018+%29%2C+e1654.^^^Md. Tanzirul Azim and Iulian Neamtiu. 2013. Targeted and Depth-first Exploration for Systematic Testing of Android Apps. In Proceedings of the ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA).***http://scholar.google.com/scholar?hl=en&q=Md.+Tanzirul+Azim+and+Iulian+Neamtiu.+2013.+Targeted+and+Depth-first+Exploration+for+Systematic+Testing+of+Android+Apps.+In+Proceedings+of+the+ACM+SIGPLAN+International+Conference+on+Object+Oriented+Programming+Systems+Languages+%26+Applications+%28OOPSLA%29.^^^Md. Tanzirul Azim, Iulian Neamtiu, and Lisa M. Marvel. 2014. Towards Selfhealing Smartphone Software via Automated Patching. In Proceedings of the ACM/IEEE International Conference on Automated Software Engineering (ASE).***http://scholar.google.com/scholar?hl=en&q=Md.+Tanzirul+Azim%2C+Iulian+Neamtiu%2C+and+Lisa+M.+Marvel.+2014.+Towards+Selfhealing+Smartphone+Software+via+Automated+Patching.+In+Proceedings+of+the+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28ASE%29.^^^Antonio Carzaniga, Alessandra Gorla, Nicolò Perino, and Mauro Pezzè. 2015. Automatic Workarounds: Exploiting the Intrinsic Redundancy of Web Applications. ACM Transactions on Software Engineering and Methodologies (TOSEM) 24, 3 ( 2015 ).***http://scholar.google.com/scholar?hl=en&q=Antonio+Carzaniga%2C+Alessandra+Gorla%2C+Nicol%C3%B2+Perino%2C+and+Mauro+Pezz%C3%A8.+2015.+Automatic+Workarounds%3A+Exploiting+the+Intrinsic+Redundancy+of+Web+Applications.+ACM+Transactions+on+Software+Engineering+and+Methodologies+%28TOSEM%29+24%2C+3+%28+2015+%29.^^^Shauvik Roy Choudhary, Alessandra Gorla, and Alessandro Orso. 2015. Automated Test Input Generation for Android: Are We There Yet? (E). In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE).***http://scholar.google.com/scholar?hl=en&q=Shauvik+Roy+Choudhary%2C+Alessandra+Gorla%2C+and+Alessandro+Orso.+2015.+Automated+Test+Input+Generation+for+Android%3A+Are+We+There+Yet%3F+%28E%29.+In+Proceedings+of+the+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.^^^Guido De Caso, Víctor Braberman, Diego Garbervetsky, and Sebastián Uchitel. 2011. Program Abstractions for Behaviour Validation. In Proceedings of the International Conference on Software Engineering (ICSE).***http://scholar.google.com/scholar?hl=en&q=Guido+De+Caso%2C+V%C3%ADctor+Braberman%2C+Diego+Garbervetsky%2C+and+Sebasti%C3%A1n+Uchitel.+2011.+Program+Abstractions+for+Behaviour+Validation.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE%29.^^^Guido De Caso, Victor Braberman, Diego Garbervetsky, and Sebastian Uchitel. 2013. Enabledness-based Program Abstractions for Behavior Validation. ACM Trans. Softw. Eng. Methodol. 22, 3 ( 2013 ), 25 : 1-25 : 46.***http://scholar.google.com/scholar?hl=en&q=Guido+De+Caso%2C+Victor+Braberman%2C+Diego+Garbervetsky%2C+and+Sebastian+Uchitel.+2013.+Enabledness-based+Program+Abstractions+for+Behavior+Validation.+ACM+Trans.+Softw.+Eng.+Methodol.+22%2C+3+%28+2013+%29%2C+25+%3A+1-25+%3A+46.^^^Android Developers. [n.d.]. Fragments. https://developer.android.com/guide/ components/fragments***http://scholar.google.com/scholar?hl=en&q=Android+Developers.+%5Bn.d.%5D.+Fragments.+https%3A%2F%2Fdeveloper.android.com%2Fguide%2F+components%2Ffragments^^^Android Developers. [n.d.]. Saving UI States. https://developer.android.com/ topic/libraries/architecture/saving-states.html***http://scholar.google.com/scholar?hl=en&q=Android+Developers.+%5Bn.d.%5D.+Saving+UI+States.+https%3A%2F%2Fdeveloper.android.com%2F+topic%2Flibraries%2Farchitecture%2Fsaving-states.html^^^Android Developers. [n.d.]. Services overview. https://developer.android.com/ guide/components/services***http://scholar.google.com/scholar?hl=en&q=Android+Developers.+%5Bn.d.%5D.+Services+overview.+https%3A%2F%2Fdeveloper.android.com%2F+guide%2Fcomponents%2Fservices^^^Android Developers. [n.d.]. UI/Application Exerciser Monkey. https://developer. android.com/studio/test/monkey***http://scholar.google.com/scholar?hl=en&q=Android+Developers.+%5Bn.d.%5D.+UI%2FApplication+Exerciser+Monkey.+https%3A%2F%2Fdeveloper.+android.com%2Fstudio%2Ftest%2Fmonkey^^^Android Developers. [n.d.]. Understand the Activity Lifecycle. https://developer. android.com/guide/components/activities/activity-lifecycle***http://scholar.google.com/scholar?hl=en&q=Android+Developers.+%5Bn.d.%5D.+Understand+the+Activity+Lifecycle.+https%3A%2F%2Fdeveloper.+android.com%2Fguide%2Fcomponents%2Factivities%2Factivity-lifecycle^^^JS Foundation. [n.d.]. Appium. http://appium.io/***http://scholar.google.com/scholar?hl=en&q=JS+Foundation.+%5Bn.d.%5D.+Appium.+http%3A%2F%2Fappium.io%2F^^^Luca Gazzola, Daniela Micucci, and Leonardo Mariani. 2019. Automatic Software Repair: A Survey. IEEE Transactions on Software Engineering (TSE) 45, 1 ( 2019 ), 34-67.***http://scholar.google.com/scholar?hl=en&q=Luca+Gazzola%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2019.+Automatic+Software+Repair%3A+A+Survey.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+45%2C+1+%28+2019+%29%2C+34-67.^^^Cuixiong Hu and Iulian Neamtiu. 2011. Automating GUI Testing for Android Applications. In Proceedings of the 6th International Workshop on Automation of Software Test (AST).***http://scholar.google.com/scholar?hl=en&q=Cuixiong+Hu+and+Iulian+Neamtiu.+2011.+Automating+GUI+Testing+for+Android+Applications.+In+Proceedings+of+the+6th+International+Workshop+on+Automation+of+Software+Test+%28AST%29.^^^Gang Hu, Xinhao Yuan, Yang Tang, and Junfeng Yang. 2014. Eficiently, Efectively Detecting Mobile App Bugs with AppDoctor. In Proceedings of the Ninth European Conference on Computer Systems (EuroSys).***http://scholar.google.com/scholar?hl=en&q=Gang+Hu%2C+Xinhao+Yuan%2C+Yang+Tang%2C+and+Junfeng+Yang.+2014.+Eficiently%2C+Efectively+Detecting+Mobile+App+Bugs+with+AppDoctor.+In+Proceedings+of+the+Ninth+European+Conference+on+Computer+Systems+%28EuroSys%29.^^^Ajay Kumar Jha, Sunghee Lee, and Woo Jin Lee. 2019. Characterizing Androidspecific Crash Bugs. In Proceedings of the International Conference on Mobile Software Engineering and Systems (MOBILESoft).***http://scholar.google.com/scholar?hl=en&q=Ajay+Kumar+Jha%2C+Sunghee+Lee%2C+and+Woo+Jin+Lee.+2019.+Characterizing+Androidspecific+Crash+Bugs.+In+Proceedings+of+the+International+Conference+on+Mobile+Software+Engineering+and+Systems+%28MOBILESoft%29.^^^Yuanchun Li, Yang Ziyue, Guo Yao, and Chen Xiangqun. 2017. DroidBot: A Lightweight UI-guided Test Input Generator for Android. In Proceedings of the International Conference on Software Engineering Companion (ICSE).***http://scholar.google.com/scholar?hl=en&q=Yuanchun+Li%2C+Yang+Ziyue%2C+Guo+Yao%2C+and+Chen+Xiangqun.+2017.+DroidBot%3A+A+Lightweight+UI-guided+Test+Input+Generator+for+Android.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+Companion+%28ICSE%29.^^^Ke Mao, Mark Harman, and Yue Jia. 2016. Sapienz: Multi-objective Automated Testing for Android Applications. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA).***http://scholar.google.com/scholar?hl=en&q=Ke+Mao%2C+Mark+Harman%2C+and+Yue+Jia.+2016.+Sapienz%3A+Multi-objective+Automated+Testing+for+Android+Applications.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%29.^^^Mobilloud. 2019. People Spent 90% of Their Mobile Time Using Apps in 2019. https://www.mobiloud.com/blog/mobile-apps-vs-the-mobile-web/. [Online; accessed January 2020 ].***http://scholar.google.com/scholar?hl=en&q=Mobilloud.+2019.+People+Spent+90%25+of+Their+Mobile+Time+Using+Apps+in+2019.+https%3A%2F%2Fwww.mobiloud.com%2Fblog%2Fmobile-apps-vs-the-mobile-web%2F.+%5BOnline%3B+accessed+January+2020+%5D.^^^K. Moran, M. Linares-Vásquez, C. Bernal-Cárdenas, C. Vendome, and D. Poshyvanyk. 2016. Automatically Discovering, Reporting and Reproducing Android Application Crashes. In Proceedings of the International Conference on Software Testing, Verification and Validation (ICST).***http://scholar.google.com/scholar?hl=en&q=K.+Moran%2C+M.+Linares-V%C3%A1squez%2C+C.+Bernal-C%C3%A1rdenas%2C+C.+Vendome%2C+and+D.+Poshyvanyk.+2016.+Automatically+Discovering%2C+Reporting+and+Reproducing+Android+Application+Crashes.+In+Proceedings+of+the+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST%29.^^^RescueTime:blog. 2019. Screen time stats 2019: Here\'s how much you use your phone during the workday. https://blog.rescuetime.com/screen-time-stats-2018/. [Online; accessed January 2020 ].***http://scholar.google.com/scholar?hl=en&q=RescueTime%3Ablog.+2019.+Screen+time+stats+2019%3A+Here%27s+how+much+you+use+your+phone+during+the+workday.+https%3A%2F%2Fblog.rescuetime.com%2Fscreen-time-stats-2018%2F.+%5BOnline%3B+accessed+January+2020+%5D.^^^Vincenzo Riccio, Domenico Amalfitano, and Anna Rita Fasolino. 2018. Is this the lifecycle we really want?: an automated black-box testing approach for Android activities. In Proceedings of the International Workshop on User Interface Test Automation, and Workshop on TESting Techniques for event BasED Software (ISSTA/ECOOPWorkshops).***http://scholar.google.com/scholar?hl=en&q=Vincenzo+Riccio%2C+Domenico+Amalfitano%2C+and+Anna+Rita+Fasolino.+2018.+Is+this+the+lifecycle+we+really+want%3F%3A+an+automated+black-box+testing+approach+for+Android+activities.+In+Proceedings+of+the+International+Workshop+on+User+Interface+Test+Automation%2C+and+Workshop+on+TESting+Techniques+for+event+BasED+Software+%28ISSTA%2FECOOPWorkshops%29.^^^Oliviero Riganelli, Daniela Micucci, and Leonardo Mariani. 2016. Healing Data Loss Problems in Android Apps. In Proceedings of the IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW).***http://scholar.google.com/scholar?hl=en&q=Oliviero+Riganelli%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2016.+Healing+Data+Loss+Problems+in+Android+Apps.+In+Proceedings+of+the+IEEE+International+Symposium+on+Software+Reliability+Engineering+Workshops+%28ISSREW%29.^^^Oliviero Riganelli, Marco Mobilio, Daniela Micucci, and Leonardo Mariani. 2019. A Benchmark of Data Loss Bugs for Android Apps. In Proceedings of the International Conference on Mining Software Repositories (MSR).***http://scholar.google.com/scholar?hl=en&q=Oliviero+Riganelli%2C+Marco+Mobilio%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2019.+A+Benchmark+of+Data+Loss+Bugs+for+Android+Apps.+In+Proceedings+of+the+International+Conference+on+Mining+Software+Repositories+%28MSR%29.^^^Sergio Segura, Gordon Fraser, Ana B. Sanchez, and Antonio Ruiz-Cortes. 2016. A Survey on Metamorphic Testing. IEEE Transactions on Software Engineering (TSE) 42, 9 ( 2016 ), 805-824.***http://scholar.google.com/scholar?hl=en&q=Sergio+Segura%2C+Gordon+Fraser%2C+Ana+B.+Sanchez%2C+and+Antonio+Ruiz-Cortes.+2016.+A+Survey+on+Metamorphic+Testing.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+42%2C+9+%28+2016+%29%2C+805-824.^^^Z. Shan, T. Azim, and I Neamtiu. 2016. Finding Resume and Restart Errors in Android Applications. In Proceedings of the ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA).***http://scholar.google.com/scholar?hl=en&q=Z.+Shan%2C+T.+Azim%2C+and+I+Neamtiu.+2016.+Finding+Resume+and+Restart+Errors+in+Android+Applications.+In+Proceedings+of+the+ACM+SIGPLAN+International+Conference+on+Object-Oriented+Programming%2C+Systems%2C+Languages%2C+and+Applications+%28OOPSLA%29.^^^Statcounter. 2020. Mobile Operating System Market Share Worldwide-December 2019. http://gs.statcounter.com/os-market-share/mobile/worldwide. [ Online; accessed January 2020 ].***http://scholar.google.com/scholar?hl=en&q=Statcounter.+2020.+Mobile+Operating+System+Market+Share+Worldwide-December+2019.+http%3A%2F%2Fgs.statcounter.com%2Fos-market-share%2Fmobile%2Fworldwide.+%5B+Online%3B+accessed+January+2020+%5D.^^^Statista. 2020. Number of available applications in the Google Play Store from December 2009 to December 2019. https://www.statista.com/statistics/266210/ number-of-available-applications-in-the-google-play-store/***http://scholar.google.com/scholar?hl=en&q=Statista.+2020.+Number+of+available+applications+in+the+Google+Play+Store+from+December+2009+to+December+2019.+https%3A%2F%2Fwww.statista.com%2Fstatistics%2F266210%2F+number-of-available-applications-in-the-google-play-store%2F^^^Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang Pu, Yang Liu, and Zhendong Su. 2017. Guided, Stochastic Model-based GUI Testing of Android Apps. In Proceedings of the Joint Meeting on Foundations of Software Engineering (FSE).***http://scholar.google.com/scholar?hl=en&q=Ting+Su%2C+Guozhu+Meng%2C+Yuting+Chen%2C+Ke+Wu%2C+Weiming+Yang%2C+Yao+Yao%2C+Geguang+Pu%2C+Yang+Liu%2C+and+Zhendong+Su.+2017.+Guided%2C+Stochastic+Model-based+GUI+Testing+of+Android+Apps.+In+Proceedings+of+the+Joint+Meeting+on+Foundations+of+Software+Engineering+%28FSE%29.^^^Wenyu Wang, Dengfeng Li, Wei Yang, Yurui Cao, Zhenwen Zhang, Yuetang Deng, and Tao Xie. 2018. An empirical study of Android test generation tools in industrial cases. In Proceedings of the ACM/IEEE International Conference on Automated Software Engineering (ASE).***http://scholar.google.com/scholar?hl=en&q=Wenyu+Wang%2C+Dengfeng+Li%2C+Wei+Yang%2C+Yurui+Cao%2C+Zhenwen+Zhang%2C+Yuetang+Deng%2C+and+Tao+Xie.+2018.+An+empirical+study+of+Android+test+generation+tools+in+industrial+cases.+In+Proceedings+of+the+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28ASE%29.^^^Razieh Nokhbeh Zaeem, Mukul R. Prasad, and Sarfraz Khurshid. 2014. Automated Generation of Oracles for Testing User-Interaction Features of Mobile Apps. In Proceedings of the International Conference on Software Testing, Verification and Validation (ICST).***http://scholar.google.com/scholar?hl=en&q=Razieh+Nokhbeh+Zaeem%2C+Mukul+R.+Prasad%2C+and+Sarfraz+Khurshid.+2014.+Automated+Generation+of+Oracles+for+Testing+User-Interaction+Features+of+Mobile+Apps.+In+Proceedings+of+the+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST%29.^^^');
INSERT INTO `paper_ref` VALUES (44, 50, 'Ken Binmore and Joan Davies. 2002. Calculus: concepts and methods. Cambridge University Press.***http://scholar.google.com/scholar?hl=en&q=Ken+Binmore+and+Joan+Davies.+2002.+Calculus%3A+concepts+and+methods.+Cambridge+University+Press.^^^Mariusz Bojarski, Davide Del Testa, Daniel Dworakowski, Bernhard Firner, Beat Flepp, Prasoon Goyal, Lawrence D Jackel, Mathew Monfort, Urs Muller, Jiakai Zhang, et al. 2016. End to end learning for self-driving cars. arXiv preprint arXiv:1604.07316 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Mariusz+Bojarski%2C+Davide+Del+Testa%2C+Daniel+Dworakowski%2C+Bernhard+Firner%2C+Beat+Flepp%2C+Prasoon+Goyal%2C+Lawrence+D+Jackel%2C+Mathew+Monfort%2C+Urs+Muller%2C+Jiakai+Zhang%2C+et+al.+2016.+End+to+end+learning+for+self-driving+cars.+arXiv+preprint+arXiv%3A1604.07316+%28+2016+%29.^^^Timothy Alan Budd. 1981. Mutation Analysis of Program Test Data. ( 1981 ).***http://scholar.google.com/scholar?hl=en&q=Timothy+Alan+Budd.+1981.+Mutation+Analysis+of+Program+Test+Data.+%28+1981+%29.^^^Taejoon Byun, Vaibhav Sharma, Abhishek Vijayakumar, Sanjai Rayadurgam, and Darren Cofer. 2019. Input prioritization for testing neural networks. In 2019 IEEE International Conference On Artificial Intelligence Testing (AITest). IEEE, 63-70.***http://scholar.google.com/scholar?hl=en&q=Taejoon+Byun%2C+Vaibhav+Sharma%2C+Abhishek+Vijayakumar%2C+Sanjai+Rayadurgam%2C+and+Darren+Cofer.+2019.+Input+prioritization+for+testing+neural+networks.+In+2019+IEEE+International+Conference+On+Artificial+Intelligence+Testing+%28AITest%29.+IEEE%2C+63-70.^^^Nicholas Carlini and David Wagner. 2017. Towards evaluating the robustness of neural networks. In 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 39-57.***http://scholar.google.com/scholar?hl=en&q=Nicholas+Carlini+and+David+Wagner.+2017.+Towards+evaluating+the+robustness+of+neural+networks.+In+2017+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+IEEE%2C+39-57.^^^Thomas H Cormen, Charles E Leiserson, Ronald L Rivest, and Cliford Stein. 2009. Introduction to algorithms. MIT press.***http://scholar.google.com/scholar?hl=en&q=Thomas+H+Cormen%2C+Charles+E+Leiserson%2C+Ronald+L+Rivest%2C+and+Cliford+Stein.+2009.+Introduction+to+algorithms.+MIT+press.^^^Alex Davies. [n. d.]. Tesla\'s Latest Autopilot Death Looks Just Like a Prior Crash. Available at https://www.wired.com/story/teslas-latest-autopilot-death-lookslike-prior-crash/ ( 2020 /01/27). ([n. d.]).***http://scholar.google.com/scholar?hl=en&q=Alex+Davies.+%5Bn.+d.%5D.+Tesla%27s+Latest+Autopilot+Death+Looks+Just+Like+a+Prior+Crash.+Available+at+https%3A%2F%2Fwww.wired.com%2Fstory%2Fteslas-latest-autopilot-death-lookslike-prior-crash%2F+%28+2020+%2F01%2F27%29.+%28%5Bn.+d.%5D%29.^^^Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. 2009. Imagenet: A large-scale hierarchical image database. In 2009 IEEE conference on computer vision and pattern recognition. Ieee, 248-255.***http://scholar.google.com/scholar?hl=en&q=Jia+Deng%2C+Wei+Dong%2C+Richard+Socher%2C+Li-Jia+Li%2C+Kai+Li%2C+and+Li+Fei-Fei.+2009.+Imagenet%3A+A+large-scale+hierarchical+image+database.+In+2009+IEEE+conference+on+computer+vision+and+pattern+recognition.+Ieee%2C+248-255.^^^John S Denker and Yann Lecun. 1991. Transforming neural-net output levels to probability distributions. In Advances in neural information processing systems. 853-859.***http://scholar.google.com/scholar?hl=en&q=John+S+Denker+and+Yann+Lecun.+1991.+Transforming+neural-net+output+levels+to+probability+distributions.+In+Advances+in+neural+information+processing+systems.+853-859.^^^Daniel Di Nardo, Nadia Alshahwan, Lionel Briand, and Yvan Labiche. 2013. Coverage-based test case prioritisation: An industrial case study. In Software Testing, Verification and Validation (ICST), 2013 IEEE Sixth International Conference on. IEEE, 302-311.***http://scholar.google.com/scholar?hl=en&q=Daniel+Di+Nardo%2C+Nadia+Alshahwan%2C+Lionel+Briand%2C+and+Yvan+Labiche.+2013.+Coverage-based+test+case+prioritisation%3A+An+industrial+case+study.+In+Software+Testing%2C+Verification+and+Validation+%28ICST%29%2C+2013+IEEE+Sixth+International+Conference+on.+IEEE%2C+302-311.^^^Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. 2015. Explaining and Harnessing Adversarial Examples. In Proceedings of 2015 3rd International Conference on Learning Representations (ICLR).***http://scholar.google.com/scholar?hl=en&q=Ian+J+Goodfellow%2C+Jonathon+Shlens%2C+and+Christian+Szegedy.+2015.+Explaining+and+Harnessing+Adversarial+Examples.+In+Proceedings+of+2015+3rd+International+Conference+on+Learning+Representations+%28ICLR%29.^^^Mary Jean Harrold. 1999. Testing evolving software. Journal of Systems and Software 47, 2-3 ( 1999 ), 173-181.***http://scholar.google.com/scholar?hl=en&q=Mary+Jean+Harrold.+1999.+Testing+evolving+software.+Journal+of+Systems+and+Software+47%2C+2-3+%28+1999+%29%2C+173-181.^^^Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep residual learning for image recognition. In Proceedings of the IEEE conference on computer vision and pattern recognition. 770-778.***http://scholar.google.com/scholar?hl=en&q=Kaiming+He%2C+Xiangyu+Zhang%2C+Shaoqing+Ren%2C+and+Jian+Sun.+2016.+Deep+residual+learning+for+image+recognition.+In+Proceedings+of+the+IEEE+conference+on+computer+vision+and+pattern+recognition.+770-778.^^^James A Jones and Mary Jean Harrold. 2003. Test-suite reduction and prioritization for modified condition/decision coverage. IEEE Transactions on software Engineering 29, 3 ( 2003 ), 195-209.***http://scholar.google.com/scholar?hl=en&q=James+A+Jones+and+Mary+Jean+Harrold.+2003.+Test-suite+reduction+and+prioritization+for+modified+condition%2Fdecision+coverage.+IEEE+Transactions+on+software+Engineering+29%2C+3+%28+2003+%29%2C+195-209.^^^Jinhan Kim, Robert Feldt, and Shin Yoo. 2019. Guiding Deep Learning System Testing Using Surprise Adequacy. In Proceedings of the 41st International Conference on Software Engineering (ICSE \'19). IEEE Press, 1039-1049.***http://scholar.google.com/scholar?hl=en&q=Jinhan+Kim%2C+Robert+Feldt%2C+and+Shin+Yoo.+2019.+Guiding+Deep+Learning+System+Testing+Using+Surprise+Adequacy.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering+%28ICSE+%2719%29.+IEEE+Press%2C+1039-1049.^^^Bogdan Korel, George Koutsogiannakis, and Luay H Tahat. 2007. Model-based test prioritization heuristic methods and their evaluation. In Proceedings of the 3rd international workshop on Advances in model-based testing. ACM, 34-43.***http://scholar.google.com/scholar?hl=en&q=Bogdan+Korel%2C+George+Koutsogiannakis%2C+and+Luay+H+Tahat.+2007.+Model-based+test+prioritization+heuristic+methods+and+their+evaluation.+In+Proceedings+of+the+3rd+international+workshop+on+Advances+in+model-based+testing.+ACM%2C+34-43.^^^Bogdan Korel, George Koutsogiannakis, and Luay H Tahat. 2008. Application of system models in regression test suite prioritization. In Software Maintenance, 2008. ICSM 2008. IEEE International Conference on. IEEE, 247-256.***http://scholar.google.com/scholar?hl=en&q=Bogdan+Korel%2C+George+Koutsogiannakis%2C+and+Luay+H+Tahat.+2008.+Application+of+system+models+in+regression+test+suite+prioritization.+In+Software+Maintenance%2C+2008.+ICSM+2008.+IEEE+International+Conference+on.+IEEE%2C+247-256.^^^Bogdan Korel, Luay Ho Tahat, and Mark Harman. 2005. Test prioritization using system models. In Software Maintenance, 2005. ICSM\'05. Proceedings of the 21st IEEE International Conference on. IEEE, 559-568.***http://scholar.google.com/scholar?hl=en&q=Bogdan+Korel%2C+Luay+Ho+Tahat%2C+and+Mark+Harman.+2005.+Test+prioritization+using+system+models.+In+Software+Maintenance%2C+2005.+ICSM%2705.+Proceedings+of+the+21st+IEEE+International+Conference+on.+IEEE%2C+559-568.^^^Alexey Kurakin, Ian Goodfellow, and Samy Bengio. 2017. Adversarial Examples in the Physical World. In Proceedings of 2017 5th International Conference on Learning Representations (ICLR).***http://scholar.google.com/scholar?hl=en&q=Alexey+Kurakin%2C+Ian+Goodfellow%2C+and+Samy+Bengio.+2017.+Adversarial+Examples+in+the+Physical+World.+In+Proceedings+of+2017+5th+International+Conference+on+Learning+Representations+%28ICLR%29.^^^David Leon and Andy Podgurski. 2003. A comparison of coverage-based and distribution-based techniques for filtering and prioritizing test cases. In 2003 IEEE 14th International Symposium on Software Reliability Engineering (ISSRE). IEEE, 442.***http://scholar.google.com/scholar?hl=en&q=David+Leon+and+Andy+Podgurski.+2003.+A+comparison+of+coverage-based+and+distribution-based+techniques+for+filtering+and+prioritizing+test+cases.+In+2003+IEEE+14th+International+Symposium+on+Software+Reliability+Engineering+%28ISSRE%29.+IEEE%2C+442.^^^Zenan Li, Xiaoxing Ma, Chang Xu, and Chun Cao. 2019. Structural coverage criteria for neural networks could be misleading. In 2019 IEEE/ACM 41st International Conference on Software Engineering : New Ideas and Emerging Results (ICSE-NIER). IEEE, 89-92.***http://scholar.google.com/scholar?hl=en&q=Zenan+Li%2C+Xiaoxing+Ma%2C+Chang+Xu%2C+and+Chun+Cao.+2019.+Structural+coverage+criteria+for+neural+networks+could+be+misleading.+In+2019+IEEE%2FACM+41st+International+Conference+on+Software+Engineering+%3A+New+Ideas+and+Emerging+Results+%28ICSE-NIER%29.+IEEE%2C+89-92.^^^Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, et al. 2018. Deepgauge: Multi-granularity testing criteria for deep learning systems. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, 120-131.***http://scholar.google.com/scholar?hl=en&q=Lei+Ma%2C+Felix+Juefei-Xu%2C+Fuyuan+Zhang%2C+Jiyuan+Sun%2C+Minhui+Xue%2C+Bo+Li%2C+Chunyang+Chen%2C+Ting+Su%2C+Li+Li%2C+Yang+Liu%2C+et+al.+2018.+Deepgauge%3A+Multi-granularity+testing+criteria+for+deep+learning+systems.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+ACM%2C+120-131.^^^L. Ma, F. Zhang, J. Sun, M. Xue, B. Li, F. Juefei-Xu, C. Xie, L. Li, Y. Liu, J. Zhao, and Y. Wang. 2018. DeepMutation: Mutation Testing of Deep Learning Systems. In 2018 IEEE 29th International Symposium on Software Reliability Engineering (ISSRE). IEEE, 100-111.***http://scholar.google.com/scholar?hl=en&q=L.+Ma%2C+F.+Zhang%2C+J.+Sun%2C+M.+Xue%2C+B.+Li%2C+F.+Juefei-Xu%2C+C.+Xie%2C+L.+Li%2C+Y.+Liu%2C+J.+Zhao%2C+and+Y.+Wang.+2018.+DeepMutation%3A+Mutation+Testing+of+Deep+Learning+Systems.+In+2018+IEEE+29th+International+Symposium+on+Software+Reliability+Engineering+%28ISSRE%29.+IEEE%2C+100-111.^^^Nicolas Papernot, Patrick McDaniel, Somesh Jha, Matt Fredrikson, Z Berkay Celik, and Ananthram Swami. 2016. The limitations of deep learning in adversarial settings. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 372-387.***http://scholar.google.com/scholar?hl=en&q=Nicolas+Papernot%2C+Patrick+McDaniel%2C+Somesh+Jha%2C+Matt+Fredrikson%2C+Z+Berkay+Celik%2C+and+Ananthram+Swami.+2016.+The+limitations+of+deep+learning+in+adversarial+settings.+In+Security+and+Privacy+%28EuroS%26P%29%2C+2016+IEEE+European+Symposium+on.+IEEE%2C+372-387.^^^Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. 2017. Deepxplore: Automated whitebox testing of deep learning systems. In Proceedings of the 26th Symposium on Operating Systems Principles. ACM, 1-18.***http://scholar.google.com/scholar?hl=en&q=Kexin+Pei%2C+Yinzhi+Cao%2C+Junfeng+Yang%2C+and+Suman+Jana.+2017.+Deepxplore%3A+Automated+whitebox+testing+of+deep+learning+systems.+In+Proceedings+of+the+26th+Symposium+on+Operating+Systems+Principles.+ACM%2C+1-18.^^^J. Ross Quinlan. 1986. Induction of decision trees. Machine learning 1, 1 ( 1986 ), 81-106.***http://scholar.google.com/scholar?hl=en&q=J.+Ross+Quinlan.+1986.+Induction+of+decision+trees.+Machine+learning+1%2C+1+%28+1986+%29%2C+81-106.^^^Laura Elena Raileanu and Kilian Stofel. 2004. Theoretical comparison between the gini index and information gain criteria. Annals of Mathematics and Artificial Intelligence 41, 1 ( 2004 ), 77-93.***http://scholar.google.com/scholar?hl=en&q=Laura+Elena+Raileanu+and+Kilian+Stofel.+2004.+Theoretical+comparison+between+the+gini+index+and+information+gain+criteria.+Annals+of+Mathematics+and+Artificial+Intelligence+41%2C+1+%28+2004+%29%2C+77-93.^^^R Tyrrell Rockafellar. 1993. Lagrange multipliers and optimality. SIAM review 35, 2 ( 1993 ), 183-238.***http://scholar.google.com/scholar?hl=en&q=R+Tyrrell+Rockafellar.+1993.+Lagrange+multipliers+and+optimality.+SIAM+review+35%2C+2+%28+1993+%29%2C+183-238.^^^Gregg Rothermel and Mary Jean Harrold. 1996. Analyzing regression test selection techniques. IEEE Transactions on software engineering 22, 8 ( 1996 ), 529-551.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel+and+Mary+Jean+Harrold.+1996.+Analyzing+regression+test+selection+techniques.+IEEE+Transactions+on+software+engineering+22%2C+8+%28+1996+%29%2C+529-551.^^^Gregg Rothermel, Roland H Untch, Chengyun Chu, and Mary Jean Harrold. 1999. Test case prioritization: An empirical study. In Software Maintenance, 1999. (ICSM\'99) Proceedings. IEEE International Conference on. IEEE, 179-188.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Roland+H+Untch%2C+Chengyun+Chu%2C+and+Mary+Jean+Harrold.+1999.+Test+case+prioritization%3A+An+empirical+study.+In+Software+Maintenance%2C+1999.+%28ICSM%2799%29+Proceedings.+IEEE+International+Conference+on.+IEEE%2C+179-188.^^^Gregg Rothermel, Roland H. Untch, Chengyun Chu, and Mary Jean Harrold. 2001. Prioritizing test cases for regression testing. IEEE Transactions on software engineering 27, 10 ( 2001 ), 929-948.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel%2C+Roland+H.+Untch%2C+Chengyun+Chu%2C+and+Mary+Jean+Harrold.+2001.+Prioritizing+test+cases+for+regression+testing.+IEEE+Transactions+on+software+engineering+27%2C+10+%28+2001+%29%2C+929-948.^^^Burr Settles. 2009. Active Learning Literature Survey. Computer Sciences Technical Report 1648. University of Wisconsin-Madison.***http://scholar.google.com/scholar?hl=en&q=Burr+Settles.+2009.+Active+Learning+Literature+Survey.+Computer+Sciences+Technical+Report+1648.+University+of+Wisconsin-Madison.^^^Claude Elwood Shannon. 1948. A mathematical theory of communication. Bell system technical journal 27, 3 ( 1948 ), 379-423.***http://scholar.google.com/scholar?hl=en&q=Claude+Elwood+Shannon.+1948.+A+mathematical+theory+of+communication.+Bell+system+technical+journal+27%2C+3+%28+1948+%29%2C+379-423.^^^Mark Sherrif, Mike Lake, and Laurie Williams. 2007. Prioritization of regression tests using singular value decomposition with empirical change records. In Software Reliability, 2007. ISSRE\'07. The 18th IEEE International Symposium on. IEEE, 81-90.***http://scholar.google.com/scholar?hl=en&q=Mark+Sherrif%2C+Mike+Lake%2C+and+Laurie+Williams.+2007.+Prioritization+of+regression+tests+using+singular+value+decomposition+with+empirical+change+records.+In+Software+Reliability%2C+2007.+ISSRE%2707.+The+18th+IEEE+International+Symposium+on.+IEEE%2C+81-90.^^^David Silver, Aja Huang, Chris J Maddison, Arthur Guez, Laurent Sifre, George Van Den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, et al. 2016. Mastering the game of Go with deep neural networks and tree search. nature 529, 7587 ( 2016 ), 484.***http://scholar.google.com/scholar?hl=en&q=David+Silver%2C+Aja+Huang%2C+Chris+J+Maddison%2C+Arthur+Guez%2C+Laurent+Sifre%2C+George+Van+Den+Driessche%2C+Julian+Schrittwieser%2C+Ioannis+Antonoglou%2C+Veda+Panneershelvam%2C+Marc+Lanctot%2C+et+al.+2016.+Mastering+the+game+of+Go+with+deep+neural+networks+and+tree+search.+nature+529%2C+7587+%28+2016+%29%2C+484.^^^Jack Stewart. [n. d.]. Tesla\'s Autopilot Was Involved in Another Deadly Car Crash. Available at https://www.wired.com/story/tesla-autopilot-self-drivingcrash-california/ ( 2020 /01/27). ([n. d.]).***http://scholar.google.com/scholar?hl=en&q=Jack+Stewart.+%5Bn.+d.%5D.+Tesla%27s+Autopilot+Was+Involved+in+Another+Deadly+Car+Crash.+Available+at+https%3A%2F%2Fwww.wired.com%2Fstory%2Ftesla-autopilot-self-drivingcrash-california%2F+%28+2020+%2F01%2F27%29.+%28%5Bn.+d.%5D%29.^^^Youcheng Sun, Xiaowei Huang, and Daniel Kroening. 2018. Testing Deep Neural Networks. arXiv preprint arXiv: 1803. 04792 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Xiaowei+Huang%2C+and+Daniel+Kroening.+2018.+Testing+Deep+Neural+Networks.+arXiv+preprint+arXiv%3A+1803.+04792+%28+2018+%29.^^^Youcheng Sun, Min Wu, Wenjie Ruan, Xiaowei Huang, Marta Kwiatkowska, and Daniel Kroening. 2018. Concolic Testing for Deep Neural Networks. arXiv preprint arXiv: 1805. 00089 ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Youcheng+Sun%2C+Min+Wu%2C+Wenjie+Ruan%2C+Xiaowei+Huang%2C+Marta+Kwiatkowska%2C+and+Daniel+Kroening.+2018.+Concolic+Testing+for+Deep+Neural+Networks.+arXiv+preprint+arXiv%3A+1805.+00089+%28+2018+%29.^^^Yuchi Tian, Kexin Pei, Suman Jana, and Baishakhi Ray. 2018. Deeptest: Automated testing of deep-neural-network-driven autonomous cars. In Proceedings of the 40th International Conference on Software Engineering. ACM, 303-314.***http://scholar.google.com/scholar?hl=en&q=Yuchi+Tian%2C+Kexin+Pei%2C+Suman+Jana%2C+and+Baishakhi+Ray.+2018.+Deeptest%3A+Automated+testing+of+deep-neural-network-driven+autonomous+cars.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering.+ACM%2C+303-314.^^^Paolo Tonella, Paolo Avesani, and Angelo Susi. 2006. Using the case-based ranking methodology for test case prioritization. In Software Maintenance, 2006. ICSM\' 06. 22nd IEEE International Conference on. IEEE, 123-133.***http://scholar.google.com/scholar?hl=en&q=Paolo+Tonella%2C+Paolo+Avesani%2C+and+Angelo+Susi.+2006.+Using+the+case-based+ranking+methodology+for+test+case+prioritization.+In+Software+Maintenance%2C+2006.+ICSM%27+06.+22nd+IEEE+International+Conference+on.+IEEE%2C+123-133.^^^Matt P Wand and M Chris Jones. [n. d.]. Kernel Smoothing. CRC Press.***http://scholar.google.com/scholar?hl=en&q=Matt+P+Wand+and+M+Chris+Jones.+%5Bn.+d.%5D.+Kernel+Smoothing.+CRC+Press.^^^Matthew Wicker, Xiaowei Huang, and Marta Kwiatkowska. 2018. Feature-Guided Black-Box Safety Testing of Deep Neural Networks. In Tools and Algorithms for the Construction and Analysis of Systems. Springer, 408-426.***http://scholar.google.com/scholar?hl=en&q=Matthew+Wicker%2C+Xiaowei+Huang%2C+and+Marta+Kwiatkowska.+2018.+Feature-Guided+Black-Box+Safety+Testing+of+Deep+Neural+Networks.+In+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems.+Springer%2C+408-426.^^^Ian H Witten, Eibe Frank, Mark A Hall, and Christopher J Pal. 2016. Data Mining: Practical machine learning tools and techniques. Morgan Kaufmann.***http://scholar.google.com/scholar?hl=en&q=Ian+H+Witten%2C+Eibe+Frank%2C+Mark+A+Hall%2C+and+Christopher+J+Pal.+2016.+Data+Mining%3A+Practical+machine+learning+tools+and+techniques.+Morgan+Kaufmann.^^^W Eric Wong, Joseph R Horgan, Saul London, and Aditya P Mathur. 1998. Efect of test set minimization on fault detection efectiveness. Software: Practice and Experience 28, 4 ( 1998 ), 347-369.***http://scholar.google.com/scholar?hl=en&q=W+Eric+Wong%2C+Joseph+R+Horgan%2C+Saul+London%2C+and+Aditya+P+Mathur.+1998.+Efect+of+test+set+minimization+on+fault+detection+efectiveness.+Software%3A+Practice+and+Experience+28%2C+4+%28+1998+%29%2C+347-369.^^^Wayne Xiong, Jasha Droppo, Xuedong Huang, Frank Seide, Mike Seltzer, Andreas Stolcke, Dong Yu, and Geofrey Zweig. 2016. Achieving human parity in conversational speech recognition. arXiv preprint arXiv:1610.05256 ( 2016 ).***http://scholar.google.com/scholar?hl=en&q=Wayne+Xiong%2C+Jasha+Droppo%2C+Xuedong+Huang%2C+Frank+Seide%2C+Mike+Seltzer%2C+Andreas+Stolcke%2C+Dong+Yu%2C+and+Geofrey+Zweig.+2016.+Achieving+human+parity+in+conversational+speech+recognition.+arXiv+preprint+arXiv%3A1610.05256+%28+2016+%29.^^^Shin Yoo and Mark Harman. 2012. Regression testing minimization, selection and prioritization: a survey. Software Testing, Verification and Reliability 22, 2 ( 2012 ), 67-120.***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo+and+Mark+Harman.+2012.+Regression+testing+minimization%2C+selection+and+prioritization%3A+a+survey.+Software+Testing%2C+Verification+and+Reliability+22%2C+2+%28+2012+%29%2C+67-120.^^^Shin Yoo, Mark Harman, Paolo Tonella, and Angelo Susi. 2009. Clustering test cases to achieve efective and scalable prioritisation incorporating expert knowledge. In Proceedings of the eighteenth international symposium on Software testing and analysis. ACM, 201-212.***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo%2C+Mark+Harman%2C+Paolo+Tonella%2C+and+Angelo+Susi.+2009.+Clustering+test+cases+to+achieve+efective+and+scalable+prioritisation+incorporating+expert+knowledge.+In+Proceedings+of+the+eighteenth+international+symposium+on+Software+testing+and+analysis.+ACM%2C+201-212.^^^Long Zhang, Xuechao Sun, Yong Li, and Zhenyu Zhang. 2019. A noise-sensitivityanalysis-based test prioritization technique for deep neural networks. arXiv preprint arXiv:1901. 00054 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Long+Zhang%2C+Xuechao+Sun%2C+Yong+Li%2C+and+Zhenyu+Zhang.+2019.+A+noise-sensitivityanalysis-based+test+prioritization+technique+for+deep+neural+networks.+arXiv+preprint+arXiv%3A1901.+00054+%28+2019+%29.^^^Mengshi Zhang, Yuqun Zhang, Lingming Zhang, Cong Liu, and Sarfraz Khurshid. 2018. Deeproad: Gan-based metamorphic testing and input validation framework for autonomous driving systems. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, 132-142.***http://scholar.google.com/scholar?hl=en&q=Mengshi+Zhang%2C+Yuqun+Zhang%2C+Lingming+Zhang%2C+Cong+Liu%2C+and+Sarfraz+Khurshid.+2018.+Deeproad%3A+Gan-based+metamorphic+testing+and+input+validation+framework+for+autonomous+driving+systems.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+ACM%2C+132-142.^^^Chris Ziegler. [n. d.]. A Google self-driving car caused a crash for the first time. Available at https://www.theverge.com/ 2016 /2/29/11134344/google-self-drivingcar-crash-report ( 2020 /01/27). ([n. d.]).***http://scholar.google.com/scholar?hl=en&q=Chris+Ziegler.+%5Bn.+d.%5D.+A+Google+self-driving+car+caused+a+crash+for+the+first+time.+Available+at+https%3A%2F%2Fwww.theverge.com%2F+2016+%2F2%2F29%2F11134344%2Fgoogle-self-drivingcar-crash-report+%28+2020+%2F01%2F27%29.+%28%5Bn.+d.%5D%29.^^^');
INSERT INTO `paper_ref` VALUES (45, 26, 'Ben Boyter. 2019. Sloc Cloc and Code (scc). https://github.com/boyter/scc***http://scholar.google.com/scholar?hl=en&q=Ben+Boyter.+2019.+Sloc+Cloc+and+Code+%28scc%29.+https%3A%2F%2Fgithub.com%2Fboyter%2Fscc^^^Dirk Beyer, Thomas A. Henzinger, M. Erkan Keremoglu, and Philipp Wendler. 2012. Conditional Model Checking: A technique to pass information between verifiers. In Proc. of the ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE\'12).***http://scholar.google.com/scholar?hl=en&q=Dirk+Beyer%2C+Thomas+A.+Henzinger%2C+M.+Erkan+Keremoglu%2C+and+Philipp+Wendler.+2012.+Conditional+Model+Checking%3A+A+technique+to+pass+information+between+verifiers.+In+Proc.+of+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering+%28FSE%2712%29.^^^Stefan Bucur, Vlad Ureche, Cristian Zamfir, and George Candea. 2011. Parallel Symbolic Execution for Automated Real-World Software Testing. In Proc. of the 6th European Conference on Computer Systems (EuroSys\'11).***http://scholar.google.com/scholar?hl=en&q=Stefan+Bucur%2C+Vlad+Ureche%2C+Cristian+Zamfir%2C+and+George+Candea.+2011.+Parallel+Symbolic+Execution+for+Automated+Real-World+Software+Testing.+In+Proc.+of+the+6th+European+Conference+on+Computer+Systems+%28EuroSys%2711%29.^^^Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In Proc. of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI\'08).***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Daniel+Dunbar%2C+and+Dawson+Engler.+2008.+KLEE%3A+Unassisted+and+Automatic+Generation+of+High-Coverage+Tests+for+Complex+Systems+Programs.+In+Proc.+of+the+8th+USENIX+Symposium+on+Operating+Systems+Design+and+Implementation+%28OSDI%2708%29.^^^Cristian Cadar and Koushik Sen. 2013. Symbolic Execution for Software Testing: Three Decades Later. Communications of the Association for Computing Machinery (CACM) 56, 2 ( 2013 ), 82-90.***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar+and+Koushik+Sen.+2013.+Symbolic+Execution+for+Software+Testing%3A+Three+Decades+Later.+Communications+of+the+Association+for+Computing+Machinery+%28CACM%29+56%2C+2+%28+2013+%29%2C+82-90.^^^Rodrigo Castaño, Víctor Braberman, Diego Garbervetsky, and Sebastian Uchitel. 2017. Model Checker Execution Reports. In Proc. of the 32nd IEEE International Conference on Automated Software Engineering (ASE\'17).***http://scholar.google.com/scholar?hl=en&q=Rodrigo+Casta%C3%B1o%2C+V%C3%ADctor+Braberman%2C+Diego+Garbervetsky%2C+and+Sebastian+Uchitel.+2017.+Model+Checker+Execution+Reports.+In+Proc.+of+the+32nd+IEEE+International+Conference+on+Automated+Software+Engineering+%28ASE%2717%29.^^^Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. 2012. Unleashing Mayhem on Binary Code. In Proc. of the IEEE Symposium on Security and Privacy (IEEE S&P\'12).***http://scholar.google.com/scholar?hl=en&q=Sang+Kil+Cha%2C+Thanassis+Avgerinos%2C+Alexandre+Rebert%2C+and+David+Brumley.+2012.+Unleashing+Mayhem+on+Binary+Code.+In+Proc.+of+the+IEEE+Symposium+on+Security+and+Privacy+%28IEEE+S%26P%2712%29.^^^Leonardo de Moura and Nikolaj Bjørner. 2008. Z3: An Eficient SMT Solver. In Proc. of the 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS\'08).***http://scholar.google.com/scholar?hl=en&q=Leonardo+de+Moura+and+Nikolaj+Bj%C3%B8rner.+2008.+Z3%3A+An+Eficient+SMT+Solver.+In+Proc.+of+the+14th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28TACAS%2708%29.^^^GNU. 2019. GNU Binutils. https://www.gnu.org/software/binutils/***http://scholar.google.com/scholar?hl=en&q=GNU.+2019.+GNU+Binutils.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fbinutils%2F^^^GNU. 2019. GNU Coreutils. https://www.gnu.org/software/coreutils/***http://scholar.google.com/scholar?hl=en&q=GNU.+2019.+GNU+Coreutils.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fcoreutils%2F^^^GNU. 2019. GNU Difutils. https://www.gnu.org/software/difutils/***http://scholar.google.com/scholar?hl=en&q=GNU.+2019.+GNU+Difutils.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fdifutils%2F^^^GNU. 2019. GNU Findutils. https://www.gnu.org/software/findutils/***http://scholar.google.com/scholar?hl=en&q=GNU.+2019.+GNU+Findutils.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Ffindutils%2F^^^GNU. 2019. GNU Grep. https://www.gnu.org/software/grep/***http://scholar.google.com/scholar?hl=en&q=GNU.+2019.+GNU+Grep.+https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fgrep%2F^^^Patrice Godefroid, Michael Y. Levin, and David A. Molnar. 2008. Automated Whitebox Fuzz Testing. In Proc. of the 15th Network and Distributed System Security Symposium (NDSS\'08).***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Michael+Y.+Levin%2C+and+David+A.+Molnar.+2008.+Automated+Whitebox+Fuzz+Testing.+In+Proc.+of+the+15th+Network+and+Distributed+System+Security+Symposium+%28NDSS%2708%29.^^^Xiangyang Jia, Carlo Ghezzi, and Shi Ying. 2015. Enhancing Reuse of Constraint Solutions to Improve Symbolic Execution. In Proc. of the International Symposium on Software Testing and Analysis (ISSTA\'15).***http://scholar.google.com/scholar?hl=en&q=Xiangyang+Jia%2C+Carlo+Ghezzi%2C+and+Shi+Ying.+2015.+Enhancing+Reuse+of+Constraint+Solutions+to+Improve+Symbolic+Execution.+In+Proc.+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2715%29.^^^Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proc. of the 2nd International Symposium on Code Generation and Optimization (CGO\'04).***http://scholar.google.com/scholar?hl=en&q=Chris+Lattner+and+Vikram+Adve.+2004.+LLVM%3A+A+Compilation+Framework+for+Lifelong+Program+Analysis+%26+Transformation.+In+Proc.+of+the+2nd+International+Symposium+on+Code+Generation+and+Optimization+%28CGO%2704%29.^^^Steven Lauterburg, Ahmed Sobeih, Darko Marinov, and Mahesh Viswanathan. 2008. Incremental State-space Exploration for Programs with Dynamically Allocated Data. In Proc. of the 30th International Conference on Software Engineering (ICSE\'08).***http://scholar.google.com/scholar?hl=en&q=Steven+Lauterburg%2C+Ahmed+Sobeih%2C+Darko+Marinov%2C+and+Mahesh+Viswanathan.+2008.+Incremental+State-space+Exploration+for+Programs+with+Dynamically+Allocated+Data.+In+Proc.+of+the+30th+International+Conference+on+Software+Engineering+%28ICSE%2708%29.^^^libspng [n.d.]. libspng. https://github.com/randy408/libspng***http://scholar.google.com/scholar?hl=en&q=libspng+%5Bn.d.%5D.+libspng.+https%3A%2F%2Fgithub.com%2Frandy408%2Flibspng^^^Paul Dan Marinescu and Cristian Cadar. 2012. make test-zesti: A Symbolic Execution Solution for Improving Regression Testing. In Proc. of the 34th International Conference on Software Engineering (ICSE\'12).***http://scholar.google.com/scholar?hl=en&q=Paul+Dan+Marinescu+and+Cristian+Cadar.+2012.+make+test-zesti%3A+A+Symbolic+Execution+Solution+for+Improving+Regression+Testing.+In+Proc.+of+the+34th+International+Conference+on+Software+Engineering+%28ICSE%2712%29.^^^Lorenzo Martignoni, Stephen McCamant, Pongsin Poosankam, Dawn Song, and Petros Maniatis. 2012. Path-exploration Lifting: Hi-fi Tests for Lo-fi Emulators. In Proc. of the 17th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS\'12).***http://scholar.google.com/scholar?hl=en&q=Lorenzo+Martignoni%2C+Stephen+McCamant%2C+Pongsin+Poosankam%2C+Dawn+Song%2C+and+Petros+Maniatis.+2012.+Path-exploration+Lifting%3A+Hi-fi+Tests+for+Lo-fi+Emulators.+In+Proc.+of+the+17th+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems+%28ASPLOS%2712%29.^^^Rui Qiu, Sarfraz Khurshid, Corina S. Păsăreanu, Junye Wen, and Guowei Yang. 2018. Using Test Ranges to Improve Symbolic Execution. In Proc. of the 10th International Conference on NASA Formal Methods.***http://scholar.google.com/scholar?hl=en&q=Rui+Qiu%2C+Sarfraz+Khurshid%2C+Corina+S.+P%C4%83s%C4%83reanu%2C+Junye+Wen%2C+and+Guowei+Yang.+2018.+Using+Test+Ranges+to+Improve+Symbolic+Execution.+In+Proc.+of+the+10th+International+Conference+on+NASA+Formal+Methods.^^^Rui Qiu, Guowei Yang, Corina S. Păsăreanu, and Sarfraz Khurshid. 2015. Compositional Symbolic Execution with Memoized Replay. In Proc. of the 37th International Conference on Software Engineering (ICSE\'15).***http://scholar.google.com/scholar?hl=en&q=Rui+Qiu%2C+Guowei+Yang%2C+Corina+S.+P%C4%83s%C4%83reanu%2C+and+Sarfraz+Khurshid.+2015.+Compositional+Symbolic+Execution+with+Memoized+Replay.+In+Proc.+of+the+37th+International+Conference+on+Software+Engineering+%28ICSE%2715%29.^^^Greg Roelofs and Mark Adler. [n.d.]. zlib. https://zlib.net/***http://scholar.google.com/scholar?hl=en&q=Greg+Roelofs+and+Mark+Adler.+%5Bn.d.%5D.+zlib.+https%3A%2F%2Fzlib.net%2F^^^The tcpdump team. [n.d.]. tcpdump. https://www.tcpdump.org/***http://scholar.google.com/scholar?hl=en&q=The+tcpdump+team.+%5Bn.d.%5D.+tcpdump.+https%3A%2F%2Fwww.tcpdump.org%2F^^^Willem Visser, Jaco Geldenhuys, and Matthew B. Dwyer. 2012. Green: reducing, reusing and recycling constraints in program analysis. In Proc. of the ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE\'12).***http://scholar.google.com/scholar?hl=en&q=Willem+Visser%2C+Jaco+Geldenhuys%2C+and+Matthew+B.+Dwyer.+2012.+Green%3A+reducing%2C+reusing+and+recycling+constraints+in+program+analysis.+In+Proc.+of+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering+%28FSE%2712%29.^^^Guowei Yang, Corina S. Păsăreanu, and Sarfraz Khurshid. 2012. Memoized symbolic execution. In Proc. of the International Symposium on Software Testing and Analysis (ISSTA\'12).***http://scholar.google.com/scholar?hl=en&q=Guowei+Yang%2C+Corina+S.+P%C4%83s%C4%83reanu%2C+and+Sarfraz+Khurshid.+2012.+Memoized+symbolic+execution.+In+Proc.+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2712%29.^^^');
INSERT INTO `paper_ref` VALUES (46, 46, '2019. Bugzilla. https://www.bugzilla.org/.***http://scholar.google.com/scholar?hl=en&q=2019.+Bugzilla.+https%3A%2F%2Fwww.bugzilla.org%2F.^^^2019. Flutter\'s bug report, no.34330. https://github.com/flutter/flutter/issues/ 34330.***http://scholar.google.com/scholar?hl=en&q=2019.+Flutter%27s+bug+report%2C+no.34330.+https%3A%2F%2Fgithub.com%2Fflutter%2Fflutter%2Fissues%2F+34330.^^^2019. Github Issue Tracker. https://github.com/issues.***http://scholar.google.com/scholar?hl=en&q=2019.+Github+Issue+Tracker.+https%3A%2F%2Fgithub.com%2Fissues.^^^2019. Google Code Issue Tracker. https://code.google.com/archive/.***http://scholar.google.com/scholar?hl=en&q=2019.+Google+Code+Issue+Tracker.+https%3A%2F%2Fcode.google.com%2Farchive%2F.^^^2019. LibreNew\'s bug report, no.22. https://github.com/milesmcc/LibreNewsAndroid/issues/22.***http://scholar.google.com/scholar?hl=en&q=2019.+LibreNew%27s+bug+report%2C+no.22.+https%3A%2F%2Fgithub.com%2Fmilesmcc%2FLibreNewsAndroid%2Fissues%2F22.^^^2019. Lockwise\'s bug report, no.783. https://github.com/mozilla-lockwise/ lockwise-android/issues/783.***http://scholar.google.com/scholar?hl=en&q=2019.+Lockwise%27s+bug+report%2C+no.783.+https%3A%2F%2Fgithub.com%2Fmozilla-lockwise%2F+lockwise-android%2Fissues%2F783.^^^2019. MvvmCross\'s bug report, no.2532. https://github.com/MvvmCross/ MvvmCross/issues/2532.***http://scholar.google.com/scholar?hl=en&q=2019.+MvvmCross%27s+bug+report%2C+no.2532.+https%3A%2F%2Fgithub.com%2FMvvmCross%2F+MvvmCross%2Fissues%2F2532.^^^2019. spaCy. https://spacy.io/.***http://scholar.google.com/scholar?hl=en&q=2019.+spaCy.+https%3A%2F%2Fspacy.io%2F.^^^Pamela Bhattacharya, Liudmila Ulanova, Iulian Neamtiu, and Sai Charan Koduru. 2013. An Empirical Analysis of Bug Reports and Bug Fixing in Open Source Android Apps. In 17th European Conference on Software Maintenance and Reengineering, CSMR 2013, Genova, Italy, March 5-8, 2013. IEEE, 133-143.***http://scholar.google.com/scholar?hl=en&q=Pamela+Bhattacharya%2C+Liudmila+Ulanova%2C+Iulian+Neamtiu%2C+and+Sai+Charan+Koduru.+2013.+An+Empirical+Analysis+of+Bug+Reports+and+Bug+Fixing+in+Open+Source+Android+Apps.+In+17th+European+Conference+on+Software+Maintenance+and+Reengineering%2C+CSMR+2013%2C+Genova%2C+Italy%2C+March+5-8%2C+2013.+IEEE%2C+133-143.^^^Dankmar Böhning. 1992. Multinomial Logistic Regression Algorithm. Annals of the Institute of Statistical Mathematics 44, 1 ( 1992 ), 197-200.***http://scholar.google.com/scholar?hl=en&q=Dankmar+B%C3%B6hning.+1992.+Multinomial+Logistic+Regression+Algorithm.+Annals+of+the+Institute+of+Statistical+Mathematics+44%2C+1+%28+1992+%29%2C+197-200.^^^Oscar Chaparro, Carlos Bernal-Cárdenas, Jing Lu, Kevin Moran, Andrian Marcus, Massimiliano Di Penta, Denys Poshyvanyk, and Vincent Ng. 2019. Assessing the Quality of the Steps to Reproduce in Bug Reports. In Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/SIGSOFT FSE 2019, Tallinn, Estonia, August 26-30, 2019. ACM, 86-96.***http://scholar.google.com/scholar?hl=en&q=Oscar+Chaparro%2C+Carlos+Bernal-C%C3%A1rdenas%2C+Jing+Lu%2C+Kevin+Moran%2C+Andrian+Marcus%2C+Massimiliano+Di+Penta%2C+Denys+Poshyvanyk%2C+and+Vincent+Ng.+2019.+Assessing+the+Quality+of+the+Steps+to+Reproduce+in+Bug+Reports.+In+Proceedings+of+the+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+ESEC%2FSIGSOFT+FSE+2019%2C+Tallinn%2C+Estonia%2C+August+26-30%2C+2019.+ACM%2C+86-96.^^^Oscar Chaparro, Jing Lu, Fiorella Zampetti, Laura Moreno, Massimiliano Di Penta, Andrian Marcus, Gabriele Bavota, and Vincent Ng. 2017. Detecting Missing Information in Bug Descriptions. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, Paderborn, Germany, September 4-8, 2017. ACM, 396-407.***http://scholar.google.com/scholar?hl=en&q=Oscar+Chaparro%2C+Jing+Lu%2C+Fiorella+Zampetti%2C+Laura+Moreno%2C+Massimiliano+Di+Penta%2C+Andrian+Marcus%2C+Gabriele+Bavota%2C+and+Vincent+Ng.+2017.+Detecting+Missing+Information+in+Bug+Descriptions.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2017%2C+Paderborn%2C+Germany%2C+September+4-8%2C+2017.+ACM%2C+396-407.^^^Jacob Cohen. 1960. A Coeficient of Agreement for Nominal Scales. Educational and Psychological Measurement 20, 1 ( 1960 ), 37-46.***http://scholar.google.com/scholar?hl=en&q=Jacob+Cohen.+1960.+A+Coeficient+of+Agreement+for+Nominal+Scales.+Educational+and+Psychological+Measurement+20%2C+1+%28+1960+%29%2C+37-46.^^^Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2019. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019, Minneapolis, MN, USA, June 2-7, 2019, Volume 1 (Long and Short Papers). 4171-4186.***http://scholar.google.com/scholar?hl=en&q=Jacob+Devlin%2C+Ming-Wei+Chang%2C+Kenton+Lee%2C+and+Kristina+Toutanova.+2019.+BERT%3A+Pre-training+of+Deep+Bidirectional+Transformers+for+Language+Understanding.+In+Proceedings+of+the+2019+Conference+of+the+North+American+Chapter+of+the+Association+for+Computational+Linguistics%3A+Human+Language+Technologies%2C+NAACL-HLT+2019%2C+Minneapolis%2C+MN%2C+USA%2C+June+2-7%2C+2019%2C+Volume+1+%28Long+and+Short+Papers%29.+4171-4186.^^^Mattia Fazzini, Martin Prammer, Marcelo d\'Amorim, and Alessandro Orso. 2018. Automatically Translating Bug Reports into Test Cases for Mobile Apps. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, Amsterdam, The Netherlands, July 16-21, 2018. ACM, 141-152.***http://scholar.google.com/scholar?hl=en&q=Mattia+Fazzini%2C+Martin+Prammer%2C+Marcelo+d%27Amorim%2C+and+Alessandro+Orso.+2018.+Automatically+Translating+Bug+Reports+into+Test+Cases+for+Mobile+Apps.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2018%2C+Amsterdam%2C+The+Netherlands%2C+July+16-21%2C+2018.+ACM%2C+141-152.^^^Alessio Gambi, Tri Huynh, and Gordon Fraser. 2019. Generating Efective Test Cases for Self-driving Cars from Police Reports. In Proceedings of the ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,ESEC/SIGSOFT FSE 2019, Tallinn, Estonia, August 26-30, 2019. ACM, 257-267.***http://scholar.google.com/scholar?hl=en&q=Alessio+Gambi%2C+Tri+Huynh%2C+and+Gordon+Fraser.+2019.+Generating+Efective+Test+Cases+for+Self-driving+Cars+from+Police+Reports.+In+Proceedings+of+the+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2CESEC%2FSIGSOFT+FSE+2019%2C+Tallinn%2C+Estonia%2C+August+26-30%2C+2019.+ACM%2C+257-267.^^^Jianfeng Gao, Michel Galley, and Lihong Li. 2018. Neural Approaches to Conversational AI. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (ACL\'18), Melbourne, Australia, July 15-20, 2018, Tutorial Abstracts. 2-7.***http://scholar.google.com/scholar?hl=en&q=Jianfeng+Gao%2C+Michel+Galley%2C+and+Lihong+Li.+2018.+Neural+Approaches+to+Conversational+AI.+In+Proceedings+of+the+56th+Annual+Meeting+of+the+Association+for+Computational+Linguistics+%28ACL%2718%29%2C+Melbourne%2C+Australia%2C+July+15-20%2C+2018%2C+Tutorial+Abstracts.+2-7.^^^Jerzy W. Grzymala-Busse. 1991. On the Unknown Attribute Values in Learning from Examples. In Methodologies for Intelligent Systems, 6th International Symposium, ISMIS \'91, Charlotte, N.C., USA, October 16-19, 1991, Proceedings. 368-377.***http://scholar.google.com/scholar?hl=en&q=Jerzy+W.+Grzymala-Busse.+1991.+On+the+Unknown+Attribute+Values+in+Learning+from+Examples.+In+Methodologies+for+Intelligent+Systems%2C+6th+International+Symposium%2C+ISMIS+%2791%2C+Charlotte%2C+N.C.%2C+USA%2C+October+16-19%2C+1991%2C+Proceedings.+368-377.^^^Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long Short-term Memory. Neural Computation 9, 8 ( 1997 ), 1735-1780.***http://scholar.google.com/scholar?hl=en&q=Sepp+Hochreiter+and+J%C3%BCrgen+Schmidhuber.+1997.+Long+Short-term+Memory.+Neural+Computation+9%2C+8+%28+1997+%29%2C+1735-1780.^^^Mona Erfani Joorabchi, Ali Mesbah, and Philippe Kruchten. 2013. Real Challenges in Mobile App Development. In 2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement, Baltimore, Maryland, USA, October 10-11, 2013. IEEE, 15-24.***http://scholar.google.com/scholar?hl=en&q=Mona+Erfani+Joorabchi%2C+Ali+Mesbah%2C+and+Philippe+Kruchten.+2013.+Real+Challenges+in+Mobile+App+Development.+In+2013+ACM+%2F+IEEE+International+Symposium+on+Empirical+Software+Engineering+and+Measurement%2C+Baltimore%2C+Maryland%2C+USA%2C+October+10-11%2C+2013.+IEEE%2C+15-24.^^^Liadh Kelly, Hanna Suominen, Lorraine Goeuriot, Mariana L. Neves, Evangelos Kanoulas, Dan Li, Leif Azzopardi, René Spijker, Guido Zuccon, Harrisen Scells, and João R. M. Palotti. 2019. Overview of the CLEF eHealth Evaluation Lab 2019. In Proceedings of the 10th International Conference of the CLEF Association, CLEF2019, Lugano, Switzerland, September 9-12. 322-339.***http://scholar.google.com/scholar?hl=en&q=Liadh+Kelly%2C+Hanna+Suominen%2C+Lorraine+Goeuriot%2C+Mariana+L.+Neves%2C+Evangelos+Kanoulas%2C+Dan+Li%2C+Leif+Azzopardi%2C+Ren%C3%A9+Spijker%2C+Guido+Zuccon%2C+Harrisen+Scells%2C+and+Jo%C3%A3o+R.+M.+Palotti.+2019.+Overview+of+the+CLEF+eHealth+Evaluation+Lab+2019.+In+Proceedings+of+the+10th+International+Conference+of+the+CLEF+Association%2C+CLEF2019%2C+Lugano%2C+Switzerland%2C+September+9-12.+322-339.^^^Yoon Kim. 2014. Convolutional Neural Networks for Sentence Classification. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing, EMNLP 2014, October 25-29, 2014, Doha, Qatar, A meeting of SIGDAT, a Special Interest Group of the ACL. 1746-1751.***http://scholar.google.com/scholar?hl=en&q=Yoon+Kim.+2014.+Convolutional+Neural+Networks+for+Sentence+Classification.+In+Proceedings+of+the+2014+Conference+on+Empirical+Methods+in+Natural+Language+Processing%2C+EMNLP+2014%2C+October+25-29%2C+2014%2C+Doha%2C+Qatar%2C+A+meeting+of+SIGDAT%2C+a+Special+Interest+Group+of+the+ACL.+1746-1751.^^^Igor Kononenko. March 6-8, 1991. Semi-Naive Bayesian Classifier. In European Working Session on Machine Learning (EWSL\'91), Porto, Portuga. 206-219.***http://scholar.google.com/scholar?hl=en&q=Igor+Kononenko.+March+6-8%2C+1991.+Semi-Naive+Bayesian+Classifier.+In+European+Working+Session+on+Machine+Learning+%28EWSL%2791%29%2C+Porto%2C+Portuga.+206-219.^^^Andy Liaw, Matthew Wiener, et al. 2002. Classification and Regression by RandomForest. R News 2, 3 ( 2002 ), 18-22.***http://scholar.google.com/scholar?hl=en&q=Andy+Liaw%2C+Matthew+Wiener%2C+et+al.+2002.+Classification+and+Regression+by+RandomForest.+R+News+2%2C+3+%28+2002+%29%2C+18-22.^^^Xiao Luo and A. Nur Zincir-Heywood. 2005. Evaluation of Two Systems on Multi-class Multi-label Document Classification. In Foundations of Intelligent Systems, 15th International Symposium, ISMIS 2005, Saratoga Springs, NY, USA, May 25-28, 2005, Proceedings. Springer, 161-169.***http://scholar.google.com/scholar?hl=en&q=Xiao+Luo+and+A.+Nur+Zincir-Heywood.+2005.+Evaluation+of+Two+Systems+on+Multi-class+Multi-label+Document+Classification.+In+Foundations+of+Intelligent+Systems%2C+15th+International+Symposium%2C+ISMIS+2005%2C+Saratoga+Springs%2C+NY%2C+USA%2C+May+25-28%2C+2005%2C+Proceedings.+Springer%2C+161-169.^^^Yun Ma, Yangyang Huang, Ziniu Hu, Xusheng Xiao, and Xuanzhe Liu. 2019. Paladin: Automated Generation of Reproducible Test Cases for Android Apps. In Proceedings of the 20th International Workshop on Mobile Computing Systems and Applications, HotMobile 2019, Santa Cruz, CA, USA, February 27-28, 2019. ACM, 99-104.***http://scholar.google.com/scholar?hl=en&q=Yun+Ma%2C+Yangyang+Huang%2C+Ziniu+Hu%2C+Xusheng+Xiao%2C+and+Xuanzhe+Liu.+2019.+Paladin%3A+Automated+Generation+of+Reproducible+Test+Cases+for+Android+Apps.+In+Proceedings+of+the+20th+International+Workshop+on+Mobile+Computing+Systems+and+Applications%2C+HotMobile+2019%2C+Santa+Cruz%2C+CA%2C+USA%2C+February+27-28%2C+2019.+ACM%2C+99-104.^^^Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, and Jefrey Dean. 2013. Distributed Representations of Words and Phrases and their Compositionality. In Proceedings of 27th Annual Conference on Neural Information Processing Systems. 3111-3119.***http://scholar.google.com/scholar?hl=en&q=Tomas+Mikolov%2C+Ilya+Sutskever%2C+Kai+Chen%2C+Gregory+S.+Corrado%2C+and+Jefrey+Dean.+2013.+Distributed+Representations+of+Words+and+Phrases+and+their+Compositionality.+In+Proceedings+of+27th+Annual+Conference+on+Neural+Information+Processing+Systems.+3111-3119.^^^Kevin Moran, Mario Linares Vásquez, Carlos Bernal-Cárdenas, and Denys Poshyvanyk. 2015. Auto-completing Bug Reports for Android Applications. In Proceedings of the 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE, Bergamo, Italy, August 30-September 4. 673-686.***http://scholar.google.com/scholar?hl=en&q=Kevin+Moran%2C+Mario+Linares+V%C3%A1squez%2C+Carlos+Bernal-C%C3%A1rdenas%2C+and+Denys+Poshyvanyk.+2015.+Auto-completing+Bug+Reports+for+Android+Applications.+In+Proceedings+of+the+10th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE%2C+Bergamo%2C+Italy%2C+August+30-September+4.+673-686.^^^Manish Motwani and Yuriy Brun. 2019. Automatically Generating Precise Oracles from Structured Natural Language Specifications. In Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019. IEEE Press, 188-199.***http://scholar.google.com/scholar?hl=en&q=Manish+Motwani+and+Yuriy+Brun.+2019.+Automatically+Generating+Precise+Oracles+from+Structured+Natural+Language+Specifications.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+ICSE+2019%2C+Montreal%2C+QC%2C+Canada%2C+May+25-31%2C+2019.+IEEE+Press%2C+188-199.^^^Sankar K. Pal and Sushmita Mitra. 1992. Multilayer Perceptron, Fuzzy Sets, and Classification. IEEE Trans. Neural Networks 3, 5 ( 1992 ), 683-697.***http://scholar.google.com/scholar?hl=en&q=Sankar+K.+Pal+and+Sushmita+Mitra.+1992.+Multilayer+Perceptron%2C+Fuzzy+Sets%2C+and+Classification.+IEEE+Trans.+Neural+Networks+3%2C+5+%28+1992+%29%2C+683-697.^^^Thanasis Petsas, Antonis Papadogiannakis, Michalis Polychronakis, Evangelos P. Markatos, and Thomas Karagiannis. 2013. Rise of the Planet of the Apps: A Systematic Study of the Mobile App Ecosystem. In Proceedings of the 2013 Internet Measurement Conference, IMC 2013, Barcelona, Spain, October 23-25, 2013. ACM, 277-290.***http://scholar.google.com/scholar?hl=en&q=Thanasis+Petsas%2C+Antonis+Papadogiannakis%2C+Michalis+Polychronakis%2C+Evangelos+P.+Markatos%2C+and+Thomas+Karagiannis.+2013.+Rise+of+the+Planet+of+the+Apps%3A+A+Systematic+Study+of+the+Mobile+App+Ecosystem.+In+Proceedings+of+the+2013+Internet+Measurement+Conference%2C+IMC+2013%2C+Barcelona%2C+Spain%2C+October+23-25%2C+2013.+ACM%2C+277-290.^^^David Martin Powers. 2011. Evaluation: from Precision, Recall and F-measure to ROC, Informedness, Markedness and Correlation. Journal of Machine Learning Technologies 2, 1 ( 2011 ), 37-63.***http://scholar.google.com/scholar?hl=en&q=David+Martin+Powers.+2011.+Evaluation%3A+from+Precision%2C+Recall+and+F-measure+to+ROC%2C+Informedness%2C+Markedness+and+Correlation.+Journal+of+Machine+Learning+Technologies+2%2C+1+%28+2011+%29%2C+37-63.^^^J. Ross Quinlan. 1989. Unknown Attribute Values in Induction. In Proceedings of the Sixth International Workshop on Machine Learning (ML 1989 ), Cornell University, Ithaca, New York, USA, June 26-27, 1989. 164-168.***http://scholar.google.com/scholar?hl=en&q=J.+Ross+Quinlan.+1989.+Unknown+Attribute+Values+in+Induction.+In+Proceedings+of+the+Sixth+International+Workshop+on+Machine+Learning+%28ML+1989+%29%2C+Cornell+University%2C+Ithaca%2C+New+York%2C+USA%2C+June+26-27%2C+1989.+164-168.^^^Gunnar Rätsch, Takashi Onoda, and Klaus-Robert Müller. 1998. Regularizing AdaBoost. In Advances in Neural Information Processing Systems (NIPS), Denver, Colorado, USA, November 30-December 5. 564-570.***http://scholar.google.com/scholar?hl=en&q=Gunnar+R%C3%A4tsch%2C+Takashi+Onoda%2C+and+Klaus-Robert+M%C3%BCller.+1998.+Regularizing+AdaBoost.+In+Advances+in+Neural+Information+Processing+Systems+%28NIPS%29%2C+Denver%2C+Colorado%2C+USA%2C+November+30-December+5.+564-570.^^^Siva Reddy, Danqi Chen, and Christopher D. Manning. 2019. CoQA: A Conversational Question Answering Challenge. Transactions of the Association for Computational Linguistics 7 ( 2019 ), 249-266.***http://scholar.google.com/scholar?hl=en&q=Siva+Reddy%2C+Danqi+Chen%2C+and+Christopher+D.+Manning.+2019.+CoQA%3A+A+Conversational+Question+Answering+Challenge.+Transactions+of+the+Association+for+Computational+Linguistics+7+%28+2019+%29%2C+249-266.^^^Atanas Rountev and Dacong Yan. 2014. Static Reference Analysis for GUI Objects in Android Software. In 12th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO 2014, Orlando, FL, USA, February 15-19, 2014. IEEE, 143.***http://scholar.google.com/scholar?hl=en&q=Atanas+Rountev+and+Dacong+Yan.+2014.+Static+Reference+Analysis+for+GUI+Objects+in+Android+Software.+In+12th+Annual+IEEE%2FACM+International+Symposium+on+Code+Generation+and+Optimization%2C+CGO+2014%2C+Orlando%2C+FL%2C+USA%2C+February+15-19%2C+2014.+IEEE%2C+143.^^^Mike Schuster and Kuldip K. Paliwal. 1997. Bidirectional Recurrent Neural Networks. IEEE Trans. Signal Processing 45, 11 ( 1997 ), 2673-2681.***http://scholar.google.com/scholar?hl=en&q=Mike+Schuster+and+Kuldip+K.+Paliwal.+1997.+Bidirectional+Recurrent+Neural+Networks.+IEEE+Trans.+Signal+Processing+45%2C+11+%28+1997+%29%2C+2673-2681.^^^scikit-Learn. 2019. API Specification on Weight of Categorie. https://scikitlearn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression. html?highlight=class_weight.***http://scholar.google.com/scholar?hl=en&q=scikit-Learn.+2019.+API+Specification+on+Weight+of+Categorie.+https%3A%2F%2Fscikitlearn.org%2Fstable%2Fmodules%2Fgenerated%2Fsklearn.linear_model.LogisticRegression.+html%3Fhighlight%3Dclass_weight.^^^Minzhu Shen. 2020. Replication Package for Maca. https://github.com/sakura182/ Maca.***http://scholar.google.com/scholar?hl=en&q=Minzhu+Shen.+2020.+Replication+Package+for+Maca.+https%3A%2F%2Fgithub.com%2Fsakura182%2F+Maca.^^^Johan AK Suykens and Joos Vandewalle. 1999. Least Squares Support Vector Machine Classifiers. Neural Processing Letters 9, 3 ( 1999 ), 293-300.***http://scholar.google.com/scholar?hl=en&q=Johan+AK+Suykens+and+Joos+Vandewalle.+1999.+Least+Squares+Support+Vector+Machine+Classifiers.+Neural+Processing+Letters+9%2C+3+%28+1999+%29%2C+293-300.^^^Hongliang Yan, Yukang Ding, Peihua Li, Qilong Wang, Yong Xu, and Wangmeng Zuo. 2017. Mind the Class Weight Bias: Weighted Maximum Mean Discrepancy for Unsupervised Domain Adaptation. In 2017 IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2017, Honolulu, HI, USA, July 21-26, 2017. 945-954.***http://scholar.google.com/scholar?hl=en&q=Hongliang+Yan%2C+Yukang+Ding%2C+Peihua+Li%2C+Qilong+Wang%2C+Yong+Xu%2C+and+Wangmeng+Zuo.+2017.+Mind+the+Class+Weight+Bias%3A+Weighted+Maximum+Mean+Discrepancy+for+Unsupervised+Domain+Adaptation.+In+2017+IEEE+Conference+on+Computer+Vision+and+Pattern+Recognition%2C+CVPR+2017%2C+Honolulu%2C+HI%2C+USA%2C+July+21-26%2C+2017.+945-954.^^^Shengqian Yang, Hailong Zhang, Haowei Wu, Yan Wang, Dacong Yan, and Atanas Rountev. 2015. Static Window Transition Graphs for Android. In 30th IEEE/ACM International Conference on Automated Software Engineering, ASE 2015, Lincoln, NE, USA, November 9-13, 2015. IEEE, 658-668.***http://scholar.google.com/scholar?hl=en&q=Shengqian+Yang%2C+Hailong+Zhang%2C+Haowei+Wu%2C+Yan+Wang%2C+Dacong+Yan%2C+and+Atanas+Rountev.+2015.+Static+Window+Transition+Graphs+for+Android.+In+30th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2015%2C+Lincoln%2C+NE%2C+USA%2C+November+9-13%2C+2015.+IEEE%2C+658-668.^^^Tingting Yu, Tarannum S. Zaman, and Chao Wang. 2017. DESCRY: Reproducing System-level Concurrency Failures. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, Paderborn, Germany, September 4-8, 2017. ACM, 694-704.***http://scholar.google.com/scholar?hl=en&q=Tingting+Yu%2C+Tarannum+S.+Zaman%2C+and+Chao+Wang.+2017.+DESCRY%3A+Reproducing+System-level+Concurrency+Failures.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2017%2C+Paderborn%2C+Germany%2C+September+4-8%2C+2017.+ACM%2C+694-704.^^^Cristian Zamfir and George Candea. 2010. Execution Synthesis: A Technique for Automated Software Debugging. In European Conference on Computer Systems, Proceedings of the 5th European conference on Computer systems, EuroSys 2010, Paris, France, April 13-16, 2010. ACM, 321-334.***http://scholar.google.com/scholar?hl=en&q=Cristian+Zamfir+and+George+Candea.+2010.+Execution+Synthesis%3A+A+Technique+for+Automated+Software+Debugging.+In+European+Conference+on+Computer+Systems%2C+Proceedings+of+the+5th+European+conference+on+Computer+systems%2C+EuroSys+2010%2C+Paris%2C+France%2C+April+13-16%2C+2010.+ACM%2C+321-334.^^^Yu Zhao, Kye Miller, Tingting Yu, Wei Zheng, and Minchao Pu. 2019. Automatically Extracting Bug Reproducing Steps from Android Bug Reports. In Reuse in the Big Data Era-18th International Conference on Software and Systems Reuse, ICSR 2019, Cincinnati, OH, USA, June 26-28, 2019, Proceedings. Springer, 100-111.***http://scholar.google.com/scholar?hl=en&q=Yu+Zhao%2C+Kye+Miller%2C+Tingting+Yu%2C+Wei+Zheng%2C+and+Minchao+Pu.+2019.+Automatically+Extracting+Bug+Reproducing+Steps+from+Android+Bug+Reports.+In+Reuse+in+the+Big+Data+Era-18th+International+Conference+on+Software+and+Systems+Reuse%2C+ICSR+2019%2C+Cincinnati%2C+OH%2C+USA%2C+June+26-28%2C+2019%2C+Proceedings.+Springer%2C+100-111.^^^Yu Zhao, Tingting Yu, Ting Su, Yang Liu, Wei Zheng, Jingzhi Zhang, and William G. J. Halfond. 2019. ReCDroid: Automatically Reproducing Android Application Crashes from Bug Reports. In Proceedings of the 41st International Conference on Software Engineering, ICSE 2019, Montreal, QC, Canada, May 25-31, 2019. IEEE Press, 128-139.***http://scholar.google.com/scholar?hl=en&q=Yu+Zhao%2C+Tingting+Yu%2C+Ting+Su%2C+Yang+Liu%2C+Wei+Zheng%2C+Jingzhi+Zhang%2C+and+William+G.+J.+Halfond.+2019.+ReCDroid%3A+Automatically+Reproducing+Android+Application+Crashes+from+Bug+Reports.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+ICSE+2019%2C+Montreal%2C+QC%2C+Canada%2C+May+25-31%2C+2019.+IEEE+Press%2C+128-139.^^^');
INSERT INTO `paper_ref` VALUES (47, 85, '2019. Alipay. https://intl.alipay.com/. Accessed Aug-22-2019.***http://scholar.google.com/scholar?hl=en&q=2019.+Alipay.+https%3A%2F%2Fintl.alipay.com%2F.+Accessed+Aug-22-2019.^^^2019. JavaAgent. https://docs.oracle.com/javase/7/docs/api/java/lang/ instrument/package-summary.html***http://scholar.google.com/scholar?hl=en&q=2019.+JavaAgent.+https%3A%2F%2Fdocs.oracle.com%2Fjavase%2F7%2Fdocs%2Fapi%2Fjava%2Flang%2F+instrument%2Fpackage-summary.html^^^2019. Pitest. http://pitest.org***http://scholar.google.com/scholar?hl=en&q=2019.+Pitest.+http%3A%2F%2Fpitest.org^^^2019. Spring Framework. https://spring.io/. Accessed Jan-10-2020.***http://scholar.google.com/scholar?hl=en&q=2019.+Spring+Framework.+https%3A%2F%2Fspring.io%2F.+Accessed+Jan-10-2020.^^^Rui Abreu, Peter Zoeteweij, and Arjan JC Van Gemund. 2007. On the accuracy of spectrum-based fault localization. In Testing: Academic and Industrial Conference Practice and Research Techniques-MUTATION (TAICPART-MUTATION 2007 ). IEEE, 89-98.***http://scholar.google.com/scholar?hl=en&q=Rui+Abreu%2C+Peter+Zoeteweij%2C+and+Arjan+JC+Van+Gemund.+2007.+On+the+accuracy+of+spectrum-based+fault+localization.+In+Testing%3A+Academic+and+Industrial+Conference+Practice+and+Research+Techniques-MUTATION+%28TAICPART-MUTATION+2007+%29.+IEEE%2C+89-98.^^^Apache. 2019. Commons Math. https://commons.apache.org/proper/commonsmath/. Accessed Aug-22-2019.***http://scholar.google.com/scholar?hl=en&q=Apache.+2019.+Commons+Math.+https%3A%2F%2Fcommons.apache.org%2Fproper%2Fcommonsmath%2F.+Accessed+Aug-22-2019.^^^Tien-Duy B Le, David Lo, Claire Le Goues, and Lars Grunske. 2016. A learning-torank based fault localization approach using likely invariants. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 177-188.***http://scholar.google.com/scholar?hl=en&q=Tien-Duy+B+Le%2C+David+Lo%2C+Claire+Le+Goues%2C+and+Lars+Grunske.+2016.+A+learning-torank+based+fault+localization+approach+using+likely+invariants.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+177-188.^^^Antonia Bertolino. 2007. Software testing research: Achievements, challenges, dreams. In 2007 Future of Software Engineering. IEEE Computer Society, 85-103.***http://scholar.google.com/scholar?hl=en&q=Antonia+Bertolino.+2007.+Software+testing+research%3A+Achievements%2C+challenges%2C+dreams.+In+2007+Future+of+Software+Engineering.+IEEE+Computer+Society%2C+85-103.^^^Lionel C Briand, Yvan Labiche, and Xuetao Liu. 2007. Using machine learning to support debugging with tarantula. In ISSRE. 137-146.***http://scholar.google.com/scholar?hl=en&q=Lionel+C+Briand%2C+Yvan+Labiche%2C+and+Xuetao+Liu.+2007.+Using+machine+learning+to+support+debugging+with+tarantula.+In+ISSRE.+137-146.^^^Eric Bruneton, Romain Lenglet, and Thierry Coupaye. 2002. ASM: a code manipulation tool to implement adaptable systems. Adaptable and extensible component systems 30, 19 ( 2002 ).***http://scholar.google.com/scholar?hl=en&q=Eric+Bruneton%2C+Romain+Lenglet%2C+and+Thierry+Coupaye.+2002.+ASM%3A+a+code+manipulation+tool+to+implement+adaptable+systems.+Adaptable+and+extensible+component+systems+30%2C+19+%28+2002+%29.^^^Junjie Chen, Jiaqi Han, Peiyi Sun, Lingming Zhang, Dan Hao, and Lu Zhang. 2019. Compiler Bug Isolation via E ective Witness Test Program Generation. In FSE. 223-234.***http://scholar.google.com/scholar?hl=en&q=Junjie+Chen%2C+Jiaqi+Han%2C+Peiyi+Sun%2C+Lingming+Zhang%2C+Dan+Hao%2C+and+Lu+Zhang.+2019.+Compiler+Bug+Isolation+via+E+ective+Witness+Test+Program+Generation.+In+FSE.+223-234.^^^Liushan Chen, Yu Pei, and Carlo A. Furia. 2017. Contract-based Program Repair Without the Contracts. In Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering (Urbana-Champaign, IL, USA) ( ASE 2017). IEEE Press, Piscataway, NJ, USA, 637-647. http://dl.acm.org/citation.cfm? id= 3155562. 3155642***http://scholar.google.com/scholar?hl=en&q=Liushan+Chen%2C+Yu+Pei%2C+and+Carlo+A.+Furia.+2017.+Contract-based+Program+Repair+Without+the+Contracts.+In+Proceedings+of+the+32Nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28Urbana-Champaign%2C+IL%2C+USA%29+%28+ASE+2017%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+637-647.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3F+id%3D+3155562.+3155642^^^Lori A. Clarke. 1976. A system to generate test data and symbolically execute programs. TSE 3 ( 1976 ), 215-222.***http://scholar.google.com/scholar?hl=en&q=Lori+A.+Clarke.+1976.+A+system+to+generate+test+data+and+symbolically+execute+programs.+TSE+3+%28+1976+%29%2C+215-222.^^^Valentin Dallmeier, Christian Lindig, and Andreas Zeller. 2005. Lightweight defect localization for java. In ECOOP. 528-550.***http://scholar.google.com/scholar?hl=en&q=Valentin+Dallmeier%2C+Christian+Lindig%2C+and+Andreas+Zeller.+2005.+Lightweight+defect+localization+for+java.+In+ECOOP.+528-550.^^^Valentin Dallmeier, Andreas Zeller, and Bertrand Meyer. 2009. Generating Fixes from Object Behavior Anomalies. In Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering (ASE \'09). IEEE Computer Society, Washington, DC, USA, 550-554. https://doi.org/10.1109/ASE. 2009.15 ***http://scholar.google.com/scholar?hl=en&q=Valentin+Dallmeier%2C+Andreas+Zeller%2C+and+Bertrand+Meyer.+2009.+Generating+Fixes+from+Object+Behavior+Anomalies.+In+Proceedings+of+the+2009+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+%2709%29.+IEEE+Computer+Society%2C+Washington%2C+DC%2C+USA%2C+550-554.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2009.15+10.1109%2FASE.2009.15^^^V. Debroy and W. E. Wong. 2010. Using Mutation to Automatically Suggest Fixes for Faulty Programs. In 2010 Third International Conference on Software Testing, Veri cation and Validation. 65-74. https://doi.org/10.1109/ICST. 2010.66 ***http://scholar.google.com/scholar?hl=en&q=V.+Debroy+and+W.+E.+Wong.+2010.+Using+Mutation+to+Automatically+Suggest+Fixes+for+Faulty+Programs.+In+2010+Third+International+Conference+on+Software+Testing%2C+Veri+cation+and+Validation.+65-74.+https%3A%2F%2Fdoi.org%2F10.1109%2FICST.+2010.66+10.1109%2FICST.2010.66^^^Richard A. DeMillo, Richard J. Lipton, and Frederick G. Sayward. 1978. Hints on Test Data Selection: Help for the Practicing Programmer. IEEE Computer 11, 4 ( 1978 ), 34-41. https://doi.org/10.1109/ C-M. 1978.218136 ***http://scholar.google.com/scholar?hl=en&q=Richard+A.+DeMillo%2C+Richard+J.+Lipton%2C+and+Frederick+G.+Sayward.+1978.+Hints+on+Test+Data+Selection%3A+Help+for+the+Practicing+Programmer.+IEEE+Computer+11%2C+4+%28+1978+%29%2C+34-41.+https%3A%2F%2Fdoi.org%2F10.1109%2F+C-M.+1978.218136+10.1109%2FC-M.1978.218136^^^Olive Jean Dunn. 1961. Multiple comparisons among means. Journal of the American statistical association 56, 293 ( 1961 ), 52-64.***http://scholar.google.com/scholar?hl=en&q=Olive+Jean+Dunn.+1961.+Multiple+comparisons+among+means.+Journal+of+the+American+statistical+association+56%2C+293+%28+1961+%29%2C+52-64.^^^L. Gazzola, D. Micucci, and L. Mariani. 2017. Automatic Software Repair: A Survey. IEEE Transactions on Software Engineering PP, 99 ( 2017 ), 1-1. https: //doi.org/10.1109/TSE. 2017.2755013 ***http://scholar.google.com/scholar?hl=en&q=L.+Gazzola%2C+D.+Micucci%2C+and+L.+Mariani.+2017.+Automatic+Software+Repair%3A+A+Survey.+IEEE+Transactions+on+Software+Engineering+PP%2C+99+%28+2017+%29%2C+1-1.+https%3A+%2F%2Fdoi.org%2F10.1109%2FTSE.+2017.2755013+10.1109%2FTSE.2017.2755013^^^Ali Ghanbari, Samuel Benton, and Lingming Zhang. 2019. Practical program repair via bytecode mutation. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019, Beijing, China, July 15-19, 2019. 19-30. https://doi.org/10.1145/3293882.3330559 ***http://scholar.google.com/scholar?hl=en&q=Ali+Ghanbari%2C+Samuel+Benton%2C+and+Lingming+Zhang.+2019.+Practical+program+repair+via+bytecode+mutation.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2019%2C+Beijing%2C+China%2C+July+15-19%2C+2019.+19-30.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330559+10.1145%2F3293882.3330559^^^Divya Gopinath, Muhammad Zubair Malik, and Sarfraz Khurshid. 2011. Speci cation-based Program Repair Using SAT. InProceedings of the 17th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (Saarbrcken, Germany) ( TACAS\'11/ETAPS\'11). Springer-Verlag, Berlin, Heidelberg, 173-188. http://dl.acm.org/citation.cfm?id= 1987389. 1987408***http://scholar.google.com/scholar?hl=en&q=Divya+Gopinath%2C+Muhammad+Zubair+Malik%2C+and+Sarfraz+Khurshid.+2011.+Speci+cation-based+Program+Repair+Using+SAT.+InProceedings+of+the+17th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28Saarbrcken%2C+Germany%29+%28+TACAS%2711%2FETAPS%2711%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+173-188.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+1987389.+1987408^^^Greg4cr. 2019. Defects4J-version 1.4.0. https://github.com/Greg4cr/defects4j/ tree/additional-faults-1.4.***http://scholar.google.com/scholar?hl=en&q=Greg4cr.+2019.+Defects4J-version+1.4.0.+https%3A%2F%2Fgithub.com%2FGreg4cr%2Fdefects4j%2F+tree%2Fadditional-faults-1.4.^^^Dan Hao, Tao Xie, Lu Zhang, Xiaoyin Wang, Jiasu Sun, and Hong Mei. 2010. Test input reduction for result inspection to facilitate fault localization. Autom. Softw. Eng. 17, 1 ( 2010 ), 5-31. https://doi.org/10.1007/s10515-009-0056-x ***http://scholar.google.com/scholar?hl=en&q=Dan+Hao%2C+Tao+Xie%2C+Lu+Zhang%2C+Xiaoyin+Wang%2C+Jiasu+Sun%2C+and+Hong+Mei.+2010.+Test+input+reduction+for+result+inspection+to+facilitate+fault+localization.+Autom.+Softw.+Eng.+17%2C+1+%28+2010+%29%2C+5-31.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10515-009-0056-x+10.1007%2Fs10515-009-0056-x^^^Dan Hao, Lu Zhang, Ying Pan, Hong Mei, and Jiasu Sun. 2008. On similarityawareness in testing-based fault localization. Autom. Softw. Eng. 15, 2 ( 2008 ), 207-249. https://doi.org/10.1007/s10515-008-0025-9 ***http://scholar.google.com/scholar?hl=en&q=Dan+Hao%2C+Lu+Zhang%2C+Ying+Pan%2C+Hong+Mei%2C+and+Jiasu+Sun.+2008.+On+similarityawareness+in+testing-based+fault+localization.+Autom.+Softw.+Eng.+15%2C+2+%28+2008+%29%2C+207-249.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10515-008-0025-9+10.1007%2Fs10515-008-0025-9^^^Dan Hao, Lu Zhang, Tao Xie, Hong Mei, and Jiasu Sun. 2009. Interactive Fault Localization Using Test Information. J. Comput. Sci. Technol. 24, 5 ( 2009 ), 962-974. https://doi.org/10.1007/s11390-009-9270-z ***http://scholar.google.com/scholar?hl=en&q=Dan+Hao%2C+Lu+Zhang%2C+Tao+Xie%2C+Hong+Mei%2C+and+Jiasu+Sun.+2009.+Interactive+Fault+Localization+Using+Test+Information.+J.+Comput.+Sci.+Technol.+24%2C+5+%28+2009+%29%2C+962-974.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs11390-009-9270-z+10.1007%2Fs11390-009-9270-z^^^Yue Jia and Mark Harman. 2011. An Analysis and Survey of the Development of Mutation Testing. IEEE Trans. Software Eng. 37, 5 ( 2011 ), 649-678. https: //doi.org/10.1109/TSE. 2010.62 ***http://scholar.google.com/scholar?hl=en&q=Yue+Jia+and+Mark+Harman.+2011.+An+Analysis+and+Survey+of+the+Development+of+Mutation+Testing.+IEEE+Trans.+Software+Eng.+37%2C+5+%28+2011+%29%2C+649-678.+https%3A+%2F%2Fdoi.org%2F10.1109%2FTSE.+2010.62+10.1109%2FTSE.2010.62^^^Jiajun Jiang, Luyao Ren, Yingfei Xiong, and Lingming Zhang. 2019. Inferring program transformations from singular examples via big code. In 2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 255-266.***http://scholar.google.com/scholar?hl=en&q=Jiajun+Jiang%2C+Luyao+Ren%2C+Yingfei+Xiong%2C+and+Lingming+Zhang.+2019.+Inferring+program+transformations+from+singular+examples+via+big+code.+In+2019+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE%29.+IEEE%2C+255-266.^^^Jiajun Jiang, Ran Wang, Yingfei Xiong, Xiangping Chen, and Lu Zhang. 2019. Combining Spectrum-Based Fault Localization and Statistical Debugging: An Empirical Study. In 34th IEEE/ACM International Conference on Automated Software Engineering, ASE 2019, San Diego, CA, USA, November 11-15, 2019. IEEE, 502-514. https://doi.org/10.1109/ASE. 2019.00054 ***http://scholar.google.com/scholar?hl=en&q=Jiajun+Jiang%2C+Ran+Wang%2C+Yingfei+Xiong%2C+Xiangping+Chen%2C+and+Lu+Zhang.+2019.+Combining+Spectrum-Based+Fault+Localization+and+Statistical+Debugging%3A+An+Empirical+Study.+In+34th+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+ASE+2019%2C+San+Diego%2C+CA%2C+USA%2C+November+11-15%2C+2019.+IEEE%2C+502-514.+https%3A%2F%2Fdoi.org%2F10.1109%2FASE.+2019.00054+10.1109%2FASE.2019.00054^^^Jiajun Jiang, Yingfei Xiong, Hongyu Zhang, Qing Gao, and Xiangqun Chen. 2018. Shaping program repair space with existing patches and similar code. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis. 298-309.***http://scholar.google.com/scholar?hl=en&q=Jiajun+Jiang%2C+Yingfei+Xiong%2C+Hongyu+Zhang%2C+Qing+Gao%2C+and+Xiangqun+Chen.+2018.+Shaping+program+repair+space+with+existing+patches+and+similar+code.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+298-309.^^^James A Jones, Mary Jean Harrold, and John Stasko. 2002. Visualization of test information to assist fault localization. In ICSE. 467-477.***http://scholar.google.com/scholar?hl=en&q=James+A+Jones%2C+Mary+Jean+Harrold%2C+and+John+Stasko.+2002.+Visualization+of+test+information+to+assist+fault+localization.+In+ICSE.+467-477.^^^René Just, Darioush Jalali, and Michael D. Ernst. 2014. Defects4J: A Database of Existing Faults to Enable Controlled Testing Studies for Java Programs. In Proceedings of the 2014 International Symposium on Software Testing and Analysis (San Jose, CA, USA) ( ISSTA 2014). ACM, New York, NY, USA, 437-440. https: //doi.org/10.1145/2610384.2628055 ***http://scholar.google.com/scholar?hl=en&q=Ren%C3%A9+Just%2C+Darioush+Jalali%2C+and+Michael+D.+Ernst.+2014.+Defects4J%3A+A+Database+of+Existing+Faults+to+Enable+Controlled+Testing+Studies+for+Java+Programs.+In+Proceedings+of+the+2014+International+Symposium+on+Software+Testing+and+Analysis+%28San+Jose%2C+CA%2C+USA%29+%28+ISSTA+2014%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+437-440.+https%3A+%2F%2Fdoi.org%2F10.1145%2F2610384.2628055+10.1145%2F2610384.2628055^^^Dongsun Kim, Jaechang Nam, Jaewoo Song, and Sunghun Kim. 2013. Automatic patch generation learned from human-written patches. In Proceedings of the 2013 International Conference on Software Engineering. IEEE Press, 802-811.***http://scholar.google.com/scholar?hl=en&q=Dongsun+Kim%2C+Jaechang+Nam%2C+Jaewoo+Song%2C+and+Sunghun+Kim.+2013.+Automatic+patch+generation+learned+from+human-written+patches.+In+Proceedings+of+the+2013+International+Conference+on+Software+Engineering.+IEEE+Press%2C+802-811.^^^James C King. 1976. Symbolic execution and program testing. Commun. ACM 19, 7 ( 1976 ), 385-394.***http://scholar.google.com/scholar?hl=en&q=James+C+King.+1976.+Symbolic+execution+and+program+testing.+Commun.+ACM+19%2C+7+%28+1976+%29%2C+385-394.^^^Edward Kit and Susannah Finzi. 1995. Software testing in the real world: improving the process. ACM Press/Addison-Wesley Publishing Co.***http://scholar.google.com/scholar?hl=en&q=Edward+Kit+and+Susannah+Finzi.+1995.+Software+testing+in+the+real+world%3A+improving+the+process.+ACM+Press%2FAddison-Wesley+Publishing+Co.^^^Pavneet Singh Kochhar, Xin Xia, David Lo, and Shanping Li. 2016. Practitioners\' expectations on automated fault localization. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 165-176.***http://scholar.google.com/scholar?hl=en&q=Pavneet+Singh+Kochhar%2C+Xin+Xia%2C+David+Lo%2C+and+Shanping+Li.+2016.+Practitioners%27+expectations+on+automated+fault+localization.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+165-176.^^^Xianglong Kong, Lingming Zhang, W Eric Wong, and Bixin Li. 2015. Experience report: How do techniques, programs, and tests impact automated program repair?. In ISSRE. 194-204.***http://scholar.google.com/scholar?hl=en&q=Xianglong+Kong%2C+Lingming+Zhang%2C+W+Eric+Wong%2C+and+Bixin+Li.+2015.+Experience+report%3A+How+do+techniques%2C+programs%2C+and+tests+impact+automated+program+repair%3F.+In+ISSRE.+194-204.^^^Anil Koyuncu, Kui Liu, Tegawendé F Bissyandé, Dongsun Kim, Martin Monperrus, Jacques Klein, and Yves Le Traon. 2019. iFixR: bug report driven program repair. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, 314-325.***http://scholar.google.com/scholar?hl=en&q=Anil+Koyuncu%2C+Kui+Liu%2C+Tegawend%C3%A9+F+Bissyand%C3%A9%2C+Dongsun+Kim%2C+Martin+Monperrus%2C+Jacques+Klein%2C+and+Yves+Le+Traon.+2019.+iFixR%3A+bug+report+driven+program+repair.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+ACM%2C+314-325.^^^Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. 2012. GenProg: A Generic Method for Automatic Software Repair. IEEE Transactions on Software Engineering 38, 1 ( 2012 ), 54-72. https://doi.org/10.1109/TSE. 2011.104 ***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+ThanhVu+Nguyen%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2012.+GenProg%3A+A+Generic+Method+for+Automatic+Software+Repair.+IEEE+Transactions+on+Software+Engineering+38%2C+1+%28+2012+%29%2C+54-72.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2011.104+10.1109%2FTSE.2011.104^^^Xia Li, Wei Li, Yuqun Zhang, and Lingming Zhang. 2019. DeepFL: integrating multiple fault diagnosis dimensions for deep fault localization. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019, Beijing, China, July 15-19, 2019, Dongmei Zhang and Anders Møller (Eds.). ACM, 169-180. https://doi.org/10.1145/3293882.3330574 ***http://scholar.google.com/scholar?hl=en&q=Xia+Li%2C+Wei+Li%2C+Yuqun+Zhang%2C+and+Lingming+Zhang.+2019.+DeepFL%3A+integrating+multiple+fault+diagnosis+dimensions+for+deep+fault+localization.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2019%2C+Beijing%2C+China%2C+July+15-19%2C+2019%2C+Dongmei+Zhang+and+Anders+M%C3%B8ller+%28Eds.%29.+ACM%2C+169-180.+https%3A%2F%2Fdoi.org%2F10.1145%2F3293882.3330574+10.1145%2F3293882.3330574^^^Xia Li and Lingming Zhang. 2017. Transforming programs and tests in tandem for fault localization. Proceedings of the ACM on Programming Languages 1, OOPSLA ( 2017 ), 92.***http://scholar.google.com/scholar?hl=en&q=Xia+Li+and+Lingming+Zhang.+2017.+Transforming+programs+and+tests+in+tandem+for+fault+localization.+Proceedings+of+the+ACM+on+Programming+Languages+1%2C+OOPSLA+%28+2017+%29%2C+92.^^^Xiangyu Li, Shaowei Zhu, Marcelo d\'Amorim, and Alessandro Orso. 2018. Enlightened debugging. In Proceedings of the 40th International Conference on Software Engineering, ICSE 2018, Gothenburg, Sweden, May 27-June 03, 2018, Michel Chaudron, Ivica Crnkovic, Marsha Chechik, and Mark Harman (Eds.). ACM, 82-92. https://doi.org/10.1145/3180155.3180242 ***http://scholar.google.com/scholar?hl=en&q=Xiangyu+Li%2C+Shaowei+Zhu%2C+Marcelo+d%27Amorim%2C+and+Alessandro+Orso.+2018.+Enlightened+debugging.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%2C+ICSE+2018%2C+Gothenburg%2C+Sweden%2C+May+27-June+03%2C+2018%2C+Michel+Chaudron%2C+Ivica+Crnkovic%2C+Marsha+Chechik%2C+and+Mark+Harman+%28Eds.%29.+ACM%2C+82-92.+https%3A%2F%2Fdoi.org%2F10.1145%2F3180155.3180242+10.1145%2F3180155.3180242^^^Ben Liblit, Mayur Naik, Alice X Zheng, Alex Aiken, and Michael I Jordan. 2005. Scalable statistical bug isolation. PLDI ( 2005 ), 15-26.***http://scholar.google.com/scholar?hl=en&q=Ben+Liblit%2C+Mayur+Naik%2C+Alice+X+Zheng%2C+Alex+Aiken%2C+and+Michael+I+Jordan.+2005.+Scalable+statistical+bug+isolation.+PLDI+%28+2005+%29%2C+15-26.^^^Yun Lin, Jun Sun, Yinxing Xue, Yang Liu, and Jin Song Dong. 2017. Feedbackbased debugging. In Proceedings of the 39th International Conference on Software Engineering, ICSE 2017, Buenos Aires, Argentina, May 20-28, 2017. 393-403. https: //doi.org/10.1109/ICSE. 2017.43 ***http://scholar.google.com/scholar?hl=en&q=Yun+Lin%2C+Jun+Sun%2C+Yinxing+Xue%2C+Yang+Liu%2C+and+Jin+Song+Dong.+2017.+Feedbackbased+debugging.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering%2C+ICSE+2017%2C+Buenos+Aires%2C+Argentina%2C+May+20-28%2C+2017.+393-403.+https%3A+%2F%2Fdoi.org%2F10.1109%2FICSE.+2017.43+10.1109%2FICSE.2017.43^^^Fan Long and Martin Rinard. 2015. Staged program repair with condition synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30-September 4, 2015. 166-178. https://doi.org/10.1145/2786805.2786811 ***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+2015.+Staged+program+repair+with+condition+synthesis.+In+Proceedings+of+the+2015+10th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2015%2C+Bergamo%2C+Italy%2C+August+30-September+4%2C+2015.+166-178.+https%3A%2F%2Fdoi.org%2F10.1145%2F2786805.2786811+10.1145%2F2786805.2786811^^^Fan Long and Martin Rinard. 2016. Automatic patch generation by learning correct code. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2016, St. Petersburg, FL, USA, January 20-22, 2016. 298-312. https://doi.org/10.1145/2837614.2837617 ***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+2016.+Automatic+patch+generation+by+learning+correct+code.+In+Proceedings+of+the+43rd+Annual+ACM+SIGPLAN-SIGACT+Symposium+on+Principles+of+Programming+Languages%2C+POPL+2016%2C+St.+Petersburg%2C+FL%2C+USA%2C+January+20-22%2C+2016.+298-312.+https%3A%2F%2Fdoi.org%2F10.1145%2F2837614.2837617+10.1145%2F2837614.2837617^^^Yiling Lou, Junjie Chen, Lingming Zhang, Dan Hao, and Lu Zhang. 2019. Historydriven build failure xing: how far are we?. InProceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis. 43-54.***http://scholar.google.com/scholar?hl=en&q=Yiling+Lou%2C+Junjie+Chen%2C+Lingming+Zhang%2C+Dan+Hao%2C+and+Lu+Zhang.+2019.+Historydriven+build+failure+xing%3A+how+far+are+we%3F.+InProceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+43-54.^^^Alexandru Marginean, Johannes Bader, Satish Chandra, Mark Harman, Yue Jia, Ke Mao, Alexander Mols, and Andrew Scott. 2019. Sap x: Automated end-to-end repair at scale. In Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice. 269-278.***http://scholar.google.com/scholar?hl=en&q=Alexandru+Marginean%2C+Johannes+Bader%2C+Satish+Chandra%2C+Mark+Harman%2C+Yue+Jia%2C+Ke+Mao%2C+Alexander+Mols%2C+and+Andrew+Scott.+2019.+Sap+x%3A+Automated+end-to-end+repair+at+scale.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%3A+Software+Engineering+in+Practice.+269-278.^^^Matias Martinez, Thomas Durieux, Romain Sommerard, Jifeng Xuan, and Martin Monperrus. 2017. Automatic repair of real bugs in java: a large-scale experiment on the defects4j dataset. Empirical Software Engineering 22, 4 ( 01 Aug 2017 ), 1936-1964. https://doi.org/10.1007/s10664-016-9470-4 ***http://scholar.google.com/scholar?hl=en&q=Matias+Martinez%2C+Thomas+Durieux%2C+Romain+Sommerard%2C+Jifeng+Xuan%2C+and+Martin+Monperrus.+2017.+Automatic+repair+of+real+bugs+in+java%3A+a+large-scale+experiment+on+the+defects4j+dataset.+Empirical+Software+Engineering+22%2C+4+%28+01+Aug+2017+%29%2C+1936-1964.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10664-016-9470-4+10.1007%2Fs10664-016-9470-4^^^Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin, TX, USA, May 14-22, 2016. 691-701. https://doi.org/10.1145/2884781.2884807 ***http://scholar.google.com/scholar?hl=en&q=Sergey+Mechtaev%2C+Jooyong+Yi%2C+and+Abhik+Roychoudhury.+2016.+Angelix%3A+scalable+multiline+program+patch+synthesis+via+symbolic+analysis.+In+Proceedings+of+the+38th+International+Conference+on+Software+Engineering%2C+ICSE+2016%2C+Austin%2C+TX%2C+USA%2C+May+14-22%2C+2016.+691-701.+https%3A%2F%2Fdoi.org%2F10.1145%2F2884781.2884807+10.1145%2F2884781.2884807^^^Martin Monperrus. 2018. Automatic Software Repair: A Bibliography. ACM Comput. Surv. 51, 1, Article 17 ( Jan. 2018 ), 24 pages. https://doi.org/10.1145/ 3105906 ***http://scholar.google.com/scholar?hl=en&q=Martin+Monperrus.+2018.+Automatic+Software+Repair%3A+A+Bibliography.+ACM+Comput.+Surv.+51%2C+1%2C+Article+17+%28+Jan.+2018+%29%2C+24+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F+3105906+10.1145%2F3105906^^^Seokhyeon Moon, Yunho Kim, Moonzoo Kim, and Shin Yoo. 2014. Ask the mutants: Mutating faulty programs for fault localization. In Software Testing, Veri cation and Validation (ICST), 2014 IEEE Seventh International Conference on. IEEE, 153-162.***http://scholar.google.com/scholar?hl=en&q=Seokhyeon+Moon%2C+Yunho+Kim%2C+Moonzoo+Kim%2C+and+Shin+Yoo.+2014.+Ask+the+mutants%3A+Mutating+faulty+programs+for+fault+localization.+In+Software+Testing%2C+Veri+cation+and+Validation+%28ICST%29%2C+2014+IEEE+Seventh+International+Conference+on.+IEEE%2C+153-162.^^^Glenford J Myers, Corey Sandler, and Tom Badgett. 2011. The art of software testing. John Wiley & Sons.***http://scholar.google.com/scholar?hl=en&q=Glenford+J+Myers%2C+Corey+Sandler%2C+and+Tom+Badgett.+2011.+The+art+of+software+testing.+John+Wiley+%26+Sons.^^^Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chandra. 2013. SemFix: program repair via semantic analysis. In 35th International Conference on Software Engineering, ICSE \' 13, San Francisco, CA, USA, May 18-26, 2013. 772-781. https://doi.org/10.1109/ICSE. 2013.6606623 ***http://scholar.google.com/scholar?hl=en&q=Hoang+Duong+Thien+Nguyen%2C+Dawei+Qi%2C+Abhik+Roychoudhury%2C+and+Satish+Chandra.+2013.+SemFix%3A+program+repair+via+semantic+analysis.+In+35th+International+Conference+on+Software+Engineering%2C+ICSE+%27+13%2C+San+Francisco%2C+CA%2C+USA%2C+May+18-26%2C+2013.+772-781.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2013.6606623+10.1109%2FICSE.2013.6606623^^^Mike Papadakis and Yves Le Traon. 2012. Using mutants to locate\" unknown\" faults. In Software Testing, Veri cation and Validation (ICST), 2012 IEEE Fifth International Conference on. IEEE, 691-700.***http://scholar.google.com/scholar?hl=en&q=Mike+Papadakis+and+Yves+Le+Traon.+2012.+Using+mutants+to+locate%22+unknown%22+faults.+In+Software+Testing%2C+Veri+cation+and+Validation+%28ICST%29%2C+2012+IEEE+Fifth+International+Conference+on.+IEEE%2C+691-700.^^^Mike Papadakis and Yves Le Traon. 2015. Metallaxis-FL: mutation-based fault localization. Software Testing, Veri cation and Reliability 25, 5-7 ( 2015 ), 605-628.***http://scholar.google.com/scholar?hl=en&q=Mike+Papadakis+and+Yves+Le+Traon.+2015.+Metallaxis-FL%3A+mutation-based+fault+localization.+Software+Testing%2C+Veri+cation+and+Reliability+25%2C+5-7+%28+2015+%29%2C+605-628.^^^Chris Parnin and Alessandro Orso. 2011. Are automated debugging techniques actually helping programmers?. In Proceedings of the 2011 international symposium on software testing and analysis. ACM, 199-209.***http://scholar.google.com/scholar?hl=en&q=Chris+Parnin+and+Alessandro+Orso.+2011.+Are+automated+debugging+techniques+actually+helping+programmers%3F.+In+Proceedings+of+the+2011+international+symposium+on+software+testing+and+analysis.+ACM%2C+199-209.^^^Spencer Pearson, José Campos, René Just, Gordon Fraser, Rui Abreu, Michael D Ernst, Deric Pang, and Benjamin Keller. 2017. Evaluating and improving fault localization. In Proceedings of the 39th International Conference on Software Engineering. 609-620.***http://scholar.google.com/scholar?hl=en&q=Spencer+Pearson%2C+Jos%C3%A9+Campos%2C+Ren%C3%A9+Just%2C+Gordon+Fraser%2C+Rui+Abreu%2C+Michael+D+Ernst%2C+Deric+Pang%2C+and+Benjamin+Keller.+2017.+Evaluating+and+improving+fault+localization.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering.+609-620.^^^Yu Pei, Carlo A. Furia, Martin Nordio, Yi Wei, Bertrand Meyer, and Andreas Zeller. 2014. Automated Fixing of Programs with Contracts. IEEE Transactions on Software Engineering 40, 5 ( 2014 ), 427-449. https://doi.org/10.1109/TSE. 2014. 2312918 ***http://scholar.google.com/scholar?hl=en&q=Yu+Pei%2C+Carlo+A.+Furia%2C+Martin+Nordio%2C+Yi+Wei%2C+Bertrand+Meyer%2C+and+Andreas+Zeller.+2014.+Automated+Fixing+of+Programs+with+Contracts.+IEEE+Transactions+on+Software+Engineering+40%2C+5+%28+2014+%29%2C+427-449.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2014.+2312918+10.1109%2FTSE.2014.2312918^^^William E Perry. 2007. E ective Methods for Software Testing: Includes Complete Guidelines, Checklists, and Templates. John Wiley & Sons.***http://scholar.google.com/scholar?hl=en&q=William+E+Perry.+2007.+E+ective+Methods+for+Software+Testing%3A+Includes+Complete+Guidelines%2C+Checklists%2C+and+Templates.+John+Wiley+%26+Sons.^^^Yuhua Qi, Xiaoguang Mao, Yan Lei, Ziying Dai, and Chengsong Wang. 2014. The Strength of Random Search on Automated Program Repair. In Proceedings of the 36th International Conference on Software Engineering (Hyderabad, India) ( ICSE 2014). ACM, New York, NY, USA, 254-265. https://doi.org/10.1145/2568225. 2568254 ***http://scholar.google.com/scholar?hl=en&q=Yuhua+Qi%2C+Xiaoguang+Mao%2C+Yan+Lei%2C+Ziying+Dai%2C+and+Chengsong+Wang.+2014.+The+Strength+of+Random+Search+on+Automated+Program+Repair.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering+%28Hyderabad%2C+India%29+%28+ICSE+2014%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+254-265.+https%3A%2F%2Fdoi.org%2F10.1145%2F2568225.+2568254+10.1145%2F2568225.2568254^^^Zichao Qi, Fan Long, Sara Achour, and Martin Rinard. 2015. An analysis of patch plausibility and correctness for generate-and-validate patch generation systems. In ISSTA. 24-36.***http://scholar.google.com/scholar?hl=en&q=Zichao+Qi%2C+Fan+Long%2C+Sara+Achour%2C+and+Martin+Rinard.+2015.+An+analysis+of+patch+plausibility+and+correctness+for+generate-and-validate+patch+generation+systems.+In+ISSTA.+24-36.^^^Shounak Roychowdhury and Sarfraz Khurshid. 2011. A novel framework for locating software faults using latent divergences. In ECML. 49-64.***http://scholar.google.com/scholar?hl=en&q=Shounak+Roychowdhury+and+Sarfraz+Khurshid.+2011.+A+novel+framework+for+locating+software+faults+using+latent+divergences.+In+ECML.+49-64.^^^Shounak Roychowdhury and Sarfraz Khurshid. 2011. Software fault localization using feature selection. In International Workshop on Machine Learning Technologies in Software Engineering. 11-18.***http://scholar.google.com/scholar?hl=en&q=Shounak+Roychowdhury+and+Sarfraz+Khurshid.+2011.+Software+fault+localization+using+feature+selection.+In+International+Workshop+on+Machine+Learning+Technologies+in+Software+Engineering.+11-18.^^^Shounak Roychowdhury and Sarfraz Khurshid. 2012. A family of generalized entropies and its application to software fault localization. In International Conference Intelligent Systems. 368-373.***http://scholar.google.com/scholar?hl=en&q=Shounak+Roychowdhury+and+Sarfraz+Khurshid.+2012.+A+family+of+generalized+entropies+and+its+application+to+software+fault+localization.+In+International+Conference+Intelligent+Systems.+368-373.^^^Ripon K Saha, Yingjun Lyu, Hiroaki Yoshida, and Mukul R Prasad. 2017. ELIXIR: e ective object oriented program repair. InProceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering. IEEE Press, 648-659.***http://scholar.google.com/scholar?hl=en&q=Ripon+K+Saha%2C+Yingjun+Lyu%2C+Hiroaki+Yoshida%2C+and+Mukul+R+Prasad.+2017.+ELIXIR%3A+e+ective+object+oriented+program+repair.+InProceedings+of+the+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+IEEE+Press%2C+648-659.^^^Andrew Scott, Johannes Bader, and Satish Chandra. 2019. Geta x: Learning to x bugs automatically.arXiv preprint arXiv: 1902. 06111 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Andrew+Scott%2C+Johannes+Bader%2C+and+Satish+Chandra.+2019.+Geta+x%3A+Learning+to+x+bugs+automatically.arXiv+preprint+arXiv%3A+1902.+06111+%28+2019+%29.^^^Jeongju Sohn and Shin Yoo. 2017. Fluccs: Using code and change metrics to improve fault localization. In Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 273-283.***http://scholar.google.com/scholar?hl=en&q=Jeongju+Sohn+and+Shin+Yoo.+2017.+Fluccs%3A+Using+code+and+change+metrics+to+improve+fault+localization.+In+Proceedings+of+the+26th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+ACM%2C+273-283.^^^Gregory Tassey. 2002. The economic impacts of inadequate infrastructure for software testing. National Institute of Standards and Technology, RTI Project 7007, 011 ( 2002 ).***http://scholar.google.com/scholar?hl=en&q=Gregory+Tassey.+2002.+The+economic+impacts+of+inadequate+infrastructure+for+software+testing.+National+Institute+of+Standards+and+Technology%2C+RTI+Project+7007%2C+011+%28+2002+%29.^^^Christopher Steven Timperley, Susan Stepney, and Claire Le Goues. 2017. An investigation into the use of mutation analysis for automated program repair. In International Symposium on Search Based Software Engineering. Springer, 99-114.***http://scholar.google.com/scholar?hl=en&q=Christopher+Steven+Timperley%2C+Susan+Stepney%2C+and+Claire+Le+Goues.+2017.+An+investigation+into+the+use+of+mutation+analysis+for+automated+program+repair.+In+International+Symposium+on+Search+Based+Software+Engineering.+Springer%2C+99-114.^^^Tricentis. 2019. \"Tricentis Report\". https://www.tricentis. com. \"accessed 10-jan2020\".***http://scholar.google.com/scholar?hl=en&q=Tricentis.+2019.+%22Tricentis+Report%22.+https%3A%2F%2Fwww.tricentis.+com.+%22accessed+10-jan2020%22.^^^Westley Weimer. 2006. Patches As Better Bug Reports. In Proceedings of the 5th International Conference on Generative Programming and Component Engineering (Portland, Oregon, USA) ( GPCE \'06). ACM, New York, NY, USA, 181-190. https: //doi.org/10.1145/1173706.1173734 ***http://scholar.google.com/scholar?hl=en&q=Westley+Weimer.+2006.+Patches+As+Better+Bug+Reports.+In+Proceedings+of+the+5th+International+Conference+on+Generative+Programming+and+Component+Engineering+%28Portland%2C+Oregon%2C+USA%29+%28+GPCE+%2706%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+181-190.+https%3A+%2F%2Fdoi.org%2F10.1145%2F1173706.1173734+10.1145%2F1173706.1173734^^^Westley Weimer, Zachary P Fry, and Stephanie Forrest. 2013. Leveraging program equivalence for adaptive program repair: Models and rst results. InASE. 356-366.***http://scholar.google.com/scholar?hl=en&q=Westley+Weimer%2C+Zachary+P+Fry%2C+and+Stephanie+Forrest.+2013.+Leveraging+program+equivalence+for+adaptive+program+repair%3A+Models+and+rst+results.+InASE.+356-366.^^^Ming Wen, Junjie Chen, Rongxin Wu, Dan Hao, and Shing-Chi Cheung. 2018. Context-Aware Patch Generation for Better Automated Program Repair. In Proceedings of the 40th International Conference on Software Engineering (ICSE 2018 ). 1-11.***http://scholar.google.com/scholar?hl=en&q=Ming+Wen%2C+Junjie+Chen%2C+Rongxin+Wu%2C+Dan+Hao%2C+and+Shing-Chi+Cheung.+2018.+Context-Aware+Patch+Generation+for+Better+Automated+Program+Repair.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering+%28ICSE+2018+%29.+1-11.^^^Wikipedia contributors. 2019. Software bug-Wikipedia, The Free Encyclopedia. https://en.wikipedia.org/wiki/Software_bug [accessed 10-jan-2020].***http://scholar.google.com/scholar?hl=en&q=Wikipedia+contributors.+2019.+Software+bug-Wikipedia%2C+The+Free+Encyclopedia.+https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSoftware_bug+%5Baccessed+10-jan-2020%5D.^^^Wikipedia contributors. 2019. Wilcoxon signed-rank test-Wikipedia, The Free Encyclopedia. https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test. [accessed 10-jan-2020].***http://scholar.google.com/scholar?hl=en&q=Wikipedia+contributors.+2019.+Wilcoxon+signed-rank+test-Wikipedia%2C+The+Free+Encyclopedia.+https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWilcoxon_signed-rank_test.+%5Baccessed+10-jan-2020%5D.^^^W. Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. A Survey on Software Fault Localization. IEEE Trans. Softw. Eng. 42, 8 (Aug. 2016 ), 707-740. https://doi.org/10.1109/TSE. 2016.2521368 ***http://scholar.google.com/scholar?hl=en&q=W.+Eric+Wong%2C+Ruizhi+Gao%2C+Yihao+Li%2C+Rui+Abreu%2C+and+Franz+Wotawa.+2016.+A+Survey+on+Software+Fault+Localization.+IEEE+Trans.+Softw.+Eng.+42%2C+8+%28Aug.+2016+%29%2C+707-740.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2016.2521368+10.1109%2FTSE.2016.2521368^^^Xiaoyuan Xie, Zicong Liu, Shuo Song, Zhenyu Chen, Jifeng Xuan, and Baowen Xu. 2016. Revisit of automatic debugging via human focus-tracking analysis. In ICSE. 808-819.***http://scholar.google.com/scholar?hl=en&q=Xiaoyuan+Xie%2C+Zicong+Liu%2C+Shuo+Song%2C+Zhenyu+Chen%2C+Jifeng+Xuan%2C+and+Baowen+Xu.+2016.+Revisit+of+automatic+debugging+via+human+focus-tracking+analysis.+In+ICSE.+808-819.^^^Jifeng Xuan, Matias Martinez, Favio Demarco, Maxime Clement, Sebastian R. Lamelas Marcote, Thomas Durieux, Daniel Le Berre, and Martin Monperrus. 2017. Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs. IEEE Transactions on Software Engineering 43, 1 ( 2017 ), 34-55. https://doi.org/10.1109/TSE. 2016.2560811 ***http://scholar.google.com/scholar?hl=en&q=Jifeng+Xuan%2C+Matias+Martinez%2C+Favio+Demarco%2C+Maxime+Clement%2C+Sebastian+R.+Lamelas+Marcote%2C+Thomas+Durieux%2C+Daniel+Le+Berre%2C+and+Martin+Monperrus.+2017.+Nopol%3A+Automatic+Repair+of+Conditional+Statement+Bugs+in+Java+Programs.+IEEE+Transactions+on+Software+Engineering+43%2C+1+%28+2017+%29%2C+34-55.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2016.2560811+10.1109%2FTSE.2016.2560811^^^Jifeng Xuan and Martin Monperrus. 2014. Learning to combine multiple ranking metrics for fault localization. In 2014 IEEE International Conference on Software Maintenance and Evolution. IEEE, 191-200.***http://scholar.google.com/scholar?hl=en&q=Jifeng+Xuan+and+Martin+Monperrus.+2014.+Learning+to+combine+multiple+ranking+metrics+for+fault+localization.+In+2014+IEEE+International+Conference+on+Software+Maintenance+and+Evolution.+IEEE%2C+191-200.^^^Jifeng Xuan and Martin Monperrus. 2014. Test case puri cation for improving fault localization. In FSE. 52-63.***http://scholar.google.com/scholar?hl=en&q=Jifeng+Xuan+and+Martin+Monperrus.+2014.+Test+case+puri+cation+for+improving+fault+localization.+In+FSE.+52-63.^^^Lingming Zhang, Lu Zhang, and Sarfraz Khurshid. 2013. Injecting mechanical faults to localize developer faults for evolving software. In OOPSLA. 765-784.***http://scholar.google.com/scholar?hl=en&q=Lingming+Zhang%2C+Lu+Zhang%2C+and+Sarfraz+Khurshid.+2013.+Injecting+mechanical+faults+to+localize+developer+faults+for+evolving+software.+In+OOPSLA.+765-784.^^^Mengshi Zhang, Xia Li, Lingming Zhang, and Sarfraz Khurshid. 2017. Boosting spectrum-based fault localization using PageRank. In Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. 261-272.***http://scholar.google.com/scholar?hl=en&q=Mengshi+Zhang%2C+Xia+Li%2C+Lingming+Zhang%2C+and+Sarfraz+Khurshid.+2017.+Boosting+spectrum-based+fault+localization+using+PageRank.+In+Proceedings+of+the+26th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis.+261-272.^^^Mengshi Zhang, Yaoxian Li, Xia Li, Lingchao Chen, Yuqun Zhang, Lingming Zhang, and Sarfraz Khurshid. 2019. An Empirical Study of Boosting Spectrumbased Fault Localization via PageRank. IEEE Transactions on Software Engineering ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=Mengshi+Zhang%2C+Yaoxian+Li%2C+Xia+Li%2C+Lingchao+Chen%2C+Yuqun+Zhang%2C+Lingming+Zhang%2C+and+Sarfraz+Khurshid.+2019.+An+Empirical+Study+of+Boosting+Spectrumbased+Fault+Localization+via+PageRank.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.^^^Xiangyu Zhang, Neelam Gupta, and Rajiv Gupta. 2006. Locating faults through automated predicate switching. In Proceedings of the 28th international conference on Software engineering. ACM, 272-281.***http://scholar.google.com/scholar?hl=en&q=Xiangyu+Zhang%2C+Neelam+Gupta%2C+and+Rajiv+Gupta.+2006.+Locating+faults+through+automated+predicate+switching.+In+Proceedings+of+the+28th+international+conference+on+Software+engineering.+ACM%2C+272-281.^^^Daming Zou, Jingjing Liang, Yingfei Xiong, Michael D Ernst, and Lu Zhang. 2019. An Empirical Study of Fault Localization Families and Their Combinations. IEEE Transactions on Software Engineering ( 2019 ). https://doi.org/10.1109/TSE. 2019. 2892102 ***http://scholar.google.com/scholar?hl=en&q=Daming+Zou%2C+Jingjing+Liang%2C+Yingfei+Xiong%2C+Michael+D+Ernst%2C+and+Lu+Zhang.+2019.+An+Empirical+Study+of+Fault+Localization+Families+and+Their+Combinations.+IEEE+Transactions+on+Software+Engineering+%28+2019+%29.+https%3A%2F%2Fdoi.org%2F10.1109%2FTSE.+2019.+2892102+10.1109%2FTSE.2019.2892102^^^');
INSERT INTO `paper_ref` VALUES (48, 39, 'Lars Ole Andersen. 1994. Program Analysis and Specialization for the C Programming Language. Technical Report.***http://scholar.google.com/scholar?hl=en&q=Lars+Ole+Andersen.+1994.+Program+Analysis+and+Specialization+for+the+C+Programming+Language.+Technical+Report.^^^Rodney M Burstall. 1972. Some techniques for proving correctness of programs which alter data structures. Machine intelligence 7, 23-50 ( 1972 ), 3.***http://scholar.google.com/scholar?hl=en&q=Rodney+M+Burstall.+1972.+Some+techniques+for+proving+correctness+of+programs+which+alter+data+structures.+Machine+intelligence+7%2C+23-50+%28+1972+%29%2C+3.^^^Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In Proc. of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI\'08) (San Diego, CA, USA).***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Daniel+Dunbar%2C+and+Dawson+Engler.+2008.+KLEE%3A+Unassisted+and+Automatic+Generation+of+High-Coverage+Tests+for+Complex+Systems+Programs.+In+Proc.+of+the+8th+USENIX+Symposium+on+Operating+Systems+Design+and+Implementation+%28OSDI%2708%29+%28San+Diego%2C+CA%2C+USA%29.^^^Cristian Cadar, Vijay Ganesh, Peter Pawlowski, David Dill, and Dawson Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proc. of the 13th ACM Conference on Computer and Communications Security (CCS\'06) (Alexandria, VA, USA).***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Vijay+Ganesh%2C+Peter+Pawlowski%2C+David+Dill%2C+and+Dawson+Engler.+2006.+EXE%3A+Automatically+Generating+Inputs+of+Death.+In+Proc.+of+the+13th+ACM+Conference+on+Computer+and+Communications+Security+%28CCS%2706%29+%28Alexandria%2C+VA%2C+USA%29.^^^Cristian Cadar, Patrice Godefroid, Sarfraz Khurshid, Corina S Pasareanu, Koushik Sen, Nikolai Tillmann, and Willem Visser. 2011. Symbolic execution for software testing in practice: preliminary assessment. In 2011 33rd International Conference on Software Engineering (ICSE). IEEE, 1066-1071.***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Patrice+Godefroid%2C+Sarfraz+Khurshid%2C+Corina+S+Pasareanu%2C+Koushik+Sen%2C+Nikolai+Tillmann%2C+and+Willem+Visser.+2011.+Symbolic+execution+for+software+testing+in+practice%3A+preliminary+assessment.+In+2011+33rd+International+Conference+on+Software+Engineering+%28ICSE%29.+IEEE%2C+1066-1071.^^^Cristian Cadar and Koushik Sen. 2013. Symbolic Execution for Software Testing: Three Decades Later. Commun. ACM 56, 2 (Feb. 2013 ), 82-90. https://doi.org/10. 1145/2408776.2408795 ***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar+and+Koushik+Sen.+2013.+Symbolic+Execution+for+Software+Testing%3A+Three+Decades+Later.+Commun.+ACM+56%2C+2+%28Feb.+2013+%29%2C+82-90.+https%3A%2F%2Fdoi.org%2F10.+1145%2F2408776.2408795+10.1145%2F2408776.2408795^^^Vitaly Chipounov and George Candea. 2010. Reverse engineering of binary device drivers with RevNIC. In Proc. of the 5th European Conference on Computer Systems (EuroSys\'10) (Paris, France).***http://scholar.google.com/scholar?hl=en&q=Vitaly+Chipounov+and+George+Candea.+2010.+Reverse+engineering+of+binary+device+drivers+with+RevNIC.+In+Proc.+of+the+5th+European+Conference+on+Computer+Systems+%28EuroSys%2710%29+%28Paris%2C+France%29.^^^Edmund Clarke, Daniel Kroening, and Flavio Lerda. 2004. A Tool for Checking ANSI-C Programs. In Proc. of the 10th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS\'04) (Barcelona, Spain).***http://scholar.google.com/scholar?hl=en&q=Edmund+Clarke%2C+Daniel+Kroening%2C+and+Flavio+Lerda.+2004.+A+Tool+for+Checking+ANSI-C+Programs.+In+Proc.+of+the+10th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28TACAS%2704%29+%28Barcelona%2C+Spain%29.^^^Jeremy Condit, Brian Hackett, Shuvendu K Lahiri, and Shaz Qadeer. 2009. Unifying type checking and property checking for low-level code. In ACM SIGPLAN Notices, Vol. 44. ACM, 302-314.***http://scholar.google.com/scholar?hl=en&q=Jeremy+Condit%2C+Brian+Hackett%2C+Shuvendu+K+Lahiri%2C+and+Shaz+Qadeer.+2009.+Unifying+type+checking+and+property+checking+for+low-level+code.+In+ACM+SIGPLAN+Notices%2C+Vol.+44.+ACM%2C+302-314.^^^Emilio Coppa, Daniele Cono D\'Elia, and Camil Demetrescu. 2017. Rethinking pointer reasoning in symbolic execution. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering. IEEE Press, 613-618.***http://scholar.google.com/scholar?hl=en&q=Emilio+Coppa%2C+Daniele+Cono+D%27Elia%2C+and+Camil+Demetrescu.+2017.+Rethinking+pointer+reasoning+in+symbolic+execution.+In+Proceedings+of+the+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering.+IEEE+Press%2C+613-618.^^^L. Cordeiro, B. Fischer, and J. Marques-Silva. 2012. SMT-Based Bounded Model Checking for Embedded ANSI-C Software. IEEE Transactions on Software Engineering (TSE) 38, 4 ( July 2012 ), 957-974.***http://scholar.google.com/scholar?hl=en&q=L.+Cordeiro%2C+B.+Fischer%2C+and+J.+Marques-Silva.+2012.+SMT-Based+Bounded+Model+Checking+for+Embedded+ANSI-C+Software.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+38%2C+4+%28+July+2012+%29%2C+957-974.^^^Leonardo De Moura and Nikolaj Bjørner. 2011. Satisfiability modulo theories: introduction and applications. Commun. ACM 54, 9 ( 2011 ), 69-77.***http://scholar.google.com/scholar?hl=en&q=Leonardo+De+Moura+and+Nikolaj+Bj%C3%B8rner.+2011.+Satisfiability+modulo+theories%3A+introduction+and+applications.+Commun.+ACM+54%2C+9+%28+2011+%29%2C+69-77.^^^Oscar Soria Dustmann, Klaus Wehrle, and Cristian Cadar. 2018. PARTI: a multiinterval theory solver for symbolic execution.***http://scholar.google.com/scholar?hl=en&q=Oscar+Soria+Dustmann%2C+Klaus+Wehrle%2C+and+Cristian+Cadar.+2018.+PARTI%3A+a+multiinterval+theory+solver+for+symbolic+execution.^^^Vijay Ganesh and David L. Dill. 2007. A Decision Procedure for Bit-Vectors and Arrays. In Proc. of the 19th International Conference on Computer-Aided Verification (CAV\'07) (Berlin, Germany).***http://scholar.google.com/scholar?hl=en&q=Vijay+Ganesh+and+David+L.+Dill.+2007.+A+Decision+Procedure+for+Bit-Vectors+and+Arrays.+In+Proc.+of+the+19th+International+Conference+on+Computer-Aided+Verification+%28CAV%2707%29+%28Berlin%2C+Germany%29.^^^Patrice Godefroid, Michael Y. Levin, and David A. Molnar. 2008. Automated Whitebox Fuzz Testing. In Proc. of the 15th Network and Distributed System Security Symposium (NDSS\'08) (San Diego, CA, USA).***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Michael+Y.+Levin%2C+and+David+A.+Molnar.+2008.+Automated+Whitebox+Fuzz+Testing.+In+Proc.+of+the+15th+Network+and+Distributed+System+Security+Symposium+%28NDSS%2708%29+%28San+Diego%2C+CA%2C+USA%29.^^^Arie Gurfinkel, Temesghen Kahsai, Anvesh Komuravelli, and Jorge A Navas. 2015. The SeaHorn verification framework. In International Conference on Computer Aided Verification. Springer, 343-361.***http://scholar.google.com/scholar?hl=en&q=Arie+Gurfinkel%2C+Temesghen+Kahsai%2C+Anvesh+Komuravelli%2C+and+Jorge+A+Navas.+2015.+The+SeaHorn+verification+framework.+In+International+Conference+on+Computer+Aided+Verification.+Springer%2C+343-361.^^^Ákos Hajdu and Dejan Jovanović. 2019. solc-verify: A modular verifier for Solidity smart contracts. arXiv preprint arXiv: 1907. 04262 ( 2019 ).***http://scholar.google.com/scholar?hl=en&q=%C3%81kos+Hajdu+and+Dejan+Jovanovi%C4%87.+2019.+solc-verify%3A+A+modular+verifier+for+Solidity+smart+contracts.+arXiv+preprint+arXiv%3A+1907.+04262+%28+2019+%29.^^^Michael Hind. 2001. Pointer Analysis: Haven\'t We Solved This Problem Yet?. In Proc. of the 2nd ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE\'01) (Snowbird, UT, USA).***http://scholar.google.com/scholar?hl=en&q=Michael+Hind.+2001.+Pointer+Analysis%3A+Haven%27t+We+Solved+This+Problem+Yet%3F.+In+Proc.+of+the+2nd+ACM+SIGPLAN-SIGSOFT+Workshop+on+Program+Analysis+for+Software+Tools+and+Engineering+%28PASTE%2701%29+%28Snowbird%2C+UT%2C+USA%29.^^^Wei Jin and Alessandro Orso. 2012. BugRedux: Reproducing Field Failures for In-house Debugging. In Proc. of the 34th International Conference on Software Engineering (ICSE\'12) (Zurich, Switzerland).***http://scholar.google.com/scholar?hl=en&q=Wei+Jin+and+Alessandro+Orso.+2012.+BugRedux%3A+Reproducing+Field+Failures+for+In-house+Debugging.+In+Proc.+of+the+34th+International+Conference+on+Software+Engineering+%28ICSE%2712%29+%28Zurich%2C+Switzerland%29.^^^Timotej Kapus and Cristian Cadar. 2019. A Segmented Memory Model for Symbolic Execution. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering (Tallinn, Estonia) (ESEC/FSE 2019). ACM, 774-784.***http://scholar.google.com/scholar?hl=en&q=Timotej+Kapus+and+Cristian+Cadar.+2019.+A+Segmented+Memory+Model+for+Symbolic+Execution.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28Tallinn%2C+Estonia%29+%28ESEC%2FFSE+2019%29.+ACM%2C+774-784.^^^Chris Lattner, Andrew Lenharth, and Vikram Adve. 2007. Making ContextSensitive Points-to Analysis with Heap Cloning Practical For The Real World. In Proc. of the Conference on Programing Language Design and Implementation (PLDI\'07) (San Diego, CA, USA).***http://scholar.google.com/scholar?hl=en&q=Chris+Lattner%2C+Andrew+Lenharth%2C+and+Vikram+Adve.+2007.+Making+ContextSensitive+Points-to+Analysis+with+Heap+Cloning+Practical+For+The+Real+World.+In+Proc.+of+the+Conference+on+Programing+Language+Design+and+Implementation+%28PLDI%2707%29+%28San+Diego%2C+CA%2C+USA%29.^^^Daniel Liew, Cristian Cadar, Alastair F Donaldson, and J Ryan Stinnett. 2019. Just fuzz it: solving floating-point constraints using coverage-guided fuzzing. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. 521-532.***http://scholar.google.com/scholar?hl=en&q=Daniel+Liew%2C+Cristian+Cadar%2C+Alastair+F+Donaldson%2C+and+J+Ryan+Stinnett.+2019.+Just+fuzz+it%3A+solving+floating-point+constraints+using+coverage-guided+fuzzing.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering.+521-532.^^^Paul Dan Marinescu and Cristian Cadar. 2013. KATCH: High-Coverage Testing of Software Patches. In Proc. of the joint meeting of the European Software Engineering Conference and the ACM Symposium on the Foundations of Software Engineering (ESEC/FSE\'13) (Saint Petersburg, Russia).***http://scholar.google.com/scholar?hl=en&q=Paul+Dan+Marinescu+and+Cristian+Cadar.+2013.+KATCH%3A+High-Coverage+Testing+of+Software+Patches.+In+Proc.+of+the+joint+meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%2713%29+%28Saint+Petersburg%2C+Russia%29.^^^Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: Scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th international conference on software engineering. ACM, 691-701.***http://scholar.google.com/scholar?hl=en&q=Sergey+Mechtaev%2C+Jooyong+Yi%2C+and+Abhik+Roychoudhury.+2016.+Angelix%3A+Scalable+multiline+program+patch+synthesis+via+symbolic+analysis.+In+Proceedings+of+the+38th+international+conference+on+software+engineering.+ACM%2C+691-701.^^^Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chandra. 2013. SemFix: Program Repair via Semantic Analysis. In Proc. of the 35th International Conference on Software Engineering (ICSE\'13) (San Francisco, CA, USA).***http://scholar.google.com/scholar?hl=en&q=Hoang+Duong+Thien+Nguyen%2C+Dawei+Qi%2C+Abhik+Roychoudhury%2C+and+Satish+Chandra.+2013.+SemFix%3A+Program+Repair+via+Semantic+Analysis.+In+Proc.+of+the+35th+International+Conference+on+Software+Engineering+%28ICSE%2713%29+%28San+Francisco%2C+CA%2C+USA%29.^^^Hristina Palikareva and Cristian Cadar. 2013. Multi-solver Support in Symbolic Execution. In Proc. of the 25th International Conference on Computer-Aided Verification (CAV\'13) (Saint Petersburg, Russia).***http://scholar.google.com/scholar?hl=en&q=Hristina+Palikareva+and+Cristian+Cadar.+2013.+Multi-solver+Support+in+Symbolic+Execution.+In+Proc.+of+the+25th+International+Conference+on+Computer-Aided+Verification+%28CAV%2713%29+%28Saint+Petersburg%2C+Russia%29.^^^Corina S. Păsăreanu, Willem Visser, David Bushnell, Jaco Geldenhuys, Peter Mehlitz, and Neha Rungta. 2013. Symbolic PathFinder: integrating symbolic execution with model checking for Java bytecode analysis. (Sept. 2013 ).***http://scholar.google.com/scholar?hl=en&q=Corina+S.+P%C4%83s%C4%83reanu%2C+Willem+Visser%2C+David+Bushnell%2C+Jaco+Geldenhuys%2C+Peter+Mehlitz%2C+and+Neha+Rungta.+2013.+Symbolic+PathFinder%3A+integrating+symbolic+execution+with+model+checking+for+Java+bytecode+analysis.+%28Sept.+2013+%29.^^^David M. Perry, Andrea Mattavelli, Xiangyu Zhang, and Cristian Cadar. 2017. Accelerating Array Constraints in Symbolic Execution. In Proc. of the International Symposium on Software Testing and Analysis (ISSTA\'17) (Santa Barbara, CA, USA).***http://scholar.google.com/scholar?hl=en&q=David+M.+Perry%2C+Andrea+Mattavelli%2C+Xiangyu+Zhang%2C+and+Cristian+Cadar.+2017.+Accelerating+Array+Constraints+in+Symbolic+Execution.+In+Proc.+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2717%29+%28Santa+Barbara%2C+CA%2C+USA%29.^^^David A. Ramos and Dawson Engler. 2015. Under-constrained Symbolic Execution: Correctness Checking for Real Code. In Proc. of the 24th USENIX Security Symposium (USENIX Security\'15) (Washington, D.C., USA).***http://scholar.google.com/scholar?hl=en&q=David+A.+Ramos+and+Dawson+Engler.+2015.+Under-constrained+Symbolic+Execution%3A+Correctness+Checking+for+Real+Code.+In+Proc.+of+the+24th+USENIX+Security+Symposium+%28USENIX+Security%2715%29+%28Washington%2C+D.C.%2C+USA%29.^^^Barbara G. Ryder. 2003. Dimensions of Precision in Reference Analysis of ObjectOriented Programming Languages. In Compiler Construction, Görel Hedin (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 126-137.***http://scholar.google.com/scholar?hl=en&q=Barbara+G.+Ryder.+2003.+Dimensions+of+Precision+in+Reference+Analysis+of+ObjectOriented+Programming+Languages.+In+Compiler+Construction%2C+G%C3%B6rel+Hedin+%28Ed.%29.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+126-137.^^^Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: A Concolic Unit Testing Engine for C. In Proc. of the joint meeting of the European Software Engineering Conference and the ACM Symposium on the Foundations of Software Engineering (ESEC/FSE\'05) (Lisbon, Portugal).***http://scholar.google.com/scholar?hl=en&q=Koushik+Sen%2C+Darko+Marinov%2C+and+Gul+Agha.+2005.+CUTE%3A+A+Concolic+Unit+Testing+Engine+for+C.+In+Proc.+of+the+joint+meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%2705%29+%28Lisbon%2C+Portugal%29.^^^M. Sharir and A. Pnueli. 1981. Two Approaches to Interprocedural Data Flow Analysis. In Program Flow Analysis: Theory and Applications, S.S. Muchnick and N.D. Jones (Eds.). Prentice-Hall, Englewood Clifs, NJ, Chapter 7.***http://scholar.google.com/scholar?hl=en&q=M.+Sharir+and+A.+Pnueli.+1981.+Two+Approaches+to+Interprocedural+Data+Flow+Analysis.+In+Program+Flow+Analysis%3A+Theory+and+Applications%2C+S.S.+Muchnick+and+N.D.+Jones+%28Eds.%29.+Prentice-Hall%2C+Englewood+Clifs%2C+NJ%2C+Chapter+7.^^^Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Ofensive Techniques in Binary Analysis. In Proc. of the IEEE Symposium on Security and Privacy (IEEE S&P\'16) (San Jose, CA, USA).***http://scholar.google.com/scholar?hl=en&q=Yan+Shoshitaishvili%2C+Ruoyu+Wang%2C+Christopher+Salls%2C+Nick+Stephens%2C+Mario+Polino%2C+Audrey+Dutcher%2C+John+Grosen%2C+Siji+Feng%2C+Christophe+Hauser%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+SoK%3A+%28State+of%29+The+Art+of+War%3A+Ofensive+Techniques+in+Binary+Analysis.+In+Proc.+of+the+IEEE+Symposium+on+Security+and+Privacy+%28IEEE+S%26P%2716%29+%28San+Jose%2C+CA%2C+USA%29.^^^Yannis Smaragdakis and George Balatsouras. 2015. Pointer Analysis. Found. Trends Program. Lang. 2, 1 (April 2015 ), 1-69. https://doi.org/10.1561/2500000014 ***http://scholar.google.com/scholar?hl=en&q=Yannis+Smaragdakis+and+George+Balatsouras.+2015.+Pointer+Analysis.+Found.+Trends+Program.+Lang.+2%2C+1+%28April+2015+%29%2C+1-69.+https%3A%2F%2Fdoi.org%2F10.1561%2F2500000014+10.1561%2F2500000014^^^Manu Sridharan, Satish Chandra, Julian Dolby, Stephen J. Fink, and Eran Yahav. 2013. Alias Analysis for Object-Oriented Programs. Springer Berlin Heidelberg, Berlin, Heidelberg, 196-232.***http://scholar.google.com/scholar?hl=en&q=Manu+Sridharan%2C+Satish+Chandra%2C+Julian+Dolby%2C+Stephen+J.+Fink%2C+and+Eran+Yahav.+2013.+Alias+Analysis+for+Object-Oriented+Programs.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+196-232.^^^Bjarne Steensgaard. 1996. Points-to analysis by type inference of programs with structures and unions. In International Conference on Compiler Construction. Springer, 136-150.***http://scholar.google.com/scholar?hl=en&q=Bjarne+Steensgaard.+1996.+Points-to+analysis+by+type+inference+of+programs+with+structures+and+unions.+In+International+Conference+on+Compiler+Construction.+Springer%2C+136-150.^^^B. Steensgaard. 1996. Points-to analysis in almost-linear time. In Principles of Programming Languages (POPL).***http://scholar.google.com/scholar?hl=en&q=B.+Steensgaard.+1996.+Points-to+analysis+in+almost-linear+time.+In+Principles+of+Programming+Languages+%28POPL%29.^^^Willem Visser, Jaco Geldenhuys, and Matthew B. Dwyer. 2012. Green: reducing, reusing and recycling constraints in program analysis. In Proc. of the ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE\'12) (Cary, NC, USA).***http://scholar.google.com/scholar?hl=en&q=Willem+Visser%2C+Jaco+Geldenhuys%2C+and+Matthew+B.+Dwyer.+2012.+Green%3A+reducing%2C+reusing+and+recycling+constraints+in+program+analysis.+In+Proc.+of+the+ACM+SIGSOFT+Symposium+on+the+Foundations+of+Software+Engineering+%28FSE%2712%29+%28Cary%2C+NC%2C+USA%29.^^^Guowei Yang, Corina S. Păsăreanu, and Sarfraz Khurshid. 2012. Memoized symbolic execution. In Proc. of the International Symposium on Software Testing and Analysis (ISSTA\'12) (Minneapolis, MN, USA).***http://scholar.google.com/scholar?hl=en&q=Guowei+Yang%2C+Corina+S.+P%C4%83s%C4%83reanu%2C+and+Sarfraz+Khurshid.+2012.+Memoized+symbolic+execution.+In+Proc.+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2712%29+%28Minneapolis%2C+MN%2C+USA%29.^^^');
INSERT INTO `paper_ref` VALUES (49, 57, 'B. Anand, K. Thirugnanam, J. Sebastian, P. G. Kannan, A. L. Ananda, M. C. Chan, and R. K. Balan. Adaptive display power management for mobile games. In Proceedings of the 9th International Conference on Mobile Systems, Applications, and Services, MobiSys \'11, pages 57-70, New York, NY, USA, 2011. ACM.***http://scholar.google.com/scholar?hl=en&q=B.+Anand%2C+K.+Thirugnanam%2C+J.+Sebastian%2C+P.+G.+Kannan%2C+A.+L.+Ananda%2C+M.+C.+Chan%2C+and+R.+K.+Balan.+Adaptive+display+power+management+for+mobile+games.+In+Proceedings+of+the+9th+International+Conference+on+Mobile+Systems%2C+Applications%2C+and+Services%2C+MobiSys+%2711%2C+pages+57-70%2C+New+York%2C+NY%2C+USA%2C+2011.+ACM.^^^A. Banerjee, L. K. Chong, S. Chattopadhyay, and A. Roychoudhury. Detecting energy bugs and hotspots in mobile apps. In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2014, pages 588-598, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Banerjee%2C+L.+K.+Chong%2C+S.+Chattopadhyay%2C+and+A.+Roychoudhury.+Detecting+energy+bugs+and+hotspots+in+mobile+apps.+In+Proceedings+of+the+22Nd+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering%2C+FSE+2014%2C+pages+588-598%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^B. R. Bruce, J. Petke, and M. Harman. Reducing energy consumption using genetic improvement. In Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation, GECCO \'15, pages 1327-1334, New York, NY, USA, 2015. ACM.***http://scholar.google.com/scholar?hl=en&q=B.+R.+Bruce%2C+J.+Petke%2C+and+M.+Harman.+Reducing+energy+consumption+using+genetic+improvement.+In+Proceedings+of+the+2015+Annual+Conference+on+Genetic+and+Evolutionary+Computation%2C+GECCO+%2715%2C+pages+1327-1334%2C+New+York%2C+NY%2C+USA%2C+2015.+ACM.^^^D. H. Bui, Y. Liu, H. Kim, I. Shin, and F. Zhao. Rethinking energy-performance trade-of in mobile web page loading. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking, MobiCom \'15, pages 14-26, New York, NY, USA, 2015. ACM.***http://scholar.google.com/scholar?hl=en&q=D.+H.+Bui%2C+Y.+Liu%2C+H.+Kim%2C+I.+Shin%2C+and+F.+Zhao.+Rethinking+energy-performance+trade-of+in+mobile+web+page+loading.+In+Proceedings+of+the+21st+Annual+International+Conference+on+Mobile+Computing+and+Networking%2C+MobiCom+%2715%2C+pages+14-26%2C+New+York%2C+NY%2C+USA%2C+2015.+ACM.^^^X. Chen, A. Jindal, N. Ding, Y. C. Hu, M. Gupta, and R. Vannithamby. Smartphone background activities in the wild: Origin, energy drain, and optimization. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking, MobiCom \'15, pages 40-52, New York, NY, USA, 2015. ACM.***http://scholar.google.com/scholar?hl=en&q=X.+Chen%2C+A.+Jindal%2C+N.+Ding%2C+Y.+C.+Hu%2C+M.+Gupta%2C+and+R.+Vannithamby.+Smartphone+background+activities+in+the+wild%3A+Origin%2C+energy+drain%2C+and+optimization.+In+Proceedings+of+the+21st+Annual+International+Conference+on+Mobile+Computing+and+Networking%2C+MobiCom+%2715%2C+pages+40-52%2C+New+York%2C+NY%2C+USA%2C+2015.+ACM.^^^C. Chiasserini and R. Rao. Improving battery performance by using trafic shaping techniques. Selected Areas in Communications, IEEE Journal on, 19 ( 7 ): 1385-1394, Jul 2001.***http://scholar.google.com/scholar?hl=en&q=C.+Chiasserini+and+R.+Rao.+Improving+battery+performance+by+using+trafic+shaping+techniques.+Selected+Areas+in+Communications%2C+IEEE+Journal+on%2C+19+%28+7+%29%3A+1385-1394%2C+Jul+2001.^^^V. Devadas and H. Aydin. On the interplay of voltage/frequency scaling and device power management for frame-based real-time embedded applications. IEEE Transactions on Computers, 61 ( 1 ): 31-44, Jan 2012.***http://scholar.google.com/scholar?hl=en&q=V.+Devadas+and+H.+Aydin.+On+the+interplay+of+voltage%2Ffrequency+scaling+and+device+power+management+for+frame-based+real-time+embedded+applications.+IEEE+Transactions+on+Computers%2C+61+%28+1+%29%3A+31-44%2C+Jan+2012.^^^M. Ester, H.-P. Kriegel, J. Sander, and X. Xu. A density-based algorithm for discovering clusters a density-based algorithm for discovering clusters in large spatial databases with noise. In Proceedings of the Second International Conference on Knowledge Discovery and Data Mining, KDD\'96, pages 226-231. AAAI Press, 1996.***http://scholar.google.com/scholar?hl=en&q=M.+Ester%2C+H.-P.+Kriegel%2C+J.+Sander%2C+and+X.+Xu.+A+density-based+algorithm+for+discovering+clusters+a+density-based+algorithm+for+discovering+clusters+in+large+spatial+databases+with+noise.+In+Proceedings+of+the+Second+International+Conference+on+Knowledge+Discovery+and+Data+Mining%2C+KDD%2796%2C+pages+226-231.+AAAI+Press%2C+1996.^^^N. Goulding-Hotta, J. Sampson, G. Venkatesh, S. Garcia, J. Auricchio, P. Huang, M. Arora, S. Nath, V. Bhatt, J. Babb, S. Swanson, and M. Taylor. The GreenDroid mobile application processor: An architecture for silicon\'s dark future. Micro, IEEE, 31 ( 2 ): 86-95, March 2011.***http://scholar.google.com/scholar?hl=en&q=N.+Goulding-Hotta%2C+J.+Sampson%2C+G.+Venkatesh%2C+S.+Garcia%2C+J.+Auricchio%2C+P.+Huang%2C+M.+Arora%2C+S.+Nath%2C+V.+Bhatt%2C+J.+Babb%2C+S.+Swanson%2C+and+M.+Taylor.+The+GreenDroid+mobile+application+processor%3A+An+architecture+for+silicon%27s+dark+future.+Micro%2C+IEEE%2C+31+%28+2+%29%3A+86-95%2C+March+2011.^^^M. Halpern, Y. Zhu, and V. J. Reddi. Mobile cpu\'s rise to power: Quantifying the impact of generational mobile cpu design trends on performance, energy, and user satisfaction. In 2016 IEEE International Symposium on High Performance Computer Architecture (HPCA), pages 64-76, 2016.***http://scholar.google.com/scholar?hl=en&q=M.+Halpern%2C+Y.+Zhu%2C+and+V.+J.+Reddi.+Mobile+cpu%27s+rise+to+power%3A+Quantifying+the+impact+of+generational+mobile+cpu+design+trends+on+performance%2C+energy%2C+and+user+satisfaction.+In+2016+IEEE+International+Symposium+on+High+Performance+Computer+Architecture+%28HPCA%29%2C+pages+64-76%2C+2016.^^^S. Hao, D. Li, W. G. J. Halfond, and R. Govindan. Estimating mobile application energy consumption using program analysis. In Proceedings of the 2013 International Conference on Software Engineering, ICSE \' 13, pages 92-101, Piscataway, NJ, USA, 2013. IEEE Press.***http://scholar.google.com/scholar?hl=en&q=S.+Hao%2C+D.+Li%2C+W.+G.+J.+Halfond%2C+and+R.+Govindan.+Estimating+mobile+application+energy+consumption+using+program+analysis.+In+Proceedings+of+the+2013+International+Conference+on+Software+Engineering%2C+ICSE+%27+13%2C+pages+92-101%2C+Piscataway%2C+NJ%2C+USA%2C+2013.+IEEE+Press.^^^S. He, Y. Liu, and H. Zhou. Optimizing smartphone power consumption through dynamic resolution scaling. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking, MobiCom \'15, pages 27-39, New York, NY, USA, 2015. ACM.***http://scholar.google.com/scholar?hl=en&q=S.+He%2C+Y.+Liu%2C+and+H.+Zhou.+Optimizing+smartphone+power+consumption+through+dynamic+resolution+scaling.+In+Proceedings+of+the+21st+Annual+International+Conference+on+Mobile+Computing+and+Networking%2C+MobiCom+%2715%2C+pages+27-39%2C+New+York%2C+NY%2C+USA%2C+2015.+ACM.^^^C. Hwang, S. Pushp, C. Koh, J. Yoon, Y. Liu, S. Choi, and J. Song. Raven: Perceptionaware optimization of power consumption for mobile games. In Proceedings of the 23rd Annual International Conference on Mobile Computing and Networking, MobiCom \'17, pages 422-434, New York, NY, USA, 2017. ACM.***http://scholar.google.com/scholar?hl=en&q=C.+Hwang%2C+S.+Pushp%2C+C.+Koh%2C+J.+Yoon%2C+Y.+Liu%2C+S.+Choi%2C+and+J.+Song.+Raven%3A+Perceptionaware+optimization+of+power+consumption+for+mobile+games.+In+Proceedings+of+the+23rd+Annual+International+Conference+on+Mobile+Computing+and+Networking%2C+MobiCom+%2717%2C+pages+422-434%2C+New+York%2C+NY%2C+USA%2C+2017.+ACM.^^^A. Iranli and M. Pedram. DTM: Dynamic tone mapping for backlight scaling. In Proceedings of the 42Nd Annual Design Automation Conference, DAC \'05, pages 612-617, New York, NY, USA, 2005. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Iranli+and+M.+Pedram.+DTM%3A+Dynamic+tone+mapping+for+backlight+scaling.+In+Proceedings+of+the+42Nd+Annual+Design+Automation+Conference%2C+DAC+%2705%2C+pages+612-617%2C+New+York%2C+NY%2C+USA%2C+2005.+ACM.^^^R. Jabbarvand, J.-W. Lin, and S. Malek. Search-based energy testing of android. In Proceedings of the 41st International Conference on Software Engineering, ICSE \' 19, pages 1119-1130. IEEE Press, 2019.***http://scholar.google.com/scholar?hl=en&q=R.+Jabbarvand%2C+J.-W.+Lin%2C+and+S.+Malek.+Search-based+energy+testing+of+android.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+ICSE+%27+19%2C+pages+1119-1130.+IEEE+Press%2C+2019.^^^R. Jabbarvand and S. Malek. Mdroid: An energy-aware mutation testing framework for android. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2017, pages 208-219, New York, NY, USA, 2017. Association for Computing Machinery.***http://scholar.google.com/scholar?hl=en&q=R.+Jabbarvand+and+S.+Malek.+Mdroid%3A+An+energy-aware+mutation+testing+framework+for+android.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE+2017%2C+pages+208-219%2C+New+York%2C+NY%2C+USA%2C+2017.+Association+for+Computing+Machinery.^^^G. Jin, L. Song, X. Shi, J. Scherpelz, and S. Lu. Understanding and detecting realworld performance bugs. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI \' 12, pages 77-88, New York, NY, USA, 2012. ACM.***http://scholar.google.com/scholar?hl=en&q=G.+Jin%2C+L.+Song%2C+X.+Shi%2C+J.+Scherpelz%2C+and+S.+Lu.+Understanding+and+detecting+realworld+performance+bugs.+In+Proceedings+of+the+33rd+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%2C+PLDI+%27+12%2C+pages+77-88%2C+New+York%2C+NY%2C+USA%2C+2012.+ACM.^^^A. Kansal, F. Zhao, J. Liu, N. Kothari, and A. A. Bhattacharya. Virtual machine power metering and provisioning. In Proceedings of the 1st ACM Symposium on Cloud Computing, SoCC \'10, pages 39-50, New York, NY, USA, 2010. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Kansal%2C+F.+Zhao%2C+J.+Liu%2C+N.+Kothari%2C+and+A.+A.+Bhattacharya.+Virtual+machine+power+metering+and+provisioning.+In+Proceedings+of+the+1st+ACM+Symposium+on+Cloud+Computing%2C+SoCC+%2710%2C+pages+39-50%2C+New+York%2C+NY%2C+USA%2C+2010.+ACM.^^^J. Koo, K. Lee, W. Lee, Y. Park, and S. Choi. Batttracker: Enabling energy awareness for smartphone using li-ion battery characteristics. In IEEE INFOCOM 2016-The 35th Annual IEEE International Conference on Computer Communications, pages 1-9, April 2016.***http://scholar.google.com/scholar?hl=en&q=J.+Koo%2C+K.+Lee%2C+W.+Lee%2C+Y.+Park%2C+and+S.+Choi.+Batttracker%3A+Enabling+energy+awareness+for+smartphone+using+li-ion+battery+characteristics.+In+IEEE+INFOCOM+2016-The+35th+Annual+IEEE+International+Conference+on+Computer+Communications%2C+pages+1-9%2C+April+2016.^^^K. Kumar and Y. Lu. Cloud computing for mobile users: Can ofloading computation save energy? Computer, 43 ( 4 ): 51-56, April 2010.***http://scholar.google.com/scholar?hl=en&q=K.+Kumar+and+Y.+Lu.+Cloud+computing+for+mobile+users%3A+Can+ofloading+computation+save+energy%3F+Computer%2C+43+%28+4+%29%3A+51-56%2C+April+2010.^^^S. Lee, C. Yoon, and H. Cha. User interaction-based profiling system for android application tuning. In Proceedings of the 2014 ACM International Joint Conference on Pervasive and Ubiquitous Computing, UbiComp \'14, pages 289-299, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=S.+Lee%2C+C.+Yoon%2C+and+H.+Cha.+User+interaction-based+profiling+system+for+android+application+tuning.+In+Proceedings+of+the+2014+ACM+International+Joint+Conference+on+Pervasive+and+Ubiquitous+Computing%2C+UbiComp+%2714%2C+pages+289-299%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^D. Li and W. G. J. Halfond. An investigation into energy-saving programming practices for android smartphone app development. In Proceedings of the 3rd International Workshop on Green and Sustainable Software, GREENS 2014, pages 46-53, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=D.+Li+and+W.+G.+J.+Halfond.+An+investigation+into+energy-saving+programming+practices+for+android+smartphone+app+development.+In+Proceedings+of+the+3rd+International+Workshop+on+Green+and+Sustainable+Software%2C+GREENS+2014%2C+pages+46-53%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^D. Li, S. Hao, W. G. J. Halfond, and R. Govindan. Calculating source line level energy information for Android applications. In Proceedings of the 2013 International Symposium on Software Testing and Analysis, ISSTA 2013, pages 78-89, New York, NY, USA, 2013. ACM.***http://scholar.google.com/scholar?hl=en&q=D.+Li%2C+S.+Hao%2C+W.+G.+J.+Halfond%2C+and+R.+Govindan.+Calculating+source+line+level+energy+information+for+Android+applications.+In+Proceedings+of+the+2013+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2013%2C+pages+78-89%2C+New+York%2C+NY%2C+USA%2C+2013.+ACM.^^^L. Li, T. F. Bissyandé, H. Wang, and J. Klein. Cid: Automating the detection of api-related compatibility issues in android apps. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, pages 153-163, New York, NY, USA, 2018. ACM.***http://scholar.google.com/scholar?hl=en&q=L.+Li%2C+T.+F.+Bissyand%C3%A9%2C+H.+Wang%2C+and+J.+Klein.+Cid%3A+Automating+the+detection+of+api-related+compatibility+issues+in+android+apps.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2018%2C+pages+153-163%2C+New+York%2C+NY%2C+USA%2C+2018.+ACM.^^^X. Li, G. Chen, and W. Wen. Energy-eficient execution for repetitive app usages on big.little architectures. In Proceedings of the 54th Annual Design Automation Conference 2017, DAC \' 17, pages 44 : 1-44 : 6, New York, NY, USA, 2017. ACM.***http://scholar.google.com/scholar?hl=en&q=X.+Li%2C+G.+Chen%2C+and+W.+Wen.+Energy-eficient+execution+for+repetitive+app+usages+on+big.little+architectures.+In+Proceedings+of+the+54th+Annual+Design+Automation+Conference+2017%2C+DAC+%27+17%2C+pages+44+%3A+1-44+%3A+6%2C+New+York%2C+NY%2C+USA%2C+2017.+ACM.^^^X. Li and J. P. Gallagher. A source-level energy optimization framework for mobile applications. In 2016 IEEE 16th International Working Conference on Source Code Analysis and Manipulation (SCAM), pages 31-40, Oct 2016.***http://scholar.google.com/scholar?hl=en&q=X.+Li+and+J.+P.+Gallagher.+A+source-level+energy+optimization+framework+for+mobile+applications.+In+2016+IEEE+16th+International+Working+Conference+on+Source+Code+Analysis+and+Manipulation+%28SCAM%29%2C+pages+31-40%2C+Oct+2016.^^^F. X. Lin, Z. Wang, R. LiKamWa, and L. Zhong. Reflex: Using low-power processors in smartphones without knowing them. SIGPLAN Not., 47 ( 4 ): 13-24, Mar. 2012.***http://scholar.google.com/scholar?hl=en&q=F.+X.+Lin%2C+Z.+Wang%2C+R.+LiKamWa%2C+and+L.+Zhong.+Reflex%3A+Using+low-power+processors+in+smartphones+without+knowing+them.+SIGPLAN+Not.%2C+47+%28+4+%29%3A+13-24%2C+Mar.+2012.^^^J. Liu and L. Zhong. Micro power management of active 802.11 interfaces. In Proceedings of the 6th International Conference on Mobile Systems, Applications, and Services, MobiSys \'08, pages 146-159, New York, NY, USA, 2008. ACM.***http://scholar.google.com/scholar?hl=en&q=J.+Liu+and+L.+Zhong.+Micro+power+management+of+active+802.11+interfaces.+In+Proceedings+of+the+6th+International+Conference+on+Mobile+Systems%2C+Applications%2C+and+Services%2C+MobiSys+%2708%2C+pages+146-159%2C+New+York%2C+NY%2C+USA%2C+2008.+ACM.^^^Y. Liu, C. Xu, S. Cheung, and V. Terragni. Understanding and detecting wake lock misuses for android applications. In Proceedings of the 24th ACM SIGSOFT International Symposium on the Foundations of Software Engineering, FSE 2016, 2016.***http://scholar.google.com/scholar?hl=en&q=Y.+Liu%2C+C.+Xu%2C+S.+Cheung%2C+and+V.+Terragni.+Understanding+and+detecting+wake+lock+misuses+for+android+applications.+In+Proceedings+of+the+24th+ACM+SIGSOFT+International+Symposium+on+the+Foundations+of+Software+Engineering%2C+FSE+2016%2C+2016.^^^Y. Liu, C. Xu, and S.-C. Cheung. Characterizing and detecting performance bugs for smartphone applications. In Proceedings of the 36th International Conference on Software Engineering, ICSE 2014, pages 1013-1024, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=Y.+Liu%2C+C.+Xu%2C+and+S.-C.+Cheung.+Characterizing+and+detecting+performance+bugs+for+smartphone+applications.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering%2C+ICSE+2014%2C+pages+1013-1024%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^Y. Liu, C. Xu, S. C. Cheung, and J. LÃĳ. Greendroid: Automated diagnosis of energy ineficiency for smartphone applications. IEEE Transactions on Software Engineering, 40 ( 9 ): 911-940, Sep. 2014.***http://scholar.google.com/scholar?hl=en&q=Y.+Liu%2C+C.+Xu%2C+S.+C.+Cheung%2C+and+J.+L%C3%83%C4%B3.+Greendroid%3A+Automated+diagnosis+of+energy+ineficiency+for+smartphone+applications.+IEEE+Transactions+on+Software+Engineering%2C+40+%28+9+%29%3A+911-940%2C+Sep.+2014.^^^X. Ma, P. Huang, X. Jin, P. Wang, S. Park, D. Shen, Y. Zhou, L. K. Saul, and G. M. Voelker. edoctor: Automatically diagnosing abnormal battery drain issues on smartphones. In Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13), pages 57-70, Lombard, IL, 2013. USENIX.***http://scholar.google.com/scholar?hl=en&q=X.+Ma%2C+P.+Huang%2C+X.+Jin%2C+P.+Wang%2C+S.+Park%2C+D.+Shen%2C+Y.+Zhou%2C+L.+K.+Saul%2C+and+G.+M.+Voelker.+edoctor%3A+Automatically+diagnosing+abnormal+battery+drain+issues+on+smartphones.+In+Presented+as+part+of+the+10th+USENIX+Symposium+on+Networked+Systems+Design+and+Implementation+%28NSDI+13%29%2C+pages+57-70%2C+Lombard%2C+IL%2C+2013.+USENIX.^^^A. Mallik, J. Cosgrove, R. P. Dick, G. Memik, and P. Dinda. Picsel: Measuring user-perceived performance to control dynamic frequency scaling. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XIII, pages 70-79, New York, NY, USA, 2008. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Mallik%2C+J.+Cosgrove%2C+R.+P.+Dick%2C+G.+Memik%2C+and+P.+Dinda.+Picsel%3A+Measuring+user-perceived+performance+to+control+dynamic+frequency+scaling.+In+Proceedings+of+the+13th+International+Conference+on+Architectural+Support+for+Programming+Languages+and+Operating+Systems%2C+ASPLOS+XIII%2C+pages+70-79%2C+New+York%2C+NY%2C+USA%2C+2008.+ACM.^^^I. Manotas, L. Pollock, and J. Clause. Seeds: A software engineer\'s energyoptimization decision support framework. In Proceedings of the 36th International Conference on Software Engineering, ICSE 2014, pages 503-514, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=I.+Manotas%2C+L.+Pollock%2C+and+J.+Clause.+Seeds%3A+A+software+engineer%27s+energyoptimization+decision+support+framework.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering%2C+ICSE+2014%2C+pages+503-514%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^M. Martins, J. Cappos, and R. Fonseca. Selectively taming background android apps to improve battery lifetime. In 2015 USENIX Annual Technical Conference (USENIX ATC 15), pages 563-575, Santa Clara, CA, 2015. USENIX Association.***http://scholar.google.com/scholar?hl=en&q=M.+Martins%2C+J.+Cappos%2C+and+R.+Fonseca.+Selectively+taming+background+android+apps+to+improve+battery+lifetime.+In+2015+USENIX+Annual+Technical+Conference+%28USENIX+ATC+15%29%2C+pages+563-575%2C+Santa+Clara%2C+CA%2C+2015.+USENIX+Association.^^^A. Memon, I. Banerjee, and A. Nagarajan. Gui ripping: reverse engineering of graphical user interfaces for testing. In 10th Working Conference on Reverse Engineering, 2003. WCRE 2003. Proceedings., pages 260-269, Nov 2003.***http://scholar.google.com/scholar?hl=en&q=A.+Memon%2C+I.+Banerjee%2C+and+A.+Nagarajan.+Gui+ripping%3A+reverse+engineering+of+graphical+user+interfaces+for+testing.+In+10th+Working+Conference+on+Reverse+Engineering%2C+2003.+WCRE+2003.+Proceedings.%2C+pages+260-269%2C+Nov+2003.^^^A. Nistor, T. Jiang, and L. Tan. Discovering, reporting, and fixing performance bugs. In Proceedings of the 10th Working Conference on Mining Software Repositories, MSR \'13, pages 237-246, Piscataway, NJ, USA, 2013. IEEE Press.***http://scholar.google.com/scholar?hl=en&q=A.+Nistor%2C+T.+Jiang%2C+and+L.+Tan.+Discovering%2C+reporting%2C+and+fixing+performance+bugs.+In+Proceedings+of+the+10th+Working+Conference+on+Mining+Software+Repositories%2C+MSR+%2713%2C+pages+237-246%2C+Piscataway%2C+NJ%2C+USA%2C+2013.+IEEE+Press.^^^A. Nistor and L. Ravindranath. Suncat: Helping developers understand and predict performance problems in smartphone applications. In Proceedings of the 2014 International Symposium on Software Testing and Analysis, ISSTA 2014, pages 282-292, New York, NY, USA, 2014. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Nistor+and+L.+Ravindranath.+Suncat%3A+Helping+developers+understand+and+predict+performance+problems+in+smartphone+applications.+In+Proceedings+of+the+2014+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2014%2C+pages+282-292%2C+New+York%2C+NY%2C+USA%2C+2014.+ACM.^^^A. Pathak, Y. C. Hu, and M. Zhang. Bootstrapping energy debugging on smartphones: A first look at energy bugs in mobile devices. In Proceedings of the 10th ACM Workshop on Hot Topics in Networks, HotNets-X, pages 5 : 1-5 : 6, New York, NY, USA, 2011. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Pathak%2C+Y.+C.+Hu%2C+and+M.+Zhang.+Bootstrapping+energy+debugging+on+smartphones%3A+A+first+look+at+energy+bugs+in+mobile+devices.+In+Proceedings+of+the+10th+ACM+Workshop+on+Hot+Topics+in+Networks%2C+HotNets-X%2C+pages+5+%3A+1-5+%3A+6%2C+New+York%2C+NY%2C+USA%2C+2011.+ACM.^^^A. Pathak, Y. C. Hu, and M. Zhang. Where is the energy spent inside my app?: Fine grained energy accounting on smartphones with Eprof. In Proceedings of the 7th ACM European Conference on Computer Systems, EuroSys \' 12, pages 29-42, New York, NY, USA, 2012. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Pathak%2C+Y.+C.+Hu%2C+and+M.+Zhang.+Where+is+the+energy+spent+inside+my+app%3F%3A+Fine+grained+energy+accounting+on+smartphones+with+Eprof.+In+Proceedings+of+the+7th+ACM+European+Conference+on+Computer+Systems%2C+EuroSys+%27+12%2C+pages+29-42%2C+New+York%2C+NY%2C+USA%2C+2012.+ACM.^^^A. Pathania, Q. Jiao, A. Prakash, and T. Mitra. Integrated cpu-gpu power management for 3d mobile games. In Proceedings of the 51st Annual Design Automation Conference on, pages 1-6, 2014.***http://scholar.google.com/scholar?hl=en&q=A.+Pathania%2C+Q.+Jiao%2C+A.+Prakash%2C+and+T.+Mitra.+Integrated+cpu-gpu+power+management+for+3d+mobile+games.+In+Proceedings+of+the+51st+Annual+Design+Automation+Conference+on%2C+pages+1-6%2C+2014.^^^C. Poellabauer and K. Schwan. Energy-aware trafic shaping for wireless real-time applications. In Real-Time and Embedded Technology and Applications Symposium, 2004. Proceedings. RTAS 2004. 10th IEEE, pages 48-55, May 2004.***http://scholar.google.com/scholar?hl=en&q=C.+Poellabauer+and+K.+Schwan.+Energy-aware+trafic+shaping+for+wireless+real-time+applications.+In+Real-Time+and+Embedded+Technology+and+Applications+Symposium%2C+2004.+Proceedings.+RTAS+2004.+10th+IEEE%2C+pages+48-55%2C+May+2004.^^^L. Qiu, Y. Wang, and J. Rubin. Analyzing the analyzers: Flowdroid/iccta, amandroid, and droidsafe. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, pages 176-186, New York, NY, USA, 2018. ACM.***http://scholar.google.com/scholar?hl=en&q=L.+Qiu%2C+Y.+Wang%2C+and+J.+Rubin.+Analyzing+the+analyzers%3A+Flowdroid%2Ficcta%2C+amandroid%2C+and+droidsafe.+In+Proceedings+of+the+27th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2018%2C+pages+176-186%2C+New+York%2C+NY%2C+USA%2C+2018.+ACM.^^^L. Ravindranath, J. Padhye, S. Agarwal, R. Mahajan, I. Obermiller, and S. Shayandeh. Appinsight: Mobile app performance monitoring in the wild. In Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, OSDI\' 12, pages 107-120, Berkeley, CA, USA, 2012. USENIX Association.***http://scholar.google.com/scholar?hl=en&q=L.+Ravindranath%2C+J.+Padhye%2C+S.+Agarwal%2C+R.+Mahajan%2C+I.+Obermiller%2C+and+S.+Shayandeh.+Appinsight%3A+Mobile+app+performance+monitoring+in+the+wild.+In+Proceedings+of+the+10th+USENIX+Conference+on+Operating+Systems+Design+and+Implementation%2C+OSDI%27+12%2C+pages+107-120%2C+Berkeley%2C+CA%2C+USA%2C+2012.+USENIX+Association.^^^A. Sehati and M. Ghaderi. Energy-delay tradeof for request bundling on smartphones. In IEEE INFOCOM 2017-IEEE Conference on Computer Communications, pages 1-9, May 2017.***http://scholar.google.com/scholar?hl=en&q=A.+Sehati+and+M.+Ghaderi.+Energy-delay+tradeof+for+request+bundling+on+smartphones.+In+IEEE+INFOCOM+2017-IEEE+Conference+on+Computer+Communications%2C+pages+1-9%2C+May+2017.^^^A. Shye, B. Scholbrock, and G. Memik. Into the wild: Studying real user activity patterns to guide power optimizations for mobile architectures. In Proceedings of the 42Nd Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 42, pages 168-178, New York, NY, USA, 2009. ACM.***http://scholar.google.com/scholar?hl=en&q=A.+Shye%2C+B.+Scholbrock%2C+and+G.+Memik.+Into+the+wild%3A+Studying+real+user+activity+patterns+to+guide+power+optimizations+for+mobile+architectures.+In+Proceedings+of+the+42Nd+Annual+IEEE%2FACM+International+Symposium+on+Microarchitecture%2C+MICRO+42%2C+pages+168-178%2C+New+York%2C+NY%2C+USA%2C+2009.+ACM.^^^J. Sorber, N. Banerjee, M. D. Corner, and S. Rollins. Turducken: Hierarchical power management for mobile devices. In Proceedings of the 3rd International Conference on Mobile Systems, Applications, and Services, MobiSys \'05, pages 261-274, New York, NY, USA, 2005. ACM.***http://scholar.google.com/scholar?hl=en&q=J.+Sorber%2C+N.+Banerjee%2C+M.+D.+Corner%2C+and+S.+Rollins.+Turducken%3A+Hierarchical+power+management+for+mobile+devices.+In+Proceedings+of+the+3rd+International+Conference+on+Mobile+Systems%2C+Applications%2C+and+Services%2C+MobiSys+%2705%2C+pages+261-274%2C+New+York%2C+NY%2C+USA%2C+2005.+ACM.^^^K. Sucipto, D. Chatzopoulos, S. KostaÂś, and P. Hui. Keep your nice friends close, but your rich friends closer âĂŤ computation ofloading using nfc. In IEEE INFOCOM 2017-IEEE Conference on Computer Communications, pages 1-9, May 2017.***http://scholar.google.com/scholar?hl=en&q=K.+Sucipto%2C+D.+Chatzopoulos%2C+S.+Kosta%C3%82%C5%9B%2C+and+P.+Hui.+Keep+your+nice+friends+close%2C+but+your+rich+friends+closer+%C3%A2%C4%82%C5%A4+computation+ofloading+using+nfc.+In+IEEE+INFOCOM+2017-IEEE+Conference+on+Computer+Communications%2C+pages+1-9%2C+May+2017.^^^T. Tuan, S. Kao, A. Rahman, S. Das, and S. Trimberger. A 90nm low-power FPGA for battery-powered applications. In Proceedings of the 2006 ACM/SIGDA 14th International Symposium on Field Programmable Gate Arrays, FPGA \'06, pages 3-11, New York, NY, USA, 2006. ACM.***http://scholar.google.com/scholar?hl=en&q=T.+Tuan%2C+S.+Kao%2C+A.+Rahman%2C+S.+Das%2C+and+S.+Trimberger.+A+90nm+low-power+FPGA+for+battery-powered+applications.+In+Proceedings+of+the+2006+ACM%2FSIGDA+14th+International+Symposium+on+Field+Programmable+Gate+Arrays%2C+FPGA+%2706%2C+pages+3-11%2C+New+York%2C+NY%2C+USA%2C+2006.+ACM.^^^L. Wang, M. French, A. Davoodi, and D. Agarwal. FPGA dynamic power minimization through placement and routing constraints. EURASIP J. Embedded Syst., 2006 (1): 7-7, Jan. 2006.***http://scholar.google.com/scholar?hl=en&q=L.+Wang%2C+M.+French%2C+A.+Davoodi%2C+and+D.+Agarwal.+FPGA+dynamic+power+minimization+through+placement+and+routing+constraints.+EURASIP+J.+Embedded+Syst.%2C+2006+%281%29%3A+7-7%2C+Jan.+2006.^^^F. Xu, Y. Liu, Q. Li, and Y. Zhang. V-edge: Fast self-constructive power modeling of smartphones based on battery voltage dynamics. In Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13), pages 43-55, Lombard, IL, 2013. USENIX.***http://scholar.google.com/scholar?hl=en&q=F.+Xu%2C+Y.+Liu%2C+Q.+Li%2C+and+Y.+Zhang.+V-edge%3A+Fast+self-constructive+power+modeling+of+smartphones+based+on+battery+voltage+dynamics.+In+Presented+as+part+of+the+10th+USENIX+Symposium+on+Networked+Systems+Design+and+Implementation+%28NSDI+13%29%2C+pages+43-55%2C+Lombard%2C+IL%2C+2013.+USENIX.^^^H. Yamamoto, T. Hirano, K. Muto, H. Mikami, T. Goto, D. Hillenbrand, M. Takamura, K. Kimura, and H. Kasahara. Oscar compiler controlled multicore power reduction on android platform. In Languages and Compilers for Parallel Computing, pages 155-168, Cham, 2014. Springer International Publishing.***http://scholar.google.com/scholar?hl=en&q=H.+Yamamoto%2C+T.+Hirano%2C+K.+Muto%2C+H.+Mikami%2C+T.+Goto%2C+D.+Hillenbrand%2C+M.+Takamura%2C+K.+Kimura%2C+and+H.+Kasahara.+Oscar+compiler+controlled+multicore+power+reduction+on+android+platform.+In+Languages+and+Compilers+for+Parallel+Computing%2C+pages+155-168%2C+Cham%2C+2014.+Springer+International+Publishing.^^^Z. Yan and C. W. Chen. Rnb: Rate and brightness adaptation for rate-distortionenergy tradeof in http adaptive streaming over mobile devices. In Proceedings of the 22Nd Annual International Conference on Mobile Computing and Networking, MobiCom \'16, pages 308-319, New York, NY, USA, 2016. ACM.***http://scholar.google.com/scholar?hl=en&q=Z.+Yan+and+C.+W.+Chen.+Rnb%3A+Rate+and+brightness+adaptation+for+rate-distortionenergy+tradeof+in+http+adaptive+streaming+over+mobile+devices.+In+Proceedings+of+the+22Nd+Annual+International+Conference+on+Mobile+Computing+and+Networking%2C+MobiCom+%2716%2C+pages+308-319%2C+New+York%2C+NY%2C+USA%2C+2016.+ACM.^^^C. Yoon, D. Kim, W. Jung, C. Kang, and H. Cha. Appscope: Application energy metering framework for android smartphones using kernel activity monitoring. In Proceedings of the 2012 USENIX Conference on Annual Technical Conference, USENIX ATC\' 12, pages 36-36, Berkeley, CA, USA, 2012. USENIX Association.***http://scholar.google.com/scholar?hl=en&q=C.+Yoon%2C+D.+Kim%2C+W.+Jung%2C+C.+Kang%2C+and+H.+Cha.+Appscope%3A+Application+energy+metering+framework+for+android+smartphones+using+kernel+activity+monitoring.+In+Proceedings+of+the+2012+USENIX+Conference+on+Annual+Technical+Conference%2C+USENIX+ATC%27+12%2C+pages+36-36%2C+Berkeley%2C+CA%2C+USA%2C+2012.+USENIX+Association.^^^S. Zaman, B. Adams, and A. E. Hassan. A qualitative study on performance bugs. In Proceedings of the 9th IEEE Working Conference on Mining Software Repositories, MSR \'12, pages 199-208, Piscataway, NJ, USA, 2012. IEEE Press.***http://scholar.google.com/scholar?hl=en&q=S.+Zaman%2C+B.+Adams%2C+and+A.+E.+Hassan.+A+qualitative+study+on+performance+bugs.+In+Proceedings+of+the+9th+IEEE+Working+Conference+on+Mining+Software+Repositories%2C+MSR+%2712%2C+pages+199-208%2C+Piscataway%2C+NJ%2C+USA%2C+2012.+IEEE+Press.^^^L. Zhong and N. K. Jha. Energy eficiency of handheld computer interfaces: Limits, characterization and practice. In Proceedings of the 3rd International Conference on Mobile Systems, Applications, and Services, MobiSys \'05, pages 247-260, New York, NY, USA, 2005. ACM.***http://scholar.google.com/scholar?hl=en&q=L.+Zhong+and+N.+K.+Jha.+Energy+eficiency+of+handheld+computer+interfaces%3A+Limits%2C+characterization+and+practice.+In+Proceedings+of+the+3rd+International+Conference+on+Mobile+Systems%2C+Applications%2C+and+Services%2C+MobiSys+%2705%2C+pages+247-260%2C+New+York%2C+NY%2C+USA%2C+2005.+ACM.^^^Y. Zhu, M. Halpern, and V. J. Reddi. Event-based scheduling for energy-eficient qos (eqos) in mobile web applications. In 2015 IEEE 21st International Symposium on High Performance Computer Architecture (HPCA), pages 137-149, Feb 2015.***http://scholar.google.com/scholar?hl=en&q=Y.+Zhu%2C+M.+Halpern%2C+and+V.+J.+Reddi.+Event-based+scheduling+for+energy-eficient+qos+%28eqos%29+in+mobile+web+applications.+In+2015+IEEE+21st+International+Symposium+on+High+Performance+Computer+Architecture+%28HPCA%29%2C+pages+137-149%2C+Feb+2015.^^^');
INSERT INTO `paper_ref` VALUES (50, 46, '2019. Matlab/Simulink. https://nl.mathworks.com/products/simulink.html.***http://scholar.google.com/scholar?hl=en&q=2019.+Matlab%2FSimulink.+https%3A%2F%2Fnl.mathworks.com%2Fproducts%2Fsimulink.html.^^^2020. Appendix. https://bitbucket.org/anonymous83/faultrepair/src/master/. Also submitted along with the paper.***http://scholar.google.com/scholar?hl=en&q=2020.+Appendix.+https%3A%2F%2Fbitbucket.org%2Fanonymous83%2Ffaultrepair%2Fsrc%2Fmaster%2F.+Also+submitted+along+with+the+paper.^^^Thomas Ackling, Bradley Alexander, and Ian Grunert. 2011. Evolving Patches for Software Repair. In Proceedings of the Annual Conference on Genetic and Evolutionary Computation (GECCO\'11) (Dublin, Ireland). ACM, New York, NY, USA, 1427-1434.***http://scholar.google.com/scholar?hl=en&q=Thomas+Ackling%2C+Bradley+Alexander%2C+and+Ian+Grunert.+2011.+Evolving+Patches+for+Software+Repair.+In+Proceedings+of+the+Annual+Conference+on+Genetic+and+Evolutionary+Computation+%28GECCO%2711%29+%28Dublin%2C+Ireland%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1427-1434.^^^Rajeev Alur. 2015. Principles of Cyber-Physical Systems. MIT Press.***http://scholar.google.com/scholar?hl=en&q=Rajeev+Alur.+2015.+Principles+of+Cyber-Physical+Systems.+MIT+Press.^^^Andrea Arcuri. 2008. On the Automation of Fixing Software Bugs. In Companion of the International Conference on Software Engineering (ICSE Companion\'08) (Leipzig, Germany). ACM, New York, NY, USA, 1003-1006.***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2008.+On+the+Automation+of+Fixing+Software+Bugs.+In+Companion+of+the+International+Conference+on+Software+Engineering+%28ICSE+Companion%2708%29+%28Leipzig%2C+Germany%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+1003-1006.^^^Andrea Arcuri. 2011. Evolutionary Repair of Faulty Software. Applied Software Computing 11, 4 ( June 2011 ), 3494-3514.***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri.+2011.+Evolutionary+Repair+of+Faulty+Software.+Applied+Software+Computing+11%2C+4+%28+June+2011+%29%2C+3494-3514.^^^Andrea Arcuri and Lionel Briand. 2014. A hitchhiker\'s guide to statistical tests for assessing randomized algorithms in software engineering. Software Testing, Verification and Reliability 24, 3 ( 2014 ), 219-250.***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri+and+Lionel+Briand.+2014.+A+hitchhiker%27s+guide+to+statistical+tests+for+assessing+randomized+algorithms+in+software+engineering.+Software+Testing%2C+Verification+and+Reliability+24%2C+3+%28+2014+%29%2C+219-250.^^^Andrea Arcuri and Xin Yao. 2008. A novel co-evolutionary approach to automatic software bug fixing. In Proceedings of the IEEE Congress on Evolutionary Computation (IEEE World Congress on Computational Intelligence (WCCI\'08) ). IEEE, Hong Kong, 162-168.***http://scholar.google.com/scholar?hl=en&q=Andrea+Arcuri+and+Xin+Yao.+2008.+A+novel+co-evolutionary+approach+to+automatic+software+bug+fixing.+In+Proceedings+of+the+IEEE+Congress+on+Evolutionary+Computation+%28IEEE+World+Congress+on+Computational+Intelligence+%28WCCI%2708%29+%29.+IEEE%2C+Hong+Kong%2C+162-168.^^^Raja Ben Abdessalem, Annibale Panichella, Shiva Nejati, Lionel C. Briand, and Thomas Stifter. 2018. Testing Autonomous Cars for Feature Interaction Failures Using Many-objective Search. In Proceedings of the International Conference on Automated Software Engineering (ASE\'18). ACM, Montpellier, France, 143-154.***http://scholar.google.com/scholar?hl=en&q=Raja+Ben+Abdessalem%2C+Annibale+Panichella%2C+Shiva+Nejati%2C+Lionel+C.+Briand%2C+and+Thomas+Stifter.+2018.+Testing+Autonomous+Cars+for+Feature+Interaction+Failures+Using+Many-objective+Search.+In+Proceedings+of+the+International+Conference+on+Automated+Software+Engineering+%28ASE%2718%29.+ACM%2C+Montpellier%2C+France%2C+143-154.^^^J. Anthony Capon. 1991. Elementary Statistics for the Social Sciences: Study Guide. Wadsworth Publishing Company, Belmont, CA, USA.***http://scholar.google.com/scholar?hl=en&q=J.+Anthony+Capon.+1991.+Elementary+Statistics+for+the+Social+Sciences%3A+Study+Guide.+Wadsworth+Publishing+Company%2C+Belmont%2C+CA%2C+USA.^^^Valentin Dallmeier, Andreas Zeller, and Bertrand Meyer. 2009. Generating Fixes from Object Behavior Anomalies. In Proceedings of the International Conference on Automated Software Engineering (ASE\'09). IEEE, San Diego, CA, USA, 550-554.***http://scholar.google.com/scholar?hl=en&q=Valentin+Dallmeier%2C+Andreas+Zeller%2C+and+Bertrand+Meyer.+2009.+Generating+Fixes+from+Object+Behavior+Anomalies.+In+Proceedings+of+the+International+Conference+on+Automated+Software+Engineering+%28ASE%2709%29.+IEEE%2C+San+Diego%2C+CA%2C+USA%2C+550-554.^^^Favio DeMarco, Jifeng Xuan, Daniel Le Berre, and Martin Monperrus. 2014. Automatic Repair of Buggy if Conditions and Missing Preconditions with SMT. In Proceedings of the International Workshop on Constraints in Software Testing, Verification, and Analysis (CSTVA\'14) (Hyderabad, India). ACM, New York, NY, USA, 30-39.***http://scholar.google.com/scholar?hl=en&q=Favio+DeMarco%2C+Jifeng+Xuan%2C+Daniel+Le+Berre%2C+and+Martin+Monperrus.+2014.+Automatic+Repair+of+Buggy+if+Conditions+and+Missing+Preconditions+with+SMT.+In+Proceedings+of+the+International+Workshop+on+Constraints+in+Software+Testing%2C+Verification%2C+and+Analysis+%28CSTVA%2714%29+%28Hyderabad%2C+India%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+30-39.^^^Eric Foxlin. 2005. Pedestrian tracking with shoe-mounted inertial sensors. IEEE Computer graphics and applications 25, 6 ( 2005 ), 38-46.***http://scholar.google.com/scholar?hl=en&q=Eric+Foxlin.+2005.+Pedestrian+tracking+with+shoe-mounted+inertial+sensors.+IEEE+Computer+graphics+and+applications+25%2C+6+%28+2005+%29%2C+38-46.^^^Gordon Fraser and Andrea Arcuri. 2013. Whole test suite generation. IEEE Transactions on Software Engineering 39, 2 ( 2013 ), 276-291.***http://scholar.google.com/scholar?hl=en&q=Gordon+Fraser+and+Andrea+Arcuri.+2013.+Whole+test+suite+generation.+IEEE+Transactions+on+Software+Engineering+39%2C+2+%28+2013+%29%2C+276-291.^^^Luca Gazzola, Daniela Micucci, and Leonardo Mariani. 2017. Automatic software repair: A survey. IEEE Transactions on Software Engineering 45, 1 ( 2017 ), 34-67.***http://scholar.google.com/scholar?hl=en&q=Luca+Gazzola%2C+Daniela+Micucci%2C+and+Leonardo+Mariani.+2017.+Automatic+software+repair%3A+A+survey.+IEEE+Transactions+on+Software+Engineering+45%2C+1+%28+2017+%29%2C+34-67.^^^John H. Holland. 1992. Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control and Artificial Intelligence. MIT Press, Cambridge, MA, USA.***http://scholar.google.com/scholar?hl=en&q=John+H.+Holland.+1992.+Adaptation+in+Natural+and+Artificial+Systems%3A+An+Introductory+Analysis+with+Applications+to+Biology%2C+Control+and+Artificial+Intelligence.+MIT+Press%2C+Cambridge%2C+MA%2C+USA.^^^Martin Jähne, Xiaodong Li, and Jürgen Branke. 2009. Evolutionary algorithms and multi-objectivization for the travelling salesman problem. In Proceedings of the Annual Conference on Genetic and Evolutionary Computation (GECCO\'09). ACM, Montréal, Canada, 595-602.***http://scholar.google.com/scholar?hl=en&q=Martin+J%C3%A4hne%2C+Xiaodong+Li%2C+and+J%C3%BCrgen+Branke.+2009.+Evolutionary+algorithms+and+multi-objectivization+for+the+travelling+salesman+problem.+In+Proceedings+of+the+Annual+Conference+on+Genetic+and+Evolutionary+Computation+%28GECCO%2709%29.+ACM%2C+Montr%C3%A9al%2C+Canada%2C+595-602.^^^Thomas Jansen. 2002. On the analysis of dynamic restart strategies for evolutionary algorithms. In International Conference on Parallel Problem Solving from Nature (PPSN\'02), Vol. 2. Springer, Granada, Spain, 33-43.***http://scholar.google.com/scholar?hl=en&q=Thomas+Jansen.+2002.+On+the+analysis+of+dynamic+restart+strategies+for+evolutionary+algorithms.+In+International+Conference+on+Parallel+Problem+Solving+from+Nature+%28PPSN%2702%29%2C+Vol.+2.+Springer%2C+Granada%2C+Spain%2C+33-43.^^^Tao Ji, Liqian Chen, Xiaoguang Mao, and Xin Yi. 2016. Automated Program Repair by Using Similar Code Containing Fix Ingredients. In Proceedings of the Annual Computer Software and Applications Conference (COMPSAC\'16), Vol. 1. IEEE, Atlanta, GA, USA, 197-202.***http://scholar.google.com/scholar?hl=en&q=Tao+Ji%2C+Liqian+Chen%2C+Xiaoguang+Mao%2C+and+Xin+Yi.+2016.+Automated+Program+Repair+by+Using+Similar+Code+Containing+Fix+Ingredients.+In+Proceedings+of+the+Annual+Computer+Software+and+Applications+Conference+%28COMPSAC%2716%29%2C+Vol.+1.+IEEE%2C+Atlanta%2C+GA%2C+USA%2C+197-202.^^^Wei Jin and Alessandro Orso. 2013. F3: fault localization for field failures. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA:13). ACM, Lugano, Switzerland, 213-223.***http://scholar.google.com/scholar?hl=en&q=Wei+Jin+and+Alessandro+Orso.+2013.+F3%3A+fault+localization+for+field+failures.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%3A13%29.+ACM%2C+Lugano%2C+Switzerland%2C+213-223.^^^David Kelk, Kevin Jalbert, and Jeremy S. Bradbury. 2013. Automatically Repairing Concurrency Bugs with ARC. In Proceedings of the International Conference on Multicore Software Engineering, Performance, and Tools (MSEPT\'13), João M. Lourenço and Eitan Farchi (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 73-84.***http://scholar.google.com/scholar?hl=en&q=David+Kelk%2C+Kevin+Jalbert%2C+and+Jeremy+S.+Bradbury.+2013.+Automatically+Repairing+Concurrency+Bugs+with+ARC.+In+Proceedings+of+the+International+Conference+on+Multicore+Software+Engineering%2C+Performance%2C+and+Tools+%28MSEPT%2713%29%2C+Jo%C3%A3o+M.+Louren%C3%A7o+and+Eitan+Farchi+%28Eds.%29.+Springer+Berlin+Heidelberg%2C+Berlin%2C+Heidelberg%2C+73-84.^^^Dongsun Kim, Jaechang Nam, Jaewoo Song, and Sunghun Kim. 2013. Automatic patch generation learned from human-written patches. In Proceedings of the International Conference on Software Engineering (ICSE\'13). IEEE, San Francisco, CA, USA, 802-811.***http://scholar.google.com/scholar?hl=en&q=Dongsun+Kim%2C+Jaechang+Nam%2C+Jaewoo+Song%2C+and+Sunghun+Kim.+2013.+Automatic+patch+generation+learned+from+human-written+patches.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE%2713%29.+IEEE%2C+San+Francisco%2C+CA%2C+USA%2C+802-811.^^^Joshua D Knowles, Richard A Watson, and David W Corne. 2001. Reducing local optima in single-objective problems by multi-objectivization. In Proceedings of the International Conference on Evolutionary Multi-Criterion Optimization (EMO\'01). Springer, Zurich, Switzerland, 269-283.***http://scholar.google.com/scholar?hl=en&q=Joshua+D+Knowles%2C+Richard+A+Watson%2C+and+David+W+Corne.+2001.+Reducing+local+optima+in+single-objective+problems+by+multi-objectivization.+In+Proceedings+of+the+International+Conference+on+Evolutionary+Multi-Criterion+Optimization+%28EMO%2701%29.+Springer%2C+Zurich%2C+Switzerland%2C+269-283.^^^Xianglong Kong, Lingming Zhang, W Eric Wong, and Bixin Li. 2015. Experience report: How do techniques, programs, and tests impact automated program repair?. In Proceedings of the International Symposium on Software Reliability Engineering (ISSRE\'15). IEEE, Washington DC, USA, 194-204.***http://scholar.google.com/scholar?hl=en&q=Xianglong+Kong%2C+Lingming+Zhang%2C+W+Eric+Wong%2C+and+Bixin+Li.+2015.+Experience+report%3A+How+do+techniques%2C+programs%2C+and+tests+impact+automated+program+repair%3F.+In+Proceedings+of+the+International+Symposium+on+Software+Reliability+Engineering+%28ISSRE%2715%29.+IEEE%2C+Washington+DC%2C+USA%2C+194-204.^^^Ryotaro Kou, Yoshiki Higo, and Shinji Kusumoto. 2016. A Capable Crossover Technique on Automatic Program Repair. In Proceedings of the International Workshop on Empirical Software Engineering in Practice (IWESEP\'16). IEEE, Osaka, Japan, 45-50.***http://scholar.google.com/scholar?hl=en&q=Ryotaro+Kou%2C+Yoshiki+Higo%2C+and+Shinji+Kusumoto.+2016.+A+Capable+Crossover+Technique+on+Automatic+Program+Repair.+In+Proceedings+of+the+International+Workshop+on+Empirical+Software+Engineering+in+Practice+%28IWESEP%2716%29.+IEEE%2C+Osaka%2C+Japan%2C+45-50.^^^John R Koza and John R Koza. 1992. Genetic programming: on the programming of computers by means of natural selection. Vol. 1. MIT press, Cambridge, MA, USA.***http://scholar.google.com/scholar?hl=en&q=John+R+Koza+and+John+R+Koza.+1992.+Genetic+programming%3A+on+the+programming+of+computers+by+means+of+natural+selection.+Vol.+1.+MIT+press%2C+Cambridge%2C+MA%2C+USA.^^^Claire Le Goues, Michael Dewey-Vogt, Stephanie Forrest, and Westley Weimer. 2012. A Systematic Study of Automated Program Repair: Fixing 55 out of 105 Bugs for $8 Each. In Proceedings of the International Conference on Software Engineering (ICSE \'12) (Zurich, Switzerland). IEEE Press, Piscataway, NJ, USA, 3-13.***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Michael+Dewey-Vogt%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2012.+A+Systematic+Study+of+Automated+Program+Repair%3A+Fixing+55+out+of+105+Bugs+for+%248+Each.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE+%2712%29+%28Zurich%2C+Switzerland%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+3-13.^^^Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. 2012. GenProg: A Generic Method for Automatic Software Repair. IEEE Transactions on Software Engineering (TSE) 38, 1 (Jan 2012 ), 54-72.***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+ThanhVu+Nguyen%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+2012.+GenProg%3A+A+Generic+Method+for+Automatic+Software+Repair.+IEEE+Transactions+on+Software+Engineering+%28TSE%29+38%2C+1+%28Jan+2012+%29%2C+54-72.^^^Yann LeCun, Yoshua Bengio, and Geofrey Hinton. 2015. Deep learning. Nature 521, 7553 ( 2015 ), 436.***http://scholar.google.com/scholar?hl=en&q=Yann+LeCun%2C+Yoshua+Bengio%2C+and+Geofrey+Hinton.+2015.+Deep+learning.+Nature+521%2C+7553+%28+2015+%29%2C+436.^^^Fan Long and Martin Rinard. 2015. Staged Program Repair with Condition Synthesis. In Proceedings of the Joint Meeting on Foundations of Software Engineering (ESEC/FSE\'15) (Bergamo, Italy). ACM, New York, NY, USA, 166-178. https://doi.org/10.1145/2786805.2786811 ***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+2015.+Staged+Program+Repair+with+Condition+Synthesis.+In+Proceedings+of+the+Joint+Meeting+on+Foundations+of+Software+Engineering+%28ESEC%2FFSE%2715%29+%28Bergamo%2C+Italy%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+166-178.+https%3A%2F%2Fdoi.org%2F10.1145%2F2786805.2786811+10.1145%2F2786805.2786811^^^Fan Long and Martin Rinard. 2016. Automatic Patch Generation by Learning Correct Code. In Proceedings of the Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL\'16) ( St. Petersburg, FL, USA). ACM, New York, NY, USA, 298-312. https://doi.org/10.1145/2837614.2837617 ***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+2016.+Automatic+Patch+Generation+by+Learning+Correct+Code.+In+Proceedings+of+the+Annual+ACM+SIGPLAN-SIGACT+Symposium+on+Principles+of+Programming+Languages+%28POPL%2716%29+%28+St.+Petersburg%2C+FL%2C+USA%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+298-312.+https%3A%2F%2Fdoi.org%2F10.1145%2F2837614.2837617+10.1145%2F2837614.2837617^^^Sean Luke. 2013. Essentials of Metaheuristics (second ed.). Lulu, Fairfax, Virginie, USA.***http://scholar.google.com/scholar?hl=en&q=Sean+Luke.+2013.+Essentials+of+Metaheuristics+%28second+ed.%29.+Lulu%2C+Fairfax%2C+Virginie%2C+USA.^^^Ankith Manjunath, Ying Liu, Bernardo Henriques, and Armin Engstle. 2018. Radar Based Object Detection and Tracking for Autonomous Driving. In Proceedings of the MTT-S International Conference on Microwaves for Intelligent Mobility (ICMIM\'18). IEEE, Munich, Germany, 1-4.***http://scholar.google.com/scholar?hl=en&q=Ankith+Manjunath%2C+Ying+Liu%2C+Bernardo+Henriques%2C+and+Armin+Engstle.+2018.+Radar+Based+Object+Detection+and+Tracking+for+Autonomous+Driving.+In+Proceedings+of+the+MTT-S+International+Conference+on+Microwaves+for+Intelligent+Mobility+%28ICMIM%2718%29.+IEEE%2C+Munich%2C+Germany%2C+1-4.^^^Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: Scalable Multiline Program Patch Synthesis via Symbolic Analysis. In Proceedings of the International Conference on Software Engineering (ICSE\'16) (Austin, Texas). ACM, New York, NY, USA, 691-701.***http://scholar.google.com/scholar?hl=en&q=Sergey+Mechtaev%2C+Jooyong+Yi%2C+and+Abhik+Roychoudhury.+2016.+Angelix%3A+Scalable+Multiline+Program+Patch+Synthesis+via+Symbolic+Analysis.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE%2716%29+%28Austin%2C+Texas%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+691-701.^^^Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chandra. 2013. SemFix: Program Repair via Semantic Analysis. In Proceedings of the International Conference on Software Engineering (ICSE \'13) (San Francisco, CA, USA). IEEE Press, Piscataway, NJ, USA, 772-781.***http://scholar.google.com/scholar?hl=en&q=Hoang+Duong+Thien+Nguyen%2C+Dawei+Qi%2C+Abhik+Roychoudhury%2C+and+Satish+Chandra.+2013.+SemFix%3A+Program+Repair+via+Semantic+Analysis.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE+%2713%29+%28San+Francisco%2C+CA%2C+USA%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+772-781.^^^Spencer Pearson, José Campos, René Just, Gordon Fraser, Rui Abreu, Michael D. Ernst, Deric Pang, and Benjamin Keller. 2017. Evaluating and Improving Fault Localization. In Proceedings of the International Conference on Software Engineering (ICSE \'17) ( Buenos Aires, Argentina). IEEE Press, Piscataway, NJ, USA, 609-620. https://doi.org/10.1109/ICSE. 2017.62 ***http://scholar.google.com/scholar?hl=en&q=Spencer+Pearson%2C+Jos%C3%A9+Campos%2C+Ren%C3%A9+Just%2C+Gordon+Fraser%2C+Rui+Abreu%2C+Michael+D.+Ernst%2C+Deric+Pang%2C+and+Benjamin+Keller.+2017.+Evaluating+and+Improving+Fault+Localization.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE+%2717%29+%28+Buenos+Aires%2C+Argentina%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+609-620.+https%3A%2F%2Fdoi.org%2F10.1109%2FICSE.+2017.62+10.1109%2FICSE.2017.62^^^Yuhua Qi, Xiaoguang Mao, Yan Lei, Ziying Dai, and Chengsong Wang. 2014. The strength of random search on automated program repair. In Proceedings of the International Conference on Software Engineering (ICSE\'14). ACM, New York, USA, 254-265.***http://scholar.google.com/scholar?hl=en&q=Yuhua+Qi%2C+Xiaoguang+Mao%2C+Yan+Lei%2C+Ziying+Dai%2C+and+Chengsong+Wang.+2014.+The+strength+of+random+search+on+automated+program+repair.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE%2714%29.+ACM%2C+New+York%2C+USA%2C+254-265.^^^Zichao Qi, Fan Long, Sara Achour, and Martin Rinard. 2015. An Analysis of Patch Plausibility and Correctness for Generate-and-validate Patch Generation Systems. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA\'15) (Baltimore, MD, USA). ACM, New York, NY, USA, 24-36.***http://scholar.google.com/scholar?hl=en&q=Zichao+Qi%2C+Fan+Long%2C+Sara+Achour%2C+and+Martin+Rinard.+2015.+An+Analysis+of+Patch+Plausibility+and+Correctness+for+Generate-and-validate+Patch+Generation+Systems.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2715%29+%28Baltimore%2C+MD%2C+USA%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+24-36.^^^TASS-International. 2019. PreScan. https://www.tassinternational.com/prescan.***http://scholar.google.com/scholar?hl=en&q=TASS-International.+2019.+PreScan.+https%3A%2F%2Fwww.tassinternational.com%2Fprescan.^^^Richard van der Horst and Jeroen Hogema. 1993. Time-to-collision and collision avoidance systems. In Proceedings of the workshop of the International Cooperation on Theories and Concepts in Trafic Safety (ICTCT\'93).-, Salzburg, Austria, 109-121.***http://scholar.google.com/scholar?hl=en&q=Richard+van+der+Horst+and+Jeroen+Hogema.+1993.+Time-to-collision+and+collision+avoidance+systems.+In+Proceedings+of+the+workshop+of+the+International+Cooperation+on+Theories+and+Concepts+in+Trafic+Safety+%28ICTCT%2793%29.-%2C+Salzburg%2C+Austria%2C+109-121.^^^András Vargha and Harold D. Delaney. 2000. A critique and improvement of the CL common language efect size statistics of McGraw and Wong. Journal of Educational and Behavioral Statistics 25, 2 ( 2000 ), 101-132.***http://scholar.google.com/scholar?hl=en&q=Andr%C3%A1s+Vargha+and+Harold+D.+Delaney.+2000.+A+critique+and+improvement+of+the+CL+common+language+efect+size+statistics+of+McGraw+and+Wong.+Journal+of+Educational+and+Behavioral+Statistics+25%2C+2+%28+2000+%29%2C+101-132.^^^Yi Wei, Yu Pei, Carlo A. Furia, Lucas S. Silva, Stefan Buchholz, Bertrand Meyer, and Andreas Zeller. 2010. Automated Fixing of Programs with Contracts. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA\'10) (Trento, Italy). ACM, New York, NY, USA, 61-72. https://doi.org/10. 1145/1831708.1831716 ***http://scholar.google.com/scholar?hl=en&q=Yi+Wei%2C+Yu+Pei%2C+Carlo+A.+Furia%2C+Lucas+S.+Silva%2C+Stefan+Buchholz%2C+Bertrand+Meyer%2C+and+Andreas+Zeller.+2010.+Automated+Fixing+of+Programs+with+Contracts.+In+Proceedings+of+the+International+Symposium+on+Software+Testing+and+Analysis+%28ISSTA%2710%29+%28Trento%2C+Italy%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+61-72.+https%3A%2F%2Fdoi.org%2F10.+1145%2F1831708.1831716+10.1145%2F1831708.1831716^^^Westley Weimer, Zachary P Fry, and Stephanie Forrest. 2013. Leveraging program equivalence for adaptive program repair: Models and first results. In Proceedings of the International Conference on Automated Software Engineering (ASE\'13). IEEE, Silicon Valley, CA, USA, 356-366.***http://scholar.google.com/scholar?hl=en&q=Westley+Weimer%2C+Zachary+P+Fry%2C+and+Stephanie+Forrest.+2013.+Leveraging+program+equivalence+for+adaptive+program+repair%3A+Models+and+first+results.+In+Proceedings+of+the+International+Conference+on+Automated+Software+Engineering+%28ASE%2713%29.+IEEE%2C+Silicon+Valley%2C+CA%2C+USA%2C+356-366.^^^Westley Weimer, ThanhVu Nguyen, Claire Le Goues, and Stephanie Forrest. 2009. Automatically finding patches using genetic programming. In Proceedings of the International Conference on Software Engineering (ICSE\'09). IEEE, Vancouver, Canada, 364-374.***http://scholar.google.com/scholar?hl=en&q=Westley+Weimer%2C+ThanhVu+Nguyen%2C+Claire+Le+Goues%2C+and+Stephanie+Forrest.+2009.+Automatically+finding+patches+using+genetic+programming.+In+Proceedings+of+the+International+Conference+on+Software+Engineering+%28ICSE%2709%29.+IEEE%2C+Vancouver%2C+Canada%2C+364-374.^^^Xiaoyuan Xie, Tsong Yueh Chen, Fei-Ching Kuo, and Baowen Xu. 2013. A Theoretical Analysis of the Risk Evaluation Formulas for Spectrum-based Fault Localization. ACM Transactions on Software Engineering and Methodology (TOSEM) 22, 4, Article 31 (Oct. 2013 ), 40 pages. https://doi.org/10.1145/2522920.2522924 ***http://scholar.google.com/scholar?hl=en&q=Xiaoyuan+Xie%2C+Tsong+Yueh+Chen%2C+Fei-Ching+Kuo%2C+and+Baowen+Xu.+2013.+A+Theoretical+Analysis+of+the+Risk+Evaluation+Formulas+for+Spectrum-based+Fault+Localization.+ACM+Transactions+on+Software+Engineering+and+Methodology+%28TOSEM%29+22%2C+4%2C+Article+31+%28Oct.+2013+%29%2C+40+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F2522920.2522924+10.1145%2F2522920.2522924^^^Shin Yoo, Xiaoyuan Xie, Fei-Ching Kuo, Tsong Yueh Chen, and Mark Harman. 2017. Human Competitiveness of Genetic Programming in Spectrum-Based Fault Localisation: Theoretical and Empirical Analysis. ACM Transactions on Software Engineering and Methodology (TOSEM) 26, 1, Article 4 ( June 2017 ), 30 pages. https://doi.org/10.1145/3078840 ***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo%2C+Xiaoyuan+Xie%2C+Fei-Ching+Kuo%2C+Tsong+Yueh+Chen%2C+and+Mark+Harman.+2017.+Human+Competitiveness+of+Genetic+Programming+in+Spectrum-Based+Fault+Localisation%3A+Theoretical+and+Empirical+Analysis.+ACM+Transactions+on+Software+Engineering+and+Methodology+%28TOSEM%29+26%2C+1%2C+Article+4+%28+June+2017+%29%2C+30+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3078840+10.1145%2F3078840^^^');
INSERT INTO `paper_ref` VALUES (51, 91, 'Fairseq-py. https://github.com/pytorch/fairseq, 2018.***http://scholar.google.com/scholar?hl=en&q=Fairseq-py.+https%3A%2F%2Fgithub.com%2Fpytorch%2Ffairseq%2C+2018.^^^Afsoon Afzal, Manish Motwani, Kathryn Stolee, Yuriy Brun, and Claire Le Goues. Sosrepair: Expressive semantic search for real-world program repair. IEEE Transactions on Software Engineering, 2019.***http://scholar.google.com/scholar?hl=en&q=Afsoon+Afzal%2C+Manish+Motwani%2C+Kathryn+Stolee%2C+Yuriy+Brun%2C+and+Claire+Le+Goues.+Sosrepair%3A+Expressive+semantic+search+for+real-world+program+repair.+IEEE+Transactions+on+Software+Engineering%2C+2019.^^^Carol V Alexandru. Guided code synthesis using deep neural networks. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 1068-1070. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Carol+V+Alexandru.+Guided+code+synthesis+using+deep+neural+networks.+In+Proceedings+of+the+2016+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering%2C+pages+1068-1070.+ACM%2C+2016.^^^Miltiadis Allamanis, Hao Peng, and Charles Sutton. A convolutional attention network for extreme summarization of source code. In International Conference on Machine Learning, pages 2091-2100, 2016.***http://scholar.google.com/scholar?hl=en&q=Miltiadis+Allamanis%2C+Hao+Peng%2C+and+Charles+Sutton.+A+convolutional+attention+network+for+extreme+summarization+of+source+code.+In+International+Conference+on+Machine+Learning%2C+pages+2091-2100%2C+2016.^^^Miltiadis Allamanis, Earl T Barr, Premkumar Devanbu, and Charles Sutton. A survey of machine learning for big code and naturalness. ACM Computing Surveys (CSUR), 51 ( 4 ): 81, 2018.***http://scholar.google.com/scholar?hl=en&q=Miltiadis+Allamanis%2C+Earl+T+Barr%2C+Premkumar+Devanbu%2C+and+Charles+Sutton.+A+survey+of+machine+learning+for+big+code+and+naturalness.+ACM+Computing+Surveys+%28CSUR%29%2C+51+%28+4+%29%3A+81%2C+2018.^^^Miltiadis Allamanis, Marc Brockschmidt, and Mahmoud Khademi. Learning to represent programs with graphs. In International Conference on Learning Representations, 2018. URL https://openreview.net/forum?id= BJOFETxR-.***http://scholar.google.com/scholar?hl=en&q=Miltiadis+Allamanis%2C+Marc+Brockschmidt%2C+and+Mahmoud+Khademi.+Learning+to+represent+programs+with+graphs.+In+International+Conference+on+Learning+Representations%2C+2018.+URL+https%3A%2F%2Fopenreview.net%2Fforum%3Fid%3D+BJOFETxR-.^^^Uri Alon, Meital Zilberstein, Omer Levy, and Eran Yahav. code2vec: Learning distributed representations of code. Proceedings of the ACM on Programming Languages, 3 (POPL): 40, 2019.***http://scholar.google.com/scholar?hl=en&q=Uri+Alon%2C+Meital+Zilberstein%2C+Omer+Levy%2C+and+Eran+Yahav.+code2vec%3A+Learning+distributed+representations+of+code.+Proceedings+of+the+ACM+on+Programming+Languages%2C+3+%28POPL%29%3A+40%2C+2019.^^^Moumita Asad, Kishan Kumar Ganguly, and Kazi Sakib. Impact analysis of syntactic and semantic similarities on patch prioritization in automated program repair. In 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME), pages 328-332. IEEE, 2019.***http://scholar.google.com/scholar?hl=en&q=Moumita+Asad%2C+Kishan+Kumar+Ganguly%2C+and+Kazi+Sakib.+Impact+analysis+of+syntactic+and+semantic+similarities+on+patch+prioritization+in+automated+program+repair.+In+2019+IEEE+International+Conference+on+Software+Maintenance+and+Evolution+%28ICSME%29%2C+pages+328-332.+IEEE%2C+2019.^^^Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.***http://scholar.google.com/scholar?hl=en&q=Dzmitry+Bahdanau%2C+Kyunghyun+Cho%2C+and+Yoshua+Bengio.+Neural+machine+translation+by+jointly+learning+to+align+and+translate.+arXiv+preprint+arXiv%3A1409.0473%2C+2014.^^^James Bergstra and Yoshua Bengio. Random search for hyper-parameter optimization. Journal of Machine Learning Research, 13 (Feb): 281-305, 2012.***http://scholar.google.com/scholar?hl=en&q=James+Bergstra+and+Yoshua+Bengio.+Random+search+for+hyper-parameter+optimization.+Journal+of+Machine+Learning+Research%2C+13+%28Feb%29%3A+281-305%2C+2012.^^^Saikat Chakraborty, Miltiadis Allamanis, and Baishakhi Ray. Tree2tree neural translation model for learning source code changes. arXiv preprint arXiv:1810.00314, 2018.***http://scholar.google.com/scholar?hl=en&q=Saikat+Chakraborty%2C+Miltiadis+Allamanis%2C+and+Baishakhi+Ray.+Tree2tree+neural+translation+model+for+learning+source+code+changes.+arXiv+preprint+arXiv%3A1810.00314%2C+2018.^^^Liushan Chen, Yu Pei, and Carlo A Furia. Contract-based program repair without the contracts. In Automated Software Engineering (ASE), 2017 32nd IEEE/ACM International Conference on, pages 637-647. IEEE, 2017.***http://scholar.google.com/scholar?hl=en&q=Liushan+Chen%2C+Yu+Pei%2C+and+Carlo+A+Furia.+Contract-based+program+repair+without+the+contracts.+In+Automated+Software+Engineering+%28ASE%29%2C+2017+32nd+IEEE%2FACM+International+Conference+on%2C+pages+637-647.+IEEE%2C+2017.^^^Zimin Chen, Steve James Kommrusch, Michele Tufano, Louis-Noël Pouchet, Denys Poshyvanyk, and Martin Monperrus. Sequencer: Sequence-to-sequence learning for end-to-end program repair. IEEE Transactions on Software Engineering, 2019.***http://scholar.google.com/scholar?hl=en&q=Zimin+Chen%2C+Steve+James+Kommrusch%2C+Michele+Tufano%2C+Louis-No%C3%ABl+Pouchet%2C+Denys+Poshyvanyk%2C+and+Martin+Monperrus.+Sequencer%3A+Sequence-to-sequence+learning+for+end-to-end+program+repair.+IEEE+Transactions+on+Software+Engineering%2C+2019.^^^Shamil Chollampatt and Hwee Tou Ng. A Multilayer Convolutional EncoderDecoder Neural Network for Grammatical Error Correction. 2018. URL http://arxiv.org/abs/ 1801.08831.***http://scholar.google.com/scholar?hl=en&q=Shamil+Chollampatt+and+Hwee+Tou+Ng.+A+Multilayer+Convolutional+EncoderDecoder+Neural+Network+for+Grammatical+Error+Correction.+2018.+URL+http%3A%2F%2Farxiv.org%2Fabs%2F+1801.08831.^^^Shamil Chollampatt and Hwee Tou Ng. A multilayer convolutional encoderdecoder neural network for grammatical error correction. In Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence, February 2018.***http://scholar.google.com/scholar?hl=en&q=Shamil+Chollampatt+and+Hwee+Tou+Ng.+A+multilayer+convolutional+encoderdecoder+neural+network+for+grammatical+error+correction.+In+Proceedings+of+the+Thirty-Second+AAAI+Conference+on+Artificial+Intelligence%2C+February+2018.^^^Yann N. Dauphin, Angela Fan, Michael Auli, and David Grangier. Language modeling with gated convolutional networks. In Proceedings of the 34th International Conference on Machine Learning-Volume 70, ICML\' 17, page 933-941. JMLR.org, 2017.***http://scholar.google.com/scholar?hl=en&q=Yann+N.+Dauphin%2C+Angela+Fan%2C+Michael+Auli%2C+and+David+Grangier.+Language+modeling+with+gated+convolutional+networks.+In+Proceedings+of+the+34th+International+Conference+on+Machine+Learning-Volume+70%2C+ICML%27+17%2C+page+933-941.+JMLR.org%2C+2017.^^^Thomas Durieux and Martin Monperrus. Dynamoth: dynamic code synthesis for automatic program repair. In Proceedings of the 11th International Workshop on Automation of Software Test, pages 85-91. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Thomas+Durieux+and+Martin+Monperrus.+Dynamoth%3A+dynamic+code+synthesis+for+automatic+program+repair.+In+Proceedings+of+the+11th+International+Workshop+on+Automation+of+Software+Test%2C+pages+85-91.+ACM%2C+2016.^^^Tao Ge, Furu Wei, and Ming Zhou. Reaching Human-level Performance in Automatic Grammatical Error Correction: An Empirical Study. ( 3 ): 1-15, 2018. URL http://arxiv.org/abs/ 1807.01270.***http://scholar.google.com/scholar?hl=en&q=Tao+Ge%2C+Furu+Wei%2C+and+Ming+Zhou.+Reaching+Human-level+Performance+in+Automatic+Grammatical+Error+Correction%3A+An+Empirical+Study.+%28+3+%29%3A+1-15%2C+2018.+URL+http%3A%2F%2Farxiv.org%2Fabs%2F+1807.01270.^^^Tao Ge, Furu Wei, and Ming Zhou. Fluency Boost Learning and Inference for Neural Grammatical Error Correction. Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics, 1 : 1-11, 2018. URL http://aclweb. org/anthology/P18-1097.***http://scholar.google.com/scholar?hl=en&q=Tao+Ge%2C+Furu+Wei%2C+and+Ming+Zhou.+Fluency+Boost+Learning+and+Inference+for+Neural+Grammatical+Error+Correction.+Proceedings+of+the+56th+Annual+Meeting+of+the+Association+for+Computational+Linguistics%2C+1+%3A+1-11%2C+2018.+URL+http%3A%2F%2Faclweb.+org%2Fanthology%2FP18-1097.^^^Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N Dauphin. Convolutional sequence to sequence learning. pages 1243-1252, 2017.***http://scholar.google.com/scholar?hl=en&q=Jonas+Gehring%2C+Michael+Auli%2C+David+Grangier%2C+Denis+Yarats%2C+and+Yann+N+Dauphin.+Convolutional+sequence+to+sequence+learning.+pages+1243-1252%2C+2017.^^^Georgios Gousios and Diomidis Spinellis. Ghtorrent: Github\'s data from a firehose. In 2012 9th IEEE Working Conference on Mining Software Repositories (MSR), pages 12-21, 2012.***http://scholar.google.com/scholar?hl=en&q=Georgios+Gousios+and+Diomidis+Spinellis.+Ghtorrent%3A+Github%27s+data+from+a+firehose.+In+2012+9th+IEEE+Working+Conference+on+Mining+Software+Repositories+%28MSR%29%2C+pages+12-21%2C+2012.^^^Xiaodong Gu, Hongyu Zhang, and Sunghun Kim. Deep code search. In Proceedings of the 40th International Conference on Software Engineering, pages 933-944. ACM, 2018.***http://scholar.google.com/scholar?hl=en&q=Xiaodong+Gu%2C+Hongyu+Zhang%2C+and+Sunghun+Kim.+Deep+code+search.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%2C+pages+933-944.+ACM%2C+2018.^^^Rahul Gupta, Soham Pal, Aditya Kanade, and Shirish Shevade. Deepfix: Fixing common c language errors by deep learning. In AAAI, pages 1345-1351, 2017.***http://scholar.google.com/scholar?hl=en&q=Rahul+Gupta%2C+Soham+Pal%2C+Aditya+Kanade%2C+and+Shirish+Shevade.+Deepfix%3A+Fixing+common+c+language+errors+by+deep+learning.+In+AAAI%2C+pages+1345-1351%2C+2017.^^^Péter Gyimesi, Béla Vancsics, Andrea Stocco, Davood Mazinanian, Arpád Beszédes, Rudolf Ferenc, and Ali Mesbah. Bugsjs: A benchmark of javascript bugs. In 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST), pages 90-101. IEEE, 2019.***http://scholar.google.com/scholar?hl=en&q=P%C3%A9ter+Gyimesi%2C+B%C3%A9la+Vancsics%2C+Andrea+Stocco%2C+Davood+Mazinanian%2C+Arp%C3%A1d+Besz%C3%A9des%2C+Rudolf+Ferenc%2C+and+Ali+Mesbah.+Bugsjs%3A+A+benchmark+of+javascript+bugs.+In+2019+12th+IEEE+Conference+on+Software+Testing%2C+Validation+and+Verification+%28ICST%29%2C+pages+90-101.+IEEE%2C+2019.^^^Quinn Hanam, Fernando S de M Brito, and Ali Mesbah. Discovering bug patterns in javascript. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 144-156. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Quinn+Hanam%2C+Fernando+S+de+M+Brito%2C+and+Ali+Mesbah.+Discovering+bug+patterns+in+javascript.+In+Proceedings+of+the+2016+24th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering%2C+pages+144-156.+ACM%2C+2016.^^^Vincent J Hellendoorn and Premkumar Devanbu. Are deep neural networks the best choice for modeling source code? In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ser. ESEC/FSE, pages 763-773, 2017.***http://scholar.google.com/scholar?hl=en&q=Vincent+J+Hellendoorn+and+Premkumar+Devanbu.+Are+deep+neural+networks+the+best+choice+for+modeling+source+code%3F+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ser.+ESEC%2FFSE%2C+pages+763-773%2C+2017.^^^Jinru Hua, Mengshi Zhang, Kaiyuan Wang, and Sarfraz Khurshid. Sketchfix: a tool for automated program repair approach using lazy candidate generation. In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pages 888-891. ACM, 2018.***http://scholar.google.com/scholar?hl=en&q=Jinru+Hua%2C+Mengshi+Zhang%2C+Kaiyuan+Wang%2C+and+Sarfraz+Khurshid.+Sketchfix%3A+a+tool+for+automated+program+repair+approach+using+lazy+candidate+generation.+In+Proceedings+of+the+2018+26th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+pages+888-891.+ACM%2C+2018.^^^F. Jelinek, R. L. Mercer, L. R. Bahl, and J. K. Baker. Perplexity-a measure of the dificulty of speech recognition tasks. Journal of the Acoustical Society of America, 62 : S63, November 1977. Supplement 1.***http://scholar.google.com/scholar?hl=en&q=F.+Jelinek%2C+R.+L.+Mercer%2C+L.+R.+Bahl%2C+and+J.+K.+Baker.+Perplexity-a+measure+of+the+dificulty+of+speech+recognition+tasks.+Journal+of+the+Acoustical+Society+of+America%2C+62+%3A+S63%2C+November+1977.+Supplement+1.^^^Jiajun Jiang, Yingfei Xiong, Hongyu Zhang, Qing Gao, and Xiangqun Chen. Shaping program repair space with existing patches and similar code. pages 298-309, 2018.***http://scholar.google.com/scholar?hl=en&q=Jiajun+Jiang%2C+Yingfei+Xiong%2C+Hongyu+Zhang%2C+Qing+Gao%2C+and+Xiangqun+Chen.+Shaping+program+repair+space+with+existing+patches+and+similar+code.+pages+298-309%2C+2018.^^^Marcin Junczys-Dowmunt, Roman Grundkiewicz, Shubha Guha, and Kenneth Heafield. Approaching Neural Grammatical Error Correction as a Low-Resource Machine Translation Task. ( 2016 ): 595-606, 2018. URL http://arxiv.org/abs/ 1804. 05940.***http://scholar.google.com/scholar?hl=en&q=Marcin+Junczys-Dowmunt%2C+Roman+Grundkiewicz%2C+Shubha+Guha%2C+and+Kenneth+Heafield.+Approaching+Neural+Grammatical+Error+Correction+as+a+Low-Resource+Machine+Translation+Task.+%28+2016+%29%3A+595-606%2C+2018.+URL+http%3A%2F%2Farxiv.org%2Fabs%2F+1804.+05940.^^^René Just, Darioush Jalali, and Michael D Ernst. Defects4j: A database of existing faults to enable controlled testing studies for java programs. In Proceedings of the 2014 International Symposium on Software Testing and Analysis, pages 437-440. ACM, 2014.***http://scholar.google.com/scholar?hl=en&q=Ren%C3%A9+Just%2C+Darioush+Jalali%2C+and+Michael+D+Ernst.+Defects4j%3A+A+database+of+existing+faults+to+enable+controlled+testing+studies+for+java+programs.+In+Proceedings+of+the+2014+International+Symposium+on+Software+Testing+and+Analysis%2C+pages+437-440.+ACM%2C+2014.^^^Masahiro Kaneko, Yuya Sakaizawa, and Mamoru Komachi. Grammatical Error Detection Using Error-and Grammaticality-Specific Word Embeddings. Proceedings ofthe The 8th International Joint Conference on Natural Language Processing, ( 2016 ): 40-48, 2017. URL https://github.com/kanekomasahiro/grammatical-error-.***http://scholar.google.com/scholar?hl=en&q=Masahiro+Kaneko%2C+Yuya+Sakaizawa%2C+and+Mamoru+Komachi.+Grammatical+Error+Detection+Using+Error-and+Grammaticality-Specific+Word+Embeddings.+Proceedings+ofthe+The+8th+International+Joint+Conference+on+Natural+Language+Processing%2C+%28+2016+%29%3A+40-48%2C+2017.+URL+https%3A%2F%2Fgithub.com%2Fkanekomasahiro%2Fgrammatical-error-.^^^Jindae Kim and Sunghun Kim. Automatic patch generation with context-based change application. Empirical Software Engineering, 24 ( 6 ): 4071-4106, 2019.***http://scholar.google.com/scholar?hl=en&q=Jindae+Kim+and+Sunghun+Kim.+Automatic+patch+generation+with+context-based+change+application.+Empirical+Software+Engineering%2C+24+%28+6+%29%3A+4071-4106%2C+2019.^^^Sunghun Kim, Hongyu Zhang, Rongxin Wu, and Liang Gong. Dealing with noise in defect prediction. In 2011 33rd International Conference on Software Engineering (ICSE), pages 481-490. IEEE, 2011.***http://scholar.google.com/scholar?hl=en&q=Sunghun+Kim%2C+Hongyu+Zhang%2C+Rongxin+Wu%2C+and+Liang+Gong.+Dealing+with+noise+in+defect+prediction.+In+2011+33rd+International+Conference+on+Software+Engineering+%28ICSE%29%2C+pages+481-490.+IEEE%2C+2011.^^^Anil Koyuncu, Kui Liu, Tegawendé F Bissyandé, Dongsun Kim, Jacques Klein, Martin Monperrus, and Yves Le Traon. Fixminer: Mining relevant fix patterns for automated program repair. arXiv preprint arXiv:1810.01791, 2018.***http://scholar.google.com/scholar?hl=en&q=Anil+Koyuncu%2C+Kui+Liu%2C+Tegawend%C3%A9+F+Bissyand%C3%A9%2C+Dongsun+Kim%2C+Jacques+Klein%2C+Martin+Monperrus%2C+and+Yves+Le+Traon.+Fixminer%3A+Mining+relevant+fix+patterns+for+automated+program+repair.+arXiv+preprint+arXiv%3A1810.01791%2C+2018.^^^Anil Koyuncu, Kui Liu, Tegawendé F Bissyandé, Dongsun Kim, Martin Monperrus, Jacques Klein, and Yves Le Traon. ifixr: bug report driven program repair. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pages 314-325, 2019.***http://scholar.google.com/scholar?hl=en&q=Anil+Koyuncu%2C+Kui+Liu%2C+Tegawend%C3%A9+F+Bissyand%C3%A9%2C+Dongsun+Kim%2C+Martin+Monperrus%2C+Jacques+Klein%2C+and+Yves+Le+Traon.+ifixr%3A+bug+report+driven+program+repair.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+pages+314-325%2C+2019.^^^Xuan Bach D Le, David Lo, and Claire Le Goues. History driven program repair. 1 : 213-224, 2016.***http://scholar.google.com/scholar?hl=en&q=Xuan+Bach+D+Le%2C+David+Lo%2C+and+Claire+Le+Goues.+History+driven+program+repair.+1+%3A+213-224%2C+2016.^^^Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. Genprog: A generic method for automatic software repair. Ieee transactions on software engineering, 38 ( 1 ): 54-72, 2012.***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+ThanhVu+Nguyen%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+Genprog%3A+A+generic+method+for+automatic+software+repair.+Ieee+transactions+on+software+engineering%2C+38+%28+1+%29%3A+54-72%2C+2012.^^^Claire Le Goues, Neal Holtschulte, Edward K Smith, Yuriy Brun, Premkumar Devanbu, Stephanie Forrest, and Westley Weimer. The manybugs and introclass benchmarks for automated repair of c programs. IEEE Transactions on Software Engineering, 41 ( 12 ): 1236-1256, 2015.***http://scholar.google.com/scholar?hl=en&q=Claire+Le+Goues%2C+Neal+Holtschulte%2C+Edward+K+Smith%2C+Yuriy+Brun%2C+Premkumar+Devanbu%2C+Stephanie+Forrest%2C+and+Westley+Weimer.+The+manybugs+and+introclass+benchmarks+for+automated+repair+of+c+programs.+IEEE+Transactions+on+Software+Engineering%2C+41+%28+12+%29%3A+1236-1256%2C+2015.^^^Jian Li, Pinjia He, Jieming Zhu, and Michael R Lyu. Software defect prediction via convolutional neural network. In Software Quality, Reliability and Security (QRS), 2017 IEEE International Conference on, pages 318-328. IEEE, 2017.***http://scholar.google.com/scholar?hl=en&q=Jian+Li%2C+Pinjia+He%2C+Jieming+Zhu%2C+and+Michael+R+Lyu.+Software+defect+prediction+via+convolutional+neural+network.+In+Software+Quality%2C+Reliability+and+Security+%28QRS%29%2C+2017+IEEE+International+Conference+on%2C+pages+318-328.+IEEE%2C+2017.^^^Liuqing Li, He Feng, Wenjie Zhuang, Na Meng, and Barbara Ryder. Cclearner: A deep learning-based clone detection approach. In Software Maintenance and Evolution (ICSME), 2017 IEEE International Conference on, pages 249-260. IEEE, 2017.***http://scholar.google.com/scholar?hl=en&q=Liuqing+Li%2C+He+Feng%2C+Wenjie+Zhuang%2C+Na+Meng%2C+and+Barbara+Ryder.+Cclearner%3A+A+deep+learning-based+clone+detection+approach.+In+Software+Maintenance+and+Evolution+%28ICSME%29%2C+2017+IEEE+International+Conference+on%2C+pages+249-260.+IEEE%2C+2017.^^^Yi Li, Wang Shaohua, and Tien N. Nguyen. DLfix: Context-based code transformation learning for automated program repair. In Software Engineering (ICSE), 2020 IEEE/ACM 42nd International Conference on. IEEE, 2020.***http://scholar.google.com/scholar?hl=en&q=Yi+Li%2C+Wang+Shaohua%2C+and+Tien+N.+Nguyen.+DLfix%3A+Context-based+code+transformation+learning+for+automated+program+repair.+In+Software+Engineering+%28ICSE%29%2C+2020+IEEE%2FACM+42nd+International+Conference+on.+IEEE%2C+2020.^^^Derrick Lin, James Koppel, Angela Chen, and Armando Solar-Lezama. QuixBugs: a multi-lingual program repair benchmark set based on the quixey challenge. In Proceedings Companion of the 2017 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity, pages 55-56. ACM, 2017.***http://scholar.google.com/scholar?hl=en&q=Derrick+Lin%2C+James+Koppel%2C+Angela+Chen%2C+and+Armando+Solar-Lezama.+QuixBugs%3A+a+multi-lingual+program+repair+benchmark+set+based+on+the+quixey+challenge.+In+Proceedings+Companion+of+the+2017+ACM+SIGPLAN+International+Conference+on+Systems%2C+Programming%2C+Languages%2C+and+Applications%3A+Software+for+Humanity%2C+pages+55-56.+ACM%2C+2017.^^^Wang Ling, Edward Grefenstette, Karl Moritz Hermann, Tomáš Kočisky`, Andrew Senior, Fumin Wang, and Phil Blunsom. Latent predictor networks for code generation. arXiv preprint arXiv:1603.06744, 2016.***http://scholar.google.com/scholar?hl=en&q=Wang+Ling%2C+Edward+Grefenstette%2C+Karl+Moritz+Hermann%2C+Tom%C3%A1%C5%A1+Ko%C4%8Disky%60%2C+Andrew+Senior%2C+Fumin+Wang%2C+and+Phil+Blunsom.+Latent+predictor+networks+for+code+generation.+arXiv+preprint+arXiv%3A1603.06744%2C+2016.^^^Kui Liu, Anil Koyuncu, Kisub Kim, Dongsun Kim, and Tegawendé F Bissyandé. Lsrepair: Live search of fix ingredients for automated program repair. In 2018 25th Asia-Pacific Software Engineering Conference (APSEC), pages 658-662. IEEE, 2018.***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Anil+Koyuncu%2C+Kisub+Kim%2C+Dongsun+Kim%2C+and+Tegawend%C3%A9+F+Bissyand%C3%A9.+Lsrepair%3A+Live+search+of+fix+ingredients+for+automated+program+repair.+In+2018+25th+Asia-Pacific+Software+Engineering+Conference+%28APSEC%29%2C+pages+658-662.+IEEE%2C+2018.^^^Kui Liu, Anil Koyuncu, Tegawendé F Bissyandé, Dongsun Kim, Jacques Klein, and Yves Le Traon. You cannot fix what you cannot find! an investigation of fault localization bias in benchmarking automated program repair systems. In 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST), pages 102-113. IEEE, 2019.***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Anil+Koyuncu%2C+Tegawend%C3%A9+F+Bissyand%C3%A9%2C+Dongsun+Kim%2C+Jacques+Klein%2C+and+Yves+Le+Traon.+You+cannot+fix+what+you+cannot+find%21+an+investigation+of+fault+localization+bias+in+benchmarking+automated+program+repair+systems.+In+2019+12th+IEEE+Conference+on+Software+Testing%2C+Validation+and+Verification+%28ICST%29%2C+pages+102-113.+IEEE%2C+2019.^^^Kui Liu, Anil Koyuncu, Dongsun Kim, and Tegawendé F. Bissyandé. Tbar: Revisiting template-based automated program repair. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2019, pages 31-42, New York, NY, USA, 2019. ACM. ISBN 978-1-4503-6224-5. doi: 10.1145/3293882.3330577. URL http://doi.acm.org/10.1145/3293882.3330577. ***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Anil+Koyuncu%2C+Dongsun+Kim%2C+and+Tegawend%C3%A9+F.+Bissyand%C3%A9.+Tbar%3A+Revisiting+template-based+automated+program+repair.+In+Proceedings+of+the+28th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis%2C+ISSTA+2019%2C+pages+31-42%2C+New+York%2C+NY%2C+USA%2C+2019.+ACM.+ISBN+978-1-4503-6224-5.+doi%3A+10.1145%2F3293882.3330577.+URL+http%3A%2F%2Fdoi.acm.org%2F10.1145%2F3293882.3330577.+10.1145%2F3293882.3330577.^^^Kui Liu, Anil Koyuncu, Dongsun Kim, and Tegawendé F Bissyandé. Avatar: Fixing semantic bugs with fix patterns of static analysis violations. In 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pages 1-12. IEEE, 2019.***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Anil+Koyuncu%2C+Dongsun+Kim%2C+and+Tegawend%C3%A9+F+Bissyand%C3%A9.+Avatar%3A+Fixing+semantic+bugs+with+fix+patterns+of+static+analysis+violations.+In+2019+IEEE+26th+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29%2C+pages+1-12.+IEEE%2C+2019.^^^Kui Liu, Shangwen Wang, Anil Koyuncu, Kisub Kim, Tegawendé François D Assise Bissyande, Dongsun Kim, Peng Wu, Jacques Klein, Xiaoguang Mao, and Yves Le Traon. On the eficiency of test suite based program repair: A systematic assessment of 16 automated repair systems for java programs. In 42nd ACM/IEEE International Conference on Software Engineering (ICSE), 2020.***http://scholar.google.com/scholar?hl=en&q=Kui+Liu%2C+Shangwen+Wang%2C+Anil+Koyuncu%2C+Kisub+Kim%2C+Tegawend%C3%A9+Fran%C3%A7ois+D+Assise+Bissyande%2C+Dongsun+Kim%2C+Peng+Wu%2C+Jacques+Klein%2C+Xiaoguang+Mao%2C+and+Yves+Le+Traon.+On+the+eficiency+of+test+suite+based+program+repair%3A+A+systematic+assessment+of+16+automated+repair+systems+for+java+programs.+In+42nd+ACM%2FIEEE+International+Conference+on+Software+Engineering+%28ICSE%29%2C+2020.^^^Xuliang Liu and Hao Zhong. Mining stackoverflow for program repair. In 2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pages 118-129. IEEE, 2018.***http://scholar.google.com/scholar?hl=en&q=Xuliang+Liu+and+Hao+Zhong.+Mining+stackoverflow+for+program+repair.+In+2018+IEEE+25th+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29%2C+pages+118-129.+IEEE%2C+2018.^^^Zhuo Ran Liu and Yang Liu. Exploiting Unlabeled Data for Neural Grammatical Error Detection. Journal of Computer Science and Technology, 32 ( 4 ): 758-767, 2017. ISSN 18604749. doi: 10.1007/s11390-017-1757-4.***http://scholar.google.com/scholar?hl=en&q=Zhuo+Ran+Liu+and+Yang+Liu.+Exploiting+Unlabeled+Data+for+Neural+Grammatical+Error+Detection.+Journal+of+Computer+Science+and+Technology%2C+32+%28+4+%29%3A+758-767%2C+2017.+ISSN+18604749.+doi%3A+10.1007%2Fs11390-017-1757-4.^^^Fan Long and Martin Rinard. Staged program repair with condition synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, pages 166-178. ACM, 2015.***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+Staged+program+repair+with+condition+synthesis.+In+Proceedings+of+the+2015+10th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+pages+166-178.+ACM%2C+2015.^^^Fan Long and Martin Rinard. An analysis of the search spaces for generate and validate patch generation systems. In Software Engineering (ICSE), 2016 IEEE/ACM 38th International Conference on, pages 702-713. IEEE, 2016.***http://scholar.google.com/scholar?hl=en&q=Fan+Long+and+Martin+Rinard.+An+analysis+of+the+search+spaces+for+generate+and+validate+patch+generation+systems.+In+Software+Engineering+%28ICSE%29%2C+2016+IEEE%2FACM+38th+International+Conference+on%2C+pages+702-713.+IEEE%2C+2016.^^^Fan Long, Peter Amidon, and Martin Rinard. Automatic inference of code transforms for patch generation. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, ESEC/FSE, volume 2017, 2017.***http://scholar.google.com/scholar?hl=en&q=Fan+Long%2C+Peter+Amidon%2C+and+Martin+Rinard.+Automatic+inference+of+code+transforms+for+patch+generation.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+ESEC%2FFSE%2C+volume+2017%2C+2017.^^^Fan Long et al. Automatic patch generation via learning from successful human patches. PhD thesis, Massachusetts Institute of Technology, 2018.***http://scholar.google.com/scholar?hl=en&q=Fan+Long+et+al.+Automatic+patch+generation+via+learning+from+successful+human+patches.+PhD+thesis%2C+Massachusetts+Institute+of+Technology%2C+2018.^^^Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Efective approaches to attention-based neural machine translation. arXiv preprint arXiv:1508.04025, 2015.***http://scholar.google.com/scholar?hl=en&q=Minh-Thang+Luong%2C+Hieu+Pham%2C+and+Christopher+D+Manning.+Efective+approaches+to+attention-based+neural+machine+translation.+arXiv+preprint+arXiv%3A1508.04025%2C+2015.^^^Fernanda Madeiral, Simon Urli, Marcelo Maia, and Martin Monperrus. Bears: An extensible java bug benchmark for automatic program repair studies. In 2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), pages 468-478. IEEE, 2019.***http://scholar.google.com/scholar?hl=en&q=Fernanda+Madeiral%2C+Simon+Urli%2C+Marcelo+Maia%2C+and+Martin+Monperrus.+Bears%3A+An+extensible+java+bug+benchmark+for+automatic+program+repair+studies.+In+2019+IEEE+26th+International+Conference+on+Software+Analysis%2C+Evolution+and+Reengineering+%28SANER%29%2C+pages+468-478.+IEEE%2C+2019.^^^Matias Martinez and Martin Monperrus. Astor: A program repair library for java. In Proceedings of the 25th International Symposium on Software Testing and Analysis, pages 441-444. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Matias+Martinez+and+Martin+Monperrus.+Astor%3A+A+program+repair+library+for+java.+In+Proceedings+of+the+25th+International+Symposium+on+Software+Testing+and+Analysis%2C+pages+441-444.+ACM%2C+2016.^^^Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. Angelix: Scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th international conference on software engineering, pages 691-701. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Sergey+Mechtaev%2C+Jooyong+Yi%2C+and+Abhik+Roychoudhury.+Angelix%3A+Scalable+multiline+program+patch+synthesis+via+symbolic+analysis.+In+Proceedings+of+the+38th+international+conference+on+software+engineering%2C+pages+691-701.+ACM%2C+2016.^^^Ali Mesbah, Andrew Rice, Emily Johnston, Nick Glorioso, and Edward Aftandilian. Deepdelta: learning to repair compilation errors. In Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pages 925-936, 2019.***http://scholar.google.com/scholar?hl=en&q=Ali+Mesbah%2C+Andrew+Rice%2C+Emily+Johnston%2C+Nick+Glorioso%2C+and+Edward+Aftandilian.+Deepdelta%3A+learning+to+repair+compilation+errors.+In+Proceedings+of+the+2019+27th+ACM+Joint+Meeting+on+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering%2C+pages+925-936%2C+2019.^^^Lili Mou, Rui Men, Ge Li, Lu Zhang, and Zhi Jin. On end-to-end program generation from user intention by deep neural networks. arXiv preprint arXiv:1510.07211, 2015.***http://scholar.google.com/scholar?hl=en&q=Lili+Mou%2C+Rui+Men%2C+Ge+Li%2C+Lu+Zhang%2C+and+Zhi+Jin.+On+end-to-end+program+generation+from+user+intention+by+deep+neural+networks.+arXiv+preprint+arXiv%3A1510.07211%2C+2015.^^^Vijayaraghavan Murali, Letao Qi, Swarat Chaudhuri, and Chris Jermaine. Neural sketch learning for conditional program generation. In International Conference on Learning Representations, 2018. URL https://openreview.net/forum?id=HkfXMzAb.***http://scholar.google.com/scholar?hl=en&q=Vijayaraghavan+Murali%2C+Letao+Qi%2C+Swarat+Chaudhuri%2C+and+Chris+Jermaine.+Neural+sketch+learning+for+conditional+program+generation.+In+International+Conference+on+Learning+Representations%2C+2018.+URL+https%3A%2F%2Fopenreview.net%2Fforum%3Fid%3DHkfXMzAb.^^^Courtney Napoles and Chris Callison-Burch. Systematically Adapting Machine Translation for Grammatical Error Correction. Proceedings of the 12th Workshop on Innovative Use of NLP for Building Educational Applications, pages 345-356, 2017. URL http://www.aclweb.org/anthology/W17-5039.***http://scholar.google.com/scholar?hl=en&q=Courtney+Napoles+and+Chris+Callison-Burch.+Systematically+Adapting+Machine+Translation+for+Grammatical+Error+Correction.+Proceedings+of+the+12th+Workshop+on+Innovative+Use+of+NLP+for+Building+Educational+Applications%2C+pages+345-356%2C+2017.+URL+http%3A%2F%2Fwww.aclweb.org%2Fanthology%2FW17-5039.^^^Frolin S Ocariza, Jr, Karthik Pattabiraman, and Ali Mesbah. Vejovis: Suggesting ifxes for javascript faults. In Proceedings of the 36th International Conference on Software Engineering, pages 837-847, 2014.***http://scholar.google.com/scholar?hl=en&q=Frolin+S+Ocariza%2C+Jr%2C+Karthik+Pattabiraman%2C+and+Ali+Mesbah.+Vejovis%3A+Suggesting+ifxes+for+javascript+faults.+In+Proceedings+of+the+36th+International+Conference+on+Software+Engineering%2C+pages+837-847%2C+2014.^^^Adam Paszke, Sam Gross, Soumith Chintala, and Gregory Chanan. Pytorch, 2017.***http://scholar.google.com/scholar?hl=en&q=Adam+Paszke%2C+Sam+Gross%2C+Soumith+Chintala%2C+and+Gregory+Chanan.+Pytorch%2C+2017.^^^Hao Peng, Lili Mou, Ge Li, Yuxuan Liu, Lu Zhang, and Zhi Jin. Building program vector representations for deep learning. In International Conference on Knowledge Science, Engineering and Management, pages 547-553. Springer, 2015.***http://scholar.google.com/scholar?hl=en&q=Hao+Peng%2C+Lili+Mou%2C+Ge+Li%2C+Yuxuan+Liu%2C+Lu+Zhang%2C+and+Zhi+Jin.+Building+program+vector+representations+for+deep+learning.+In+International+Conference+on+Knowledge+Science%2C+Engineering+and+Management%2C+pages+547-553.+Springer%2C+2015.^^^Yuhua Qi, Xiaoguang Mao, Yan Lei, Ziying Dai, and Chengsong Wang. Does genetic programming work well on automated program repair? In 2013 International Conference on Computational and Information Sciences, pages 1875-1878. IEEE, 2013.***http://scholar.google.com/scholar?hl=en&q=Yuhua+Qi%2C+Xiaoguang+Mao%2C+Yan+Lei%2C+Ziying+Dai%2C+and+Chengsong+Wang.+Does+genetic+programming+work+well+on+automated+program+repair%3F+In+2013+International+Conference+on+Computational+and+Information+Sciences%2C+pages+1875-1878.+IEEE%2C+2013.^^^Zichao Qi, Fan Long, Sara Achour, and Martin Rinard. An analysis of patch plausibility and correctness for generate-and-validate patch generation systems. In Proceedings of the 2015 International Symposium on Software Testing and Analysis, pages 24-36. ACM, 2015.***http://scholar.google.com/scholar?hl=en&q=Zichao+Qi%2C+Fan+Long%2C+Sara+Achour%2C+and+Martin+Rinard.+An+analysis+of+patch+plausibility+and+correctness+for+generate-and-validate+patch+generation+systems.+In+Proceedings+of+the+2015+International+Symposium+on+Software+Testing+and+Analysis%2C+pages+24-36.+ACM%2C+2015.^^^Ripon K Saha, Yingjun Lyu, Hiroaki Yoshida, and Mukul R Prasad. Elixir: efective object oriented program repair. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, pages 648-659. IEEE Press, 2017.***http://scholar.google.com/scholar?hl=en&q=Ripon+K+Saha%2C+Yingjun+Lyu%2C+Hiroaki+Yoshida%2C+and+Mukul+R+Prasad.+Elixir%3A+efective+object+oriented+program+repair.+In+Proceedings+of+the+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+pages+648-659.+IEEE+Press%2C+2017.^^^Ripon K Saha, Yingjun Lyu, Wing Lam, Hiroaki Yoshida, and Mukul R Prasad. Bugs. jar: a large-scale, diverse dataset of real-world java bugs. In Proceedings of the 15th International Conference on Mining Software Repositories, pages 10-13, 2018.***http://scholar.google.com/scholar?hl=en&q=Ripon+K+Saha%2C+Yingjun+Lyu%2C+Wing+Lam%2C+Hiroaki+Yoshida%2C+and+Mukul+R+Prasad.+Bugs.+jar%3A+a+large-scale%2C+diverse+dataset+of+real-world+java+bugs.+In+Proceedings+of+the+15th+International+Conference+on+Mining+Software+Repositories%2C+pages+10-13%2C+2018.^^^Seemanta Saha, Ripon K Saha, and Mukul R Prasad. Harnessing evolution for multi-hunk program repair. In Proceedings of the 41st International Conference on Software Engineering, pages 13-24. IEEE Press, 2019.***http://scholar.google.com/scholar?hl=en&q=Seemanta+Saha%2C+Ripon+K+Saha%2C+and+Mukul+R+Prasad.+Harnessing+evolution+for+multi-hunk+program+repair.+In+Proceedings+of+the+41st+International+Conference+on+Software+Engineering%2C+pages+13-24.+IEEE+Press%2C+2019.^^^Keisuke Sakaguchi, Matt Post, and Benjamin Van Durme. Grammatical Error Correction with Neural Reinforcement Learning. 2017. URL http://arxiv.org/abs/ 1707.00299.***http://scholar.google.com/scholar?hl=en&q=Keisuke+Sakaguchi%2C+Matt+Post%2C+and+Benjamin+Van+Durme.+Grammatical+Error+Correction+with+Neural+Reinforcement+Learning.+2017.+URL+http%3A%2F%2Farxiv.org%2Fabs%2F+1707.00299.^^^Eddie A Santos, Joshua C Campbell, Abram Hindle, and José Nelson Amaral. Finding and correcting syntax errors using recurrent neural networks. PeerJ PrePrints, 2017.***http://scholar.google.com/scholar?hl=en&q=Eddie+A+Santos%2C+Joshua+C+Campbell%2C+Abram+Hindle%2C+and+Jos%C3%A9+Nelson+Amaral.+Finding+and+correcting+syntax+errors+using+recurrent+neural+networks.+PeerJ+PrePrints%2C+2017.^^^Allen Schmaltz, Yoon Kim, Alexander M. Rush, and Stuart M. Shieber. Adapting Sequence Models for Sentence Correction. 2017. URL http://arxiv.org/abs/1707. 09067.***http://scholar.google.com/scholar?hl=en&q=Allen+Schmaltz%2C+Yoon+Kim%2C+Alexander+M.+Rush%2C+and+Stuart+M.+Shieber.+Adapting+Sequence+Models+for+Sentence+Correction.+2017.+URL+http%3A%2F%2Farxiv.org%2Fabs%2F1707.+09067.^^^Ming Tan, Lin Tan, Sashank Dara, and Caleb Mayeux. Online defect prediction for imbalanced data. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, volume 2, pages 99-108. IEEE, 2015.***http://scholar.google.com/scholar?hl=en&q=Ming+Tan%2C+Lin+Tan%2C+Sashank+Dara%2C+and+Caleb+Mayeux.+Online+defect+prediction+for+imbalanced+data.+In+2015+IEEE%2FACM+37th+IEEE+International+Conference+on+Software+Engineering%2C+volume+2%2C+pages+99-108.+IEEE%2C+2015.^^^Shin Hwei Tan, Jooyong Yi, Sergey Mechtaev, Abhik Roychoudhury, et al. Codelfaws: a programming competition benchmark for evaluating automated program repair tools. In Proceedings of the 39th International Conference on Software Engineering Companion, pages 180-182. IEEE Press, 2017.***http://scholar.google.com/scholar?hl=en&q=Shin+Hwei+Tan%2C+Jooyong+Yi%2C+Sergey+Mechtaev%2C+Abhik+Roychoudhury%2C+et+al.+Codelfaws%3A+a+programming+competition+benchmark+for+evaluating+automated+program+repair+tools.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering+Companion%2C+pages+180-182.+IEEE+Press%2C+2017.^^^Michele Tufano, Cody Watson, Gabriele Bavota, Massimiliano Di Penta, Martin White, and Denys Poshyvanyk. An empirical investigation into learning bugifxing patches in the wild via neural machine translation. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, pages 832-837, 2018.***http://scholar.google.com/scholar?hl=en&q=Michele+Tufano%2C+Cody+Watson%2C+Gabriele+Bavota%2C+Massimiliano+Di+Penta%2C+Martin+White%2C+and+Denys+Poshyvanyk.+An+empirical+investigation+into+learning+bugifxing+patches+in+the+wild+via+neural+machine+translation.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering.+ACM%2C+pages+832-837%2C+2018.^^^Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin. Attention is all you need. In Advances in Neural Information Processing Systems, pages 5998-6008, 2017.***http://scholar.google.com/scholar?hl=en&q=Ashish+Vaswani%2C+Noam+Shazeer%2C+Niki+Parmar%2C+Jakob+Uszkoreit%2C+Llion+Jones%2C+Aidan+N+Gomez%2C+%C5%81ukasz+Kaiser%2C+and+Illia+Polosukhin.+Attention+is+all+you+need.+In+Advances+in+Neural+Information+Processing+Systems%2C+pages+5998-6008%2C+2017.^^^Jinyong Wang and Ce Zhang. Software reliability prediction using a deep learning model based on the rnn encoder-decoder. Reliability Engineering & System Safety, 2017.***http://scholar.google.com/scholar?hl=en&q=Jinyong+Wang+and+Ce+Zhang.+Software+reliability+prediction+using+a+deep+learning+model+based+on+the+rnn+encoder-decoder.+Reliability+Engineering+%26+System+Safety%2C+2017.^^^Ke Wang, Rishabh Singh, and Zhendong Su. Dynamic neural program embedding for program repair. arXiv preprint arXiv:1711.07163, 2017.***http://scholar.google.com/scholar?hl=en&q=Ke+Wang%2C+Rishabh+Singh%2C+and+Zhendong+Su.+Dynamic+neural+program+embedding+for+program+repair.+arXiv+preprint+arXiv%3A1711.07163%2C+2017.^^^Song Wang, Taiyue Liu, and Lin Tan. Automatically learning semantic features for defect prediction. In Software Engineering (ICSE), 2016 IEEE/ACM 38th International Conference on, pages 297-308. IEEE, 2016.***http://scholar.google.com/scholar?hl=en&q=Song+Wang%2C+Taiyue+Liu%2C+and+Lin+Tan.+Automatically+learning+semantic+features+for+defect+prediction.+In+Software+Engineering+%28ICSE%29%2C+2016+IEEE%2FACM+38th+International+Conference+on%2C+pages+297-308.+IEEE%2C+2016.^^^Ming Wen, Junjie Chen, Rongxin Wu, Dan Hao, and Shing-Chi Cheung. Contextaware patch generation for better automated program repair. In Proceedings of the 40th International Conference on Software Engineering, pages 1-11. ACM, 2018.***http://scholar.google.com/scholar?hl=en&q=Ming+Wen%2C+Junjie+Chen%2C+Rongxin+Wu%2C+Dan+Hao%2C+and+Shing-Chi+Cheung.+Contextaware+patch+generation+for+better+automated+program+repair.+In+Proceedings+of+the+40th+International+Conference+on+Software+Engineering%2C+pages+1-11.+ACM%2C+2018.^^^Martin White, Christopher Vendome, Mario Linares-Vásquez, and Denys Poshyvanyk. Toward deep learning software repositories. In Mining Software Repositories (MSR), 2015 IEEE/ACM 12th Working Conference on, pages 334-345. IEEE, 2015.***http://scholar.google.com/scholar?hl=en&q=Martin+White%2C+Christopher+Vendome%2C+Mario+Linares-V%C3%A1squez%2C+and+Denys+Poshyvanyk.+Toward+deep+learning+software+repositories.+In+Mining+Software+Repositories+%28MSR%29%2C+2015+IEEE%2FACM+12th+Working+Conference+on%2C+pages+334-345.+IEEE%2C+2015.^^^Martin White, Michele Tufano, Christopher Vendome, and Denys Poshyvanyk. Deep learning code fragments for code clone detection. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pages 87-98. ACM, 2016.***http://scholar.google.com/scholar?hl=en&q=Martin+White%2C+Michele+Tufano%2C+Christopher+Vendome%2C+and+Denys+Poshyvanyk.+Deep+learning+code+fragments+for+code+clone+detection.+In+Proceedings+of+the+31st+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+pages+87-98.+ACM%2C+2016.^^^Tong Xiao, Tian Xia, Yi Yang, Chang Huang, and Xiaogang Wang. Learning from massive noisy labeled data for image classification. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 2691-2699, 2015.***http://scholar.google.com/scholar?hl=en&q=Tong+Xiao%2C+Tian+Xia%2C+Yi+Yang%2C+Chang+Huang%2C+and+Xiaogang+Wang.+Learning+from+massive+noisy+labeled+data+for+image+classification.+In+Proceedings+of+the+IEEE+conference+on+computer+vision+and+pattern+recognition%2C+pages+2691-2699%2C+2015.^^^Qi Xin and Steven P Reiss. Leveraging syntax-related code for automated program repair. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering, pages 660-670. IEEE Press, 2017.***http://scholar.google.com/scholar?hl=en&q=Qi+Xin+and+Steven+P+Reiss.+Leveraging+syntax-related+code+for+automated+program+repair.+In+Proceedings+of+the+32nd+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering%2C+pages+660-670.+IEEE+Press%2C+2017.^^^Yingfei Xiong, Jie Wang, Runfa Yan, Jiachen Zhang, Shi Han, Gang Huang, and Lu Zhang. Precise condition synthesis for program repair. In Proceedings of the 39th International Conference on Software Engineering, pages 416-426. IEEE Press, 2017.***http://scholar.google.com/scholar?hl=en&q=Yingfei+Xiong%2C+Jie+Wang%2C+Runfa+Yan%2C+Jiachen+Zhang%2C+Shi+Han%2C+Gang+Huang%2C+and+Lu+Zhang.+Precise+condition+synthesis+for+program+repair.+In+Proceedings+of+the+39th+International+Conference+on+Software+Engineering%2C+pages+416-426.+IEEE+Press%2C+2017.^^^Jifeng Xuan, Matias Martinez, Favio Demarco, Maxime Clement, Sebastian Lamelas Marcote, Thomas Durieux, Daniel Le Berre, and Martin Monperrus. Nopol: Automatic repair of conditional statement bugs in java programs. IEEE Transactions on Software Engineering, 43 ( 1 ): 34-55, 2017.***http://scholar.google.com/scholar?hl=en&q=Jifeng+Xuan%2C+Matias+Martinez%2C+Favio+Demarco%2C+Maxime+Clement%2C+Sebastian+Lamelas+Marcote%2C+Thomas+Durieux%2C+Daniel+Le+Berre%2C+and+Martin+Monperrus.+Nopol%3A+Automatic+repair+of+conditional+statement+bugs+in+java+programs.+IEEE+Transactions+on+Software+Engineering%2C+43+%28+1+%29%3A+34-55%2C+2017.^^^Jinqiu Yang, Alexey Zhikhartsev, Yuefei Liu, and Lin Tan. Better test cases for better automated program repair. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pages 831-841. ACM, 2017.***http://scholar.google.com/scholar?hl=en&q=Jinqiu+Yang%2C+Alexey+Zhikhartsev%2C+Yuefei+Liu%2C+and+Lin+Tan.+Better+test+cases+for+better+automated+program+repair.+In+Proceedings+of+the+2017+11th+Joint+Meeting+on+Foundations+of+Software+Engineering%2C+pages+831-841.+ACM%2C+2017.^^^Helen Yannakoudakis, Marek Rei, Øistein E Andersen, and Zheng Yuan. Neural Sequence-Labelling Models for Grammatical Error Correction. Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, pages 2795-2806, 2017. doi: 10.18653/v1/ D17-1297. URL http://aclweb.org/anthology/D17-1297.***http://scholar.google.com/scholar?hl=en&q=Helen+Yannakoudakis%2C+Marek+Rei%2C+%C3%98istein+E+Andersen%2C+and+Zheng+Yuan.+Neural+Sequence-Labelling+Models+for+Grammatical+Error+Correction.+Proceedings+of+the+2017+Conference+on+Empirical+Methods+in+Natural+Language+Processing%2C+pages+2795-2806%2C+2017.+doi%3A+10.18653%2Fv1%2F+D17-1297.+URL+http%3A%2F%2Faclweb.org%2Fanthology%2FD17-1297.^^^Yuan Yuan and Wolfgang Banzhaf. Arja: Automated repair of java programs via multi-objective genetic programming. IEEE Transactions on Software Engineering, 2018.***http://scholar.google.com/scholar?hl=en&q=Yuan+Yuan+and+Wolfgang+Banzhaf.+Arja%3A+Automated+repair+of+java+programs+via+multi-objective+genetic+programming.+IEEE+Transactions+on+Software+Engineering%2C+2018.^^^');
INSERT INTO `paper_ref` VALUES (52, 86, '2016. CVE-2017-0144. Available from MITRE, CVE-ID CVE-2017-0144.. https: //cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0144***http://scholar.google.com/scholar?hl=en&q=2016.+CVE-2017-0144.+Available+from+MITRE%2C+CVE-ID+CVE-2017-0144..+https%3A+%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3DCVE-2017-0144^^^2020. iTrust Labs: Datasets. https://itrust.sutd.edu.sg/itrust-labs_datasets/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=2020.+iTrust+Labs%3A+Datasets.+https%3A%2F%2Fitrust.sutd.edu.sg%2Fitrust-labs_datasets%2F.+Accessed%3A+May+2020.^^^2020. Scapy. https://scapy.net/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=2020.+Scapy.+https%3A%2F%2Fscapy.net%2F.+Accessed%3A+May+2020.^^^2020. Secure Water Treatment (SWaT ). https://itrust.sutd.edu.sg/itrust-labshome/itrust-labs_swat/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=2020.+Secure+Water+Treatment+%28SWaT+%29.+https%3A%2F%2Fitrust.sutd.edu.sg%2Fitrust-labshome%2Fitrust-labs_swat%2F.+Accessed%3A+May+2020.^^^2020. Supplementary material. https://github.com/yuqiChen94/Active_fuzzer.***http://scholar.google.com/scholar?hl=en&q=2020.+Supplementary+material.+https%3A%2F%2Fgithub.com%2FyuqiChen94%2FActive_fuzzer.^^^2020. Wireshark. https://www.wireshark.org/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=2020.+Wireshark.+https%3A%2F%2Fwww.wireshark.org%2F.+Accessed%3A+May+2020.^^^Sridhar Adepu and Aditya Mathur. 2016. Distributed Detection of Single-Stage Multipoint Cyber Attacks in a Water Treatment Plant. In Proc. ACM Asia Conference on Computer and Communications Security (AsiaCCS 2016 ). ACM, 449-460.***http://scholar.google.com/scholar?hl=en&q=Sridhar+Adepu+and+Aditya+Mathur.+2016.+Distributed+Detection+of+Single-Stage+Multipoint+Cyber+Attacks+in+a+Water+Treatment+Plant.+In+Proc.+ACM+Asia+Conference+on+Computer+and+Communications+Security+%28AsiaCCS+2016+%29.+ACM%2C+449-460.^^^Sridhar Adepu and Aditya Mathur. 2016. Using Process Invariants to Detect Cyber Attacks on a Water Treatment System. In Proc. International Conference on ICT Systems Security and Privacy Protection (SEC 2016 ) (IFIP AICT), Vol. 471. Springer, 91-104.***http://scholar.google.com/scholar?hl=en&q=Sridhar+Adepu+and+Aditya+Mathur.+2016.+Using+Process+Invariants+to+Detect+Cyber+Attacks+on+a+Water+Treatment+System.+In+Proc.+International+Conference+on+ICT+Systems+Security+and+Privacy+Protection+%28SEC+2016+%29+%28IFIP+AICT%29%2C+Vol.+471.+Springer%2C+91-104.^^^Sridhar Adepu and Aditya Mathur. 2018. Assessing the Efectiveness of Attack Detection at a Hackfest on Industrial Control Systems. IEEE Transactions on Sustainable Computing ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Sridhar+Adepu+and+Aditya+Mathur.+2018.+Assessing+the+Efectiveness+of+Attack+Detection+at+a+Hackfest+on+Industrial+Control+Systems.+IEEE+Transactions+on+Sustainable+Computing+%28+2018+%29.^^^Sridhar Adepu and Aditya Mathur. 2018. Distributed Attack Detection in a Water Treatment Plant: Method and Case Study. IEEE Transactions on Dependable and Secure Computing ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Sridhar+Adepu+and+Aditya+Mathur.+2018.+Distributed+Attack+Detection+in+a+Water+Treatment+Plant%3A+Method+and+Case+Study.+IEEE+Transactions+on+Dependable+and+Secure+Computing+%28+2018+%29.^^^Ekta Aggarwal, Mehdi Karimibiuki, Karthik Pattabiraman, and André Ivanov. 2018. CORGIDS: A Correlation-based Generic Intrusion Detection System. In Proc. Workshop on Cyber-Physical Systems Security and PrivaCy (CPS-SPC 2018 ). ACM, 24-35.***http://scholar.google.com/scholar?hl=en&q=Ekta+Aggarwal%2C+Mehdi+Karimibiuki%2C+Karthik+Pattabiraman%2C+and+Andr%C3%A9+Ivanov.+2018.+CORGIDS%3A+A+Correlation-based+Generic+Intrusion+Detection+System.+In+Proc.+Workshop+on+Cyber-Physical+Systems+Security+and+PrivaCy+%28CPS-SPC+2018+%29.+ACM%2C+24-35.^^^Chuadhry Mujeeb Ahmed, Martín Ochoa, Jianying Zhou, Aditya P. Mathur, Rizwan Qadeer, Carlos Murguia, and Justin Ruths. 2018. NoisePrint: Attack Detection Using Sensor and Process Noise Fingerprint in Cyber Physical Systems. In Proc. Asia Conference on Computer and Communications Security (AsiaCCS 2018 ). ACM, 483-497.***http://scholar.google.com/scholar?hl=en&q=Chuadhry+Mujeeb+Ahmed%2C+Mart%C3%ADn+Ochoa%2C+Jianying+Zhou%2C+Aditya+P.+Mathur%2C+Rizwan+Qadeer%2C+Carlos+Murguia%2C+and+Justin+Ruths.+2018.+NoisePrint%3A+Attack+Detection+Using+Sensor+and+Process+Noise+Fingerprint+in+Cyber+Physical+Systems.+In+Proc.+Asia+Conference+on+Computer+and+Communications+Security+%28AsiaCCS+2018+%29.+ACM%2C+483-497.^^^Chuadhry Mujeeb Ahmed, Jianying Zhou, and Aditya P. Mathur. 2018. Noise Matters: Using Sensor and Process Noise Fingerprint to Detect Stealthy Cyber Attacks and Authenticate sensors in CPS. In Proc. Annual Computer Security Applications Conference (ACSAC 2018 ). ACM, 566-581.***http://scholar.google.com/scholar?hl=en&q=Chuadhry+Mujeeb+Ahmed%2C+Jianying+Zhou%2C+and+Aditya+P.+Mathur.+2018.+Noise+Matters%3A+Using+Sensor+and+Process+Noise+Fingerprint+to+Detect+Stealthy+Cyber+Attacks+and+Authenticate+sensors+in+CPS.+In+Proc.+Annual+Computer+Security+Applications+Conference+%28ACSAC+2018+%29.+ACM%2C+566-581.^^^Takumi Akazaki, Shuang Liu, Yoriyuki Yamagata, Yihai Duan, and Jianye Hao. 2018. Falsification of Cyber-Physical Systems Using Deep Reinforcement Learning. In Proc. International Symposium on Formal Methods (FM 2018 ) (LNCS), Vol. 10951. Springer, 456-465.***http://scholar.google.com/scholar?hl=en&q=Takumi+Akazaki%2C+Shuang+Liu%2C+Yoriyuki+Yamagata%2C+Yihai+Duan%2C+and+Jianye+Hao.+2018.+Falsification+of+Cyber-Physical+Systems+Using+Deep+Reinforcement+Learning.+In+Proc.+International+Symposium+on+Formal+Methods+%28FM+2018+%29+%28LNCS%29%2C+Vol.+10951.+Springer%2C+456-465.^^^Wissam Aoudi, Mikel Iturbe, and Magnus Almgren. 2018. Truth Will Out: Departure-Based Process-Level Detection of Stealthy Attacks on Control Systems. In Proc. ACM SIGSAC Conference on Computer and Communications Security (CCS 2018 ). ACM, 817-831.***http://scholar.google.com/scholar?hl=en&q=Wissam+Aoudi%2C+Mikel+Iturbe%2C+and+Magnus+Almgren.+2018.+Truth+Will+Out%3A+Departure-Based+Process-Level+Detection+of+Stealthy+Attacks+on+Control+Systems.+In+Proc.+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+2018+%29.+ACM%2C+817-831.^^^John S. Atkinson, John E. Mitchell, Miguel Rio, and George Matich. 2018. Your WiFi is leaking: What do your mobile apps gossip about you? Future Generation Comp. Syst. 80 ( 2018 ), 546-557.***http://scholar.google.com/scholar?hl=en&q=John+S.+Atkinson%2C+John+E.+Mitchell%2C+Miguel+Rio%2C+and+George+Matich.+2018.+Your+WiFi+is+leaking%3A+What+do+your+mobile+apps+gossip+about+you%3F+Future+Generation+Comp.+Syst.+80+%28+2018+%29%2C+546-557.^^^Wenbin Cai, Ya Zhang, and Jun Zhou. 2013. Maximizing Expected Model Change for Active Learning in Regression. In Proc. IEEE 13th International Conference on Data Mining (ICDM 2013 ). IEEE Computer Society, 51-60.***http://scholar.google.com/scholar?hl=en&q=Wenbin+Cai%2C+Ya+Zhang%2C+and+Jun+Zhou.+2013.+Maximizing+Expected+Model+Change+for+Active+Learning+in+Regression.+In+Proc.+IEEE+13th+International+Conference+on+Data+Mining+%28ICDM+2013+%29.+IEEE+Computer+Society%2C+51-60.^^^Alvaro A. Cárdenas, Saurabh Amin, Zong-Syun Lin, Yu-Lun Huang, Chi-Yen Huang, and Shankar Sastry. 2011. Attacks against process control systems: risk assessment, detection, and response. In Proc. ACM Symposium on Information, Computer and Communications Security (AsiaCCS 2011 ). ACM, 355-366.***http://scholar.google.com/scholar?hl=en&q=Alvaro+A.+C%C3%A1rdenas%2C+Saurabh+Amin%2C+Zong-Syun+Lin%2C+Yu-Lun+Huang%2C+Chi-Yen+Huang%2C+and+Shankar+Sastry.+2011.+Attacks+against+process+control+systems%3A+risk+assessment%2C+detection%2C+and+response.+In+Proc.+ACM+Symposium+on+Information%2C+Computer+and+Communications+Security+%28AsiaCCS+2011+%29.+ACM%2C+355-366.^^^Alvaro A. Cárdenas, Robin Berthier, Rakesh B. Bobba, Jun Ho Huh, Jorjeta G. Jetcheva, David Grochocki, and William H. Sanders. 2014. A Framework for Evaluating Intrusion Detection Architectures in Advanced Metering Infrastructures. IEEE Transactions on Smart Grid 5, 2 ( 2014 ), 906-915.***http://scholar.google.com/scholar?hl=en&q=Alvaro+A.+C%C3%A1rdenas%2C+Robin+Berthier%2C+Rakesh+B.+Bobba%2C+Jun+Ho+Huh%2C+Jorjeta+G.+Jetcheva%2C+David+Grochocki%2C+and+William+H.+Sanders.+2014.+A+Framework+for+Evaluating+Intrusion+Detection+Architectures+in+Advanced+Metering+Infrastructures.+IEEE+Transactions+on+Smart+Grid+5%2C+2+%28+2014+%29%2C+906-915.^^^John H. Castellanos, Martín Ochoa, and Jianying Zhou. 2018. Finding Dependencies between Cyber-Physical Domains for Security Testing of Industrial Control Systems. In Proc. Annual Computer Security Applications Conference (ACSAC 2018 ). ACM, 582-594.***http://scholar.google.com/scholar?hl=en&q=John+H.+Castellanos%2C+Mart%C3%ADn+Ochoa%2C+and+Jianying+Zhou.+2018.+Finding+Dependencies+between+Cyber-Physical+Domains+for+Security+Testing+of+Industrial+Control+Systems.+In+Proc.+Annual+Computer+Security+Applications+Conference+%28ACSAC+2018+%29.+ACM%2C+582-594.^^^Rui M. Castro, Rebecca Willett, and Robert D. Nowak. 2005. Faster Rates in Regression via Active Learning. In Proc. Annual Conference on Neural Information Processing Systems (NIPS 2005 ). 179-186.***http://scholar.google.com/scholar?hl=en&q=Rui+M.+Castro%2C+Rebecca+Willett%2C+and+Robert+D.+Nowak.+2005.+Faster+Rates+in+Regression+via+Active+Learning.+In+Proc.+Annual+Conference+on+Neural+Information+Processing+Systems+%28NIPS+2005+%29.+179-186.^^^Sang Kil Cha, Maverick Woo, and David Brumley. 2015. Program-Adaptive Mutational Fuzzing. In Proc. IEEE Symposium on Security and Privacy (S&P 2015 ). IEEE Computer Society, 725-741.***http://scholar.google.com/scholar?hl=en&q=Sang+Kil+Cha%2C+Maverick+Woo%2C+and+David+Brumley.+2015.+Program-Adaptive+Mutational+Fuzzing.+In+Proc.+IEEE+Symposium+on+Security+and+Privacy+%28S%26P+2015+%29.+IEEE+Computer+Society%2C+725-741.^^^Gang Chen, Zachary Sabato, and Zhaodan Kong. 2016. Active learning based requirement mining for cyber-physical systems. In Proc. IEEE Conference on Decision and Control (CDC 2016 ). IEEE, 4586-4593.***http://scholar.google.com/scholar?hl=en&q=Gang+Chen%2C+Zachary+Sabato%2C+and+Zhaodan+Kong.+2016.+Active+learning+based+requirement+mining+for+cyber-physical+systems.+In+Proc.+IEEE+Conference+on+Decision+and+Control+%28CDC+2016+%29.+IEEE%2C+4586-4593.^^^Yuqi Chen, Christopher M. Poskitt, and Jun Sun. 2016. Towards Learning and Verifying Invariants of Cyber-Physical Systems by Code Mutation. In Proc. International Symposium on Formal Methods (FM 2016 ) (LNCS), Vol. 9995. Springer, 155-163.***http://scholar.google.com/scholar?hl=en&q=Yuqi+Chen%2C+Christopher+M.+Poskitt%2C+and+Jun+Sun.+2016.+Towards+Learning+and+Verifying+Invariants+of+Cyber-Physical+Systems+by+Code+Mutation.+In+Proc.+International+Symposium+on+Formal+Methods+%28FM+2016+%29+%28LNCS%29%2C+Vol.+9995.+Springer%2C+155-163.^^^Yuqi Chen, Christopher M. Poskitt, and Jun Sun. 2018. Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants of a Cyber-Physical System. In Proc. IEEE Symposium on Security and Privacy (S&P 2018 ). IEEE Computer Society, 648-660.***http://scholar.google.com/scholar?hl=en&q=Yuqi+Chen%2C+Christopher+M.+Poskitt%2C+and+Jun+Sun.+2018.+Learning+from+Mutants%3A+Using+Code+Mutation+to+Learn+and+Monitor+Invariants+of+a+Cyber-Physical+System.+In+Proc.+IEEE+Symposium+on+Security+and+Privacy+%28S%26P+2018+%29.+IEEE+Computer+Society%2C+648-660.^^^Yuqi Chen, Christopher M. Poskitt, Jun Sun, Sridhar Adepu, and Fan Zhang. 2019. Learning-Guided Network Fuzzing for Testing Cyber-Physical System Defences. In Proc. IEEE/ACM International Conference on Automated Software Engineering (ASE 2019 ). IEEE Computer Society, 962-973.***http://scholar.google.com/scholar?hl=en&q=Yuqi+Chen%2C+Christopher+M.+Poskitt%2C+Jun+Sun%2C+Sridhar+Adepu%2C+and+Fan+Zhang.+2019.+Learning-Guided+Network+Fuzzing+for+Testing+Cyber-Physical+System+Defences.+In+Proc.+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+2019+%29.+IEEE+Computer+Society%2C+962-973.^^^Long Cheng, Ke Tian, and Danfeng (Daphne) Yao. 2017. Orpheus: Enforcing Cyber-Physical Execution Semantics to Defend Against Data-Oriented Attacks. In Proc. Annual Computer Security Applications Conference (ACSAC 2017 ). ACM, 315-326.***http://scholar.google.com/scholar?hl=en&q=Long+Cheng%2C+Ke+Tian%2C+and+Danfeng+%28Daphne%29+Yao.+2017.+Orpheus%3A+Enforcing+Cyber-Physical+Execution+Semantics+to+Defend+Against+Data-Oriented+Attacks.+In+Proc.+Annual+Computer+Security+Applications+Conference+%28ACSAC+2017+%29.+ACM%2C+315-326.^^^Hongjun Choi, Wen-Chuan Lee, Yousra Aafer, Fan Fei, Zhan Tu, Xiangyu Zhang, Dongyan Xu, and Xinyan Xinyan. 2018. Detecting Attacks Against Robotic Vehicles: A Control Invariant Approach. In Proc. ACM SIGSAC Conference on Computer and Communications Security (CCS 2018 ). ACM, 801-816.***http://scholar.google.com/scholar?hl=en&q=Hongjun+Choi%2C+Wen-Chuan+Lee%2C+Yousra+Aafer%2C+Fan+Fei%2C+Zhan+Tu%2C+Xiangyu+Zhang%2C+Dongyan+Xu%2C+and+Xinyan+Xinyan.+2018.+Detecting+Attacks+Against+Robotic+Vehicles%3A+A+Control+Invariant+Approach.+In+Proc.+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+2018+%29.+ACM%2C+801-816.^^^Shafiul Azam Chowdhury, Taylor T. Johnson, and Christoph Csallner. 2017. CyFuzz: A Diferential Testing Framework for Cyber-Physical Systems Development Environments. In Proc. Workshop on Design, Modeling and Evaluation of Cyber Physical Systems (CyPhy 2016 ) (LNCS), Vol. 10107. Springer, 46-60.***http://scholar.google.com/scholar?hl=en&q=Shafiul+Azam+Chowdhury%2C+Taylor+T.+Johnson%2C+and+Christoph+Csallner.+2017.+CyFuzz%3A+A+Diferential+Testing+Framework+for+Cyber-Physical+Systems+Development+Environments.+In+Proc.+Workshop+on+Design%2C+Modeling+and+Evaluation+of+Cyber+Physical+Systems+%28CyPhy+2016+%29+%28LNCS%29%2C+Vol.+10107.+Springer%2C+46-60.^^^Pritam Dash, Mehdi Karimibiuki, and Karthik Pattabiraman. 2019. Out of control: stealthy attacks against robotic vehicles protected by control-based techniques. In Proc. Annual Computer Security Applications Conference (ACSAC 2019 ). ACM, 660-672.***http://scholar.google.com/scholar?hl=en&q=Pritam+Dash%2C+Mehdi+Karimibiuki%2C+and+Karthik+Pattabiraman.+2019.+Out+of+control%3A+stealthy+attacks+against+robotic+vehicles+protected+by+control-based+techniques.+In+Proc.+Annual+Computer+Security+Applications+Conference+%28ACSAC+2019+%29.+ACM%2C+660-672.^^^Sriharsha Etigowni, Dave (Jing) Tian, Grant Hernandez, Saman A. Zonouz, and Kevin R. B. Butler. 2016. CPAC: securing critical infrastructure with cyberphysical access control. In Proc. Annual Conference on Computer Security Applications (ACSAC 2016 ). ACM, 139-152.***http://scholar.google.com/scholar?hl=en&q=Sriharsha+Etigowni%2C+Dave+%28Jing%29+Tian%2C+Grant+Hernandez%2C+Saman+A.+Zonouz%2C+and+Kevin+R.+B.+Butler.+2016.+CPAC%3A+securing+critical+infrastructure+with+cyberphysical+access+control.+In+Proc.+Annual+Conference+on+Computer+Security+Applications+%28ACSAC+2016+%29.+ACM%2C+139-152.^^^Cheng Feng, Venkata Reddy Palleti, Aditya Mathur, and Deeph Chana. 2019. A Systematic Framework to Generate Invariants for Anomaly Detection in Industrial Control Systems. In Proc. Annual Network and Distributed System Security Symposium (NDSS 2019 ). The Internet Society.***http://scholar.google.com/scholar?hl=en&q=Cheng+Feng%2C+Venkata+Reddy+Palleti%2C+Aditya+Mathur%2C+and+Deeph+Chana.+2019.+A+Systematic+Framework+to+Generate+Invariants+for+Anomaly+Detection+in+Industrial+Control+Systems.+In+Proc.+Annual+Network+and+Distributed+System+Security+Symposium+%28NDSS+2019+%29.+The+Internet+Society.^^^Shai Fine, Ran Gilad-Bachrach, and Eli Shamir. 2002. Query by committee, linear separation and random walks. Theoretical Computer Science 284, 1 ( 2002 ), 25-51.***http://scholar.google.com/scholar?hl=en&q=Shai+Fine%2C+Ran+Gilad-Bachrach%2C+and+Eli+Shamir.+2002.+Query+by+committee%2C+linear+separation+and+random+walks.+Theoretical+Computer+Science+284%2C+1+%28+2002+%29%2C+25-51.^^^Goran Frehse, Colas Le Guernic, Alexandre Donzé, Scott Cotton, Rajarshi Ray, Olivier Lebeltel, Rodolfo Ripado, Antoine Girard, Thao Dang, and Oded Maler. 2011. SpaceEx: Scalable Verification of Hybrid Systems. In Proc. International Conference on Computer Aided Verification (CAV 2011 ) (LNCS), Vol. 6806. Springer, 379-395.***http://scholar.google.com/scholar?hl=en&q=Goran+Frehse%2C+Colas+Le+Guernic%2C+Alexandre+Donz%C3%A9%2C+Scott+Cotton%2C+Rajarshi+Ray%2C+Olivier+Lebeltel%2C+Rodolfo+Ripado%2C+Antoine+Girard%2C+Thao+Dang%2C+and+Oded+Maler.+2011.+SpaceEx%3A+Scalable+Verification+of+Hybrid+Systems.+In+Proc.+International+Conference+on+Computer+Aided+Verification+%28CAV+2011+%29+%28LNCS%29%2C+Vol.+6806.+Springer%2C+379-395.^^^Jerome H. Friedman. 2001. Greedy Function Approximation: A Gradient Boosting Machine. Annals of Statistics 29 ( 2001 ), 1189-1232.***http://scholar.google.com/scholar?hl=en&q=Jerome+H.+Friedman.+2001.+Greedy+Function+Approximation%3A+A+Gradient+Boosting+Machine.+Annals+of+Statistics+29+%28+2001+%29%2C+1189-1232.^^^Sicun Gao, Soonho Kong, and Edmund M. Clarke. 2013. dReal: An SMT Solver for Nonlinear Theories over the Reals. In Proc. International Conference on Automated Deduction (CADE 2013 ) (LNCS), Vol. 7898. Springer, 208-214.***http://scholar.google.com/scholar?hl=en&q=Sicun+Gao%2C+Soonho+Kong%2C+and+Edmund+M.+Clarke.+2013.+dReal%3A+An+SMT+Solver+for+Nonlinear+Theories+over+the+Reals.+In+Proc.+International+Conference+on+Automated+Deduction+%28CADE+2013+%29+%28LNCS%29%2C+Vol.+7898.+Springer%2C+208-214.^^^Ran Gilad-Bachrach, Amir Navot, and Naftali Tishby. 2003. Kernel Query By Committee (KQBC). Technical Report. Leibniz Center, The Hebrew University.***http://scholar.google.com/scholar?hl=en&q=Ran+Gilad-Bachrach%2C+Amir+Navot%2C+and+Naftali+Tishby.+2003.+Kernel+Query+By+Committee+%28KQBC%29.+Technical+Report.+Leibniz+Center%2C+The+Hebrew+University.^^^Ran Gilad-Bachrach, Amir Navot, and Naftali Tishby. 2005. Query by Committee Made Real. In Proc. Annual Conference on Neural Information Processing Systems (NIPS 2005 ). 443-450.***http://scholar.google.com/scholar?hl=en&q=Ran+Gilad-Bachrach%2C+Amir+Navot%2C+and+Naftali+Tishby.+2005.+Query+by+Committee+Made+Real.+In+Proc.+Annual+Conference+on+Neural+Information+Processing+Systems+%28NIPS+2005+%29.+443-450.^^^Jairo Giraldo, David I. Urbina, Alvaro Cardenas, Junia Valente, Mustafa Amir Faisal, Justin Ruths, Nils Ole Tippenhauer, Henrik Sandberg, and Richard Candell. 2018. A Survey of Physics-Based Attack Detection in Cyber-Physical Systems. Comput. Surveys 51, 4 ( 2018 ), 76 : 1-76 : 36.***http://scholar.google.com/scholar?hl=en&q=Jairo+Giraldo%2C+David+I.+Urbina%2C+Alvaro+Cardenas%2C+Junia+Valente%2C+Mustafa+Amir+Faisal%2C+Justin+Ruths%2C+Nils+Ole+Tippenhauer%2C+Henrik+Sandberg%2C+and+Richard+Candell.+2018.+A+Survey+of+Physics-Based+Attack+Detection+in+Cyber-Physical+Systems.+Comput.+Surveys+51%2C+4+%28+2018+%29%2C+76+%3A+1-76+%3A+36.^^^Patrice Godefroid, Hila Peleg, and Rishabh Singh. 2017. Learn&Fuzz: machine learning for input fuzzing. In Proc. IEEE/ACM International Conference on Automated Software Engineering (ASE 2017 ). IEEE Computer Society, 50-59.***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Hila+Peleg%2C+and+Rishabh+Singh.+2017.+Learn%26Fuzz%3A+machine+learning+for+input+fuzzing.+In+Proc.+IEEE%2FACM+International+Conference+on+Automated+Software+Engineering+%28ASE+2017+%29.+IEEE+Computer+Society%2C+50-59.^^^Jonathan Goh, Sridhar Adepu, Khurum Nazir Junejo, and Aditya Mathur. 2016. A Dataset to Support Research in the Design of Secure Water Treatment Systems. In Proc. International Conference on Critical Information Infrastructures Security (CRITIS 2016 ).***http://scholar.google.com/scholar?hl=en&q=Jonathan+Goh%2C+Sridhar+Adepu%2C+Khurum+Nazir+Junejo%2C+and+Aditya+Mathur.+2016.+A+Dataset+to+Support+Research+in+the+Design+of+Secure+Water+Treatment+Systems.+In+Proc.+International+Conference+on+Critical+Information+Infrastructures+Security+%28CRITIS+2016+%29.^^^Jonathan Goh, Sridhar Adepu, Marcus Tan, and Zi Shan Lee. 2017. Anomaly detection in cyber physical systems using recurrent neural networks. In Proc. International Symposium on High Assurance Systems Engineering (HASE 2017 ). IEEE, 140-145.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Goh%2C+Sridhar+Adepu%2C+Marcus+Tan%2C+and+Zi+Shan+Lee.+2017.+Anomaly+detection+in+cyber+physical+systems+using+recurrent+neural+networks.+In+Proc.+International+Symposium+on+High+Assurance+Systems+Engineering+%28HASE+2017+%29.+IEEE%2C+140-145.^^^David E. Goldberg. 1989. Genetic Algorithms in Search, Optimization and Machine Learning. Addison-Wesley.***http://scholar.google.com/scholar?hl=en&q=David+E.+Goldberg.+1989.+Genetic+Algorithms+in+Search%2C+Optimization+and+Machine+Learning.+Addison-Wesley.^^^Qinchen Gu, David Formby, Shouling Ji, Hasan Cam, and Raheem A. Beyah. 2018. Fingerprinting for Cyber-Physical System Security: Device Physics Matters Too. IEEE Security & Privacy 16, 5 ( 2018 ), 49-59.***http://scholar.google.com/scholar?hl=en&q=Qinchen+Gu%2C+David+Formby%2C+Shouling+Ji%2C+Hasan+Cam%2C+and+Raheem+A.+Beyah.+2018.+Fingerprinting+for+Cyber-Physical+System+Security%3A+Device+Physics+Matters+Too.+IEEE+Security+%26+Privacy+16%2C+5+%28+2018+%29%2C+49-59.^^^Yoshiyuki Harada, Yoriyuki Yamagata, Osamu Mizuno, and Eun-Hye Choi. 2017. Log-Based Anomaly Detection of CPS Using a Statistical Method. In Proc. International Workshop on Empirical Software Engineering in Practice (IWESEP 2017 ). IEEE, 1-6.***http://scholar.google.com/scholar?hl=en&q=Yoshiyuki+Harada%2C+Yoriyuki+Yamagata%2C+Osamu+Mizuno%2C+and+Eun-Hye+Choi.+2017.+Log-Based+Anomaly+Detection+of+CPS+Using+a+Statistical+Method.+In+Proc.+International+Workshop+on+Empirical+Software+Engineering+in+Practice+%28IWESEP+2017+%29.+IEEE%2C+1-6.^^^Amin Hassanzadeh, Amin Rasekh, Stefano Galelli, Mohsen Aghashahi, Riccardo Taormina, Avi Ostfeld, and M. Katherine Banks. 2019. A Review of Cybersecurity Incidents in the Water Sector. Journal of Environmental Engineering (09 2019 ).***http://scholar.google.com/scholar?hl=en&q=Amin+Hassanzadeh%2C+Amin+Rasekh%2C+Stefano+Galelli%2C+Mohsen+Aghashahi%2C+Riccardo+Taormina%2C+Avi+Ostfeld%2C+and+M.+Katherine+Banks.+2019.+A+Review+of+Cybersecurity+Incidents+in+the+Water+Sector.+Journal+of+Environmental+Engineering+%2809+2019+%29.^^^Ichiro Hasuo and Kohei Suenaga. 2012. Exercises in Nonstandard Static Analysis of Hybrid Systems. In Proc. International Conference on Computer Aided Verification (CAV 2012 ) (LNCS), Vol. 7358. Springer, 462-478.***http://scholar.google.com/scholar?hl=en&q=Ichiro+Hasuo+and+Kohei+Suenaga.+2012.+Exercises+in+Nonstandard+Static+Analysis+of+Hybrid+Systems.+In+Proc.+International+Conference+on+Computer+Aided+Verification+%28CAV+2012+%29+%28LNCS%29%2C+Vol.+7358.+Springer%2C+462-478.^^^Zecheng He, Aswin Raghavan, Guangyuan Hu, Sek M. Chai, and Ruby B. Lee. 2019. Power-Grid Controller Anomaly Detection with Enhanced Temporal Deep Learning. In Proc. IEEE International Conference On Trust, Security And Privacy In Computing And Communications (TrustCom 2019 ). IEEE, 160-167.***http://scholar.google.com/scholar?hl=en&q=Zecheng+He%2C+Aswin+Raghavan%2C+Guangyuan+Hu%2C+Sek+M.+Chai%2C+and+Ruby+B.+Lee.+2019.+Power-Grid+Controller+Anomaly+Detection+with+Enhanced+Temporal+Deep+Learning.+In+Proc.+IEEE+International+Conference+On+Trust%2C+Security+And+Privacy+In+Computing+And+Communications+%28TrustCom+2019+%29.+IEEE%2C+160-167.^^^Christian Holler, Kim Herzig, and Andreas Zeller. 2012. Fuzzing with Code Fragments. In Proc. USENIX Security Symposium (USENIX 2012 ). USENIX Association, 445-458.***http://scholar.google.com/scholar?hl=en&q=Christian+Holler%2C+Kim+Herzig%2C+and+Andreas+Zeller.+2012.+Fuzzing+with+Code+Fragments.+In+Proc.+USENIX+Security+Symposium+%28USENIX+2012+%29.+USENIX+Association%2C+445-458.^^^Zhenqi Huang, Sriharsha Etigowni, Luis Garcia, Sayan Mitra, and Saman A. Zonouz. 2018. Algorithmic Attack Synthesis Using Hybrid Dynamics of Power Grid Critical Infrastructures. In Proc. IEEE/IFIP International Conference on Dependable Systems and Networks (DSN 2018 ). IEEE Computer Society, 151-162.***http://scholar.google.com/scholar?hl=en&q=Zhenqi+Huang%2C+Sriharsha+Etigowni%2C+Luis+Garcia%2C+Sayan+Mitra%2C+and+Saman+A.+Zonouz.+2018.+Algorithmic+Attack+Synthesis+Using+Hybrid+Dynamics+of+Power+Grid+Critical+Infrastructures.+In+Proc.+IEEE%2FIFIP+International+Conference+on+Dependable+Systems+and+Networks+%28DSN+2018+%29.+IEEE+Computer+Society%2C+151-162.^^^ICS-CERT Alert. 2016. Cyber-Attack Against Ukrainian Critical Infrastructure. https://ics-cert. us-cert.gov/alerts/IR-ALERT-H-16-056-01. document number: IR-ALERT-H-16-056-01.***http://scholar.google.com/scholar?hl=en&q=ICS-CERT+Alert.+2016.+Cyber-Attack+Against+Ukrainian+Critical+Infrastructure.+https%3A%2F%2Fics-cert.+us-cert.gov%2Falerts%2FIR-ALERT-H-16-056-01.+document+number%3A+IR-ALERT-H-16-056-01.^^^Jun Inoue, Yoriyuki Yamagata, Yuqi Chen, Christopher M. Poskitt, and Jun Sun. 2017. Anomaly Detection for a Water Treatment System Using Unsupervised Machine Learning. In Proc. IEEE International Conference on Data Mining Workshops (ICDMW 2017 ) : Data Mining for Cyberphysical and Industrial Systems (DMCIS 2017). IEEE, 1058-1065.***http://scholar.google.com/scholar?hl=en&q=Jun+Inoue%2C+Yoriyuki+Yamagata%2C+Yuqi+Chen%2C+Christopher+M.+Poskitt%2C+and+Jun+Sun.+2017.+Anomaly+Detection+for+a+Water+Treatment+System+Using+Unsupervised+Machine+Learning.+In+Proc.+IEEE+International+Conference+on+Data+Mining+Workshops+%28ICDMW+2017+%29+%3A+Data+Mining+for+Cyberphysical+and+Industrial+Systems+%28DMCIS+2017%29.+IEEE%2C+1058-1065.^^^ISA. 2020. ISA99, Industrial Automation and Control Systems Security. https: //www.isa.org/isa99/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=ISA.+2020.+ISA99%2C+Industrial+Automation+and+Control+Systems+Security.+https%3A+%2F%2Fwww.isa.org%2Fisa99%2F.+Accessed%3A+May+2020.^^^Taylor T. Johnson, Stanley Bak, Marco Caccamo, and Lui Sha. 2016. Real-Time Reachability for Verified Simplex Design. ACM Transactions on Embedded Computing Systems 15, 2 ( 2016 ), 26 : 1-26 : 27.***http://scholar.google.com/scholar?hl=en&q=Taylor+T.+Johnson%2C+Stanley+Bak%2C+Marco+Caccamo%2C+and+Lui+Sha.+2016.+Real-Time+Reachability+for+Verified+Simplex+Design.+ACM+Transactions+on+Embedded+Computing+Systems+15%2C+2+%28+2016+%29%2C+26+%3A+1-26+%3A+27.^^^Eunsuk Kang, Sridhar Adepu, Daniel Jackson, and Aditya P. Mathur. 2016. Modelbased security analysis of a water treatment system. In Proc. International Workshop on Software Engineering for Smart Cyber-Physical Systems (SEsCPS 2016 ). ACM, 22-28.***http://scholar.google.com/scholar?hl=en&q=Eunsuk+Kang%2C+Sridhar+Adepu%2C+Daniel+Jackson%2C+and+Aditya+P.+Mathur.+2016.+Modelbased+security+analysis+of+a+water+treatment+system.+In+Proc.+International+Workshop+on+Software+Engineering+for+Smart+Cyber-Physical+Systems+%28SEsCPS+2016+%29.+ACM%2C+22-28.^^^Marcel Kneib and Christopher Huth. 2018. Scission: Signal Characteristic-Based Sender Identification and Intrusion Detection in Automotive Networks. In Proc. ACM SIGSAC Conference on Computer and Communications Security (CCS 2018 ). ACM, 787-800.***http://scholar.google.com/scholar?hl=en&q=Marcel+Kneib+and+Christopher+Huth.+2018.+Scission%3A+Signal+Characteristic-Based+Sender+Identification+and+Intrusion+Detection+in+Automotive+Networks.+In+Proc.+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+2018+%29.+ACM%2C+787-800.^^^Pingfan Kong, Yi Li, Xiaohong Chen, Jun Sun, Meng Sun, and Jingyi Wang. 2016. Towards Concolic Testing for Hybrid Systems. In Proc. International Symposium on Formal Methods (FM 2016 ) (LNCS), Vol. 9995. Springer, 460-478.***http://scholar.google.com/scholar?hl=en&q=Pingfan+Kong%2C+Yi+Li%2C+Xiaohong+Chen%2C+Jun+Sun%2C+Meng+Sun%2C+and+Jingyi+Wang.+2016.+Towards+Concolic+Testing+for+Hybrid+Systems.+In+Proc.+International+Symposium+on+Formal+Methods+%28FM+2016+%29+%28LNCS%29%2C+Vol.+9995.+Springer%2C+460-478.^^^Moshe Kravchik and Asaf Shabtai. 2018. Detecting Cyber Attacks in Industrial Control Systems Using Convolutional Neural Networks. In Proc. Workshop on Cyber-Physical Systems Security and PrivaCy (CPS-SPC 2018 ). ACM, 72-83.***http://scholar.google.com/scholar?hl=en&q=Moshe+Kravchik+and+Asaf+Shabtai.+2018.+Detecting+Cyber+Attacks+in+Industrial+Control+Systems+Using+Convolutional+Neural+Networks.+In+Proc.+Workshop+on+Cyber-Physical+Systems+Security+and+PrivaCy+%28CPS-SPC+2018+%29.+ACM%2C+72-83.^^^Ruggero Lanotte, Massimo Merro, Riccardo Muradore, and Luca Viganò. 2017. A Formal Approach to Cyber-Physical Attacks. In Proc. IEEE Computer Security Foundations Symposium (CSF 2017 ). IEEE Computer Society, 436-450.***http://scholar.google.com/scholar?hl=en&q=Ruggero+Lanotte%2C+Massimo+Merro%2C+Riccardo+Muradore%2C+and+Luca+Vigan%C3%B2.+2017.+A+Formal+Approach+to+Cyber-Physical+Attacks.+In+Proc.+IEEE+Computer+Security+Foundations+Symposium+%28CSF+2017+%29.+IEEE+Computer+Society%2C+436-450.^^^John Leyden. 2016. Water treatment plant hacked, chemical mix changed for tap supplies. The Register ( 2016 ). https://www.theregister.co.uk/ 2016 /03/24/water_utility_hacked/ Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=John+Leyden.+2016.+Water+treatment+plant+hacked%2C+chemical+mix+changed+for+tap+supplies.+The+Register+%28+2016+%29.+https%3A%2F%2Fwww.theregister.co.uk%2F+2016+%2F03%2F24%2Fwater_utility_hacked%2F+Accessed%3A+May+2020.^^^Qin Lin, Sridhar Adepu, Sicco Verwer, and Aditya Mathur. 2018. TABOR: A Graphical Model-based Approach for Anomaly Detection in Industrial Control Systems. In Proc. Asia Conference on Computer and Communications Security (AsiaCCS 2018 ). ACM, 525-536.***http://scholar.google.com/scholar?hl=en&q=Qin+Lin%2C+Sridhar+Adepu%2C+Sicco+Verwer%2C+and+Aditya+Mathur.+2018.+TABOR%3A+A+Graphical+Model-based+Approach+for+Anomaly+Detection+in+Industrial+Control+Systems.+In+Proc.+Asia+Conference+on+Computer+and+Communications+Security+%28AsiaCCS+2018+%29.+ACM%2C+525-536.^^^Yao Liu, Peng Ning, and Michael K. Reiter. 2011. False data injection attacks against state estimation in electric power grids. ACM Transactions on Information and System Security 14, 1 ( 2011 ), 13 : 1-13 : 33.***http://scholar.google.com/scholar?hl=en&q=Yao+Liu%2C+Peng+Ning%2C+and+Michael+K.+Reiter.+2011.+False+data+injection+attacks+against+state+estimation+in+electric+power+grids.+ACM+Transactions+on+Information+and+System+Security+14%2C+1+%28+2011+%29%2C+13+%3A+1-13+%3A+33.^^^Edwin Lughofer. 2017. On-line active learning: A new paradigm to improve practical useability of data stream modeling methods. Information Sciences 415 ( 2017 ), 356-376.***http://scholar.google.com/scholar?hl=en&q=Edwin+Lughofer.+2017.+On-line+active+learning%3A+A+new+paradigm+to+improve+practical+useability+of+data+stream+modeling+methods.+Information+Sciences+415+%28+2017+%29%2C+356-376.^^^Stephen E. McLaughlin, Saman A. Zonouz, Devin J. Pohly, and Patrick D. McDaniel. 2014. A Trusted Safety Verifier for Process Controller Code. In Proc. Annual Network and Distributed System Security Symposium (NDSS 2014 ). The Internet Society.***http://scholar.google.com/scholar?hl=en&q=Stephen+E.+McLaughlin%2C+Saman+A.+Zonouz%2C+Devin+J.+Pohly%2C+and+Patrick+D.+McDaniel.+2014.+A+Trusted+Safety+Verifier+for+Process+Controller+Code.+In+Proc.+Annual+Network+and+Distributed+System+Security+Symposium+%28NDSS+2014+%29.+The+Internet+Society.^^^Jillian Morgan. 2015. Streaming Network Trafic Analysis Using Active Learning. Ph.D. Dissertation. Dalhousie University.***http://scholar.google.com/scholar?hl=en&q=Jillian+Morgan.+2015.+Streaming+Network+Trafic+Analysis+Using+Active+Learning.+Ph.D.+Dissertation.+Dalhousie+University.^^^Vedanth Narayanan and Rakesh B. Bobba. 2018. Learning Based Anomaly Detection for Industrial Arm Applications. In Proc. Workshop on Cyber-Physical Systems Security and PrivaCy (CPS-SPC 2018 ). ACM, 13-23.***http://scholar.google.com/scholar?hl=en&q=Vedanth+Narayanan+and+Rakesh+B.+Bobba.+2018.+Learning+Based+Anomaly+Detection+for+Industrial+Arm+Applications.+In+Proc.+Workshop+on+Cyber-Physical+Systems+Security+and+PrivaCy+%28CPS-SPC+2018+%29.+ACM%2C+13-23.^^^Thuy T. T. Nguyen and Grenville J. Armitage. 2006. Training on multiple sub-flows to optimise the use of Machine Learning classifiers in real-world IP networks. In Proc. Annual IEEE Conference on Local Computer Networks (LCN 2006 ). IEEE Computer Society, 369-376.***http://scholar.google.com/scholar?hl=en&q=Thuy+T.+T.+Nguyen+and+Grenville+J.+Armitage.+2006.+Training+on+multiple+sub-flows+to+optimise+the+use+of+Machine+Learning+classifiers+in+real-world+IP+networks.+In+Proc.+Annual+IEEE+Conference+on+Local+Computer+Networks+%28LCN+2006+%29.+IEEE+Computer+Society%2C+369-376.^^^Thuy T. T. Nguyen and Grenville J. Armitage. 2008. A survey of techniques for internet trafic classification using machine learning. IEEE Communications Surveys and Tutorials 10, 1-4 ( 2008 ), 56-76.***http://scholar.google.com/scholar?hl=en&q=Thuy+T.+T.+Nguyen+and+Grenville+J.+Armitage.+2008.+A+survey+of+techniques+for+internet+trafic+classification+using+machine+learning.+IEEE+Communications+Surveys+and+Tutorials+10%2C+1-4+%28+2008+%29%2C+56-76.^^^Fabio Pasqualetti, Florian Dorfler, and Francesco Bullo. 2011. Cyber-physical attacks in power networks: Models, fundamental limitations and monitor design. In Proc. IEEE Conference on Decision and Control and European Control Conference (CDC-ECC 2011 ). IEEE, 2195-2201.***http://scholar.google.com/scholar?hl=en&q=Fabio+Pasqualetti%2C+Florian+Dorfler%2C+and+Francesco+Bullo.+2011.+Cyber-physical+attacks+in+power+networks%3A+Models%2C+fundamental+limitations+and+monitor+design.+In+Proc.+IEEE+Conference+on+Decision+and+Control+and+European+Control+Conference+%28CDC-ECC+2011+%29.+IEEE%2C+2195-2201.^^^Jan-David Quesel, Stefan Mitsch, Sarah M. Loos, Nikos Arechiga, and André Platzer. 2016. How to model and prove hybrid systems with KeYmaera: a tutorial on safety. International Journal on Software Tools for Technology Transfer 18, 1 ( 2016 ), 67-91.***http://scholar.google.com/scholar?hl=en&q=Jan-David+Quesel%2C+Stefan+Mitsch%2C+Sarah+M.+Loos%2C+Nikos+Arechiga%2C+and+Andr%C3%A9+Platzer.+2016.+How+to+model+and+prove+hybrid+systems+with+KeYmaera%3A+a+tutorial+on+safety.+International+Journal+on+Software+Tools+for+Technology+Transfer+18%2C+1+%28+2016+%29%2C+67-91.^^^Peter Schneider and Konstantin Böttinger. 2018. High-Performance Unsupervised Anomaly Detection for Cyber-Physical System Networks. In Proc. Workshop on Cyber-Physical Systems Security and PrivaCy (CPS-SPC 2018 ). ACM, 1-12.***http://scholar.google.com/scholar?hl=en&q=Peter+Schneider+and+Konstantin+B%C3%B6ttinger.+2018.+High-Performance+Unsupervised+Anomaly+Detection+for+Cyber-Physical+System+Networks.+In+Proc.+Workshop+on+Cyber-Physical+Systems+Security+and+PrivaCy+%28CPS-SPC+2018+%29.+ACM%2C+1-12.^^^Sohil Lal Shrestha, Shafiul Azam Chowdhury, and Christoph Csallner. 2020. DeepFuzzSL: Generating models with deep learning to find bugs in the Simulink toolchain. In Proc. Workshop on Testing for Deep Learning and Deep Learning for Testing (DeepTest 2020 ). ACM. To appear.***http://scholar.google.com/scholar?hl=en&q=Sohil+Lal+Shrestha%2C+Shafiul+Azam+Chowdhury%2C+and+Christoph+Csallner.+2020.+DeepFuzzSL%3A+Generating+models+with+deep+learning+to+find+bugs+in+the+Simulink+toolchain.+In+Proc.+Workshop+on+Testing+for+Deep+Learning+and+Deep+Learning+for+Testing+%28DeepTest+2020+%29.+ACM.+To+appear.^^^Simone Silvetti, Alberto Policriti, and Luca Bortolussi. 2017. An Active Learning Approach to the Falsification of Black Box Cyber-Physical Systems. In Proc. International Conference on integrated Formal Methods (iFM 2017 ) (LNCS), Vol. 10510. Springer, 3-17.***http://scholar.google.com/scholar?hl=en&q=Simone+Silvetti%2C+Alberto+Policriti%2C+and+Luca+Bortolussi.+2017.+An+Active+Learning+Approach+to+the+Falsification+of+Black+Box+Cyber-Physical+Systems.+In+Proc.+International+Conference+on+integrated+Formal+Methods+%28iFM+2017+%29+%28LNCS%29%2C+Vol.+10510.+Springer%2C+3-17.^^^Chad Spensky, Aravind Machiry, Marcel Busch, Kevin Leach, Rick Housley, Christopher Kruegel, and Giovanni Vigna. 2020. TRUST.IO: Protecting Physical Interfaces on Cyber-physical Systems. In Proc. IEEE Conference on Communications and Network Security (CNS 2020 ). IEEE. To appear.***http://scholar.google.com/scholar?hl=en&q=Chad+Spensky%2C+Aravind+Machiry%2C+Marcel+Busch%2C+Kevin+Leach%2C+Rick+Housley%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2020.+TRUST.IO%3A+Protecting+Physical+Interfaces+on+Cyber-physical+Systems.+In+Proc.+IEEE+Conference+on+Communications+and+Network+Security+%28CNS+2020+%29.+IEEE.+To+appear.^^^Gayathri Sugumar and Aditya Mathur. 2017. Testing the Efectiveness of Attack Detection Mechanisms in Industrial Control Systems. In Proc. IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C 2017 ). IEEE, 138-145.***http://scholar.google.com/scholar?hl=en&q=Gayathri+Sugumar+and+Aditya+Mathur.+2017.+Testing+the+Efectiveness+of+Attack+Detection+Mechanisms+in+Industrial+Control+Systems.+In+Proc.+IEEE+International+Conference+on+Software+Quality%2C+Reliability+and+Security+Companion+%28QRS-C+2017+%29.+IEEE%2C+138-145.^^^A. Selcuk Uluagac, Venkatachalam Subramanian, and Raheem A. Beyah. 2014. Sensory channel threats to Cyber Physical Systems: A wake-up call. In Proc. IEEE Conference on Communications and Network Security (CNS 2014 ). IEEE, 301-309.***http://scholar.google.com/scholar?hl=en&q=A.+Selcuk+Uluagac%2C+Venkatachalam+Subramanian%2C+and+Raheem+A.+Beyah.+2014.+Sensory+channel+threats+to+Cyber+Physical+Systems%3A+A+wake-up+call.+In+Proc.+IEEE+Conference+on+Communications+and+Network+Security+%28CNS+2014+%29.+IEEE%2C+301-309.^^^David I. Urbina, Jairo Alonso Giraldo, Alvaro A. Cárdenas, Nils Ole Tippenhauer, Junia Valente, Mustafa Amir Faisal, Justin Ruths, Richard Candell, and Henrik Sandberg. 2016. Limiting the Impact of Stealthy Attacks on Industrial Control Systems. In Proc. ACM SIGSAC Conference on Computer and Communications Security (CCS 2016 ). ACM, 1092-1105.***http://scholar.google.com/scholar?hl=en&q=David+I.+Urbina%2C+Jairo+Alonso+Giraldo%2C+Alvaro+A.+C%C3%A1rdenas%2C+Nils+Ole+Tippenhauer%2C+Junia+Valente%2C+Mustafa+Amir+Faisal%2C+Justin+Ruths%2C+Richard+Candell%2C+and+Henrik+Sandberg.+2016.+Limiting+the+Impact+of+Stealthy+Attacks+on+Industrial+Control+Systems.+In+Proc.+ACM+SIGSAC+Conference+on+Computer+and+Communications+Security+%28CCS+2016+%29.+ACM%2C+1092-1105.^^^US National Science Foundation. 2018. Cyber-Physical Systems (CPS). https: //www.nsf.gov/publications/pub_summ. jsp?ods_key=nsf18538&org=NSF. document number: nsf18538.***http://scholar.google.com/scholar?hl=en&q=US+National+Science+Foundation.+2018.+Cyber-Physical+Systems+%28CPS%29.+https%3A+%2F%2Fwww.nsf.gov%2Fpublications%2Fpub_summ.+jsp%3Fods_key%3Dnsf18538%26org%3DNSF.+document+number%3A+nsf18538.^^^Giovanni Vigna, William K. Robertson, and Davide Balzarotti. 2004. Testing network-based intrusion detection signatures using mutant exploits. In Proc. ACM Conference on Computer and Communications Security (CCS 2004 ). ACM, 21-30.***http://scholar.google.com/scholar?hl=en&q=Giovanni+Vigna%2C+William+K.+Robertson%2C+and+Davide+Balzarotti.+2004.+Testing+network-based+intrusion+detection+signatures+using+mutant+exploits.+In+Proc.+ACM+Conference+on+Computer+and+Communications+Security+%28CCS+2004+%29.+ACM%2C+21-30.^^^Jingyi Wang, Jun Sun, Yifan Jia, Shengchao Qin, and Zhiwu Xu. 2018. Towards \'Verifying\' a Water Treatment System. In Proc. International Symposium on Formal Methods (FM 2018 ) (LNCS), Vol. 10951. Springer, 73-92.***http://scholar.google.com/scholar?hl=en&q=Jingyi+Wang%2C+Jun+Sun%2C+Yifan+Jia%2C+Shengchao+Qin%2C+and+Zhiwu+Xu.+2018.+Towards+%27Verifying%27+a+Water+Treatment+System.+In+Proc.+International+Symposium+on+Formal+Methods+%28FM+2018+%29+%28LNCS%29%2C+Vol.+10951.+Springer%2C+73-92.^^^Yoriyuki Yamagata, Shuang Liu, Takumi Akazaki, Yihai Duan, and Jianye Hao. 2020. Falsification of Cyber-Physical Systems Using Deep Reinforcement Learning. IEEE Transactions on Software Engineering ( 2020 ). Early access.***http://scholar.google.com/scholar?hl=en&q=Yoriyuki+Yamagata%2C+Shuang+Liu%2C+Takumi+Akazaki%2C+Yihai+Duan%2C+and+Jianye+Hao.+2020.+Falsification+of+Cyber-Physical+Systems+Using+Deep+Reinforcement+Learning.+IEEE+Transactions+on+Software+Engineering+%28+2020+%29.+Early+access.^^^Cheah Huei Yoong, Venkata Reddy Palleti, Arlindo Silva, and Christopher M. Poskitt. 2020. Towards Systematically Deriving Defence Mechanisms from Functional Requirements of Cyber-Physical Systems. In Proc. ACM Cyber-Physical System Security Workshop (CPSS 2020 ). ACM. To appear.***http://scholar.google.com/scholar?hl=en&q=Cheah+Huei+Yoong%2C+Venkata+Reddy+Palleti%2C+Arlindo+Silva%2C+and+Christopher+M.+Poskitt.+2020.+Towards+Systematically+Deriving+Defence+Mechanisms+from+Functional+Requirements+of+Cyber-Physical+Systems.+In+Proc.+ACM+Cyber-Physical+System+Security+Workshop+%28CPSS+2020+%29.+ACM.+To+appear.^^^Michał Zalewski. 2017. American fuzzy lop. http://lcamtuf.coredump.cx/afl/. Accessed: May 2020.***http://scholar.google.com/scholar?hl=en&q=Micha%C5%82+Zalewski.+2017.+American+fuzzy+lop.+http%3A%2F%2Flcamtuf.coredump.cx%2Fafl%2F.+Accessed%3A+May+2020.^^^Jun Zhang, Xiao Chen, Yang Xiang, Wanlei Zhou, and Jie Wu. 2015. Robust Network Trafic Classification. IEEE/ACM Transactions on Networking 23, 4 ( 2015 ), 1257-1270.***http://scholar.google.com/scholar?hl=en&q=Jun+Zhang%2C+Xiao+Chen%2C+Yang+Xiang%2C+Wanlei+Zhou%2C+and+Jie+Wu.+2015.+Robust+Network+Trafic+Classification.+IEEE%2FACM+Transactions+on+Networking+23%2C+4+%28+2015+%29%2C+1257-1270.^^^Mu Zhang, Chien-Ying Chen, Bin-Chou Kao, Yassine Qamsane, Yuru Shao, Yikai Lin, Elaine Shi, Sibin Mohan, Kira Barton, James R. Moyne, and Z. Morley Mao. 2019. Towards Automated Safety Vetting of PLC Code in Real-World Plants. In Proc. IEEE Symposium on Security and Privacy (S&P 2019 ). IEEE, 522-538.***http://scholar.google.com/scholar?hl=en&q=Mu+Zhang%2C+Chien-Ying+Chen%2C+Bin-Chou+Kao%2C+Yassine+Qamsane%2C+Yuru+Shao%2C+Yikai+Lin%2C+Elaine+Shi%2C+Sibin+Mohan%2C+Kira+Barton%2C+James+R.+Moyne%2C+and+Z.+Morley+Mao.+2019.+Towards+Automated+Safety+Vetting+of+PLC+Code+in+Real-World+Plants.+In+Proc.+IEEE+Symposium+on+Security+and+Privacy+%28S%26P+2019+%29.+IEEE%2C+522-538.^^^Peilin Zhao and Steven C. H. Hoi. 2013. Cost-sensitive online active learning with application to malicious URL detection. In Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD 2013 ). ACM, 919-927.***http://scholar.google.com/scholar?hl=en&q=Peilin+Zhao+and+Steven+C.+H.+Hoi.+2013.+Cost-sensitive+online+active+learning+with+application+to+malicious+URL+detection.+In+Proc.+ACM+SIGKDD+International+Conference+on+Knowledge+Discovery+and+Data+Mining+%28KDD+2013+%29.+ACM%2C+919-927.^^^');
INSERT INTO `paper_ref` VALUES (53, 19, 'Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. 2019. REDQUEEN: Fuzzing with Input-to-State Correspondence. In 26th Annual Network and Distributed System Security Symposium, NDSS 2019, San Diego, California, USA, February 24-27, 2019. https://www.ndss-symposium. org/ndss-paper/redqueen-fuzzing-with-input-to-state-correspondence/***http://scholar.google.com/scholar?hl=en&q=Cornelius+Aschermann%2C+Sergej+Schumilo%2C+Tim+Blazytko%2C+Robert+Gawlik%2C+and+Thorsten+Holz.+2019.+REDQUEEN%3A+Fuzzing+with+Input-to-State+Correspondence.+In+26th+Annual+Network+and+Distributed+System+Security+Symposium%2C+NDSS+2019%2C+San+Diego%2C+California%2C+USA%2C+February+24-27%2C+2019.+https%3A%2F%2Fwww.ndss-symposium.+org%2Fndss-paper%2Fredqueen-fuzzing-with-input-to-state-correspondence%2F^^^Ben Hoyt and contributors. 2018. inih-Simple.INI file parser in C, good for embedded systems. https://github.com/benhoyt/inih. Accessed: 2018-10-25.***http://scholar.google.com/scholar?hl=en&q=Ben+Hoyt+and+contributors.+2018.+inih-Simple.INI+file+parser+in+C%2C+good+for+embedded+systems.+https%3A%2F%2Fgithub.com%2Fbenhoyt%2Finih.+Accessed%3A+2018-10-25.^^^Cesanta Software. 2018. Embedded JavaScript engine for C/C++ https:// mongoose-os.com. https://github.com/cesanta/mjs. Accessed: 2018-06-21.***http://scholar.google.com/scholar?hl=en&q=Cesanta+Software.+2018.+Embedded+JavaScript+engine+for+C%2FC%2B%2B+https%3A%2F%2F+mongoose-os.com.+https%3A%2F%2Fgithub.com%2Fcesanta%2Fmjs.+Accessed%3A+2018-06-21.^^^Dave Gamble and contributors. 2018. cJSON-Ultralightweight JSON parser in ANSI C. https://github.com/DaveGamble/cJSON. Accessed: 2018-10-25.***http://scholar.google.com/scholar?hl=en&q=Dave+Gamble+and+contributors.+2018.+cJSON-Ultralightweight+JSON+parser+in+ANSI+C.+https%3A%2F%2Fgithub.com%2FDaveGamble%2FcJSON.+Accessed%3A+2018-10-25.^^^Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. 2008. Grammar-based Whitebox Fuzzing. In Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation (Tucson, AZ, USA) (ACM SIGPLAN Conference on Programming Language Design and Implementation). ACM, New York, NY, USA, 206-215.***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Adam+Kiezun%2C+and+Michael+Y.+Levin.+2008.+Grammar-based+Whitebox+Fuzzing.+In+Proceedings+of+the+29th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28Tucson%2C+AZ%2C+USA%29+%28ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+206-215.^^^Patrice Godefroid, Hila Peleg, and Rishabh Singh. 2017. Learn&fuzz: Machine learning for input fuzzing. In IEEE/ACM Automated Software Engineering. IEEE Press, 50-59.***http://scholar.google.com/scholar?hl=en&q=Patrice+Godefroid%2C+Hila+Peleg%2C+and+Rishabh+Singh.+2017.+Learn%26fuzz%3A+Machine+learning+for+input+fuzzing.+In+IEEE%2FACM+Automated+Software+Engineering.+IEEE+Press%2C+50-59.^^^Rahul Gopinath, Björn Mathis, and Andreas Zeller. 2020. Mining Input Grammars from Dynamic Control Flow. In Proceedings of the ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE) 2020.***http://scholar.google.com/scholar?hl=en&q=Rahul+Gopinath%2C+Bj%C3%B6rn+Mathis%2C+and+Andreas+Zeller.+2020.+Mining+Input+Grammars+from+Dynamic+Control+Flow.+In+Proceedings+of+the+ACM+Joint+European+Software+Engineering+Conference+and+Symposium+on+the+Foundations+of+Software+Engineering+%28ESEC%2FFSE%29+2020.^^^Matthias Höschele and Andreas Zeller. 2016. Mining Input Grammars from Dynamic Taints. In IEEE/ACM Automated Software Engineering (Singapore, Singapore) ( ASE 2016). ACM, New York, NY, USA, 720-725. https://doi.org/10.1145/ 2970276.2970321 ***http://scholar.google.com/scholar?hl=en&q=Matthias+H%C3%B6schele+and+Andreas+Zeller.+2016.+Mining+Input+Grammars+from+Dynamic+Taints.+In+IEEE%2FACM+Automated+Software+Engineering+%28Singapore%2C+Singapore%29+%28+ASE+2016%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+720-725.+https%3A%2F%2Fdoi.org%2F10.1145%2F+2970276.2970321+10.1145%2F2970276.2970321^^^JamesRamm and contributors. 2018. csv_parser-C library for parsing CSV files. https://github.com/JamesRamm/csv_parser. Accessed: 2018-10-25.***http://scholar.google.com/scholar?hl=en&q=JamesRamm+and+contributors.+2018.+csv_parser-C+library+for+parsing+CSV+files.+https%3A%2F%2Fgithub.com%2FJamesRamm%2Fcsv_parser.+Accessed%3A+2018-10-25.^^^Justin Meiners. 2019. Embeddable lisp interpreter written in C. https://github. com/justinmeiners/lisp-interpreter. Accessed: 2019-03-19.***http://scholar.google.com/scholar?hl=en&q=Justin+Meiners.+2019.+Embeddable+lisp+interpreter+written+in+C.+https%3A%2F%2Fgithub.+com%2Fjustinmeiners%2Flisp-interpreter.+Accessed%3A+2019-03-19.^^^Kartik Talwar. 2018. Tiny-C Compiler. https://gist.github.com/KartikTalwar/ 3095780. Accessed: 2018-10-25.***http://scholar.google.com/scholar?hl=en&q=Kartik+Talwar.+2018.+Tiny-C+Compiler.+https%3A%2F%2Fgist.github.com%2FKartikTalwar%2F+3095780.+Accessed%3A+2018-10-25.^^^Björn Mathis, Rahul Gopinath, Michaël Mera, Alexander Kampmann, Matthias Höschele, and Andreas Zeller. 2019. Parser-directed Fuzzing. In Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation (Phoenix, AZ, USA) ( PLDI 2019). ACM, New York, NY, USA, 548-560. https://doi.org/10.1145/3314221.3314651 ***http://scholar.google.com/scholar?hl=en&q=Bj%C3%B6rn+Mathis%2C+Rahul+Gopinath%2C+Micha%C3%ABl+Mera%2C+Alexander+Kampmann%2C+Matthias+H%C3%B6schele%2C+and+Andreas+Zeller.+2019.+Parser-directed+Fuzzing.+In+Proceedings+of+the+40th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28Phoenix%2C+AZ%2C+USA%29+%28+PLDI+2019%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+548-560.+https%3A%2F%2Fdoi.org%2F10.1145%2F3314221.3314651+10.1145%2F3314221.3314651^^^Joseph Myers. 2008. New_C_Parser. http://gcc.gnu.org/wiki/New_C_Parser. Accessed: 2019-05-09.***http://scholar.google.com/scholar?hl=en&q=Joseph+Myers.+2008.+New_C_Parser.+http%3A%2F%2Fgcc.gnu.org%2Fwiki%2FNew_C_Parser.+Accessed%3A+2019-05-09.^^^Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giufrida, and Herbert Bos. 2017. Vuzzer: Application-aware evolutionary fuzzing. In Network and Distributed System Security Symposium.***http://scholar.google.com/scholar?hl=en&q=Sanjay+Rawat%2C+Vivek+Jain%2C+Ashish+Kumar%2C+Lucian+Cojocar%2C+Cristiano+Giufrida%2C+and+Herbert+Bos.+2017.+Vuzzer%3A+Application-aware+evolutionary+fuzzing.+In+Network+and+Distributed+System+Security+Symposium.^^^Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan Foote, David Warren, Gustavo Grieco, and David Brumley. 2014. Optimizing Seed Selection for Fuzzing. In USENIX Conference on Security Symposium (San Diego, CA) ( SEC\'14). USENIX Association, Berkeley, CA, USA, 861-875. http://dl.acm.org/citation. cfm?id= 2671225. 2671280***http://scholar.google.com/scholar?hl=en&q=Alexandre+Rebert%2C+Sang+Kil+Cha%2C+Thanassis+Avgerinos%2C+Jonathan+Foote%2C+David+Warren%2C+Gustavo+Grieco%2C+and+David+Brumley.+2014.+Optimizing+Seed+Selection+for+Fuzzing.+In+USENIX+Conference+on+Security+Symposium+%28San+Diego%2C+CA%29+%28+SEC%2714%29.+USENIX+Association%2C+Berkeley%2C+CA%2C+USA%2C+861-875.+http%3A%2F%2Fdl.acm.org%2Fcitation.+cfm%3Fid%3D+2671225.+2671280^^^Bhargava Shastry, Markus Leutner, Tobias Fiebig, Kashyap Thimmaraju, Fabian Yamaguchi, Konrad Rieck, Stefan Schmid, Jean-Pierre Seifert, and Anja Feldmann. 2017. Static program analysis as a fuzzing aid. In International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 26-47.***http://scholar.google.com/scholar?hl=en&q=Bhargava+Shastry%2C+Markus+Leutner%2C+Tobias+Fiebig%2C+Kashyap+Thimmaraju%2C+Fabian+Yamaguchi%2C+Konrad+Rieck%2C+Stefan+Schmid%2C+Jean-Pierre+Seifert%2C+and+Anja+Feldmann.+2017.+Static+program+analysis+as+a+fuzzing+aid.+In+International+Symposium+on+Research+in+Attacks%2C+Intrusions%2C+and+Defenses.+Springer%2C+26-47.^^^The Clang Team. 2019. Clang-Features and Goals. http://clang.llvm.org/features. html#unifiedparser. Accessed: 2019-05-09.***http://scholar.google.com/scholar?hl=en&q=The+Clang+Team.+2019.+Clang-Features+and+Goals.+http%3A%2F%2Fclang.llvm.org%2Ffeatures.+html%23unifiedparser.+Accessed%3A+2019-05-09.^^^Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2017. Skyfire: Data-driven seed generation for fuzzing. In IEEE Symposium on Security and Privacy. IEEE, 579-594.***http://scholar.google.com/scholar?hl=en&q=Junjie+Wang%2C+Bihuan+Chen%2C+Lei+Wei%2C+and+Yang+Liu.+2017.+Skyfire%3A+Data-driven+seed+generation+for+fuzzing.+In+IEEE+Symposium+on+Security+and+Privacy.+IEEE%2C+579-594.^^^Michal Zalewski. 2015. afl-fuzz: making up grammar with a dictionary in hand. https://lcamtuf.blogspot.com/ 2015 /01/afl-fuzz-making-up-grammar-with. html. Accessed: 2019-05-07.***http://scholar.google.com/scholar?hl=en&q=Michal+Zalewski.+2015.+afl-fuzz%3A+making+up+grammar+with+a+dictionary+in+hand.+https%3A%2F%2Flcamtuf.blogspot.com%2F+2015+%2F01%2Fafl-fuzz-making-up-grammar-with.+html.+Accessed%3A+2019-05-07.^^^');
INSERT INTO `paper_ref` VALUES (54, 67, 'Athanasios Avgerinos. 2014. Exploiting Trade-ofs in Symbolic Execution for Identifying Security Bugs. Ph.D. Dissertation.***http://scholar.google.com/scholar?hl=en&q=Athanasios+Avgerinos.+2014.+Exploiting+Trade-ofs+in+Symbolic+Execution+for+Identifying+Security+Bugs.+Ph.D.+Dissertation.^^^Clark Barrett, Christopher Conway, Morgan Deters, Liana Hadarean, Dejan Jovanović, Tim King, Andrew Reynolds, and Cesare Tinelli. 2011. CVC4. In Proceedings of the 23rd International Conference on Computer Aided Verification (Snowbird, UT) (CAV\'11). Springer-Verlag, Berlin, Heidelberg, 171-177.***http://scholar.google.com/scholar?hl=en&q=Clark+Barrett%2C+Christopher+Conway%2C+Morgan+Deters%2C+Liana+Hadarean%2C+Dejan+Jovanovi%C4%87%2C+Tim+King%2C+Andrew+Reynolds%2C+and+Cesare+Tinelli.+2011.+CVC4.+In+Proceedings+of+the+23rd+International+Conference+on+Computer+Aided+Verification+%28Snowbird%2C+UT%29+%28CAV%2711%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+171-177.^^^Clark Barrett, Aaron Stump, and Cesare Tinelli. 2010. The satisfiability modulo theories library (SMT-LIB). www. SMT-LIB. org 15 ( 2010 ), 18-52.***http://scholar.google.com/scholar?hl=en&q=Clark+Barrett%2C+Aaron+Stump%2C+and+Cesare+Tinelli.+2010.+The+satisfiability+modulo+theories+library+%28SMT-LIB%29.+www.+SMT-LIB.+org+15+%28+2010+%29%2C+18-52.^^^Clark W Barrett, David L Dill, and Jeremy R Levitt. 1998. A decision procedure for bit-vector arithmetic. In Proceedings of the 35th Annual Design Automation Conference (San Francisco, California, USA) ( DAC \'98). ACM, New York, NY, USA, 522-527. https://doi.org/10.1145/277044.277186 ***http://scholar.google.com/scholar?hl=en&q=Clark+W+Barrett%2C+David+L+Dill%2C+and+Jeremy+R+Levitt.+1998.+A+decision+procedure+for+bit-vector+arithmetic.+In+Proceedings+of+the+35th+Annual+Design+Automation+Conference+%28San+Francisco%2C+California%2C+USA%29+%28+DAC+%2798%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+522-527.+https%3A%2F%2Fdoi.org%2F10.1145%2F277044.277186+10.1145%2F277044.277186^^^Clark W. Barrett, David L. Dill, and Aaron Stump. 2002. Checking Satisfiability of First-Order Formulas by Incremental Translation to SAT. In Proceedings of the 14th International Conference on Computer Aided Verification (CAV \'02). SpringerVerlag, Berlin, Heidelberg, 236-249. https://doi.org/10.5555/647771.734410 ***http://scholar.google.com/scholar?hl=en&q=Clark+W.+Barrett%2C+David+L.+Dill%2C+and+Aaron+Stump.+2002.+Checking+Satisfiability+of+First-Order+Formulas+by+Incremental+Translation+to+SAT.+In+Proceedings+of+the+14th+International+Conference+on+Computer+Aided+Verification+%28CAV+%2702%29.+SpringerVerlag%2C+Berlin%2C+Heidelberg%2C+236-249.+https%3A%2F%2Fdoi.org%2F10.5555%2F647771.734410+10.5555%2F647771.734410^^^Michael Bartovn, Iddo Hanniel, Gershon Elber, and Myung-Soo Kim. 2010. Precise Hausdorf Distance Computation between Polygonal Meshes. Comput. Aided Geom. Des. 27, 8 (Nov. 2010 ), 580-591. https://doi.org/10.1016/j.cagd. 2010. 04.004 ***http://scholar.google.com/scholar?hl=en&q=Michael+Bartovn%2C+Iddo+Hanniel%2C+Gershon+Elber%2C+and+Myung-Soo+Kim.+2010.+Precise+Hausdorf+Distance+Computation+between+Polygonal+Meshes.+Comput.+Aided+Geom.+Des.+27%2C+8+%28Nov.+2010+%29%2C+580-591.+https%3A%2F%2Fdoi.org%2F10.1016%2Fj.cagd.+2010.+04.004+10.1016%2Fj.cagd.2010.04.004^^^Jason Belt, Robby, and Xianghua Deng. 2009. Sireum/Topi LDP: A Lightweight Semi-Decision Procedure for Optimizing Symbolic Execution-Based Analyses. In Proceedings of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering (Amsterdam, The Netherlands) (ESEC/FSE \'09). Association for Computing Machinery, New York, NY, USA, 355-364. https://doi.org/10.1145/1595696.1595762 ***http://scholar.google.com/scholar?hl=en&q=Jason+Belt%2C+Robby%2C+and+Xianghua+Deng.+2009.+Sireum%2FTopi+LDP%3A+A+Lightweight+Semi-Decision+Procedure+for+Optimizing+Symbolic+Execution-Based+Analyses.+In+Proceedings+of+the+7th+Joint+Meeting+of+the+European+Software+Engineering+Conference+and+the+ACM+SIGSOFT+Symposium+on+The+Foundations+of+Software+Engineering+%28Amsterdam%2C+The+Netherlands%29+%28ESEC%2FFSE+%2709%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+355-364.+https%3A%2F%2Fdoi.org%2F10.1145%2F1595696.1595762+10.1145%2F1595696.1595762^^^Frédéric Benhamou and Laurent Granvilliers. 2006. Continuous and interval constraints. In Foundations of Artificial Intelligence. Vol. 2. Elsevier, 571-603.***http://scholar.google.com/scholar?hl=en&q=Fr%C3%A9d%C3%A9ric+Benhamou+and+Laurent+Granvilliers.+2006.+Continuous+and+interval+constraints.+In+Foundations+of+Artificial+Intelligence.+Vol.+2.+Elsevier%2C+571-603.^^^Murphy Berzish, Vijay Ganesh, and Yunhui Zheng. 2017. Z3str3: A String Solver with Theory-Aware Heuristics. In Proceedings of the 17th Conference on Formal Methods in Computer-Aided Design (Vienna, Austria) ( FMCAD \'17). FMCAD Inc, Austin, Texas, 55-59. https://doi.org/10.5555/3168451.3168468 ***http://scholar.google.com/scholar?hl=en&q=Murphy+Berzish%2C+Vijay+Ganesh%2C+and+Yunhui+Zheng.+2017.+Z3str3%3A+A+String+Solver+with+Theory-Aware+Heuristics.+In+Proceedings+of+the+17th+Conference+on+Formal+Methods+in+Computer-Aided+Design+%28Vienna%2C+Austria%29+%28+FMCAD+%2717%29.+FMCAD+Inc%2C+Austin%2C+Texas%2C+55-59.+https%3A%2F%2Fdoi.org%2F10.5555%2F3168451.3168468+10.5555%2F3168451.3168468^^^Armin Biere. 2008. Adaptive Restart Strategies for Conflict Driven SAT Solvers. In Proceedings of the 11th International Conference on Theory and Applications of Satisfiability Testing (Guangzhou, China) (SAT\'08). Springer-Verlag, Berlin, Heidelberg, 28-33.***http://scholar.google.com/scholar?hl=en&q=Armin+Biere.+2008.+Adaptive+Restart+Strategies+for+Conflict+Driven+SAT+Solvers.+In+Proceedings+of+the+11th+International+Conference+on+Theory+and+Applications+of+Satisfiability+Testing+%28Guangzhou%2C+China%29+%28SAT%2708%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+28-33.^^^A. Biere, A. Biere, M. Heule, H. van Maaren, and T. Walsh. 2009. Handbook of Satisfiability: Volume 185 Frontiers in Artificial Intelligence and Applications. IOS Press, NLD. https://doi.org/10.5555/1550723 ***http://scholar.google.com/scholar?hl=en&q=A.+Biere%2C+A.+Biere%2C+M.+Heule%2C+H.+van+Maaren%2C+and+T.+Walsh.+2009.+Handbook+of+Satisfiability%3A+Volume+185+Frontiers+in+Artificial+Intelligence+and+Applications.+IOS+Press%2C+NLD.+https%3A%2F%2Fdoi.org%2F10.5555%2F1550723+10.5555%2F1550723^^^Armin Biere and Andreas Fröhlich. 2015. Evaluating CDCL Variable Scoring Schemes. In Theory and Applications of Satisfiability Testing-SAT 2015, Marijn Heule and Sean Weaver (Eds.). Springer International Publishing, Cham, 405-422. https://doi.org/10.1007/978-3-319-24318-4_29 ***http://scholar.google.com/scholar?hl=en&q=Armin+Biere+and+Andreas+Fr%C3%B6hlich.+2015.+Evaluating+CDCL+Variable+Scoring+Schemes.+In+Theory+and+Applications+of+Satisfiability+Testing-SAT+2015%2C+Marijn+Heule+and+Sean+Weaver+%28Eds.%29.+Springer+International+Publishing%2C+Cham%2C+405-422.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-24318-4_29+10.1007%2F978-3-319-24318-4_29^^^Sam Blackshear, Nikos Gorogiannis, Peter W. OHearn, and Ilya Sergey. 2018. RacerD: Compositional Static Race Detection. Proc. ACM Program. Lang. 2, OOPSLA, Article 144 (Oct. 2018 ), 28 pages. https://doi.org/10.1145/3276514 ***http://scholar.google.com/scholar?hl=en&q=Sam+Blackshear%2C+Nikos+Gorogiannis%2C+Peter+W.+OHearn%2C+and+Ilya+Sergey.+2018.+RacerD%3A+Compositional+Static+Race+Detection.+Proc.+ACM+Program.+Lang.+2%2C+OOPSLA%2C+Article+144+%28Oct.+2018+%29%2C+28+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F3276514+10.1145%2F3276514^^^Mateus Borges, Marcelo d\'Amorim, Saswat Anand, David Bushnell, and Corina S. Pasareanu. 2012. Symbolic Execution with Interval Solving and Meta-Heuristic Search. In Proceedings of the 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST \'12). IEEE Computer Society, USA, 111-120. https://doi.org/10.1109/ICST. 2012.91 ***http://scholar.google.com/scholar?hl=en&q=Mateus+Borges%2C+Marcelo+d%27Amorim%2C+Saswat+Anand%2C+David+Bushnell%2C+and+Corina+S.+Pasareanu.+2012.+Symbolic+Execution+with+Interval+Solving+and+Meta-Heuristic+Search.+In+Proceedings+of+the+2012+IEEE+Fifth+International+Conference+on+Software+Testing%2C+Verification+and+Validation+%28ICST+%2712%29.+IEEE+Computer+Society%2C+USA%2C+111-120.+https%3A%2F%2Fdoi.org%2F10.1109%2FICST.+2012.91+10.1109%2FICST.2012.91^^^Aaron R Bradley and Zohar Manna. 2007. The calculus of computation: decision procedures with applications to verification. Springer Science & Business Media.***http://scholar.google.com/scholar?hl=en&q=Aaron+R+Bradley+and+Zohar+Manna.+2007.+The+calculus+of+computation%3A+decision+procedures+with+applications+to+verification.+Springer+Science+%26+Business+Media.^^^Robert Brummayer. 2009. Eficient SMT Solving for Bit-Vectors and the Extensional Theory of Arrays. Ph.D. Dissertation. Informatik, Johannes Kepler University.***http://scholar.google.com/scholar?hl=en&q=Robert+Brummayer.+2009.+Eficient+SMT+Solving+for+Bit-Vectors+and+the+Extensional+Theory+of+Arrays.+Ph.D.+Dissertation.+Informatik%2C+Johannes+Kepler+University.^^^Roberto Bruttomesso, Alessandro Cimatti, Anders Franzén, Alberto Griggio, Ziyad Hanna, Alexander Nadel, Amit Palti, and Roberto Sebastiani. 2007. A lazy and layered SMT (BV) solver for hard industrial verification problems. In Proceedings of the 19th International Conference on Computer Aided Verification (Berlin, Germany) ( CAV\'07). Springer-Verlag, Berlin, Heidelberg, 547-560.***http://scholar.google.com/scholar?hl=en&q=Roberto+Bruttomesso%2C+Alessandro+Cimatti%2C+Anders+Franz%C3%A9n%2C+Alberto+Griggio%2C+Ziyad+Hanna%2C+Alexander+Nadel%2C+Amit+Palti%2C+and+Roberto+Sebastiani.+2007.+A+lazy+and+layered+SMT+%28BV%29+solver+for+hard+industrial+verification+problems.+In+Proceedings+of+the+19th+International+Conference+on+Computer+Aided+Verification+%28Berlin%2C+Germany%29+%28+CAV%2707%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+547-560.^^^Randal E. Bryant, Daniel Kroening, Joël Ouaknine, Sanjit A. Seshia, Ofer Strichman, and Bryan Brady. 2007. Deciding Bit-Vector Arithmetic with Abstraction. In Proceedings of the 13th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (Braga, Portugal) (TACAS\'07). SpringerVerlag, Berlin, Heidelberg, 358-372.***http://scholar.google.com/scholar?hl=en&q=Randal+E.+Bryant%2C+Daniel+Kroening%2C+Jo%C3%ABl+Ouaknine%2C+Sanjit+A.+Seshia%2C+Ofer+Strichman%2C+and+Bryan+Brady.+2007.+Deciding+Bit-Vector+Arithmetic+with+Abstraction.+In+Proceedings+of+the+13th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28Braga%2C+Portugal%29+%28TACAS%2707%29.+SpringerVerlag%2C+Berlin%2C+Heidelberg%2C+358-372.^^^Cristian Cadar. 2015. Targeted Program Transformations for Symbolic Execution. (Bergamo, Italy) (ESEC/FSE 2015). Association for Computing Machinery, New York, NY, USA, 906-909. https://doi.org/10.1145/2786805.2803205 ***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar.+2015.+Targeted+Program+Transformations+for+Symbolic+Execution.+%28Bergamo%2C+Italy%29+%28ESEC%2FFSE+2015%29.+Association+for+Computing+Machinery%2C+New+York%2C+NY%2C+USA%2C+906-909.+https%3A%2F%2Fdoi.org%2F10.1145%2F2786805.2803205+10.1145%2F2786805.2803205^^^Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs.. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (San Diego, California) ( OSDI\'08). USENIX Association, Berkeley, CA, USA, 209-224.***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Daniel+Dunbar%2C+Dawson+R+Engler%2C+et+al.+2008.+KLEE%3A+Unassisted+and+Automatic+Generation+of+High-Coverage+Tests+for+Complex+Systems+Programs..+In+Proceedings+of+the+8th+USENIX+Conference+on+Operating+Systems+Design+and+Implementation+%28San+Diego%2C+California%29+%28+OSDI%2708%29.+USENIX+Association%2C+Berkeley%2C+CA%2C+USA%2C+209-224.^^^Cristian Cadar, Vijay Ganesh, Peter M Pawlowski, David L Dill, and Dawson R Engler. 2006. EXE: automatically generating inputs of death. ( 2006 ), 322-335. https://doi.org/10.1145/1180405.1180445 ***http://scholar.google.com/scholar?hl=en&q=Cristian+Cadar%2C+Vijay+Ganesh%2C+Peter+M+Pawlowski%2C+David+L+Dill%2C+and+Dawson+R+Engler.+2006.+EXE%3A+automatically+generating+inputs+of+death.+%28+2006+%29%2C+322-335.+https%3A%2F%2Fdoi.org%2F10.1145%2F1180405.1180445+10.1145%2F1180405.1180445^^^Jianhui Chen and Fei He. 2018. Control Flow-guided SMT Solving for Program Verification. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (Montpellier, France) ( ASE 2018). ACM, New York, NY, USA, 351-361. https://doi.org/10.1145/3238147.3238218 ***http://scholar.google.com/scholar?hl=en&q=Jianhui+Chen+and+Fei+He.+2018.+Control+Flow-guided+SMT+Solving+for+Program+Verification.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28Montpellier%2C+France%29+%28+ASE+2018%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+351-361.+https%3A%2F%2Fdoi.org%2F10.1145%2F3238147.3238218+10.1145%2F3238147.3238218^^^Zakaria Chihani, Bruno Marre, François Bobot, and Sébastien Bardin. 2017. Sharpening constraint programming approaches for bit-vector theory. In International Conference on AI and OR Techniques in Constraint Programming for Combinatorial Optimization Problems. Springer, 3-20.***http://scholar.google.com/scholar?hl=en&q=Zakaria+Chihani%2C+Bruno+Marre%2C+Fran%C3%A7ois+Bobot%2C+and+S%C3%A9bastien+Bardin.+2017.+Sharpening+constraint+programming+approaches+for+bit-vector+theory.+In+International+Conference+on+AI+and+OR+Techniques+in+Constraint+Programming+for+Combinatorial+Optimization+Problems.+Springer%2C+3-20.^^^Cristina Cifuentes and Mike Van Emmerik. 1999. Recovery of Jump Table Case Statements from Binary Code. In Proceedings of the 7th International Workshop on Program Comprehension (IWPC \'99). IEEE Computer Society, USA, 192. https: //doi.org/10.5555/520033.858247 ***http://scholar.google.com/scholar?hl=en&q=Cristina+Cifuentes+and+Mike+Van+Emmerik.+1999.+Recovery+of+Jump+Table+Case+Statements+from+Binary+Code.+In+Proceedings+of+the+7th+International+Workshop+on+Program+Comprehension+%28IWPC+%2799%29.+IEEE+Computer+Society%2C+USA%2C+192.+https%3A+%2F%2Fdoi.org%2F10.5555%2F520033.858247+10.5555%2F520033.858247^^^Alessandro Cimatti, Alberto Griggio, Bastiaan Joost Schaafsma, and Roberto Sebastiani. 2013. The MathSAT5 SMT Solver.. In Proceedings of the 19th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (Rome, Italy) ( TACAS\'13). Springer-Verlag, Berlin, Heidelberg, 93-107. https://doi.org/10.1007/978-3-642-36742-7_7 ***http://scholar.google.com/scholar?hl=en&q=Alessandro+Cimatti%2C+Alberto+Griggio%2C+Bastiaan+Joost+Schaafsma%2C+and+Roberto+Sebastiani.+2013.+The+MathSAT5+SMT+Solver..+In+Proceedings+of+the+19th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28Rome%2C+Italy%29+%28+TACAS%2713%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+93-107.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-642-36742-7_7+10.1007%2F978-3-642-36742-7_7^^^Fady Copty, Limor Fix, Ranan Fraer, Enrico Giunchiglia, Gila Kamhi, Armando Tacchella, and Moshe Y. Vardi. 2001. Benefits of Bounded Model Checking at an Industrial Setting. In Proceedings of the 13th International Conference on Computer Aided Verification (CAV \'01). Springer-Verlag, London, UK, UK, 436-453.***http://scholar.google.com/scholar?hl=en&q=Fady+Copty%2C+Limor+Fix%2C+Ranan+Fraer%2C+Enrico+Giunchiglia%2C+Gila+Kamhi%2C+Armando+Tacchella%2C+and+Moshe+Y.+Vardi.+2001.+Benefits+of+Bounded+Model+Checking+at+an+Industrial+Setting.+In+Proceedings+of+the+13th+International+Conference+on+Computer+Aided+Verification+%28CAV+%2701%29.+Springer-Verlag%2C+London%2C+UK%2C+UK%2C+436-453.^^^James M. Crawford and Andrew B. Baker. 1994. Experimental Results on the Application of Satisfiability Algorithms to Scheduling Problems. In Proceedings of the Twelfth National Conference on Artificial Intelligence (Vol. 2 ) (Seattle, Washington, USA) (AAAI\' 94 ). American Association for Artificial Intelligence, Menlo Park, CA, USA, 1092-1097. http://dl.acm.org/citation.cfm?id= 199480. 199540***http://scholar.google.com/scholar?hl=en&q=James+M.+Crawford+and+Andrew+B.+Baker.+1994.+Experimental+Results+on+the+Application+of+Satisfiability+Algorithms+to+Scheduling+Problems.+In+Proceedings+of+the+Twelfth+National+Conference+on+Artificial+Intelligence+%28Vol.+2+%29+%28Seattle%2C+Washington%2C+USA%29+%28AAAI%27+94+%29.+American+Association+for+Artificial+Intelligence%2C+Menlo+Park%2C+CA%2C+USA%2C+1092-1097.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+199480.+199540^^^David Cyrluk, Oliver Möller, and Harald Rueß. 1997. An eficient decision procedure for the theory of fixed-sized bit-vectors. In Proceedings of the 9th International Conference on Computer Aided Verification (CAV \'97). Springer-Verlag, London, UK, UK, 60-71. http://dl.acm.org/citation.cfm?id= 647766. 733602***http://scholar.google.com/scholar?hl=en&q=David+Cyrluk%2C+Oliver+M%C3%B6ller%2C+and+Harald+Rue%C3%9F.+1997.+An+eficient+decision+procedure+for+the+theory+of+fixed-sized+bit-vectors.+In+Proceedings+of+the+9th+International+Conference+on+Computer+Aided+Verification+%28CAV+%2797%29.+Springer-Verlag%2C+London%2C+UK%2C+UK%2C+60-71.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+647766.+733602^^^Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An eficient SMT solver. In Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (Budapest, Hungary) ( TACAS\'08/ETAPS\'08). Springer-Verlag, Berlin, Heidelberg, 337-340.***http://scholar.google.com/scholar?hl=en&q=Leonardo+De+Moura+and+Nikolaj+Bj%C3%B8rner.+2008.+Z3%3A+An+eficient+SMT+solver.+In+Proceedings+of+the+Theory+and+Practice+of+Software%2C+14th+International+Conference+on+Tools+and+Algorithms+for+the+Construction+and+Analysis+of+Systems+%28Budapest%2C+Hungary%29+%28+TACAS%2708%2FETAPS%2708%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+337-340.^^^B. Dolan-Gavitt, P. Hulin, E. Kirda, T. Leek, A. Mambretti, W. Robertson, F. Ulrich, and R. Whelan. 2016. LAVA: Large-Scale Automated Vulnerability Addition. In 2016 IEEE Symposium on Security and Privacy (SP). 110-121. https://doi.org/10. 1109/SP. 2016.15 ***http://scholar.google.com/scholar?hl=en&q=B.+Dolan-Gavitt%2C+P.+Hulin%2C+E.+Kirda%2C+T.+Leek%2C+A.+Mambretti%2C+W.+Robertson%2C+F.+Ulrich%2C+and+R.+Whelan.+2016.+LAVA%3A+Large-Scale+Automated+Vulnerability+Addition.+In+2016+IEEE+Symposium+on+Security+and+Privacy+%28SP%29.+110-121.+https%3A%2F%2Fdoi.org%2F10.+1109%2FSP.+2016.15+10.1109%2FSP.2016.15^^^Shiyu Dong, Oswaldo Olivo, Lingming Zhang, and Sarfraz Khurshid. 2015. Studying the Influence of Standard Compiler Optimizations on Symbolic Execution. In Proceedings of the 2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE) (ISSRE \'15). IEEE Computer Society, USA, 205-215. https://doi.org/10.1109/ISSRE. 2015.7381814 ***http://scholar.google.com/scholar?hl=en&q=Shiyu+Dong%2C+Oswaldo+Olivo%2C+Lingming+Zhang%2C+and+Sarfraz+Khurshid.+2015.+Studying+the+Influence+of+Standard+Compiler+Optimizations+on+Symbolic+Execution.+In+Proceedings+of+the+2015+IEEE+26th+International+Symposium+on+Software+Reliability+Engineering+%28ISSRE%29+%28ISSRE+%2715%29.+IEEE+Computer+Society%2C+USA%2C+205-215.+https%3A%2F%2Fdoi.org%2F10.1109%2FISSRE.+2015.7381814+10.1109%2FISSRE.2015.7381814^^^Oscar Soria Dustmann, Klaus Wehrle, and Cristian Cadar. 2018. PARTI: A Multi-interval Theory Solver for Symbolic Execution. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (Montpellier, France) ( ASE 2018). ACM, New York, NY, USA, 430-440. https: //doi.org/10.1145/3238147.3238179 ***http://scholar.google.com/scholar?hl=en&q=Oscar+Soria+Dustmann%2C+Klaus+Wehrle%2C+and+Cristian+Cadar.+2018.+PARTI%3A+A+Multi-interval+Theory+Solver+for+Symbolic+Execution.+In+Proceedings+of+the+33rd+ACM%2FIEEE+International+Conference+on+Automated+Software+Engineering+%28Montpellier%2C+France%29+%28+ASE+2018%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+430-440.+https%3A+%2F%2Fdoi.org%2F10.1145%2F3238147.3238179+10.1145%2F3238147.3238179^^^Bruno Dutertre. 2014. Yices2.2. In Proceedings of the 16th International Conference on Computer Aided Verification-Volume 8559. Springer-Verlag, Berlin, Heidelberg, 737-744. https://doi.org/10.1007/978-3-319-08867-9_49 ***http://scholar.google.com/scholar?hl=en&q=Bruno+Dutertre.+2014.+Yices2.2.+In+Proceedings+of+the+16th+International+Conference+on+Computer+Aided+Verification-Volume+8559.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+737-744.+https%3A%2F%2Fdoi.org%2F10.1007%2F978-3-319-08867-9_49+10.1007%2F978-3-319-08867-9_49^^^Anders Franzén. 2010. Eficient solving of the satisfiability modulo bit-vectors problem and some extensions to SMT. Ph.D. Dissertation. University of Trento.***http://scholar.google.com/scholar?hl=en&q=Anders+Franz%C3%A9n.+2010.+Eficient+solving+of+the+satisfiability+modulo+bit-vectors+problem+and+some+extensions+to+SMT.+Ph.D.+Dissertation.+University+of+Trento.^^^Andreas Fröhlich, Armin Biere, Christoph M Wintersteiger, and Youssef Hamadi. 2015. Stochastic Local Search for Satisfiability Modulo Theories.. In Proceedings of the Twenty-Ninth AAAI Conference on Artificial Intelligence (Austin, Texas) (AAAI\' 15 ). AAAI Press, 1136-1143. http://dl.acm.org/citation.cfm?id= 2887007. 2887165***http://scholar.google.com/scholar?hl=en&q=Andreas+Fr%C3%B6hlich%2C+Armin+Biere%2C+Christoph+M+Wintersteiger%2C+and+Youssef+Hamadi.+2015.+Stochastic+Local+Search+for+Satisfiability+Modulo+Theories..+In+Proceedings+of+the+Twenty-Ninth+AAAI+Conference+on+Artificial+Intelligence+%28Austin%2C+Texas%29+%28AAAI%27+15+%29.+AAAI+Press%2C+1136-1143.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+2887007.+2887165^^^Vijay Ganesh and David L Dill. 2007. A decision procedure for bit-vectors and arrays. In Proceedings of the 19th International Conference on Computer Aided Verification (Berlin, Germany) ( CAV\'07). Springer-Verlag, Berlin, Heidelberg, 519-531.***http://scholar.google.com/scholar?hl=en&q=Vijay+Ganesh+and+David+L+Dill.+2007.+A+decision+procedure+for+bit-vectors+and+arrays.+In+Proceedings+of+the+19th+International+Conference+on+Computer+Aided+Verification+%28Berlin%2C+Germany%29+%28+CAV%2707%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+519-531.^^^Graeme Gange, Jorge A. Navas, Peter Schachte, Harald Søndergaard, and Peter J. Stuckey. 2015. Interval Analysis and Machine Arithmetic: Why Signedness Ignorance Is Bliss. ACM Trans. Program. Lang. Syst. 37, 1, Article 1 ( Jan. 2015 ), 35 pages. https://doi.org/10.1145/2651360 ***http://scholar.google.com/scholar?hl=en&q=Graeme+Gange%2C+Jorge+A.+Navas%2C+Peter+Schachte%2C+Harald+S%C3%B8ndergaard%2C+and+Peter+J.+Stuckey.+2015.+Interval+Analysis+and+Machine+Arithmetic%3A+Why+Signedness+Ignorance+Is+Bliss.+ACM+Trans.+Program.+Lang.+Syst.+37%2C+1%2C+Article+1+%28+Jan.+2015+%29%2C+35+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F2651360+10.1145%2F2651360^^^Sicun Gao, Malay Ganai, Franjo Ivančić, Aarti Gupta, Sriram Sankaranarayanan, and Edmund M. Clarke. 2010. Integrating ICP and LRA Solvers for Deciding 38th Annual Design Automation Conference (Las Vegas, Nevada, USA) ( DAC \'01). ACM, New York, NY, USA, 530-535. https://doi.org/10.1145/378239.379017 ***http://scholar.google.com/scholar?hl=en&q=Sicun+Gao%2C+Malay+Ganai%2C+Franjo+Ivan%C4%8Di%C4%87%2C+Aarti+Gupta%2C+Sriram+Sankaranarayanan%2C+and+Edmund+M.+Clarke.+2010.+Integrating+ICP+and+LRA+Solvers+for+Deciding+38th+Annual+Design+Automation+Conference+%28Las+Vegas%2C+Nevada%2C+USA%29+%28+DAC+%2701%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+530-535.+https%3A%2F%2Fdoi.org%2F10.1145%2F378239.379017+10.1145%2F378239.379017^^^Alexander Nadel. 2014. Bit-Vector Rewriting with Automatic Rule Generation. In Proceedings of the 16th International Conference on Computer Aided Verification-Volume 8559. Springer-Verlag, Berlin, Heidelberg, 663-679. https://doi.org/10. 1007/978-3-319-08867-9_44 ***http://scholar.google.com/scholar?hl=en&q=Alexander+Nadel.+2014.+Bit-Vector+Rewriting+with+Automatic+Rule+Generation.+In+Proceedings+of+the+16th+International+Conference+on+Computer+Aided+Verification-Volume+8559.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+663-679.+https%3A%2F%2Fdoi.org%2F10.+1007%2F978-3-319-08867-9_44+10.1007%2F978-3-319-08867-9_44^^^Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chandra. 2013. Semfix: Program repair via semantic analysis. In Proceedings of the 2013 International Conference on Software Engineering (San Francisco, CA, USA) ( ICSE \'13). IEEE Press, Piscataway, NJ, USA, 772-781. http://dl.acm.org/citation.cfm?id= 2486788. 2486890***http://scholar.google.com/scholar?hl=en&q=Hoang+Duong+Thien+Nguyen%2C+Dawei+Qi%2C+Abhik+Roychoudhury%2C+and+Satish+Chandra.+2013.+Semfix%3A+Program+repair+via+semantic+analysis.+In+Proceedings+of+the+2013+International+Conference+on+Software+Engineering+%28San+Francisco%2C+CA%2C+USA%29+%28+ICSE+%2713%29.+IEEE+Press%2C+Piscataway%2C+NJ%2C+USA%2C+772-781.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+2486788.+2486890^^^Aina Niemetz, Mathias Preiner, and Armin Biere. 2014 (published 2015 ). Boolector 2.0 system description. Journal on Satisfiability, Boolean Modeling and Computation 9 ( 2014 (published 2015 )), 53-58.***http://scholar.google.com/scholar?hl=en&q=Aina+Niemetz%2C+Mathias+Preiner%2C+and+Armin+Biere.+2014+%28published+2015+%29.+Boolector+2.0+system+description.+Journal+on+Satisfiability%2C+Boolean+Modeling+and+Computation+9+%28+2014+%28published+2015+%29%29%2C+53-58.^^^Aina Niemetz, Mathias Preiner, and Armin Biere. 2017. Propagation based local search for bit-precise reasoning. Formal Methods in System Design 51, 3 ( 2017 ), 608-636. https://doi.org/10.1007/s10703-017-0295-6 ***http://scholar.google.com/scholar?hl=en&q=Aina+Niemetz%2C+Mathias+Preiner%2C+and+Armin+Biere.+2017.+Propagation+based+local+search+for+bit-precise+reasoning.+Formal+Methods+in+System+Design+51%2C+3+%28+2017+%29%2C+608-636.+https%3A%2F%2Fdoi.org%2F10.1007%2Fs10703-017-0295-6+10.1007%2Fs10703-017-0295-6^^^Aina Niemetz, Mathias Preiner, Armin Biere, and Andreas Fröhlich. 2015. Improving local search for bit-vector logics in SMT with path propagation. Proceedings of DIFTS ( 2015 ), 1-10.***http://scholar.google.com/scholar?hl=en&q=Aina+Niemetz%2C+Mathias+Preiner%2C+Armin+Biere%2C+and+Andreas+Fr%C3%B6hlich.+2015.+Improving+local+search+for+bit-vector+logics+in+SMT+with+path+propagation.+Proceedings+of+DIFTS+%28+2015+%29%2C+1-10.^^^Hristina Palikareva and Cristian Cadar. 2013. Multi-Solver Support in Symbolic Execution. In Proceedings of the 25th International Conference on Computer Aided Verification-Volume 8044 ( Saint Petersburg, Russia) ( CAV 2013 ). Springer-Verlag, Berlin, Heidelberg, 53-68.***http://scholar.google.com/scholar?hl=en&q=Hristina+Palikareva+and+Cristian+Cadar.+2013.+Multi-Solver+Support+in+Symbolic+Execution.+In+Proceedings+of+the+25th+International+Conference+on+Computer+Aided+Verification-Volume+8044+%28+Saint+Petersburg%2C+Russia%29+%28+CAV+2013+%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+53-68.^^^David M. Perry, Andrea Mattavelli, Xiangyu Zhang, and Cristian Cadar. 2017. Accelerating Array Constraints in Symbolic Execution. In Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis (Santa Barbara, CA, USA) ( ISSTA 2017). ACM, New York, NY, USA, 68-78. https: //doi.org/10.1145/3092703.3092728 ***http://scholar.google.com/scholar?hl=en&q=David+M.+Perry%2C+Andrea+Mattavelli%2C+Xiangyu+Zhang%2C+and+Cristian+Cadar.+2017.+Accelerating+Array+Constraints+in+Symbolic+Execution.+In+Proceedings+of+the+26th+ACM+SIGSOFT+International+Symposium+on+Software+Testing+and+Analysis+%28Santa+Barbara%2C+CA%2C+USA%29+%28+ISSTA+2017%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+68-78.+https%3A+%2F%2Fdoi.org%2F10.1145%2F3092703.3092728+10.1145%2F3092703.3092728^^^Corneliu Popeea and Wei-Ngan Chin. 2006. Inferring Disjunctive Postconditions. In Proceedings of the 11th Asian Computing Science Conference on Advances in Computer Science: Secure Software and Related Issues (Tokyo, Japan) ( ASIAN\'06). Springer-Verlag, Berlin, Heidelberg, 331-345. https://doi.org/10.5555/1782734. 1782760 ***http://scholar.google.com/scholar?hl=en&q=Corneliu+Popeea+and+Wei-Ngan+Chin.+2006.+Inferring+Disjunctive+Postconditions.+In+Proceedings+of+the+11th+Asian+Computing+Science+Conference+on+Advances+in+Computer+Science%3A+Secure+Software+and+Related+Issues+%28Tokyo%2C+Japan%29+%28+ASIAN%2706%29.+Springer-Verlag%2C+Berlin%2C+Heidelberg%2C+331-345.+https%3A%2F%2Fdoi.org%2F10.5555%2F1782734.+1782760+10.5555%2F1782734.1782760^^^Daniele Pretolani. 1996. Eficiency and stability of hypergraph SAT algorithms. DIMACS Series in Discrete Mathematics and Theoretical Computer Science 26 ( 1996 ), 479-498.***http://scholar.google.com/scholar?hl=en&q=Daniele+Pretolani.+1996.+Eficiency+and+stability+of+hypergraph+SAT+algorithms.+DIMACS+Series+in+Discrete+Mathematics+and+Theoretical+Computer+Science+26+%28+1996+%29%2C+479-498.^^^Andrew Reynolds, Haniel Barbosa, Aina Niemetz, Andres Nötzli, Mathias Preiner, Clark Barrett, and Cesare Tinelli. 2018. Rewrites for SMT solvers using syntaxguided enumeration. In SMT Workshop.***http://scholar.google.com/scholar?hl=en&q=Andrew+Reynolds%2C+Haniel+Barbosa%2C+Aina+Niemetz%2C+Andres+N%C3%B6tzli%2C+Mathias+Preiner%2C+Clark+Barrett%2C+and+Cesare+Tinelli.+2018.+Rewrites+for+SMT+solvers+using+syntaxguided+enumeration.+In+SMT+Workshop.^^^Andrew Reynolds, Maverick Woo, Clark Barrett, David Brumley, Tianyi Liang, and Cesare Tinelli. 2017. Scaling up DPLL (T) string solvers using contextdependent simplification. In International Conference on Computer Aided Verification. Springer, 453-474.***http://scholar.google.com/scholar?hl=en&q=Andrew+Reynolds%2C+Maverick+Woo%2C+Clark+Barrett%2C+David+Brumley%2C+Tianyi+Liang%2C+and+Cesare+Tinelli.+2017.+Scaling+up+DPLL+%28T%29+string+solvers+using+contextdependent+simplification.+In+International+Conference+on+Computer+Aided+Verification.+Springer%2C+453-474.^^^Lawrence Ryan. 2004. Eficient algorithms for clause-learning SAT solvers. Ph.D. Dissertation. Theses (School of Computing Science)/Simon Fraser University.***http://scholar.google.com/scholar?hl=en&q=Lawrence+Ryan.+2004.+Eficient+algorithms+for+clause-learning+SAT+solvers.+Ph.D.+Dissertation.+Theses+%28School+of+Computing+Science%29%2FSimon+Fraser+University.^^^Sriram Sankaranarayanan, Franjo Ivančić, Ilya Shlyakhter, and Aarti Gupta. 2006. Static Analysis in Disjunctive Numerical Domains. In Proceedings of the 13th International Conference on Static Analysis (Seoul, Korea) (SAS\'06). SpringerVerlag, Berlin, Heidelberg, 3-17. https://doi.org/10.1007/11823230_2 ***http://scholar.google.com/scholar?hl=en&q=Sriram+Sankaranarayanan%2C+Franjo+Ivan%C4%8Di%C4%87%2C+Ilya+Shlyakhter%2C+and+Aarti+Gupta.+2006.+Static+Analysis+in+Disjunctive+Numerical+Domains.+In+Proceedings+of+the+13th+International+Conference+on+Static+Analysis+%28Seoul%2C+Korea%29+%28SAS%2706%29.+SpringerVerlag%2C+Berlin%2C+Heidelberg%2C+3-17.+https%3A%2F%2Fdoi.org%2F10.1007%2F11823230_2+10.1007%2F11823230_2^^^B. Schwarz, S. Debray, and G. Andrews. 2002. Disassembly of Executable Code Revisited. In Proceedings of the Ninth Working Conference on Reverse Engineering (WCRE 02 ) (WCRE \'02). IEEE Computer Society, USA, 45. https://doi.org/10.5555/ 882506.885138 ***http://scholar.google.com/scholar?hl=en&q=B.+Schwarz%2C+S.+Debray%2C+and+G.+Andrews.+2002.+Disassembly+of+Executable+Code+Revisited.+In+Proceedings+of+the+Ninth+Working+Conference+on+Reverse+Engineering+%28WCRE+02+%29+%28WCRE+%2702%29.+IEEE+Computer+Society%2C+USA%2C+45.+https%3A%2F%2Fdoi.org%2F10.5555%2F+882506.885138+10.5555%2F882506.885138^^^Roberto Sebastiani. 2007. Lazy satisfiability modulo theories. Journal on Satisfiability, Boolean Modeling and Computation 3 ( 2007 ), 141-224.***http://scholar.google.com/scholar?hl=en&q=Roberto+Sebastiani.+2007.+Lazy+satisfiability+modulo+theories.+Journal+on+Satisfiability%2C+Boolean+Modeling+and+Computation+3+%28+2007+%29%2C+141-224.^^^Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: a concolic unit testing engine for C. In Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (Lisbon, Portugal) (ESEC/FSE-13). ACM, New York, NY, USA, 263-272. https://doi.org/10.1145/1081706.1081750 ***http://scholar.google.com/scholar?hl=en&q=Koushik+Sen%2C+Darko+Marinov%2C+and+Gul+Agha.+2005.+CUTE%3A+a+concolic+unit+testing+engine+for+C.+In+Proceedings+of+the+10th+European+Software+Engineering+Conference+Held+Jointly+with+13th+ACM+SIGSOFT+International+Symposium+on+Foundations+of+Software+Engineering+%28Lisbon%2C+Portugal%29+%28ESEC%2FFSE-13%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+263-272.+https%3A%2F%2Fdoi.org%2F10.1145%2F1081706.1081750+10.1145%2F1081706.1081750^^^Qingkai Shi, Xiao Xiao, Rongxin Wu, Jinguo Zhou, Gang Fan, and Charles Zhang. 2018. Pinpoint: fast and precise sparse value flow analysis for million lines of code. In Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation (Philadelphia, PA, USA) ( PLDI 2018). ACM, New York, NY, USA, 693-706. https://doi.org/10.1145/3192366.3192418 ***http://scholar.google.com/scholar?hl=en&q=Qingkai+Shi%2C+Xiao+Xiao%2C+Rongxin+Wu%2C+Jinguo+Zhou%2C+Gang+Fan%2C+and+Charles+Zhang.+2018.+Pinpoint%3A+fast+and+precise+sparse+value+flow+analysis+for+million+lines+of+code.+In+Proceedings+of+the+39th+ACM+SIGPLAN+Conference+on+Programming+Language+Design+and+Implementation+%28Philadelphia%2C+PA%2C+USA%29+%28+PLDI+2018%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+693-706.+https%3A%2F%2Fdoi.org%2F10.1145%2F3192366.3192418+10.1145%2F3192366.3192418^^^Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Ofensive Techniques in Binary Analysis. In IEEE Symposium on Security and Privacy.***http://scholar.google.com/scholar?hl=en&q=Yan+Shoshitaishvili%2C+Ruoyu+Wang%2C+Christopher+Salls%2C+Nick+Stephens%2C+Mario+Polino%2C+Audrey+Dutcher%2C+John+Grosen%2C+Siji+Feng%2C+Christophe+Hauser%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+SoK%3A+%28State+of%29+The+Art+of+War%3A+Ofensive+Techniques+in+Binary+Analysis.+In+IEEE+Symposium+on+Security+and+Privacy.^^^Ofer Shtrichman. 2000. Tuning SAT checkers for bounded model checking. In International Conference on Computer Aided Verification (CAV \'02). Springer, 480-494.***http://scholar.google.com/scholar?hl=en&q=Ofer+Shtrichman.+2000.+Tuning+SAT+checkers+for+bounded+model+checking.+In+International+Conference+on+Computer+Aided+Verification+%28CAV+%2702%29.+Springer%2C+480-494.^^^João P. Marques Silva and Karem A. Sakallah. 1996. GRASP& Mdash;a New Search Algorithm for Satisfiability. In Proceedings of the 1996 IEEE/ACM International Conference on Computer-aided Design (San Jose, California, USA) ( ICCAD \'96). IEEE Computer Society, Washington, DC, USA, 220-227. http://dl.acm.org/ citation.cfm?id= 244522. 244560***http://scholar.google.com/scholar?hl=en&q=Jo%C3%A3o+P.+Marques+Silva+and+Karem+A.+Sakallah.+1996.+GRASP%26+Mdash%3Ba+New+Search+Algorithm+for+Satisfiability.+In+Proceedings+of+the+1996+IEEE%2FACM+International+Conference+on+Computer-aided+Design+%28San+Jose%2C+California%2C+USA%29+%28+ICCAD+%2796%29.+IEEE+Computer+Society%2C+Washington%2C+DC%2C+USA%2C+220-227.+http%3A%2F%2Fdl.acm.org%2F+citation.cfm%3Fid%3D+244522.+244560^^^Rohit Singh and Armando Solar-Lezama. 2016. Swapper: A Framework for Automatic Generation of Formula Simplifiers Based on Conditional Rewrite Rules. In Proceedings of the 16th Conference on Formal Methods in ComputerAided Design ( Mountain View, California) (FMCAD \'16). FMCAD Inc, Austin, TX, 185-192. http://dl.acm.org/citation.cfm?id= 3077629. 3077661***http://scholar.google.com/scholar?hl=en&q=Rohit+Singh+and+Armando+Solar-Lezama.+2016.+Swapper%3A+A+Framework+for+Automatic+Generation+of+Formula+Simplifiers+Based+on+Conditional+Rewrite+Rules.+In+Proceedings+of+the+16th+Conference+on+Formal+Methods+in+ComputerAided+Design+%28+Mountain+View%2C+California%29+%28FMCAD+%2716%29.+FMCAD+Inc%2C+Austin%2C+TX%2C+185-192.+http%3A%2F%2Fdl.acm.org%2Fcitation.cfm%3Fid%3D+3077629.+3077661^^^Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In NDSS, Vol. 16. 1-16.***http://scholar.google.com/scholar?hl=en&q=Nick+Stephens%2C+John+Grosen%2C+Christopher+Salls%2C+Andrew+Dutcher%2C+Ruoyu+Wang%2C+Jacopo+Corbetta%2C+Yan+Shoshitaishvili%2C+Christopher+Kruegel%2C+and+Giovanni+Vigna.+2016.+Driller%3A+Augmenting+Fuzzing+Through+Selective+Symbolic+Execution..+In+NDSS%2C+Vol.+16.+1-16.^^^Willem Visser, Jaco Geldenhuys, and Matthew B Dwyer. 2012. Green: reducing, reusing and recycling constraints in program analysis. In Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering (Cary, North Carolina) (FSE \'12). ACM, New York, NY, USA, Article 58, 11 pages. https://doi.org/10.1145/2393596.2393665 ***http://scholar.google.com/scholar?hl=en&q=Willem+Visser%2C+Jaco+Geldenhuys%2C+and+Matthew+B+Dwyer.+2012.+Green%3A+reducing%2C+reusing+and+recycling+constraints+in+program+analysis.+In+Proceedings+of+the+ACM+SIGSOFT+20th+International+Symposium+on+the+Foundations+of+Software+Engineering+%28Cary%2C+North+Carolina%29+%28FSE+%2712%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+Article+58%2C+11+pages.+https%3A%2F%2Fdoi.org%2F10.1145%2F2393596.2393665+10.1145%2F2393596.2393665^^^Jonas Wagner, Volodymyr Kuznetsov, and George Candea. 2013. Overify: Optimizing Programs for Fast Verification. In 14th Workshop on Hot Topics in Operating Systems (HotOS XIV).***http://scholar.google.com/scholar?hl=en&q=Jonas+Wagner%2C+Volodymyr+Kuznetsov%2C+and+George+Candea.+2013.+Overify%3A+Optimizing+Programs+for+Fast+Verification.+In+14th+Workshop+on+Hot+Topics+in+Operating+Systems+%28HotOS+XIV%29.^^^Chao Wang, HoonSang Jin, Gary D. Hachtel, and Fabio Somenzi. 2004. Refining the SAT Decision Ordering for Bounded Model Checking. In Proceedings of the 41st Annual Design Automation Conference (San Diego, CA, USA) ( DAC \'04). ACM, New York, NY, USA, 535-538. https://doi.org/10.1145/996566.996713 ***http://scholar.google.com/scholar?hl=en&q=Chao+Wang%2C+HoonSang+Jin%2C+Gary+D.+Hachtel%2C+and+Fabio+Somenzi.+2004.+Refining+the+SAT+Decision+Ordering+for+Bounded+Model+Checking.+In+Proceedings+of+the+41st+Annual+Design+Automation+Conference+%28San+Diego%2C+CA%2C+USA%29+%28+DAC+%2704%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+535-538.+https%3A%2F%2Fdoi.org%2F10.1145%2F996566.996713+10.1145%2F996566.996713^^^Yichen Xie and Alex Aiken. 2005. Scalable error detection using boolean satisfiability. In Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (Long Beach, California, USA) ( POPL \'05). ACM, New York, NY, USA, 351-363. https://doi.org/10.1145/1040305.1040334 ***http://scholar.google.com/scholar?hl=en&q=Yichen+Xie+and+Alex+Aiken.+2005.+Scalable+error+detection+using+boolean+satisfiability.+In+Proceedings+of+the+32Nd+ACM+SIGPLAN-SIGACT+Symposium+on+Principles+of+Programming+Languages+%28Long+Beach%2C+California%2C+USA%29+%28+POPL+%2705%29.+ACM%2C+New+York%2C+NY%2C+USA%2C+351-363.+https%3A%2F%2Fdoi.org%2F10.1145%2F1040305.1040334+10.1145%2F1040305.1040334^^^Liangze Yin, Fei He, and Ming Gu. 2013. Optimizing the SAT Decision Ordering of Bounded Model Checking by Structural Information. In Proceedings of the 2013 International Symposium on Theoretical Aspects of Software Engineering (TASE \'13). IEEE Computer Society, USA, 23-26. https://doi.org/10.1109/TASE. 2013.11 ***http://scholar.google.com/scholar?hl=en&q=Liangze+Yin%2C+Fei+He%2C+and+Ming+Gu.+2013.+Optimizing+the+SAT+Decision+Ordering+of+Bounded+Model+Checking+by+Structural+Information.+In+Proceedings+of+the+2013+International+Symposium+on+Theoretical+Aspects+of+Software+Engineering+%28TASE+%2713%29.+IEEE+Computer+Society%2C+USA%2C+23-26.+https%3A%2F%2Fdoi.org%2F10.1109%2FTASE.+2013.11+10.1109%2FTASE.2013.11^^^Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. QSYM : A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings of the 27th USENIX Conference on Security Symposium (Baltimore, MD, USA) ( SEC\'18). USENIX Association, Berkeley, CA, USA, 745-761. http://dl.acm.org/ citation.cfm?id= 3277203. 3277260***http://scholar.google.com/scholar?hl=en&q=Insu+Yun%2C+Sangho+Lee%2C+Meng+Xu%2C+Yeongjin+Jang%2C+and+Taesoo+Kim.+2018.+QSYM+%3A+A+Practical+Concolic+Execution+Engine+Tailored+for+Hybrid+Fuzzing.+In+Proceedings+of+the+27th+USENIX+Conference+on+Security+Symposium+%28Baltimore%2C+MD%2C+USA%29+%28+SEC%2718%29.+USENIX+Association%2C+Berkeley%2C+CA%2C+USA%2C+745-761.+http%3A%2F%2Fdl.acm.org%2F+citation.cfm%3Fid%3D+3277203.+3277260^^^Aleksandar Zeljić, Christoph M Wintersteiger, and Philipp Rümmer. 2016. Deciding bit-vector formulas with mcSAT. In International Conference on Theory and Applications of Satisfiability Testing. Springer, 249-266.***http://scholar.google.com/scholar?hl=en&q=Aleksandar+Zelji%C4%87%2C+Christoph+M+Wintersteiger%2C+and+Philipp+R%C3%BCmmer.+2016.+Deciding+bit-vector+formulas+with+mcSAT.+In+International+Conference+on+Theory+and+Applications+of+Satisfiability+Testing.+Springer%2C+249-266.^^^');
INSERT INTO `paper_ref` VALUES (55, 42, 'Apache. 2018. Test XML file is not valid when rerun \"fails\" with an assumption. https://issues.apache.org/jira/projects/SUREFIRE/issues/SUREFIRE-1556.***http://scholar.google.com/scholar?hl=en&q=Apache.+2018.+Test+XML+file+is+not+valid+when+rerun+%22fails%22+with+an+assumption.+https%3A%2F%2Fissues.apache.org%2Fjira%2Fprojects%2FSUREFIRE%2Fissues%2FSUREFIRE-1556.^^^Apache. 2018. Thread Pool in Maven Surefire Code. https://github.com/apache/maven-surefire.***http://scholar.google.com/scholar?hl=en&q=Apache.+2018.+Thread+Pool+in+Maven+Surefire+Code.+https%3A%2F%2Fgithub.com%2Fapache%2Fmaven-surefire.^^^Apache. 2019. Maven Surefire Plugin. https://maven.apache.org/surefire/mavensurefire-plugin/.***http://scholar.google.com/scholar?hl=en&q=Apache.+2019.+Maven+Surefire+Plugin.+https%3A%2F%2Fmaven.apache.org%2Fsurefire%2Fmavensurefire-plugin%2F.^^^Apache. 2019. Maven Surefire Plugin-surefire:test. https://maven.apache.org/ surefire/maven-surefire-plugin/test-mojo.html.***http://scholar.google.com/scholar?hl=en&q=Apache.+2019.+Maven+Surefire+Plugin-surefire%3Atest.+https%3A%2F%2Fmaven.apache.org%2F+surefire%2Fmaven-surefire-plugin%2Ftest-mojo.html.^^^Apache. 2019. Should Surefire specialize test runner when test isolation (i.e., fork) is needed? https://issues.apache.org/jira/browse/SUREFIRE-1516.***http://scholar.google.com/scholar?hl=en&q=Apache.+2019.+Should+Surefire+specialize+test+runner+when+test+isolation+%28i.e.%2C+fork%29+is+needed%3F+https%3A%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FSUREFIRE-1516.^^^Jonathan Bell and Gail Kaiser. 2014. Unit Test Virtualization with VMVM. In International Conference on Software Engineering. 550-561.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell+and+Gail+Kaiser.+2014.+Unit+Test+Virtualization+with+VMVM.+In+International+Conference+on+Software+Engineering.+550-561.^^^Jonathan Bell, Gail Kaiser, Eric Melski, and Mohan Dattatreya. 2015. Eficient Dependency Detection for Safe Java Test Acceleration. In International Symposium on Foundations of Software Engineering. 770-781.***http://scholar.google.com/scholar?hl=en&q=Jonathan+Bell%2C+Gail+Kaiser%2C+Eric+Melski%2C+and+Mohan+Dattatreya.+2015.+Eficient+Dependency+Detection+for+Safe+Java+Test+Acceleration.+In+International+Symposium+on+Foundations+of+Software+Engineering.+770-781.^^^J. Bell, O. Legunsen, M. Hilton, L. Eloussi, T. Yung, and D. Marinov. 2018. DeFlaker: Automatically Detecting Flaky Tests. In International Conference on Software Engineering. 433-444.***http://scholar.google.com/scholar?hl=en&q=J.+Bell%2C+O.+Legunsen%2C+M.+Hilton%2C+L.+Eloussi%2C+T.+Yung%2C+and+D.+Marinov.+2018.+DeFlaker%3A+Automatically+Detecting+Flaky+Tests.+In+International+Conference+on+Software+Engineering.+433-444.^^^Cor-Paul Bezemer, Shane Mcintosh, Bram Adams, Daniel M. German, and Ahmed E. Hassan. 2017. An Empirical Study of Unspecified Dependencies in Make-Based Build Systems. Empirical Softw. Engg. 22, 6 ( 2017 ), 3117-3148.***http://scholar.google.com/scholar?hl=en&q=Cor-Paul+Bezemer%2C+Shane+Mcintosh%2C+Bram+Adams%2C+Daniel+M.+German%2C+and+Ahmed+E.+Hassan.+2017.+An+Empirical+Study+of+Unspecified+Dependencies+in+Make-Based+Build+Systems.+Empirical+Softw.+Engg.+22%2C+6+%28+2017+%29%2C+3117-3148.^^^Ahmet Celik, Alex Knaust, Aleksandar Milicevic, and Milos Gligoric. 2016. Build System with Lazy Retrieval for Java Projects. In International Symposium on Foundations of Software Engineering. 643-654.***http://scholar.google.com/scholar?hl=en&q=Ahmet+Celik%2C+Alex+Knaust%2C+Aleksandar+Milicevic%2C+and+Milos+Gligoric.+2016.+Build+System+with+Lazy+Retrieval+for+Java+Projects.+In+International+Symposium+on+Foundations+of+Software+Engineering.+643-654.^^^Ahmet Celik, Marko Vasic, Aleksandar Milicevic, and Milos Gligoric. 2017. Regression Test Selection Across JVM Boundaries. In International Symposium on Foundations of Software Engineering. 809-820.***http://scholar.google.com/scholar?hl=en&q=Ahmet+Celik%2C+Marko+Vasic%2C+Aleksandar+Milicevic%2C+and+Milos+Gligoric.+2017.+Regression+Test+Selection+Across+JVM+Boundaries.+In+International+Symposium+on+Foundations+of+Software+Engineering.+809-820.^^^Maria Christakis, K. Rustan M. Leino, and Wolfram Schulte. 2014. Formalizing and Verifying a Modern Build Language. In International Symposium on Formal Methods. 643-657.***http://scholar.google.com/scholar?hl=en&q=Maria+Christakis%2C+K.+Rustan+M.+Leino%2C+and+Wolfram+Schulte.+2014.+Formalizing+and+Verifying+a+Modern+Build+Language.+In+International+Symposium+on+Formal+Methods.+643-657.^^^Al Danial. 2020. Cloc. https://github.com/AlDanial/cloc.***http://scholar.google.com/scholar?hl=en&q=Al+Danial.+2020.+Cloc.+https%3A%2F%2Fgithub.com%2FAlDanial%2Fcloc.^^^Tibor Digana. 2019. [SUREFIRE-1516] Poor performance in reuseForks=false. https://github.com/apache/maven-surefire/commit/ 5148b02ba552cd79ac212b869dec10d01ba4d2e6.***http://scholar.google.com/scholar?hl=en&q=Tibor+Digana.+2019.+%5BSUREFIRE-1516%5D+Poor+performance+in+reuseForks%3Dfalse.+https%3A%2F%2Fgithub.com%2Fapache%2Fmaven-surefire%2Fcommit%2F+5148b02ba552cd79ac212b869dec10d01ba4d2e6.^^^Sebastian Elbaum, Gregg Rothermel, and John Penix. 2014. Techniques for Improving Regression Testing in Continuous Integration Development Environments. In International Symposium on Foundations of Software Engineering. 235-245.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Elbaum%2C+Gregg+Rothermel%2C+and+John+Penix.+2014.+Techniques+for+Improving+Regression+Testing+in+Continuous+Integration+Development+Environments.+In+International+Symposium+on+Foundations+of+Software+Engineering.+235-245.^^^Sebastian Erdweg, Moritz Lichter, and Weiel Manuel. 2015. A Sound and Optimal Incremental Build System with Dynamic Dependencies. In Object-Oriented Programming, Systems, Languages & Applications. 89-106.***http://scholar.google.com/scholar?hl=en&q=Sebastian+Erdweg%2C+Moritz+Lichter%2C+and+Weiel+Manuel.+2015.+A+Sound+and+Optimal+Incremental+Build+System+with+Dynamic+Dependencies.+In+Object-Oriented+Programming%2C+Systems%2C+Languages+%26+Applications.+89-106.^^^Hamed Esfahani, Jonas Fietz, Qi Ke, Alexei Kolomiets, Erica Lan, Erik Mavrinac, Wolfram Schulte, Newton Sanches, and Srikanth Kandula. 2016. CloudBuild: Microsoft\'s Distributed and Caching Build Service. In International Conference on Software Engineering, Software Engineering in Practice. 11-20.***http://scholar.google.com/scholar?hl=en&q=Hamed+Esfahani%2C+Jonas+Fietz%2C+Qi+Ke%2C+Alexei+Kolomiets%2C+Erica+Lan%2C+Erik+Mavrinac%2C+Wolfram+Schulte%2C+Newton+Sanches%2C+and+Srikanth+Kandula.+2016.+CloudBuild%3A+Microsoft%27s+Distributed+and+Caching+Build+Service.+In+International+Conference+on+Software+Engineering%2C+Software+Engineering+in+Practice.+11-20.^^^Facebook. 2020. Nailgun. https://github.com/facebook/nailgun.***http://scholar.google.com/scholar?hl=en&q=Facebook.+2020.+Nailgun.+https%3A%2F%2Fgithub.com%2Ffacebook%2Fnailgun.^^^Martin Fowler. 2018. Eradicating Non-Determinism in Tests. http://martinfowler. com/articles/nonDeterminism.html.***http://scholar.google.com/scholar?hl=en&q=Martin+Fowler.+2018.+Eradicating+Non-Determinism+in+Tests.+http%3A%2F%2Fmartinfowler.+com%2Farticles%2FnonDeterminism.html.^^^Zebao Gao, Yalan Liang, Myra B. Cohen, Atif M. Memon, and Zhen Wang. 2015. Making System User Interactive Tests Repeatable: When and What Should We Control?. In International Conference on Software Engineering. 55-65.***http://scholar.google.com/scholar?hl=en&q=Zebao+Gao%2C+Yalan+Liang%2C+Myra+B.+Cohen%2C+Atif+M.+Memon%2C+and+Zhen+Wang.+2015.+Making+System+User+Interactive+Tests+Repeatable%3A+When+and+What+Should+We+Control%3F.+In+International+Conference+on+Software+Engineering.+55-65.^^^Milos Gligoric, Lamyaa Eloussi, and Darko Marinov. 2015. Practical Regression Test Selection with Dynamic File Dependencies. In International Symposium on Software Testing and Analysis. 211-222.***http://scholar.google.com/scholar?hl=en&q=Milos+Gligoric%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2015.+Practical+Regression+Test+Selection+with+Dynamic+File+Dependencies.+In+International+Symposium+on+Software+Testing+and+Analysis.+211-222.^^^Google. 2020. Bazel. https://bazel.build/.***http://scholar.google.com/scholar?hl=en&q=Google.+2020.+Bazel.+https%3A%2F%2Fbazel.build%2F.^^^Alex Gyori, August Shi, Farah Hariri, and Darko Marinov. 2015. Reliable Testing: Detecting State-polluting Tests to Prevent Test Dependency. In International Symposium on Software Testing and Analysis. 223-233.***http://scholar.google.com/scholar?hl=en&q=Alex+Gyori%2C+August+Shi%2C+Farah+Hariri%2C+and+Darko+Marinov.+2015.+Reliable+Testing%3A+Detecting+State-polluting+Tests+to+Prevent+Test+Dependency.+In+International+Symposium+on+Software+Testing+and+Analysis.+223-233.^^^Allan Heydon, Roy Levin, Timothy Mann, and Yuan Yu. 2002. The Vesta Software Configuration Management System. Research Report. http://www.hpl.hp.com/ techreports/Compaq-DEC/SRC-RR-177.pdf.***http://scholar.google.com/scholar?hl=en&q=Allan+Heydon%2C+Roy+Levin%2C+Timothy+Mann%2C+and+Yuan+Yu.+2002.+The+Vesta+Software+Configuration+Management+System.+Research+Report.+http%3A%2F%2Fwww.hpl.hp.com%2F+techreports%2FCompaq-DEC%2FSRC-RR-177.pdf.^^^Michael Hilton, Timothy Tunnell, Kai Huang, Darko Marinov, and Danny Dig. 2016. Usage, Costs, and Benefits of Continuous Integration in Open-Source Projects. In Automated Software Engineering. 426-437.***http://scholar.google.com/scholar?hl=en&q=Michael+Hilton%2C+Timothy+Tunnell%2C+Kai+Huang%2C+Darko+Marinov%2C+and+Danny+Dig.+2016.+Usage%2C+Costs%2C+and+Benefits+of+Continuous+Integration+in+Open-Source+Projects.+In+Automated+Software+Engineering.+426-437.^^^Sam Kamin, Lars Clausen, and Ava Jarvis. 2003. Jumbo: Run-time Code Generation for Java and Its Applications. In International Symposium on Code Generation and Optimization. 48-56.***http://scholar.google.com/scholar?hl=en&q=Sam+Kamin%2C+Lars+Clausen%2C+and+Ava+Jarvis.+2003.+Jumbo%3A+Run-time+Code+Generation+for+Java+and+Its+Applications.+In+International+Symposium+on+Code+Generation+and+Optimization.+48-56.^^^Owolabi Legunsen, Farah Hariri, August Shi, Yafeng Lu, Lingming Zhang, and Darko Marinov. 2016. An Extensive Study of Static Regression Test Selection in Modern Software Evolution. In International Symposium on Foundations of Software Engineering. 583-594.***http://scholar.google.com/scholar?hl=en&q=Owolabi+Legunsen%2C+Farah+Hariri%2C+August+Shi%2C+Yafeng+Lu%2C+Lingming+Zhang%2C+and+Darko+Marinov.+2016.+An+Extensive+Study+of+Static+Regression+Test+Selection+in+Modern+Software+Evolution.+In+International+Symposium+on+Foundations+of+Software+Engineering.+583-594.^^^Qingzhou Luo, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. An Empirical Analysis of Flaky Tests. In International Symposium on Foundations of Software Engineering. 643-653.***http://scholar.google.com/scholar?hl=en&q=Qingzhou+Luo%2C+Farah+Hariri%2C+Lamyaa+Eloussi%2C+and+Darko+Marinov.+2014.+An+Empirical+Analysis+of+Flaky+Tests.+In+International+Symposium+on+Foundations+of+Software+Engineering.+643-653.^^^Shane Mcintosh, Bram Adams, and Ahmed E. Hassan. 2012. The Evolution of Java Build Systems. Empirical Software Engineering 17, 4-5 ( 2012 ), 578-608.***http://scholar.google.com/scholar?hl=en&q=Shane+Mcintosh%2C+Bram+Adams%2C+and+Ahmed+E.+Hassan.+2012.+The+Evolution+of+Java+Build+Systems.+Empirical+Software+Engineering+17%2C+4-5+%28+2012+%29%2C+578-608.^^^Atif M. Memon and Myra B. Cohen. 2013. Automated Testing of GUI Applications: Models, Tools, and Controlling Flakiness. In International Conference on Software Engineering. 1479-1480.***http://scholar.google.com/scholar?hl=en&q=Atif+M.+Memon+and+Myra+B.+Cohen.+2013.+Automated+Testing+of+GUI+Applications%3A+Models%2C+Tools%2C+and+Controlling+Flakiness.+In+International+Conference+on+Software+Engineering.+1479-1480.^^^Andrey Mokhov, Neil Mitchell, and Simon Peyton Jones. 2018. Build Systems à La Carte. Proc. ACM Program. Lang. 2, International Conference on Functional Programming ( 2018 ).***http://scholar.google.com/scholar?hl=en&q=Andrey+Mokhov%2C+Neil+Mitchell%2C+and+Simon+Peyton+Jones.+2018.+Build+Systems+%C3%A0+La+Carte.+Proc.+ACM+Program.+Lang.+2%2C+International+Conference+on+Functional+Programming+%28+2018+%29.^^^Kivanç Muşlu, Bilge Soran, and Jochen Wuttke. 2011. Finding Bugs by Isolating Unit Tests. In International Symposium on Foundations of Software Engineering. 496-499.***http://scholar.google.com/scholar?hl=en&q=Kivan%C3%A7+Mu%C5%9Flu%2C+Bilge+Soran%2C+and+Jochen+Wuttke.+2011.+Finding+Bugs+by+Isolating+Unit+Tests.+In+International+Symposium+on+Foundations+of+Software+Engineering.+496-499.^^^Vladimir Nikolov, Rüdiger Kapitza, and Franz J Hauck. 2009. Recoverable Class Loaders for a Fast Restart of Java Applications. Mobile Networks and Applications 14, 1 ( 2009 ), 53-64.***http://scholar.google.com/scholar?hl=en&q=Vladimir+Nikolov%2C+R%C3%BCdiger+Kapitza%2C+and+Franz+J+Hauck.+2009.+Recoverable+Class+Loaders+for+a+Fast+Restart+of+Java+Applications.+Mobile+Networks+and+Applications+14%2C+1+%28+2009+%29%2C+53-64.^^^Voas JM. Ofutt J, Pan J. 1995. Procedures for Reducing the Size of Coverage-based Test Sets. In International Conference on Testing Computer Software. 111-123.***http://scholar.google.com/scholar?hl=en&q=Voas+JM.+Ofutt+J%2C+Pan+J.+1995.+Procedures+for+Reducing+the+Size+of+Coverage-based+Test+Sets.+In+International+Conference+on+Testing+Computer+Software.+111-123.^^^Gregg Rothermel and Mary Jean Harrold. 1996. Analyzing Regression Test Selection Techniques. Transactions on Software Engineering 22, 8 ( 1996 ), 529-551.***http://scholar.google.com/scholar?hl=en&q=Gregg+Rothermel+and+Mary+Jean+Harrold.+1996.+Analyzing+Regression+Test+Selection+Techniques.+Transactions+on+Software+Engineering+22%2C+8+%28+1996+%29%2C+529-551.^^^Peter Smith. 2011. Software Build Systems: Principles and Experience. AddisonWesley Professional.***http://scholar.google.com/scholar?hl=en&q=Peter+Smith.+2011.+Software+Build+Systems%3A+Principles+and+Experience.+AddisonWesley+Professional.^^^Walid Taha. 2004. A Gentle Introduction to Multi-stage Programming. Springer Berlin Heidelberg, 30-50.***http://scholar.google.com/scholar?hl=en&q=Walid+Taha.+2004.+A+Gentle+Introduction+to+Multi-stage+Programming.+Springer+Berlin+Heidelberg%2C+30-50.^^^tevemadar. 2018. Blocking on stdin makes Java process take 350ms more to exit. https://stackoverflow.com/a/48979347.***http://scholar.google.com/scholar?hl=en&q=tevemadar.+2018.+Blocking+on+stdin+makes+Java+process+take+350ms+more+to+exit.+https%3A%2F%2Fstackoverflow.com%2Fa%2F48979347.^^^Bogdan Vasilescu, Yue Yu, Huaimin Wang, Premkumar Devanbu, and Vladimir Filkov. 2015. Quality and Productivity Outcomes Relating to Continuous Integration in GitHub. In International Symposium on Foundations of Software Engineering. 805-816.***http://scholar.google.com/scholar?hl=en&q=Bogdan+Vasilescu%2C+Yue+Yu%2C+Huaimin+Wang%2C+Premkumar+Devanbu%2C+and+Vladimir+Filkov.+2015.+Quality+and+Productivity+Outcomes+Relating+to+Continuous+Integration+in+GitHub.+In+International+Symposium+on+Foundations+of+Software+Engineering.+805-816.^^^Guoqing Xu and Atanas Rountev. 2010. Detecting Ineficiently-used Containers to Avoid Bloat. In Conference on Programming Language Design and Implementation. 160-173.***http://scholar.google.com/scholar?hl=en&q=Guoqing+Xu+and+Atanas+Rountev.+2010.+Detecting+Ineficiently-used+Containers+to+Avoid+Bloat.+In+Conference+on+Programming+Language+Design+and+Implementation.+160-173.^^^Shin Yoo and Mark Harman. 2012. Regression Testing Minimization, Selection and Prioritization: A Survey. Journal of Software Testing, Verification and Reliability 22, 2 ( 2012 ), 67-120.***http://scholar.google.com/scholar?hl=en&q=Shin+Yoo+and+Mark+Harman.+2012.+Regression+Testing+Minimization%2C+Selection+and+Prioritization%3A+A+Survey.+Journal+of+Software+Testing%2C+Verification+and+Reliability+22%2C+2+%28+2012+%29%2C+67-120.^^^Sai Zhang, Darioush Jalali, Jochen Wuttke, Kıvanç Muşlu, Wing Lam, Michael D Ernst, and David Notkin. 2014. Empirically Revisiting the Test Independence Assumption. In International Symposium on Software Testing and Analysis. 385-396.***http://scholar.google.com/scholar?hl=en&q=Sai+Zhang%2C+Darioush+Jalali%2C+Jochen+Wuttke%2C+K%C4%B1van%C3%A7+Mu%C5%9Flu%2C+Wing+Lam%2C+Michael+D+Ernst%2C+and+David+Notkin.+2014.+Empirically+Revisiting+the+Test+Independence+Assumption.+In+International+Symposium+on+Software+Testing+and+Analysis.+385-396.^^^');

-- ----------------------------
-- Table structure for publication
-- ----------------------------
DROP TABLE IF EXISTS `publication`;
CREATE TABLE `publication`  (
  `publication_id` int(11) NOT NULL AUTO_INCREMENT,
  `pubication` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `shortname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`publication_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

SET FOREIGN_KEY_CHECKS = 1;
